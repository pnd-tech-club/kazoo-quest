// Generated code for Python source for module 'kazooquest'
// created by Nuitka version 0.5.13.1

// This code is in part copyright 2015 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_kazooquest is a Python object pointer of module type.

// Note: For full compatibility with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_kazooquest;
PyDictObject *moduledict_kazooquest;

// The module constants used
extern PyObject *const_str_plain_get;
extern PyObject *const_str_digest_54e04523c708b21fce800443629a6138;
extern PyObject *const_str_plain_words;
extern PyObject *const_str_plain_pickle;
extern PyObject *const_str_digest_38ea401a5eb32a8a8fc348d5ed2f1242;
extern PyObject *const_str_digest_cc56e44ac2f33531eac0549df83cdf1e;
extern PyObject *const_str_digest_3be955ac72ff89fc82250a6499cde963;
extern PyObject *const_str_digest_6d7f92b8f167b80c2738990b603ad4e8;
extern PyObject *const_str_plain_etime;
extern PyObject *const_str_digest_b55296abcb94c286fae041b0eb84944a;
extern PyObject *const_float_6_9e42;
extern PyObject *const_str_digest_addb5ceac985dd9cf49d4625aa54de87;
extern PyObject *const_str_digest_65ebca787c1e00ffe7d3f40e320816e6;
extern PyObject *const_str_digest_dedaf9312f3000d8a51c9b5bb5aab81e;
extern PyObject *const_str_plain_green;
extern PyObject *const_str_digest_67f27265aa8e4a7b3b329e94137028c2;
extern PyObject *const_str_plain_fight_act;
extern PyObject *const_str_plain_spells_thing;
extern PyObject *const_str_plain_max_hp;
extern PyObject *const_str_plain_darkwhite;
extern PyObject *const_str_digest_fb572985bd006ae9245ba81b212a8195;
extern PyObject *const_str_plain_yes;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_take_words;
extern PyObject *const_str_plain_write;
extern PyObject *const_int_pos_125;
extern PyObject *const_str_digest_3bf82b805dc7c1c40adbbeb52912278d;
extern PyObject *const_str_digest_bed0ede80131a5da82c059dd8bc58b9c;
extern PyObject *const_int_pos_120;
extern PyObject *const_int_neg_1;
extern PyObject *const_str_digest_87b1dbdcfb040bba7697e03b308d9dbe;
extern PyObject *const_str_digest_6a4bf94506853f1d150b80164b7ba35a;
extern PyObject *const_str_digest_7ec46522d4cc1841e4db22e50f8381be;
extern PyObject *const_str_digest_5ab7311e3fedb0241f427406629d8c02;
extern PyObject *const_str_digest_44100138cde27645852625ec8f9691ea;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_digest_0fc174668f82e67f7f52a8cbddef11e4;
extern PyObject *const_str_digest_5e03a65903adeb24599b32c1dc908346;
extern PyObject *const_str_plain_pstatus;
extern PyObject *const_str_plain_s_words;
extern PyObject *const_str_digest_7699a8bf0a690398754316575c9ea863;
extern PyObject *const_str_chr_33;
extern PyObject *const_str_digest_e473a28e1148a90d05cc0fa2ed8c576c;
extern PyObject *const_int_pos_9001;
extern PyObject *const_str_digest_7ce2d95bc1a754e5d3ecbd3aeb8047c3;
extern PyObject *const_str_plain_mana;
extern PyObject *const_str_digest_73d0e83ff127c5a42ba89a97d9aaf41f;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_digest_412044c6dfd7615df5f6930bfad902fd;
extern PyObject *const_str_digest_25447430f1360671f6c807b926beda66;
extern PyObject *const_str_plain_blue;
extern PyObject *const_list_str_plain_use_str_plain_eat_str_plain_read_str_plain_drink_list;
extern PyObject *const_str_digest_9fd9a21dd960ba0b1f2aca23a995d91b;
extern PyObject *const_int_pos_35;
extern PyObject *const_int_pos_30;
extern PyObject *const_str_digest_90d6828f205fcfdd2cf86e60f6a71395;
extern PyObject *const_str_plain_poison;
extern PyObject *const_str_digest_82a4f5bd40ca61f63ae66c7399f848ad;
extern PyObject *const_str_plain_red;
extern PyObject *const_str_plain_weapon;
extern PyObject *const_str_digest_3f0dd43872ac70e9bb8be81db574a075;
extern PyObject *const_str_plain_frost;
extern PyObject *const_str_plain_enemy_debuff_timer;
extern PyObject *const_str_digest_f9fc86739847c45d80846ef19985c811;
extern PyObject *const_tuple_str_plain_ping_test_str_plain_pstatus_tuple;
extern PyObject *const_str_digest_3a5877a4161eb05e64dc9371f585c2c9;
extern PyObject *const_str_plain_exc_type;
extern PyObject *const_tuple_str_plain___module___str_plain___enter___str_plain___exit___tuple;
extern PyObject *const_str_digest_6743b9fcc57cf1b169fb4ef6c7a955d2;
extern PyObject *const_str_digest_544010be28dd8c0c26d4ccd8c6bcc62d;
extern PyObject *const_str_digest_e525d90150ef85057284bbc950630c16;
extern PyObject *const_str_plain_load;
extern PyObject *const_str_digest_19834c7840186e327b750e3b3db727a3;
extern PyObject *const_str_plain_clear;
extern PyObject *const_str_plain_spellbook;
extern PyObject *const_str_digest_a5300c714d41971b3085dd5d05860574;
extern PyObject *const_str_plain_firebolt;
extern PyObject *const_str_plain_classsc;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_plain_goo;
extern PyObject *const_str_plain_spells;
extern PyObject *const_tuple_efbe58832f97c3767f78dda7cd8dfa3b_tuple;
extern PyObject *const_str_plain_quit;
extern PyObject *const_str_plain_enemy_info;
extern PyObject *const_str_plain_rows;
extern PyObject *const_str_digest_bc144dfab83d3e4c8793fb69ca76af38;
extern PyObject *const_str_plain_exc_value;
extern PyObject *const_str_plain_darkmagenta;
extern PyObject *const_str_digest_6f604464852122ad87838c62aa7d02d1;
extern PyObject *const_str_plain_encounter_time;
extern PyObject *const_str_plain_book;
extern PyObject *const_dict_1c77ad0e87dbf8feb3de0b9661406db1;
extern PyObject *const_str_digest_de49972fa23676d1d83ded073c6b3042;
extern PyObject *const_str_plain_current_version;
extern PyObject *const_str_digest_c20baaba4abaa30c99278e47fbdf6a02;
extern PyObject *const_str_digest_55f9bb09fd8231b1e010dca4626f5961;
extern PyObject *const_str_plain_crowbar;
extern PyObject *const_int_pos_180;
extern PyObject *const_str_plain_skip;
extern PyObject *const_str_plain_yellow;
extern PyObject *const_int_pos_75;
extern PyObject *const_str_plain_evolve_count;
extern PyObject *const_str_digest_89df3938dd396e8d79433cd7d4ee6a5a;
extern PyObject *const_str_plain_argparse;
extern PyObject *const_str_plain_levels;
extern PyObject *const_str_digest_bbba3068aeccffdb18e97016eda79e81;
extern PyObject *const_str_plain_dead_p;
extern PyObject *const_str_plain_restart;
extern PyObject *const_str_digest_59e22e82ef3174b5fc0cc7164207e5de;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_encounter;
extern PyObject *const_str_plain_close;
extern PyObject *const_str_digest_3e97787fc5acfab6be55e15661e58b99;
extern PyObject *const_str_digest_44ca42ef93d9d07497b572bc368e9e4a;
extern PyObject *const_str_digest_658d2924d3a7a7d78af9d5c4579f0d5a;
extern PyObject *const_str_plain_rb;
extern PyObject *const_str_plain_act;
extern PyObject *const_int_pos_325;
extern PyObject *const_str_plain_save;
extern PyObject *const_str_plain_orc;
extern PyObject *const_str_plain_underground_door;
extern PyObject *const_str_digest_d0766d79fde040ecbb62086cd2119ba3;
extern PyObject *const_str_plain_inv;
extern PyObject *const_str_digest_b6e64694f0625a8db6f4a3fc5ea57fd3;
extern PyObject *const_str_plain_time;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_points;
extern PyObject *const_int_pos_420;
extern PyObject *const_str_plain_sneak;
extern PyObject *const_str_plain_update;
extern PyObject *const_str_plain_random;
extern PyObject *const_str_digest_3bd07c570e48aff7a991701ad5b36b18;
extern PyObject *const_str_plain_help;
extern PyObject *const_str_digest_0e14ad738fb42204ec4744717ac7ce1b;
extern PyObject *const_str_plain___metaclass__;
extern PyObject *const_str_digest_ae64ea560719e62b71aed5918c813258;
extern PyObject *const_str_digest_27302fb60afd206f9698e297afcb0956;
extern PyObject *const_list_8ddbb8e53af92888ce3915ec42122900_list;
extern PyObject *const_str_digest_795d0e465cbfbbd5ceb9b80bea3956ab;
extern PyObject *const_str_plain_word;
extern PyObject *const_str_digest_324bc35cdbb95a43cb591e9f38b86ec1;
extern PyObject *const_str_plain_slime;
extern PyObject *const_str_plain_Recover;
extern PyObject *const_str_plain_exp_limit;
extern PyObject *const_str_digest_7ff684169b33027b804e663c6f5e81dd;
extern PyObject *const_str_plain_magic_dam;
extern PyObject *const_str_plain_OP420;
extern PyObject *const_str_digest_a3fd07d009b1920d2bbad46d05cafdcc;
extern PyObject *const_str_plain_exc_tb;
extern PyObject *const_str_plain_enemy_debuffs;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_digest_ac3116951fc9adedef4c2546f927c1b1;
extern PyObject *const_tuple_str_plain_Counter_tuple;
extern PyObject *const_str_plain_skills;
extern PyObject *const_str_digest_f6ab6ba6ab0226399bff76da6e88858f;
extern PyObject *const_str_plain_Loadingbar;
extern PyObject *const_str_plain_collections;
extern PyObject *const_str_digest_d7576e429f04159f7c3327b1e65fe40e;
extern PyObject *const_str_digest_38424cdfef64b473333dd1c3a9eb5e64;
extern PyObject *const_str_digest_c5845beb5f02d2e462e6849569c9b507;
extern PyObject *const_str_plain_grab;
extern PyObject *const_str_digest_baa7bcaacef7e28787dda5b6a2d79d8c;
extern PyObject *const_str_digest_33ee215ea4ec1e7a6b3f6faf3aa80de4;
extern PyObject *const_int_pos_20;
extern PyObject *const_str_digest_d8cdc61543fa8acd374025fd576dadb1;
extern PyObject *const_str_digest_f0fce6e2e1e5199c033a274ea14748eb;
extern PyObject *const_str_plain_elf;
extern PyObject *const_str_digest_cefb65712d341b22b75ba1a7d029df78;
extern PyObject *const_int_pos_85;
extern PyObject *const_str_digest_f11ef94db78eef6ff8b61394f971aee2;
extern PyObject *const_list_str_plain_e_str_plain_east_list;
extern PyObject *const_str_digest_5cd15518594c041c4a5c3561c5c6abeb;
extern PyObject *const_str_plain_run_success;
extern PyObject *const_str_digest_2f43b42fd833d1e77420a8dae7419000;
extern PyObject *const_str_digest_bdc1e5b842ee0a84a7b24240306fcbde;
extern PyObject *const_str_plain_enemy_type;
extern PyObject *const_str_plain_rtime;
extern PyObject *const_str_plain_darkblue;
extern PyObject *const_str_digest_15528ddd1ecf9b12264c55564182fa7a;
extern PyObject *const_str_digest_c2201a26cd591a94095f787d9d718c20;
extern PyObject *const_str_plain_enemy_dam;
extern PyObject *const_str_digest_43e1128b2fabd0561bae6d2289783e70;
extern PyObject *const_str_digest_c60ab00efa2cacc33283c89f980f8268;
extern PyObject *const_str_plain_max_mana;
extern PyObject *const_str_plain_triggers;
extern PyObject *const_str_digest_46f8790febeafa3b21127987978678e8;
extern PyObject *const_str_digest_a9a955143cd935b2a05c6c23a8d35eea;
extern PyObject *const_str_digest_97f7a09b2f56c1a935e5d7c724878b07;
extern PyObject *const_str_digest_1c1f0a417d5e943433755a8ce593542f;
extern PyObject *const_str_plain_enemy_set;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_int_pos_210;
extern PyObject *const_int_pos_100;
extern PyObject *const_str_plain_dodges;
extern PyObject *const_str_plain_lamp;
extern PyObject *const_str_plain_east;
extern PyObject *const_str_plain_tp;
extern PyObject *const_str_plain_read;
extern PyObject *const_str_plain_key;
extern PyObject *const_str_plain_object;
extern PyObject *const_str_digest_bab877bb6a22a7eac6f3df35628ffacb;
extern PyObject *const_str_plain_ping_test;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_use_words;
extern PyObject *const_str_digest_ad0af8501c28ca625dfa3ecff90825e5;
extern PyObject *const_str_digest_eee0d775625e14080715be91fec03082;
extern PyObject *const_str_digest_a40843c9499d560140a8ce54e4970aed;
extern PyObject *const_str_digest_aabf841ac44ed036deae16b0dc9a10d7;
extern PyObject *const_str_digest_270b71f14c98172f853f4ae088b4d7ed;
extern PyObject *const_str_digest_e44b8745f1767ba156d73eccc6250b71;
extern PyObject *const_int_pos_60;
extern PyObject *const_str_digest_0d6da078c3206431f17d8f388fd08eb6;
extern PyObject *const_str_digest_16a9bf974dbf01a2f5af4d091ab4f19a;
extern PyObject *const_str_plain_switch;
extern PyObject *const_str_plain_kills;
extern PyObject *const_str_digest_e5496a7381dca2b005e24cfb33f20ef7;
extern PyObject *const_str_digest_f927cc2b0da9fef259b908ac3a9f0933;
extern PyObject *const_str_plain_armor;
extern PyObject *const_str_plain_CleanExit;
extern PyObject *const_list_str_plain_n_str_plain_north_list;
extern PyObject *const_str_plain_roominfo;
extern PyObject *const_str_plain_charm;
extern PyObject *const_int_pos_10;
extern PyObject *const_int_pos_11;
extern PyObject *const_int_pos_12;
extern PyObject *const_int_pos_13;
extern PyObject *const_int_pos_14;
extern PyObject *const_int_pos_15;
extern PyObject *const_int_pos_16;
extern PyObject *const_int_pos_17;
extern PyObject *const_str_digest_e49a9a82d28820d828d3cdc94c527ae8;
extern PyObject *const_dict_empty;
extern PyObject *const_int_pos_25;
extern PyObject *const_str_plain_enemy_hp;
extern PyObject *const_str_digest_3482ddbd0e4c095381d583e51763f9ca;
extern PyObject *const_str_plain_system;
extern PyObject *const_int_pos_6;
extern PyObject *const_int_pos_7;
extern PyObject *const_int_pos_4;
extern PyObject *const_int_pos_5;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_digest_65c15fb892f499b11c270cb41bc59a2a;
extern PyObject *const_str_digest_2dd3bcc35d86990c94e1dbe5b45f35b8;
extern PyObject *const_int_pos_8;
extern PyObject *const_int_pos_9;
extern PyObject *const_str_digest_e582571519f6cff1e30f74d31c952c9a;
extern PyObject *const_str_digest_0ee9b5114fc02a3eefa0605febcf7f56;
extern PyObject *const_str_digest_3199a9c83d03c5a0c8d4a0cca204f2a0;
extern PyObject *const_str_digest_7caab993e2e516d7b4db21b8abd4c5de;
extern PyObject *const_str_plain_cyan;
extern PyObject *const_str_plain_silly;
extern PyObject *const_str_plain_aquire;
extern PyObject *const_str_digest_08900fa20268a04b86a9210fbde28373;
extern PyObject *const_str_digest_c2a4e4b96471b6c26edcad95fe2ac0f2;
extern PyObject *const_str_digest_fc820c1996ad8ff8ecbbd7e7dcbb041e;
extern PyObject *const_str_digest_213a6f7e5627ea04c974725bd9073f9e;
extern PyObject *const_str_plain___exit__;
extern PyObject *const_str_digest_3ebb04855581999c4f963b7eae827b1e;
extern PyObject *const_str_digest_6775e3930e3690b09dc145200c435ce2;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_digest_1eb2227f3fa8b83a9787c24f3380e29d;
extern PyObject *const_str_digest_2b9f05328b61046b25a7911eca1f60f2;
extern PyObject *const_str_plain_torch;
extern PyObject *const_str_plain_info;
extern PyObject *const_str_plain_hp_heal;
extern PyObject *const_str_plain_north;
extern PyObject *const_str_digest_bae0b19519db627cac836555726a5505;
extern PyObject *const_str_plain_kazooquest;
extern PyObject *const_str_plain_4;
extern PyObject *const_list_str_plain_w_str_plain_west_list;
extern PyObject *const_str_plain_num;
extern PyObject *const_str_digest_9830ba37050a4a51c93152bb5cc741e0;
extern PyObject *const_str_plain_1;
extern PyObject *const_str_plain_2;
extern PyObject *const_str_plain_3;
extern PyObject *const_str_plain_parrypowa;
extern PyObject *const_str_plain___enter__;
extern PyObject *const_str_digest_8f9b4420dd840faad38bba6ca2cb1490;
extern PyObject *const_int_pos_245;
extern PyObject *const_int_pos_1337;
extern PyObject *const_str_digest_945fe5ca24bb47d33c320b179193760a;
extern PyObject *const_str_plain_stdout;
extern PyObject *const_str_plain_n;
extern PyObject *const_str_plain_d;
extern PyObject *const_str_plain_e;
extern PyObject *const_str_digest_8024663910c63afc97bae69f7d735e89;
extern PyObject *const_str_plain_Stealth;
extern PyObject *const_str_plain_x;
extern PyObject *const_str_plain_y;
extern PyObject *const_str_plain_z;
extern PyObject *const_str_plain_u;
extern PyObject *const_str_plain_w;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_plain_south;
extern PyObject *const_str_digest_143f99a78ff20b0e9116a6ea5ed17c6a;
extern PyObject *const_str_digest_5b821a034a3b984ec1045dbb88295522;
extern PyObject *const_str_digest_b908368bba0f9d565be5e24877586d55;
extern PyObject *const_str_digest_bd1ed93352551ef2b175852872760d81;
extern PyObject *const_str_digest_e3cf48bb1f3593ae49166794aded6d73;
extern PyObject *const_str_digest_389f56b5d3d0c63bcc0dc92f40b3edfa;
extern PyObject *const_str_plain_randint;
extern PyObject *const_int_pos_50;
extern PyObject *const_str_plain_spirit;
extern PyObject *const_int_0;
extern PyObject *const_str_digest_1e93a5dc2c431edbd1f36406d9782516;
extern PyObject *const_str_digest_d5b4a07f69d1e4c0335732b2a301b14a;
extern PyObject *const_str_digest_39380e7c6c8a7d893bb571b6c41ba3fe;
extern PyObject *const_str_digest_68551a24202e92fa366edf4a6de0f395;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_response;
extern PyObject *const_str_plain_w_words;
extern PyObject *const_str_digest_c83a5828dec37a98ca7fba33102808f8;
extern PyObject *const_str_plain_dwarf;
extern PyObject *const_str_digest_afae697a5d82a0e076fc9f07a4a73b5e;
extern PyObject *const_str_digest_4f604344241e03b4163146c139ad5134;
extern PyObject *const_str_plain_inventory;
extern PyObject *const_str_digest_f69472097cd305bb0b299dc1f44b7b33;
extern PyObject *const_str_plain_mana_heal;
extern PyObject *const_str_plain_Counter;
extern PyObject *const_str_plain_skill_heal;
extern PyObject *const_str_digest_ec6bdca020403edbbf007956ca7d0f4b;
extern PyObject *const_dict_c008e769f7ad26f5db2cafc17e3e1194;
extern PyObject *const_str_plain_wolf;
extern PyObject *const_str_plain_level;
extern PyObject *const_str_digest_bc2a664119fc0a83a6aaabc696e5800e;
extern PyObject *const_str_plain_eat;
extern PyObject *const_str_plain_exp;
extern PyObject *const_str_plain_trapdoor;
extern PyObject *const_str_plain_dodge_act;
extern PyObject *const_str_plain_remove;
extern PyObject *const_str_plain_autoload;
extern PyObject *const_str_plain_off;
extern PyObject *const_str_plain_drink;
extern PyObject *const_str_plain_dagger;
extern PyObject *const_str_plain_credits;
extern PyObject *const_str_plain_wraith;
extern PyObject *const_str_plain_letter;
extern PyObject *const_str_digest_94dce438eb60889f8e33b8e3941faa0d;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_Burning;
extern PyObject *const_dict_283dacd4984ab69b6cfcca3a8f5e15e1;
extern PyObject *const_str_plain_signal;
extern PyObject *const_str_digest_2b2340a9889f6574d2006a900a722861;
extern PyObject *const_str_digest_e846f99d2ba341a3d02b4f6876511a41;
extern PyObject *const_str_digest_029559693a822d565ff011d4620e25f6;
extern PyObject *const_str_digest_2d8bd3b253e7988d6e76800f17916591;
extern PyObject *const_str_digest_a2b3dc252592de0399801fc84eaab4bb;
extern PyObject *const_str_plain_enemy_buffs;
extern PyObject *const_str_digest_6bfdca3f28752677c965011c9120af59;
extern PyObject *const_str_digest_52b6c84346a65d4d229bf3c0ff5c4988;
extern PyObject *const_str_digest_ac9e1f57f7967f9d69f76b7b1ac4c8d9;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_digest_3548880918594fabf8a2ccac9b2b8e7f;
extern PyObject *const_str_plain_n_words;
extern PyObject *const_str_plain_Rage;
extern PyObject *const_str_plain_quit_response;
extern PyObject *const_str_digest_4e2a0f28bbd43215fd0f4f4feec2aefa;
extern PyObject *const_str_plain_magenta;
extern PyObject *const_str_plain_wb;
extern PyObject *const_str_digest_31639e1d43574f9d676664dc7d072b4f;
extern PyObject *const_str_digest_4c096ee9ad66010b63f08a39d1d33567;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_damage;
extern PyObject *const_str_plain_darkred;
extern PyObject *const_str_digest_9b5bf35df2557083836d485a6d14f751;
extern PyObject *const_str_plain_raw_input;
extern PyObject *const_str_plain_shuriken;
extern PyObject *const_str_digest_1be8436eca48da8b17e9e83f39ca7e27;
extern PyObject *const_str_plain_protocol;
extern PyObject *const_str_plain_use;
extern PyObject *const_str_digest_8ac0897fde4da29dbbc185274e3ed7e2;
extern PyObject *const_str_plain_max_energy;
extern PyObject *const_str_plain_cols;
extern PyObject *const_str_plain_cnt;
extern PyObject *const_str_digest_4f16afaae97722f9306d79e5985eee74;
extern PyObject *const_str_plain_enemy_dam_info;
extern PyObject *const_str_digest_9f93b30ef609b5929a11e58a6c9fdef3;
extern PyObject *const_str_digest_2c47311a43adbe6cffcde0d775213faf;
extern PyObject *const_str_plain_dump;
extern PyObject *const_str_plain_branch;
extern PyObject *const_str_plain_isfile;
extern PyObject *const_str_newline;
extern PyObject *const_int_pos_150;
extern PyObject *const_str_plain_5;
extern PyObject *const_str_plain_take;
extern PyObject *const_str_digest_bfe319ae1691f77a02450c6b6a8aa3a3;
extern PyObject *const_str_plain_drain_dam;
extern PyObject *const_str_plain_Frozen;
extern PyObject *const_str_digest_b1ddb54a8ba10be0b092f3fedf1472ca;
extern PyObject *const_str_digest_2c7bc0aca158cc57064732335584c44f;
extern PyObject *const_str_digest_17e9bb059879b244ae16b8f3e8c379e1;
extern PyObject *const_str_digest_62e0e143b9e2a50d815df0a5c6a7df84;
extern PyObject *const_str_plain_magic_attack;
extern PyObject *const_str_space;
extern PyObject *const_str_plain_darkgreen;
extern PyObject *const_str_plain_west;
extern PyObject *const_str_digest_39caad57a5328ef8469d72fb0a3dce49;
extern PyObject *const_str_plain_e_words;
extern PyObject *const_str_plain_heal;
extern PyObject *const_int_pos_275;
extern PyObject *const_str_plain_lights;
extern PyObject *const_str_digest_bec317d58a8302e2aaf523e28f100710;
extern PyObject *const_str_digest_9050e3e30294d1b4a589cee7da7381f6;
extern PyObject *const_list_str_plain_s_str_plain_south_list;
extern PyObject *const_str_digest_2231bf4b15759c5a18ed9e626671dce9;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_digest_299958b72eeba1cfe366c9595a024926;
extern PyObject *const_str_digest_73f28f4d44ac7837d75ceaa80324409a;
extern PyObject *const_str_digest_24915685862d2d9353b95d1b6fcb334a;
extern PyObject *const_str_digest_d21acec99d223ff4aa839ddb2436a86d;
extern PyObject *const_str_digest_3f7624f11f47efe211e7ff29c925040f;
extern PyObject *const_str_plain_defe;
extern PyObject *const_str_plain_skill_energy;
extern PyObject *const_str_empty;
extern PyObject *const_str_plain_enemy_dodge;
extern PyObject *const_str_plain_stop;
extern PyObject *const_str_plain_color;
extern PyObject *const_str_plain_darkyellow;
extern PyObject *const_str_plain_wait;
extern PyObject *const_str_plain_look;
extern PyObject *const_int_pos_40;
extern PyObject *const_str_plain_Poisoned;
extern PyObject *const_str_plain_history;
extern PyObject *const_str_plain_hp;
static PyObject *module_filename_obj;

static void _initModuleConstants( void )
{

}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_kazooquest( void )
{

}
#endif

// The module code objects.
static PyCodeObject *codeobj_10e91c90bb1183235d2b8479664e5d09;
static PyCodeObject *codeobj_39b071c63661178427fd99fa0a0456de;
static PyCodeObject *codeobj_f35bbd7999f7b8186ecd55d2444c19bd;
static PyCodeObject *codeobj_16f4bf8f789b0866386122624a9ae93f;
static PyCodeObject *codeobj_5db379f84e2ea15f27e9d851f8b74116;

static void _initModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_6f604464852122ad87838c62aa7d02d1 );
    codeobj_10e91c90bb1183235d2b8479664e5d09 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_CleanExit, 160, const_tuple_str_plain___module___str_plain___enter___str_plain___exit___tuple, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_39b071c63661178427fd99fa0a0456de = MAKE_CODEOBJ( module_filename_obj, const_str_plain___enter__, 161, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_f35bbd7999f7b8186ecd55d2444c19bd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___exit__, 163, const_tuple_efbe58832f97c3767f78dda7cd8dfa3b_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_16f4bf8f789b0866386122624a9ae93f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_kazooquest, 0, const_tuple_empty, 0, CO_NOFREE );
    codeobj_5db379f84e2ea15f27e9d851f8b74116 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update, 60, const_tuple_str_plain_ping_test_str_plain_pstatus_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_2_CleanExit_of_kazooquest(  );


static PyObject *MAKE_FUNCTION_function_1___enter___of_class_2_CleanExit_of_kazooquest(  );


static PyObject *MAKE_FUNCTION_function_1_update_of_kazooquest(  );


static PyObject *MAKE_FUNCTION_function_2___exit___of_class_2_CleanExit_of_kazooquest(  );


// The module function definitions.
static PyObject *impl_function_1_update_of_kazooquest( Nuitka_FunctionObject *self )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_ping_test = NULL;
    PyObject *var_pstatus = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_name_1;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_print_value;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5db379f84e2ea15f27e9d851f8b74116, module_kazooquest );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2278 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 61;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_system );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_function->f_lineno = 61;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_digest_6bfdca3f28752677c965011c9120af59;
    frame_function->f_lineno = 61;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_function->f_lineno = 61;
        goto frame_exception_exit_1;
    }
    assert( var_ping_test == NULL );
    var_ping_test = tmp_assign_source_1;

    tmp_compare_left_1 = var_ping_test;

    tmp_compare_right_1 = const_int_0;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_function->f_lineno = 62;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_2 = const_str_digest_bfe319ae1691f77a02450c6b6a8aa3a3;
    assert( var_pstatus == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_pstatus = tmp_assign_source_2;

    goto branch_end_1;
    branch_no_1:;
    tmp_print_value = const_str_digest_cc56e44ac2f33531eac0549df83cdf1e;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_function );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ( var_ping_test != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ping_test,
            var_ping_test
        );
        assert( tmp_res != -1 );

    }
    if ( var_pstatus != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_pstatus,
            var_pstatus
        );
        assert( tmp_res != -1 );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_finally_handler_1;
    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    Py_XDECREF( var_ping_test );
    var_ping_test = NULL;

    Py_XDECREF( var_pstatus );
    var_pstatus = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto function_exception_exit;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto function_return_exit;
    }

    goto finally_end_1;
    finally_end_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1_update_of_kazooquest );

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}
static PyObject *fparse_function_1_update_of_kazooquest( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           args_given + kw_size
        );
#else
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           kw_size > 0 ? kw : NULL,
           args_given
        );
#endif

        goto error_exit;
    }


    return impl_function_1_update_of_kazooquest( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_function_1_update_of_kazooquest( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0 )
    {
        return impl_function_1_update_of_kazooquest( self );
    }
    else
    {
        PyObject *result = fparse_function_1_update_of_kazooquest( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_2_CleanExit_of_kazooquest(  )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___enter__ = NULL;
    PyObject *var___exit__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_frame_locals;
    int tmp_res;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_kazooquest;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    // Tried code
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_10e91c90bb1183235d2b8479664e5d09, module_kazooquest );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_2 = MAKE_FUNCTION_function_1___enter___of_class_2_CleanExit_of_kazooquest(  );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 161;
        goto frame_exception_exit_1;
    }
    assert( var___enter__ == NULL );
    var___enter__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_2___exit___of_class_2_CleanExit_of_kazooquest(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 163;
        goto frame_exception_exit_1;
    }
    assert( var___exit__ == NULL );
    var___exit__ = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_function );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ( var___module__ != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__
        );
        assert( tmp_res != -1 );

    }
    if ( var___enter__ != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___enter__,
            var___enter__
        );
        assert( tmp_res != -1 );

    }
    if ( var___exit__ != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___exit__,
            var___exit__
        );
        assert( tmp_res != -1 );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_finally_handler_1;
    frame_no_exception_1:;

    tmp_return_value = PyDict_New();
    if ( var___module__ != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );
        assert( tmp_res != -1 );

    }
    if ( var___enter__ != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___enter__,
            var___enter__
        );
        assert( tmp_res != -1 );

    }
    if ( var___exit__ != NULL )
    {
        tmp_res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___exit__,
            var___exit__
        );
        assert( tmp_res != -1 );

    }
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    Py_XDECREF( var___enter__ );
    var___enter__ = NULL;

    Py_XDECREF( var___exit__ );
    var___exit__ = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto function_exception_exit;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto function_return_exit;
    }

    goto finally_end_1;
    finally_end_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( class_2_CleanExit_of_kazooquest );

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_function_1___enter___of_class_2_CleanExit_of_kazooquest( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = _python_par_self;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code
    tmp_return_value = par_self;

    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise as necessary after finally was executed.
    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto function_return_exit;
    }

    goto finally_end_1;
    finally_end_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_1___enter___of_class_2_CleanExit_of_kazooquest );

    return NULL;
    function_return_exit:
    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}
static PyObject *fparse_function_1___enter___of_class_2_CleanExit_of_kazooquest( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__enter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__enter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the argument list to the
    // respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = args[ 0 ];
        Py_INCREF( _python_par_self );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 );
            Py_INCREF( _python_par_self );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___enter___of_class_2_CleanExit_of_kazooquest( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1___enter___of_class_2_CleanExit_of_kazooquest( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1___enter___of_class_2_CleanExit_of_kazooquest( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___enter___of_class_2_CleanExit_of_kazooquest( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___exit___of_class_2_CleanExit_of_kazooquest( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_exc_type, PyObject *_python_par_exc_value, PyObject *_python_par_exc_tb )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = _python_par_self;
    PyObject *par_exc_type = _python_par_exc_type;
    PyObject *par_exc_value = _python_par_exc_value;
    PyObject *par_exc_tb = _python_par_exc_tb;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    bool tmp_is_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code
    tmp_compare_left_1 = par_exc_type;

    tmp_compare_right_1 = PyExc_KeyboardInterrupt;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_True;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    branch_no_1:;
    tmp_compexpr_left_1 = par_exc_type;

    tmp_compexpr_right_1 = Py_None;
    tmp_return_value = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_type );
    Py_DECREF( par_exc_type );
    par_exc_type = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_value );
    Py_DECREF( par_exc_value );
    par_exc_value = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_tb );
    Py_DECREF( par_exc_tb );
    par_exc_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto function_return_exit;
    }

    goto finally_end_1;
    finally_end_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( function_2___exit___of_class_2_CleanExit_of_kazooquest );

    return NULL;
    function_return_exit:
    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}
static PyObject *fparse_function_2___exit___of_class_2_CleanExit_of_kazooquest( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_exc_type = NULL;
    PyObject *_python_par_exc_value = NULL;
    PyObject *_python_par_exc_tb = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__exit__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_exc_type == key )
            {
                assert( _python_par_exc_type == NULL );
                _python_par_exc_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_exc_value == key )
            {
                assert( _python_par_exc_value == NULL );
                _python_par_exc_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_exc_tb == key )
            {
                assert( _python_par_exc_tb == NULL );
                _python_par_exc_tb = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_exc_type, key ) == 1 )
            {
                assert( _python_par_exc_type == NULL );
                _python_par_exc_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_exc_value, key ) == 1 )
            {
                assert( _python_par_exc_value == NULL );
                _python_par_exc_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_exc_tb, key ) == 1 )
            {
                assert( _python_par_exc_tb == NULL );
                _python_par_exc_tb = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__exit__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the argument list to the
    // respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = args[ 0 ];
        Py_INCREF( _python_par_self );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_self = PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 );
            Py_INCREF( _python_par_self );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_exc_type != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_exc_type = args[ 1 ];
        Py_INCREF( _python_par_exc_type );
    }
    else if ( _python_par_exc_type == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_exc_type = PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 );
            Py_INCREF( _python_par_exc_type );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_exc_value != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_exc_value = args[ 2 ];
        Py_INCREF( _python_par_exc_value );
    }
    else if ( _python_par_exc_value == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_exc_value = PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 );
            Py_INCREF( _python_par_exc_value );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_exc_tb != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_exc_tb = args[ 3 ];
        Py_INCREF( _python_par_exc_tb );
    }
    else if ( _python_par_exc_tb == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_exc_tb = PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 );
            Py_INCREF( _python_par_exc_tb );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_exc_type == NULL || _python_par_exc_value == NULL || _python_par_exc_tb == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_exc_type, _python_par_exc_value, _python_par_exc_tb };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___exit___of_class_2_CleanExit_of_kazooquest( self, _python_par_self, _python_par_exc_type, _python_par_exc_value, _python_par_exc_tb );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_exc_type );
    Py_XDECREF( _python_par_exc_value );
    Py_XDECREF( _python_par_exc_tb );

    return NULL;
}

static PyObject *dparse_function_2___exit___of_class_2_CleanExit_of_kazooquest( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_2___exit___of_class_2_CleanExit_of_kazooquest( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___exit___of_class_2_CleanExit_of_kazooquest( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_1___enter___of_class_2_CleanExit_of_kazooquest(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___enter___of_class_2_CleanExit_of_kazooquest,
        dparse_function_1___enter___of_class_2_CleanExit_of_kazooquest,
        const_str_plain___enter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_39b071c63661178427fd99fa0a0456de,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_kazooquest,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_update_of_kazooquest(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_update_of_kazooquest,
        dparse_function_1_update_of_kazooquest,
        const_str_plain_update,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5db379f84e2ea15f27e9d851f8b74116,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_kazooquest,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___exit___of_class_2_CleanExit_of_kazooquest(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___exit___of_class_2_CleanExit_of_kazooquest,
        dparse_function_2___exit___of_class_2_CleanExit_of_kazooquest,
        const_str_plain___exit__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f35bbd7999f7b8186ecd55d2444c19bd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_kazooquest,
        Py_None
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_kazooquest =
{
    PyModuleDef_HEAD_INIT,
    "kazooquest",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER

#include "nuitka/unfreezing.hpp"

// Table for lookup to find "frozen" modules or DLLs, i.e. the ones included in
// or along this binary.

static struct Nuitka_MetaPathBasedLoaderEntry meta_path_loader_entries[] =
{

    { NULL, NULL, 0 }
};

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( kazooquest )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_kazooquest );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( meta_path_loader_entries );
#endif

    _initModuleConstants();
    _initModuleCodeObjects();

    // puts( "in initkazooquest" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_kazooquest = Py_InitModule4(
        "kazooquest",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_kazooquest = PyModule_Create( &mdef_kazooquest );
#endif

    moduledict_kazooquest = (PyDictObject *)((PyModuleObject *)module_kazooquest)->md_dict;

    CHECK_OBJECT( module_kazooquest );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_plain_kazooquest, module_kazooquest );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_kazooquest );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__element_6 = NULL;
    PyObject *tmp_tuple_unpack_1__element_7 = NULL;
    PyObject *tmp_tuple_unpack_1__element_8 = NULL;
    PyObject *tmp_tuple_unpack_1__element_9 = NULL;
    PyObject *tmp_tuple_unpack_1__element_10 = NULL;
    PyObject *tmp_tuple_unpack_1__element_11 = NULL;
    PyObject *tmp_tuple_unpack_1__element_12 = NULL;
    PyObject *tmp_tuple_unpack_1__element_13 = NULL;
    PyObject *tmp_tuple_unpack_1__element_14 = NULL;
    PyObject *tmp_tuple_unpack_1__element_15 = NULL;
    PyObject *tmp_tuple_unpack_1__element_16 = NULL;
    PyObject *tmp_tuple_unpack_1__element_17 = NULL;
    PyObject *tmp_tuple_unpack_1__element_18 = NULL;
    PyObject *tmp_tuple_unpack_1__element_19 = NULL;
    PyObject *tmp_with_1__source = NULL;
    PyObject *tmp_with_1__exit = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__indicator = NULL;
    PyObject *tmp_and_1__value_1 = NULL;
    PyObject *tmp_and_2__value_1 = NULL;
    PyObject *tmp_and_2__value_2 = NULL;
    PyObject *tmp_and_2__value_3 = NULL;
    PyObject *tmp_and_3__value_1 = NULL;
    PyObject *tmp_and_3__value_2 = NULL;
    PyObject *tmp_and_3__value_3 = NULL;
    PyObject *tmp_and_3__value_4 = NULL;
    PyObject *tmp_and_4__value_1 = NULL;
    PyObject *tmp_and_4__value_2 = NULL;
    PyObject *tmp_and_4__value_3 = NULL;
    PyObject *tmp_and_5__value_1 = NULL;
    PyObject *tmp_and_5__value_2 = NULL;
    PyObject *tmp_and_5__value_3 = NULL;
    PyObject *tmp_and_6__value_1 = NULL;
    PyObject *tmp_and_7__value_1 = NULL;
    PyObject *tmp_and_8__value_1 = NULL;
    PyObject *tmp_and_8__value_2 = NULL;
    PyObject *tmp_and_8__value_3 = NULL;
    PyObject *tmp_and_9__value_1 = NULL;
    PyObject *tmp_and_9__value_2 = NULL;
    PyObject *tmp_and_9__value_3 = NULL;
    PyObject *tmp_and_10__value_1 = NULL;
    PyObject *tmp_and_10__value_2 = NULL;
    PyObject *tmp_and_10__value_3 = NULL;
    PyObject *tmp_and_11__value_1 = NULL;
    PyObject *tmp_and_11__value_2 = NULL;
    PyObject *tmp_and_11__value_3 = NULL;
    PyObject *tmp_and_12__value_1 = NULL;
    PyObject *tmp_and_12__value_2 = NULL;
    PyObject *tmp_and_12__value_3 = NULL;
    PyObject *tmp_and_12__value_4 = NULL;
    PyObject *tmp_and_13__value_1 = NULL;
    PyObject *tmp_and_13__value_2 = NULL;
    PyObject *tmp_and_13__value_3 = NULL;
    PyObject *tmp_and_13__value_4 = NULL;
    PyObject *tmp_and_14__value_1 = NULL;
    PyObject *tmp_and_14__value_2 = NULL;
    PyObject *tmp_and_14__value_3 = NULL;
    PyObject *tmp_and_14__value_4 = NULL;
    PyObject *tmp_and_15__value_1 = NULL;
    PyObject *tmp_and_15__value_2 = NULL;
    PyObject *tmp_and_15__value_3 = NULL;
    PyObject *tmp_and_15__value_4 = NULL;
    PyObject *tmp_and_16__value_1 = NULL;
    PyObject *tmp_and_16__value_2 = NULL;
    PyObject *tmp_and_16__value_3 = NULL;
    PyObject *tmp_and_16__value_4 = NULL;
    PyObject *tmp_and_17__value_1 = NULL;
    PyObject *tmp_and_17__value_2 = NULL;
    PyObject *tmp_and_17__value_3 = NULL;
    PyObject *tmp_and_17__value_4 = NULL;
    PyObject *tmp_and_17__value_5 = NULL;
    PyObject *tmp_and_18__value_1 = NULL;
    PyObject *tmp_and_18__value_2 = NULL;
    PyObject *tmp_and_18__value_3 = NULL;
    PyObject *tmp_and_18__value_4 = NULL;
    PyObject *tmp_and_18__value_5 = NULL;
    PyObject *tmp_and_19__value_1 = NULL;
    PyObject *tmp_and_19__value_2 = NULL;
    PyObject *tmp_with_2__source = NULL;
    PyObject *tmp_with_2__exit = NULL;
    PyObject *tmp_with_2__enter = NULL;
    PyObject *tmp_with_2__indicator = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__element_4 = NULL;
    PyObject *tmp_tuple_unpack_2__element_5 = NULL;
    PyObject *tmp_tuple_unpack_2__element_6 = NULL;
    PyObject *tmp_tuple_unpack_2__element_7 = NULL;
    PyObject *tmp_tuple_unpack_2__element_8 = NULL;
    PyObject *tmp_tuple_unpack_2__element_9 = NULL;
    PyObject *tmp_tuple_unpack_2__element_10 = NULL;
    PyObject *tmp_tuple_unpack_2__element_11 = NULL;
    PyObject *tmp_tuple_unpack_2__element_12 = NULL;
    PyObject *tmp_tuple_unpack_2__element_13 = NULL;
    PyObject *tmp_tuple_unpack_2__element_14 = NULL;
    PyObject *tmp_tuple_unpack_2__element_15 = NULL;
    PyObject *tmp_tuple_unpack_2__element_16 = NULL;
    PyObject *tmp_tuple_unpack_2__element_17 = NULL;
    PyObject *tmp_tuple_unpack_2__element_18 = NULL;
    PyObject *tmp_tuple_unpack_2__element_19 = NULL;
    PyObject *tmp_with_3__source = NULL;
    PyObject *tmp_with_3__exit = NULL;
    PyObject *tmp_with_3__enter = NULL;
    PyObject *tmp_with_3__indicator = NULL;
    PyObject *tmp_and_20__value_1 = NULL;
    PyObject *tmp_and_20__value_2 = NULL;
    PyObject *tmp_and_21__value_1 = NULL;
    PyObject *tmp_and_21__value_2 = NULL;
    PyObject *tmp_and_22__value_1 = NULL;
    PyObject *tmp_and_22__value_2 = NULL;
    PyObject *tmp_and_23__value_1 = NULL;
    PyObject *tmp_and_23__value_2 = NULL;
    PyObject *tmp_and_24__value_1 = NULL;
    PyObject *tmp_and_25__value_1 = NULL;
    PyObject *tmp_and_25__value_2 = NULL;
    PyObject *tmp_and_26__value_1 = NULL;
    PyObject *tmp_and_26__value_2 = NULL;
    PyObject *tmp_and_27__value_1 = NULL;
    PyObject *tmp_and_28__value_1 = NULL;
    PyObject *tmp_and_29__value_1 = NULL;
    PyObject *tmp_and_30__value_1 = NULL;
    PyObject *tmp_and_31__value_1 = NULL;
    PyObject *tmp_and_32__value_1 = NULL;
    PyObject *tmp_and_33__value_1 = NULL;
    PyObject *tmp_and_34__value_1 = NULL;
    PyObject *tmp_and_34__value_2 = NULL;
    PyObject *tmp_and_34__value_3 = NULL;
    PyObject *tmp_and_35__value_1 = NULL;
    PyObject *tmp_and_35__value_2 = NULL;
    PyObject *tmp_and_35__value_3 = NULL;
    PyObject *tmp_and_36__value_1 = NULL;
    PyObject *tmp_and_36__value_2 = NULL;
    PyObject *tmp_and_37__value_1 = NULL;
    PyObject *tmp_and_37__value_2 = NULL;
    PyObject *tmp_and_38__value_1 = NULL;
    PyObject *tmp_and_38__value_2 = NULL;
    PyObject *tmp_and_38__value_3 = NULL;
    PyObject *tmp_and_39__value_1 = NULL;
    PyObject *tmp_and_39__value_2 = NULL;
    PyObject *tmp_and_40__value_1 = NULL;
    PyObject *tmp_and_40__value_2 = NULL;
    PyObject *tmp_and_40__value_3 = NULL;
    PyObject *tmp_and_41__value_1 = NULL;
    PyObject *tmp_and_41__value_2 = NULL;
    PyObject *tmp_and_41__value_3 = NULL;
    PyObject *tmp_and_41__value_4 = NULL;
    PyObject *tmp_and_42__value_1 = NULL;
    PyObject *tmp_and_42__value_2 = NULL;
    PyObject *tmp_and_42__value_3 = NULL;
    PyObject *tmp_and_42__value_4 = NULL;
    PyObject *tmp_and_43__value_1 = NULL;
    PyObject *tmp_and_43__value_2 = NULL;
    PyObject *tmp_and_43__value_3 = NULL;
    PyObject *tmp_and_44__value_1 = NULL;
    PyObject *tmp_and_44__value_2 = NULL;
    PyObject *tmp_and_44__value_3 = NULL;
    PyObject *tmp_and_45__value_1 = NULL;
    PyObject *tmp_and_45__value_2 = NULL;
    PyObject *tmp_and_45__value_3 = NULL;
    PyObject *tmp_and_45__value_4 = NULL;
    PyObject *tmp_and_45__value_5 = NULL;
    PyObject *tmp_and_46__value_1 = NULL;
    PyObject *tmp_and_46__value_2 = NULL;
    PyObject *tmp_and_46__value_3 = NULL;
    PyObject *tmp_and_46__value_4 = NULL;
    PyObject *tmp_and_46__value_5 = NULL;
    PyObject *tmp_and_47__value_1 = NULL;
    PyObject *tmp_and_47__value_2 = NULL;
    PyObject *tmp_and_47__value_3 = NULL;
    PyObject *tmp_and_47__value_4 = NULL;
    PyObject *tmp_and_47__value_5 = NULL;
    PyObject *tmp_and_48__value_1 = NULL;
    PyObject *tmp_and_48__value_2 = NULL;
    PyObject *tmp_and_48__value_3 = NULL;
    PyObject *tmp_and_48__value_4 = NULL;
    PyObject *tmp_and_48__value_5 = NULL;
    PyObject *tmp_and_49__value_1 = NULL;
    PyObject *tmp_and_49__value_2 = NULL;
    PyObject *tmp_and_49__value_3 = NULL;
    PyObject *tmp_and_49__value_4 = NULL;
    PyObject *tmp_and_49__value_5 = NULL;
    PyObject *tmp_and_50__value_1 = NULL;
    PyObject *tmp_and_50__value_2 = NULL;
    PyObject *tmp_and_50__value_3 = NULL;
    PyObject *tmp_and_50__value_4 = NULL;
    PyObject *tmp_and_50__value_5 = NULL;
    PyObject *tmp_and_51__value_1 = NULL;
    PyObject *tmp_and_51__value_2 = NULL;
    PyObject *tmp_and_51__value_3 = NULL;
    PyObject *tmp_and_51__value_4 = NULL;
    PyObject *tmp_and_51__value_5 = NULL;
    PyObject *tmp_and_52__value_1 = NULL;
    PyObject *tmp_and_52__value_2 = NULL;
    PyObject *tmp_and_52__value_3 = NULL;
    PyObject *tmp_and_52__value_4 = NULL;
    PyObject *tmp_and_52__value_5 = NULL;
    PyObject *tmp_and_53__value_1 = NULL;
    PyObject *tmp_and_53__value_2 = NULL;
    PyObject *tmp_and_54__value_1 = NULL;
    PyObject *tmp_and_54__value_2 = NULL;
    PyObject *tmp_and_55__value_1 = NULL;
    PyObject *tmp_and_55__value_2 = NULL;
    PyObject *tmp_and_56__value_1 = NULL;
    PyObject *tmp_and_56__value_2 = NULL;
    PyObject *tmp_and_57__value_1 = NULL;
    PyObject *tmp_and_57__value_2 = NULL;
    PyObject *tmp_and_58__value_1 = NULL;
    PyObject *tmp_and_58__value_2 = NULL;
    PyObject *tmp_and_59__value_1 = NULL;
    PyObject *tmp_and_59__value_2 = NULL;
    PyObject *tmp_and_60__value_1 = NULL;
    PyObject *tmp_and_60__value_2 = NULL;
    PyObject *tmp_and_61__value_1 = NULL;
    PyObject *tmp_and_61__value_2 = NULL;
    PyObject *tmp_and_62__value_1 = NULL;
    PyObject *tmp_and_62__value_2 = NULL;
    PyObject *tmp_and_63__value_1 = NULL;
    PyObject *tmp_and_63__value_2 = NULL;
    PyObject *tmp_and_64__value_1 = NULL;
    PyObject *tmp_and_64__value_2 = NULL;
    PyObject *tmp_and_65__value_1 = NULL;
    PyObject *tmp_and_65__value_2 = NULL;
    PyObject *tmp_and_65__value_3 = NULL;
    PyObject *tmp_and_66__value_1 = NULL;
    PyObject *tmp_and_66__value_2 = NULL;
    PyObject *tmp_and_66__value_3 = NULL;
    PyObject *tmp_and_67__value_1 = NULL;
    PyObject *tmp_and_67__value_2 = NULL;
    PyObject *tmp_and_68__value_1 = NULL;
    PyObject *tmp_and_68__value_2 = NULL;
    PyObject *tmp_and_69__value_1 = NULL;
    PyObject *tmp_and_69__value_2 = NULL;
    PyObject *tmp_and_70__value_1 = NULL;
    PyObject *tmp_and_70__value_2 = NULL;
    PyObject *tmp_and_71__value_1 = NULL;
    PyObject *tmp_and_71__value_2 = NULL;
    PyObject *tmp_and_72__value_1 = NULL;
    PyObject *tmp_and_72__value_2 = NULL;
    PyObject *tmp_and_73__value_1 = NULL;
    PyObject *tmp_and_73__value_2 = NULL;
    PyObject *tmp_and_74__value_1 = NULL;
    PyObject *tmp_and_74__value_2 = NULL;
    PyObject *tmp_and_74__value_3 = NULL;
    PyObject *tmp_and_75__value_1 = NULL;
    PyObject *tmp_and_75__value_2 = NULL;
    PyObject *tmp_and_75__value_3 = NULL;
    PyObject *tmp_and_76__value_1 = NULL;
    PyObject *tmp_and_76__value_2 = NULL;
    PyObject *tmp_and_77__value_1 = NULL;
    PyObject *tmp_and_77__value_2 = NULL;
    PyObject *tmp_and_78__value_1 = NULL;
    PyObject *tmp_and_78__value_2 = NULL;
    PyObject *tmp_and_79__value_1 = NULL;
    PyObject *tmp_and_79__value_2 = NULL;
    PyObject *tmp_and_80__value_1 = NULL;
    PyObject *tmp_and_80__value_2 = NULL;
    PyObject *tmp_and_80__value_3 = NULL;
    PyObject *tmp_and_81__value_1 = NULL;
    PyObject *tmp_and_81__value_2 = NULL;
    PyObject *tmp_and_81__value_3 = NULL;
    PyObject *tmp_and_82__value_1 = NULL;
    PyObject *tmp_and_82__value_2 = NULL;
    PyObject *tmp_and_82__value_3 = NULL;
    PyObject *tmp_and_83__value_1 = NULL;
    PyObject *tmp_and_83__value_2 = NULL;
    PyObject *tmp_and_83__value_3 = NULL;
    PyObject *tmp_and_83__value_4 = NULL;
    PyObject *tmp_and_84__value_1 = NULL;
    PyObject *tmp_and_84__value_2 = NULL;
    PyObject *tmp_and_84__value_3 = NULL;
    PyObject *tmp_and_85__value_1 = NULL;
    PyObject *tmp_and_85__value_2 = NULL;
    PyObject *tmp_and_85__value_3 = NULL;
    PyObject *tmp_and_86__value_1 = NULL;
    PyObject *tmp_and_87__value_1 = NULL;
    PyObject *tmp_and_87__value_2 = NULL;
    PyObject *tmp_and_88__value_1 = NULL;
    PyObject *tmp_and_88__value_2 = NULL;
    PyObject *tmp_and_89__value_1 = NULL;
    PyObject *tmp_and_89__value_2 = NULL;
    PyObject *tmp_and_90__value_1 = NULL;
    PyObject *tmp_and_90__value_2 = NULL;
    PyObject *tmp_and_91__value_1 = NULL;
    PyObject *tmp_and_91__value_2 = NULL;
    PyObject *tmp_and_91__value_3 = NULL;
    PyObject *tmp_and_92__value_1 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *tmp_inplace_assign_subscr_1__subscript = NULL;
    PyObject *tmp_and_93__value_1 = NULL;
    PyObject *exception_type, *exception_value;
    PyTracebackObject *exception_tb;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    PyObject *exception_keeper_type_177;
    PyObject *exception_keeper_value_177;
    PyTracebackObject *exception_keeper_tb_177;
    PyObject *exception_keeper_type_178;
    PyObject *exception_keeper_value_178;
    PyTracebackObject *exception_keeper_tb_178;
    PyObject *exception_keeper_type_179;
    PyObject *exception_keeper_value_179;
    PyTracebackObject *exception_keeper_tb_179;
    PyObject *exception_keeper_type_180;
    PyObject *exception_keeper_value_180;
    PyTracebackObject *exception_keeper_tb_180;
    PyObject *exception_keeper_type_181;
    PyObject *exception_keeper_value_181;
    PyTracebackObject *exception_keeper_tb_181;
    PyObject *exception_keeper_type_182;
    PyObject *exception_keeper_value_182;
    PyTracebackObject *exception_keeper_tb_182;
    PyObject *exception_keeper_type_183;
    PyObject *exception_keeper_value_183;
    PyTracebackObject *exception_keeper_tb_183;
    PyObject *exception_keeper_type_184;
    PyObject *exception_keeper_value_184;
    PyTracebackObject *exception_keeper_tb_184;
    PyObject *exception_keeper_type_185;
    PyObject *exception_keeper_value_185;
    PyTracebackObject *exception_keeper_tb_185;
    PyObject *exception_keeper_type_186;
    PyObject *exception_keeper_value_186;
    PyTracebackObject *exception_keeper_tb_186;
    PyObject *exception_keeper_type_187;
    PyObject *exception_keeper_value_187;
    PyTracebackObject *exception_keeper_tb_187;
    PyObject *exception_keeper_type_188;
    PyObject *exception_keeper_value_188;
    PyTracebackObject *exception_keeper_tb_188;
    PyObject *exception_keeper_type_189;
    PyObject *exception_keeper_value_189;
    PyTracebackObject *exception_keeper_tb_189;
    PyObject *exception_keeper_type_190;
    PyObject *exception_keeper_value_190;
    PyTracebackObject *exception_keeper_tb_190;
    PyObject *exception_keeper_type_191;
    PyObject *exception_keeper_value_191;
    PyTracebackObject *exception_keeper_tb_191;
    PyObject *exception_keeper_type_192;
    PyObject *exception_keeper_value_192;
    PyTracebackObject *exception_keeper_tb_192;
    PyObject *exception_keeper_type_193;
    PyObject *exception_keeper_value_193;
    PyTracebackObject *exception_keeper_tb_193;
    PyObject *exception_keeper_type_194;
    PyObject *exception_keeper_value_194;
    PyTracebackObject *exception_keeper_tb_194;
    PyObject *exception_keeper_type_195;
    PyObject *exception_keeper_value_195;
    PyTracebackObject *exception_keeper_tb_195;
    PyObject *exception_keeper_type_196;
    PyObject *exception_keeper_value_196;
    PyTracebackObject *exception_keeper_tb_196;
    PyObject *exception_keeper_type_197;
    PyObject *exception_keeper_value_197;
    PyTracebackObject *exception_keeper_tb_197;
    PyObject *exception_keeper_type_198;
    PyObject *exception_keeper_value_198;
    PyTracebackObject *exception_keeper_tb_198;
    PyObject *exception_keeper_type_199;
    PyObject *exception_keeper_value_199;
    PyTracebackObject *exception_keeper_tb_199;
    PyObject *exception_keeper_type_200;
    PyObject *exception_keeper_value_200;
    PyTracebackObject *exception_keeper_tb_200;
    PyObject *exception_keeper_type_201;
    PyObject *exception_keeper_value_201;
    PyTracebackObject *exception_keeper_tb_201;
    PyObject *exception_keeper_type_202;
    PyObject *exception_keeper_value_202;
    PyTracebackObject *exception_keeper_tb_202;
    PyObject *exception_keeper_type_203;
    PyObject *exception_keeper_value_203;
    PyTracebackObject *exception_keeper_tb_203;
    PyObject *exception_keeper_type_204;
    PyObject *exception_keeper_value_204;
    PyTracebackObject *exception_keeper_tb_204;
    PyObject *exception_keeper_type_205;
    PyObject *exception_keeper_value_205;
    PyTracebackObject *exception_keeper_tb_205;
    PyObject *exception_keeper_type_206;
    PyObject *exception_keeper_value_206;
    PyTracebackObject *exception_keeper_tb_206;
    PyObject *exception_keeper_type_207;
    PyObject *exception_keeper_value_207;
    PyTracebackObject *exception_keeper_tb_207;
    PyObject *exception_keeper_type_208;
    PyObject *exception_keeper_value_208;
    PyTracebackObject *exception_keeper_tb_208;
    PyObject *exception_keeper_type_209;
    PyObject *exception_keeper_value_209;
    PyTracebackObject *exception_keeper_tb_209;
    PyObject *exception_keeper_type_210;
    PyObject *exception_keeper_value_210;
    PyTracebackObject *exception_keeper_tb_210;
    PyObject *exception_keeper_type_211;
    PyObject *exception_keeper_value_211;
    PyTracebackObject *exception_keeper_tb_211;
    PyObject *exception_keeper_type_212;
    PyObject *exception_keeper_value_212;
    PyTracebackObject *exception_keeper_tb_212;
    PyObject *exception_keeper_type_213;
    PyObject *exception_keeper_value_213;
    PyTracebackObject *exception_keeper_tb_213;
    PyObject *exception_keeper_type_214;
    PyObject *exception_keeper_value_214;
    PyTracebackObject *exception_keeper_tb_214;
    PyObject *exception_keeper_type_215;
    PyObject *exception_keeper_value_215;
    PyTracebackObject *exception_keeper_tb_215;
    PyObject *exception_keeper_type_216;
    PyObject *exception_keeper_value_216;
    PyTracebackObject *exception_keeper_tb_216;
    PyObject *exception_keeper_type_217;
    PyObject *exception_keeper_value_217;
    PyTracebackObject *exception_keeper_tb_217;
    PyObject *exception_keeper_type_218;
    PyObject *exception_keeper_value_218;
    PyTracebackObject *exception_keeper_tb_218;
    PyObject *exception_keeper_type_219;
    PyObject *exception_keeper_value_219;
    PyTracebackObject *exception_keeper_tb_219;
    PyObject *exception_keeper_type_220;
    PyObject *exception_keeper_value_220;
    PyTracebackObject *exception_keeper_tb_220;
    PyObject *exception_keeper_type_221;
    PyObject *exception_keeper_value_221;
    PyTracebackObject *exception_keeper_tb_221;
    PyObject *exception_keeper_type_222;
    PyObject *exception_keeper_value_222;
    PyTracebackObject *exception_keeper_tb_222;
    PyObject *exception_keeper_type_223;
    PyObject *exception_keeper_value_223;
    PyTracebackObject *exception_keeper_tb_223;
    PyObject *exception_keeper_type_224;
    PyObject *exception_keeper_value_224;
    PyTracebackObject *exception_keeper_tb_224;
    PyObject *exception_keeper_type_225;
    PyObject *exception_keeper_value_225;
    PyTracebackObject *exception_keeper_tb_225;
    PyObject *exception_keeper_type_226;
    PyObject *exception_keeper_value_226;
    PyTracebackObject *exception_keeper_tb_226;
    PyObject *exception_keeper_type_227;
    PyObject *exception_keeper_value_227;
    PyTracebackObject *exception_keeper_tb_227;
    PyObject *exception_keeper_type_228;
    PyObject *exception_keeper_value_228;
    PyTracebackObject *exception_keeper_tb_228;
    PyObject *exception_keeper_type_229;
    PyObject *exception_keeper_value_229;
    PyTracebackObject *exception_keeper_tb_229;
    PyObject *exception_keeper_type_230;
    PyObject *exception_keeper_value_230;
    PyTracebackObject *exception_keeper_tb_230;
    PyObject *exception_keeper_type_231;
    PyObject *exception_keeper_value_231;
    PyTracebackObject *exception_keeper_tb_231;
    PyObject *exception_keeper_type_232;
    PyObject *exception_keeper_value_232;
    PyTracebackObject *exception_keeper_tb_232;
    PyObject *exception_keeper_type_233;
    PyObject *exception_keeper_value_233;
    PyTracebackObject *exception_keeper_tb_233;
    PyObject *exception_keeper_type_234;
    PyObject *exception_keeper_value_234;
    PyTracebackObject *exception_keeper_tb_234;
    PyObject *exception_keeper_type_235;
    PyObject *exception_keeper_value_235;
    PyTracebackObject *exception_keeper_tb_235;
    PyObject *exception_keeper_type_236;
    PyObject *exception_keeper_value_236;
    PyTracebackObject *exception_keeper_tb_236;
    PyObject *exception_keeper_type_237;
    PyObject *exception_keeper_value_237;
    PyTracebackObject *exception_keeper_tb_237;
    PyObject *exception_keeper_type_238;
    PyObject *exception_keeper_value_238;
    PyTracebackObject *exception_keeper_tb_238;
    PyObject *exception_keeper_type_239;
    PyObject *exception_keeper_value_239;
    PyTracebackObject *exception_keeper_tb_239;
    PyObject *exception_keeper_type_240;
    PyObject *exception_keeper_value_240;
    PyTracebackObject *exception_keeper_tb_240;
    PyObject *exception_keeper_type_241;
    PyObject *exception_keeper_value_241;
    PyTracebackObject *exception_keeper_tb_241;
    PyObject *exception_keeper_type_242;
    PyObject *exception_keeper_value_242;
    PyTracebackObject *exception_keeper_tb_242;
    PyObject *exception_keeper_type_243;
    PyObject *exception_keeper_value_243;
    PyTracebackObject *exception_keeper_tb_243;
    PyObject *exception_keeper_type_244;
    PyObject *exception_keeper_value_244;
    PyTracebackObject *exception_keeper_tb_244;
    PyObject *exception_keeper_type_245;
    PyObject *exception_keeper_value_245;
    PyTracebackObject *exception_keeper_tb_245;
    PyObject *exception_keeper_type_246;
    PyObject *exception_keeper_value_246;
    PyTracebackObject *exception_keeper_tb_246;
    PyObject *exception_keeper_type_247;
    PyObject *exception_keeper_value_247;
    PyTracebackObject *exception_keeper_tb_247;
    PyObject *exception_keeper_type_248;
    PyObject *exception_keeper_value_248;
    PyTracebackObject *exception_keeper_tb_248;
    PyObject *exception_keeper_type_249;
    PyObject *exception_keeper_value_249;
    PyTracebackObject *exception_keeper_tb_249;
    PyObject *exception_keeper_type_250;
    PyObject *exception_keeper_value_250;
    PyTracebackObject *exception_keeper_tb_250;
    PyObject *exception_keeper_type_251;
    PyObject *exception_keeper_value_251;
    PyTracebackObject *exception_keeper_tb_251;
    PyObject *exception_keeper_type_252;
    PyObject *exception_keeper_value_252;
    PyTracebackObject *exception_keeper_tb_252;
    PyObject *exception_keeper_type_253;
    PyObject *exception_keeper_value_253;
    PyTracebackObject *exception_keeper_tb_253;
    PyObject *exception_keeper_type_254;
    PyObject *exception_keeper_value_254;
    PyTracebackObject *exception_keeper_tb_254;
    PyObject *exception_keeper_type_255;
    PyObject *exception_keeper_value_255;
    PyTracebackObject *exception_keeper_tb_255;
    PyObject *exception_keeper_type_256;
    PyObject *exception_keeper_value_256;
    PyTracebackObject *exception_keeper_tb_256;
    PyObject *exception_keeper_type_257;
    PyObject *exception_keeper_value_257;
    PyTracebackObject *exception_keeper_tb_257;
    PyObject *exception_keeper_type_258;
    PyObject *exception_keeper_value_258;
    PyTracebackObject *exception_keeper_tb_258;
    PyObject *exception_keeper_type_259;
    PyObject *exception_keeper_value_259;
    PyTracebackObject *exception_keeper_tb_259;
    PyObject *exception_keeper_type_260;
    PyObject *exception_keeper_value_260;
    PyTracebackObject *exception_keeper_tb_260;
    PyObject *exception_keeper_type_261;
    PyObject *exception_keeper_value_261;
    PyTracebackObject *exception_keeper_tb_261;
    PyObject *exception_keeper_type_262;
    PyObject *exception_keeper_value_262;
    PyTracebackObject *exception_keeper_tb_262;
    PyObject *exception_keeper_type_263;
    PyObject *exception_keeper_value_263;
    PyTracebackObject *exception_keeper_tb_263;
    PyObject *exception_keeper_type_264;
    PyObject *exception_keeper_value_264;
    PyTracebackObject *exception_keeper_tb_264;
    PyObject *exception_keeper_type_265;
    PyObject *exception_keeper_value_265;
    PyTracebackObject *exception_keeper_tb_265;
    PyObject *exception_keeper_type_266;
    PyObject *exception_keeper_value_266;
    PyTracebackObject *exception_keeper_tb_266;
    PyObject *exception_keeper_type_267;
    PyObject *exception_keeper_value_267;
    PyTracebackObject *exception_keeper_tb_267;
    PyObject *exception_keeper_type_268;
    PyObject *exception_keeper_value_268;
    PyTracebackObject *exception_keeper_tb_268;
    PyObject *exception_keeper_type_269;
    PyObject *exception_keeper_value_269;
    PyTracebackObject *exception_keeper_tb_269;
    PyObject *exception_keeper_type_270;
    PyObject *exception_keeper_value_270;
    PyTracebackObject *exception_keeper_tb_270;
    PyObject *exception_keeper_type_271;
    PyObject *exception_keeper_value_271;
    PyTracebackObject *exception_keeper_tb_271;
    PyObject *exception_keeper_type_272;
    PyObject *exception_keeper_value_272;
    PyTracebackObject *exception_keeper_tb_272;
    PyObject *exception_keeper_type_273;
    PyObject *exception_keeper_value_273;
    PyTracebackObject *exception_keeper_tb_273;
    PyObject *exception_keeper_type_274;
    PyObject *exception_keeper_value_274;
    PyTracebackObject *exception_keeper_tb_274;
    PyObject *exception_keeper_type_275;
    PyObject *exception_keeper_value_275;
    PyTracebackObject *exception_keeper_tb_275;
    PyObject *exception_keeper_type_276;
    PyObject *exception_keeper_value_276;
    PyTracebackObject *exception_keeper_tb_276;
    PyObject *exception_keeper_type_277;
    PyObject *exception_keeper_value_277;
    PyTracebackObject *exception_keeper_tb_277;
    PyObject *exception_keeper_type_278;
    PyObject *exception_keeper_value_278;
    PyTracebackObject *exception_keeper_tb_278;
    PyObject *exception_keeper_type_279;
    PyObject *exception_keeper_value_279;
    PyTracebackObject *exception_keeper_tb_279;
    PyObject *exception_keeper_type_280;
    PyObject *exception_keeper_value_280;
    PyTracebackObject *exception_keeper_tb_280;
    PyObject *exception_keeper_type_281;
    PyObject *exception_keeper_value_281;
    PyTracebackObject *exception_keeper_tb_281;
    PyObject *exception_keeper_type_282;
    PyObject *exception_keeper_value_282;
    PyTracebackObject *exception_keeper_tb_282;
    PyObject *exception_keeper_type_283;
    PyObject *exception_keeper_value_283;
    PyTracebackObject *exception_keeper_tb_283;
    PyObject *exception_keeper_type_284;
    PyObject *exception_keeper_value_284;
    PyTracebackObject *exception_keeper_tb_284;
    PyObject *exception_keeper_type_285;
    PyObject *exception_keeper_value_285;
    PyTracebackObject *exception_keeper_tb_285;
    PyObject *exception_keeper_type_286;
    PyObject *exception_keeper_value_286;
    PyTracebackObject *exception_keeper_tb_286;
    PyObject *exception_keeper_type_287;
    PyObject *exception_keeper_value_287;
    PyTracebackObject *exception_keeper_tb_287;
    PyObject *exception_keeper_type_288;
    PyObject *exception_keeper_value_288;
    PyTracebackObject *exception_keeper_tb_288;
    PyObject *exception_keeper_type_289;
    PyObject *exception_keeper_value_289;
    PyTracebackObject *exception_keeper_tb_289;
    PyObject *exception_keeper_type_290;
    PyObject *exception_keeper_value_290;
    PyTracebackObject *exception_keeper_tb_290;
    PyObject *exception_keeper_type_291;
    PyObject *exception_keeper_value_291;
    PyTracebackObject *exception_keeper_tb_291;
    PyObject *exception_keeper_type_292;
    PyObject *exception_keeper_value_292;
    PyTracebackObject *exception_keeper_tb_292;
    PyObject *exception_keeper_type_293;
    PyObject *exception_keeper_value_293;
    PyTracebackObject *exception_keeper_tb_293;
    PyObject *exception_keeper_type_294;
    PyObject *exception_keeper_value_294;
    PyTracebackObject *exception_keeper_tb_294;
    PyObject *exception_keeper_type_295;
    PyObject *exception_keeper_value_295;
    PyTracebackObject *exception_keeper_tb_295;
    PyObject *exception_keeper_type_296;
    PyObject *exception_keeper_value_296;
    PyTracebackObject *exception_keeper_tb_296;
    PyObject *exception_keeper_type_297;
    PyObject *exception_keeper_value_297;
    PyTracebackObject *exception_keeper_tb_297;
    PyObject *exception_keeper_type_298;
    PyObject *exception_keeper_value_298;
    PyTracebackObject *exception_keeper_tb_298;
    PyObject *exception_keeper_type_299;
    PyObject *exception_keeper_value_299;
    PyTracebackObject *exception_keeper_tb_299;
    PyObject *exception_keeper_type_300;
    PyObject *exception_keeper_value_300;
    PyTracebackObject *exception_keeper_tb_300;
    PyObject *exception_keeper_type_301;
    PyObject *exception_keeper_value_301;
    PyTracebackObject *exception_keeper_tb_301;
    PyObject *exception_keeper_type_302;
    PyObject *exception_keeper_value_302;
    PyTracebackObject *exception_keeper_tb_302;
    PyObject *exception_keeper_type_303;
    PyObject *exception_keeper_value_303;
    PyTracebackObject *exception_keeper_tb_303;
    PyObject *exception_keeper_type_304;
    PyObject *exception_keeper_value_304;
    PyTracebackObject *exception_keeper_tb_304;
    PyObject *exception_keeper_type_305;
    PyObject *exception_keeper_value_305;
    PyTracebackObject *exception_keeper_tb_305;
    PyObject *exception_keeper_type_306;
    PyObject *exception_keeper_value_306;
    PyTracebackObject *exception_keeper_tb_306;
    PyObject *exception_keeper_type_307;
    PyObject *exception_keeper_value_307;
    PyTracebackObject *exception_keeper_tb_307;
    PyObject *exception_keeper_type_308;
    PyObject *exception_keeper_value_308;
    PyTracebackObject *exception_keeper_tb_308;
    PyObject *exception_keeper_type_309;
    PyObject *exception_keeper_value_309;
    PyTracebackObject *exception_keeper_tb_309;
    PyObject *exception_keeper_type_310;
    PyObject *exception_keeper_value_310;
    PyTracebackObject *exception_keeper_tb_310;
    PyObject *exception_keeper_type_311;
    PyObject *exception_keeper_value_311;
    PyTracebackObject *exception_keeper_tb_311;
    PyObject *exception_keeper_type_312;
    PyObject *exception_keeper_value_312;
    PyTracebackObject *exception_keeper_tb_312;
    PyObject *exception_keeper_type_313;
    PyObject *exception_keeper_value_313;
    PyTracebackObject *exception_keeper_tb_313;
    PyObject *exception_keeper_type_314;
    PyObject *exception_keeper_value_314;
    PyTracebackObject *exception_keeper_tb_314;
    PyObject *exception_keeper_type_315;
    PyObject *exception_keeper_value_315;
    PyTracebackObject *exception_keeper_tb_315;
    PyObject *exception_keeper_type_316;
    PyObject *exception_keeper_value_316;
    PyTracebackObject *exception_keeper_tb_316;
    PyObject *exception_keeper_type_317;
    PyObject *exception_keeper_value_317;
    PyTracebackObject *exception_keeper_tb_317;
    PyObject *exception_keeper_type_318;
    PyObject *exception_keeper_value_318;
    PyTracebackObject *exception_keeper_tb_318;
    PyObject *exception_keeper_type_319;
    PyObject *exception_keeper_value_319;
    PyTracebackObject *exception_keeper_tb_319;
    PyObject *exception_keeper_type_320;
    PyObject *exception_keeper_value_320;
    PyTracebackObject *exception_keeper_tb_320;
    PyObject *exception_keeper_type_321;
    PyObject *exception_keeper_value_321;
    PyTracebackObject *exception_keeper_tb_321;
    PyObject *exception_keeper_type_322;
    PyObject *exception_keeper_value_322;
    PyTracebackObject *exception_keeper_tb_322;
    PyObject *exception_keeper_type_323;
    PyObject *exception_keeper_value_323;
    PyTracebackObject *exception_keeper_tb_323;
    PyObject *exception_keeper_type_324;
    PyObject *exception_keeper_value_324;
    PyTracebackObject *exception_keeper_tb_324;
    PyObject *exception_keeper_type_325;
    PyObject *exception_keeper_value_325;
    PyTracebackObject *exception_keeper_tb_325;
    PyObject *exception_keeper_type_326;
    PyObject *exception_keeper_value_326;
    PyTracebackObject *exception_keeper_tb_326;
    PyObject *exception_keeper_type_327;
    PyObject *exception_keeper_value_327;
    PyTracebackObject *exception_keeper_tb_327;
    PyObject *exception_keeper_type_328;
    PyObject *exception_keeper_value_328;
    PyTracebackObject *exception_keeper_tb_328;
    PyObject *exception_keeper_type_329;
    PyObject *exception_keeper_value_329;
    PyTracebackObject *exception_keeper_tb_329;
    PyObject *exception_keeper_type_330;
    PyObject *exception_keeper_value_330;
    PyTracebackObject *exception_keeper_tb_330;
    PyObject *exception_keeper_type_331;
    PyObject *exception_keeper_value_331;
    PyTracebackObject *exception_keeper_tb_331;
    PyObject *exception_keeper_type_332;
    PyObject *exception_keeper_value_332;
    PyTracebackObject *exception_keeper_tb_332;
    PyObject *exception_keeper_type_333;
    PyObject *exception_keeper_value_333;
    PyTracebackObject *exception_keeper_tb_333;
    PyObject *exception_keeper_type_334;
    PyObject *exception_keeper_value_334;
    PyTracebackObject *exception_keeper_tb_334;
    PyObject *exception_keeper_type_335;
    PyObject *exception_keeper_value_335;
    PyTracebackObject *exception_keeper_tb_335;
    PyObject *exception_keeper_type_336;
    PyObject *exception_keeper_value_336;
    PyTracebackObject *exception_keeper_tb_336;
    PyObject *exception_keeper_type_337;
    PyObject *exception_keeper_value_337;
    PyTracebackObject *exception_keeper_tb_337;
    PyObject *exception_keeper_type_338;
    PyObject *exception_keeper_value_338;
    PyTracebackObject *exception_keeper_tb_338;
    PyObject *exception_keeper_type_339;
    PyObject *exception_keeper_value_339;
    PyTracebackObject *exception_keeper_tb_339;
    PyObject *exception_keeper_type_340;
    PyObject *exception_keeper_value_340;
    PyTracebackObject *exception_keeper_tb_340;
    PyObject *exception_keeper_type_341;
    PyObject *exception_keeper_value_341;
    PyTracebackObject *exception_keeper_tb_341;
    PyObject *exception_keeper_type_342;
    PyObject *exception_keeper_value_342;
    PyTracebackObject *exception_keeper_tb_342;
    PyObject *exception_keeper_type_343;
    PyObject *exception_keeper_value_343;
    PyTracebackObject *exception_keeper_tb_343;
    PyObject *exception_keeper_type_344;
    PyObject *exception_keeper_value_344;
    PyTracebackObject *exception_keeper_tb_344;
    PyObject *exception_keeper_type_345;
    PyObject *exception_keeper_value_345;
    PyTracebackObject *exception_keeper_tb_345;
    PyObject *exception_keeper_type_346;
    PyObject *exception_keeper_value_346;
    PyTracebackObject *exception_keeper_tb_346;
    PyObject *exception_keeper_type_347;
    PyObject *exception_keeper_value_347;
    PyTracebackObject *exception_keeper_tb_347;
    PyObject *exception_keeper_type_348;
    PyObject *exception_keeper_value_348;
    PyTracebackObject *exception_keeper_tb_348;
    PyObject *exception_keeper_type_349;
    PyObject *exception_keeper_value_349;
    PyTracebackObject *exception_keeper_tb_349;
    PyObject *exception_keeper_type_350;
    PyObject *exception_keeper_value_350;
    PyTracebackObject *exception_keeper_tb_350;
    PyObject *exception_keeper_type_351;
    PyObject *exception_keeper_value_351;
    PyTracebackObject *exception_keeper_tb_351;
    PyObject *exception_keeper_type_352;
    PyObject *exception_keeper_value_352;
    PyTracebackObject *exception_keeper_tb_352;
    PyObject *exception_keeper_type_353;
    PyObject *exception_keeper_value_353;
    PyTracebackObject *exception_keeper_tb_353;
    PyObject *exception_keeper_type_354;
    PyObject *exception_keeper_value_354;
    PyTracebackObject *exception_keeper_tb_354;
    PyObject *exception_keeper_type_355;
    PyObject *exception_keeper_value_355;
    PyTracebackObject *exception_keeper_tb_355;
    PyObject *exception_keeper_type_356;
    PyObject *exception_keeper_value_356;
    PyTracebackObject *exception_keeper_tb_356;
    PyObject *exception_keeper_type_357;
    PyObject *exception_keeper_value_357;
    PyTracebackObject *exception_keeper_tb_357;
    PyObject *exception_keeper_type_358;
    PyObject *exception_keeper_value_358;
    PyTracebackObject *exception_keeper_tb_358;
    PyObject *exception_keeper_type_359;
    PyObject *exception_keeper_value_359;
    PyTracebackObject *exception_keeper_tb_359;
    PyObject *exception_keeper_type_360;
    PyObject *exception_keeper_value_360;
    PyTracebackObject *exception_keeper_tb_360;
    PyObject *exception_keeper_type_361;
    PyObject *exception_keeper_value_361;
    PyTracebackObject *exception_keeper_tb_361;
    PyObject *exception_keeper_type_362;
    PyObject *exception_keeper_value_362;
    PyTracebackObject *exception_keeper_tb_362;
    PyObject *exception_keeper_type_363;
    PyObject *exception_keeper_value_363;
    PyTracebackObject *exception_keeper_tb_363;
    PyObject *exception_keeper_type_364;
    PyObject *exception_keeper_value_364;
    PyTracebackObject *exception_keeper_tb_364;
    PyObject *exception_keeper_type_365;
    PyObject *exception_keeper_value_365;
    PyTracebackObject *exception_keeper_tb_365;
    PyObject *exception_keeper_type_366;
    PyObject *exception_keeper_value_366;
    PyTracebackObject *exception_keeper_tb_366;
    PyObject *exception_keeper_type_367;
    PyObject *exception_keeper_value_367;
    PyTracebackObject *exception_keeper_tb_367;
    PyObject *exception_keeper_type_368;
    PyObject *exception_keeper_value_368;
    PyTracebackObject *exception_keeper_tb_368;
    PyObject *exception_keeper_type_369;
    PyObject *exception_keeper_value_369;
    PyTracebackObject *exception_keeper_tb_369;
    PyObject *exception_keeper_type_370;
    PyObject *exception_keeper_value_370;
    PyTracebackObject *exception_keeper_tb_370;
    PyObject *exception_keeper_type_371;
    PyObject *exception_keeper_value_371;
    PyTracebackObject *exception_keeper_tb_371;
    PyObject *exception_keeper_type_372;
    PyObject *exception_keeper_value_372;
    PyTracebackObject *exception_keeper_tb_372;
    PyObject *exception_keeper_type_373;
    PyObject *exception_keeper_value_373;
    PyTracebackObject *exception_keeper_tb_373;
    PyObject *exception_keeper_type_374;
    PyObject *exception_keeper_value_374;
    PyTracebackObject *exception_keeper_tb_374;
    PyObject *exception_keeper_type_375;
    PyObject *exception_keeper_value_375;
    PyTracebackObject *exception_keeper_tb_375;
    PyObject *exception_keeper_type_376;
    PyObject *exception_keeper_value_376;
    PyTracebackObject *exception_keeper_tb_376;
    PyObject *exception_keeper_type_377;
    PyObject *exception_keeper_value_377;
    PyTracebackObject *exception_keeper_tb_377;
    PyObject *exception_keeper_type_378;
    PyObject *exception_keeper_value_378;
    PyTracebackObject *exception_keeper_tb_378;
    PyObject *exception_keeper_type_379;
    PyObject *exception_keeper_value_379;
    PyTracebackObject *exception_keeper_tb_379;
    PyObject *exception_keeper_type_380;
    PyObject *exception_keeper_value_380;
    PyTracebackObject *exception_keeper_tb_380;
    PyObject *exception_keeper_type_381;
    PyObject *exception_keeper_value_381;
    PyTracebackObject *exception_keeper_tb_381;
    PyObject *exception_keeper_type_382;
    PyObject *exception_keeper_value_382;
    PyTracebackObject *exception_keeper_tb_382;
    PyObject *exception_keeper_type_383;
    PyObject *exception_keeper_value_383;
    PyTracebackObject *exception_keeper_tb_383;
    PyObject *exception_keeper_type_384;
    PyObject *exception_keeper_value_384;
    PyTracebackObject *exception_keeper_tb_384;
    PyObject *exception_keeper_type_385;
    PyObject *exception_keeper_value_385;
    PyTracebackObject *exception_keeper_tb_385;
    PyObject *exception_keeper_type_386;
    PyObject *exception_keeper_value_386;
    PyTracebackObject *exception_keeper_tb_386;
    PyObject *exception_keeper_type_387;
    PyObject *exception_keeper_value_387;
    PyTracebackObject *exception_keeper_tb_387;
    PyObject *exception_keeper_type_388;
    PyObject *exception_keeper_value_388;
    PyTracebackObject *exception_keeper_tb_388;
    PyObject *exception_keeper_type_389;
    PyObject *exception_keeper_value_389;
    PyTracebackObject *exception_keeper_tb_389;
    PyObject *exception_keeper_type_390;
    PyObject *exception_keeper_value_390;
    PyTracebackObject *exception_keeper_tb_390;
    PyObject *exception_keeper_type_391;
    PyObject *exception_keeper_value_391;
    PyTracebackObject *exception_keeper_tb_391;
    PyObject *exception_keeper_type_392;
    PyObject *exception_keeper_value_392;
    PyTracebackObject *exception_keeper_tb_392;
    PyObject *exception_keeper_type_393;
    PyObject *exception_keeper_value_393;
    PyTracebackObject *exception_keeper_tb_393;
    PyObject *exception_keeper_type_394;
    PyObject *exception_keeper_value_394;
    PyTracebackObject *exception_keeper_tb_394;
    PyObject *exception_keeper_type_395;
    PyObject *exception_keeper_value_395;
    PyTracebackObject *exception_keeper_tb_395;
    PyObject *exception_keeper_type_396;
    PyObject *exception_keeper_value_396;
    PyTracebackObject *exception_keeper_tb_396;
    PyObject *exception_keeper_type_397;
    PyObject *exception_keeper_value_397;
    PyTracebackObject *exception_keeper_tb_397;
    PyObject *exception_keeper_type_398;
    PyObject *exception_keeper_value_398;
    PyTracebackObject *exception_keeper_tb_398;
    PyObject *exception_keeper_type_399;
    PyObject *exception_keeper_value_399;
    PyTracebackObject *exception_keeper_tb_399;
    PyObject *exception_keeper_type_400;
    PyObject *exception_keeper_value_400;
    PyTracebackObject *exception_keeper_tb_400;
    PyObject *exception_keeper_type_401;
    PyObject *exception_keeper_value_401;
    PyTracebackObject *exception_keeper_tb_401;
    PyObject *exception_keeper_type_402;
    PyObject *exception_keeper_value_402;
    PyTracebackObject *exception_keeper_tb_402;
    PyObject *exception_keeper_type_403;
    PyObject *exception_keeper_value_403;
    PyTracebackObject *exception_keeper_tb_403;
    PyObject *exception_keeper_type_404;
    PyObject *exception_keeper_value_404;
    PyTracebackObject *exception_keeper_tb_404;
    PyObject *exception_keeper_type_405;
    PyObject *exception_keeper_value_405;
    PyTracebackObject *exception_keeper_tb_405;
    PyObject *exception_keeper_type_406;
    PyObject *exception_keeper_value_406;
    PyTracebackObject *exception_keeper_tb_406;
    PyObject *exception_keeper_type_407;
    PyObject *exception_keeper_value_407;
    PyTracebackObject *exception_keeper_tb_407;
    PyObject *exception_keeper_type_408;
    PyObject *exception_keeper_value_408;
    PyTracebackObject *exception_keeper_tb_408;
    PyObject *exception_keeper_type_409;
    PyObject *exception_keeper_value_409;
    PyTracebackObject *exception_keeper_tb_409;
    PyObject *exception_keeper_type_410;
    PyObject *exception_keeper_value_410;
    PyTracebackObject *exception_keeper_tb_410;
    PyObject *exception_keeper_type_411;
    PyObject *exception_keeper_value_411;
    PyTracebackObject *exception_keeper_tb_411;
    PyObject *exception_keeper_type_412;
    PyObject *exception_keeper_value_412;
    PyTracebackObject *exception_keeper_tb_412;
    PyObject *exception_keeper_type_413;
    PyObject *exception_keeper_value_413;
    PyTracebackObject *exception_keeper_tb_413;
    PyObject *exception_keeper_type_414;
    PyObject *exception_keeper_value_414;
    PyTracebackObject *exception_keeper_tb_414;
    PyObject *exception_keeper_type_415;
    PyObject *exception_keeper_value_415;
    PyTracebackObject *exception_keeper_tb_415;
    PyObject *exception_keeper_type_416;
    PyObject *exception_keeper_value_416;
    PyTracebackObject *exception_keeper_tb_416;
    PyObject *exception_keeper_type_417;
    PyObject *exception_keeper_value_417;
    PyTracebackObject *exception_keeper_tb_417;
    PyObject *exception_keeper_type_418;
    PyObject *exception_keeper_value_418;
    PyTracebackObject *exception_keeper_tb_418;
    PyObject *exception_keeper_type_419;
    PyObject *exception_keeper_value_419;
    PyTracebackObject *exception_keeper_tb_419;
    PyObject *exception_keeper_type_420;
    PyObject *exception_keeper_value_420;
    PyTracebackObject *exception_keeper_tb_420;
    PyObject *exception_keeper_type_421;
    PyObject *exception_keeper_value_421;
    PyTracebackObject *exception_keeper_tb_421;
    PyObject *exception_keeper_type_422;
    PyObject *exception_keeper_value_422;
    PyTracebackObject *exception_keeper_tb_422;
    PyObject *exception_keeper_type_423;
    PyObject *exception_keeper_value_423;
    PyTracebackObject *exception_keeper_tb_423;
    PyObject *exception_keeper_type_424;
    PyObject *exception_keeper_value_424;
    PyTracebackObject *exception_keeper_tb_424;
    PyObject *exception_keeper_type_425;
    PyObject *exception_keeper_value_425;
    PyTracebackObject *exception_keeper_tb_425;
    PyObject *exception_keeper_type_426;
    PyObject *exception_keeper_value_426;
    PyTracebackObject *exception_keeper_tb_426;
    PyObject *exception_keeper_type_427;
    PyObject *exception_keeper_value_427;
    PyTracebackObject *exception_keeper_tb_427;
    PyObject *exception_keeper_type_428;
    PyObject *exception_keeper_value_428;
    PyTracebackObject *exception_keeper_tb_428;
    PyObject *exception_keeper_type_429;
    PyObject *exception_keeper_value_429;
    PyTracebackObject *exception_keeper_tb_429;
    PyObject *exception_keeper_type_430;
    PyObject *exception_keeper_value_430;
    PyTracebackObject *exception_keeper_tb_430;
    PyObject *exception_keeper_type_431;
    PyObject *exception_keeper_value_431;
    PyTracebackObject *exception_keeper_tb_431;
    PyObject *exception_keeper_type_432;
    PyObject *exception_keeper_value_432;
    PyTracebackObject *exception_keeper_tb_432;
    PyObject *exception_keeper_type_433;
    PyObject *exception_keeper_value_433;
    PyTracebackObject *exception_keeper_tb_433;
    PyObject *exception_keeper_type_434;
    PyObject *exception_keeper_value_434;
    PyTracebackObject *exception_keeper_tb_434;
    PyObject *exception_keeper_type_435;
    PyObject *exception_keeper_value_435;
    PyTracebackObject *exception_keeper_tb_435;
    PyObject *exception_keeper_type_436;
    PyObject *exception_keeper_value_436;
    PyTracebackObject *exception_keeper_tb_436;
    PyObject *exception_keeper_type_437;
    PyObject *exception_keeper_value_437;
    PyTracebackObject *exception_keeper_tb_437;
    PyObject *exception_keeper_type_438;
    PyObject *exception_keeper_value_438;
    PyTracebackObject *exception_keeper_tb_438;
    PyObject *exception_keeper_type_439;
    PyObject *exception_keeper_value_439;
    PyTracebackObject *exception_keeper_tb_439;
    PyObject *exception_keeper_type_440;
    PyObject *exception_keeper_value_440;
    PyTracebackObject *exception_keeper_tb_440;
    PyObject *exception_keeper_type_441;
    PyObject *exception_keeper_value_441;
    PyTracebackObject *exception_keeper_tb_441;
    PyObject *exception_keeper_type_442;
    PyObject *exception_keeper_value_442;
    PyTracebackObject *exception_keeper_tb_442;
    PyObject *exception_keeper_type_443;
    PyObject *exception_keeper_value_443;
    PyTracebackObject *exception_keeper_tb_443;
    PyObject *exception_keeper_type_444;
    PyObject *exception_keeper_value_444;
    PyTracebackObject *exception_keeper_tb_444;
    PyObject *exception_keeper_type_445;
    PyObject *exception_keeper_value_445;
    PyTracebackObject *exception_keeper_tb_445;
    PyObject *exception_keeper_type_446;
    PyObject *exception_keeper_value_446;
    PyTracebackObject *exception_keeper_tb_446;
    PyObject *exception_keeper_type_447;
    PyObject *exception_keeper_value_447;
    PyTracebackObject *exception_keeper_tb_447;
    PyObject *exception_keeper_type_448;
    PyObject *exception_keeper_value_448;
    PyTracebackObject *exception_keeper_tb_448;
    PyObject *exception_keeper_type_449;
    PyObject *exception_keeper_value_449;
    PyTracebackObject *exception_keeper_tb_449;
    PyObject *exception_keeper_type_450;
    PyObject *exception_keeper_value_450;
    PyTracebackObject *exception_keeper_tb_450;
    PyObject *exception_keeper_type_451;
    PyObject *exception_keeper_value_451;
    PyTracebackObject *exception_keeper_tb_451;
    PyObject *exception_keeper_type_452;
    PyObject *exception_keeper_value_452;
    PyTracebackObject *exception_keeper_tb_452;
    PyObject *exception_keeper_type_453;
    PyObject *exception_keeper_value_453;
    PyTracebackObject *exception_keeper_tb_453;
    PyObject *exception_keeper_type_454;
    PyObject *exception_keeper_value_454;
    PyTracebackObject *exception_keeper_tb_454;
    PyObject *exception_keeper_type_455;
    PyObject *exception_keeper_value_455;
    PyTracebackObject *exception_keeper_tb_455;
    PyObject *exception_keeper_type_456;
    PyObject *exception_keeper_value_456;
    PyTracebackObject *exception_keeper_tb_456;
    PyObject *exception_keeper_type_457;
    PyObject *exception_keeper_value_457;
    PyTracebackObject *exception_keeper_tb_457;
    PyObject *exception_keeper_type_458;
    PyObject *exception_keeper_value_458;
    PyTracebackObject *exception_keeper_tb_458;
    PyObject *exception_keeper_type_459;
    PyObject *exception_keeper_value_459;
    PyTracebackObject *exception_keeper_tb_459;
    PyObject *exception_keeper_type_460;
    PyObject *exception_keeper_value_460;
    PyTracebackObject *exception_keeper_tb_460;
    PyObject *exception_keeper_type_461;
    PyObject *exception_keeper_value_461;
    PyTracebackObject *exception_keeper_tb_461;
    PyObject *exception_keeper_type_462;
    PyObject *exception_keeper_value_462;
    PyTracebackObject *exception_keeper_tb_462;
    PyObject *exception_keeper_type_463;
    PyObject *exception_keeper_value_463;
    PyTracebackObject *exception_keeper_tb_463;
    PyObject *exception_keeper_type_464;
    PyObject *exception_keeper_value_464;
    PyTracebackObject *exception_keeper_tb_464;
    PyObject *exception_keeper_type_465;
    PyObject *exception_keeper_value_465;
    PyTracebackObject *exception_keeper_tb_465;
    PyObject *exception_keeper_type_466;
    PyObject *exception_keeper_value_466;
    PyTracebackObject *exception_keeper_tb_466;
    PyObject *exception_keeper_type_467;
    PyObject *exception_keeper_value_467;
    PyTracebackObject *exception_keeper_tb_467;
    PyObject *exception_keeper_type_468;
    PyObject *exception_keeper_value_468;
    PyTracebackObject *exception_keeper_tb_468;
    PyObject *exception_keeper_type_469;
    PyObject *exception_keeper_value_469;
    PyTracebackObject *exception_keeper_tb_469;
    PyObject *exception_keeper_type_470;
    PyObject *exception_keeper_value_470;
    PyTracebackObject *exception_keeper_tb_470;
    PyObject *exception_keeper_type_471;
    PyObject *exception_keeper_value_471;
    PyTracebackObject *exception_keeper_tb_471;
    PyObject *exception_keeper_type_472;
    PyObject *exception_keeper_value_472;
    PyTracebackObject *exception_keeper_tb_472;
    PyObject *exception_keeper_type_473;
    PyObject *exception_keeper_value_473;
    PyTracebackObject *exception_keeper_tb_473;
    PyObject *exception_keeper_type_474;
    PyObject *exception_keeper_value_474;
    PyTracebackObject *exception_keeper_tb_474;
    PyObject *exception_keeper_type_475;
    PyObject *exception_keeper_value_475;
    PyTracebackObject *exception_keeper_tb_475;
    PyObject *exception_keeper_type_476;
    PyObject *exception_keeper_value_476;
    PyTracebackObject *exception_keeper_tb_476;
    PyObject *exception_keeper_type_477;
    PyObject *exception_keeper_value_477;
    PyTracebackObject *exception_keeper_tb_477;
    PyObject *exception_keeper_type_478;
    PyObject *exception_keeper_value_478;
    PyTracebackObject *exception_keeper_tb_478;
    PyObject *exception_keeper_type_479;
    PyObject *exception_keeper_value_479;
    PyTracebackObject *exception_keeper_tb_479;
    PyObject *exception_keeper_type_480;
    PyObject *exception_keeper_value_480;
    PyTracebackObject *exception_keeper_tb_480;
    PyObject *exception_keeper_type_481;
    PyObject *exception_keeper_value_481;
    PyTracebackObject *exception_keeper_tb_481;
    PyObject *exception_keeper_type_482;
    PyObject *exception_keeper_value_482;
    PyTracebackObject *exception_keeper_tb_482;
    PyObject *exception_keeper_type_483;
    PyObject *exception_keeper_value_483;
    PyTracebackObject *exception_keeper_tb_483;
    PyObject *exception_keeper_type_484;
    PyObject *exception_keeper_value_484;
    PyTracebackObject *exception_keeper_tb_484;
    PyObject *exception_keeper_type_485;
    PyObject *exception_keeper_value_485;
    PyTracebackObject *exception_keeper_tb_485;
    PyObject *exception_keeper_type_486;
    PyObject *exception_keeper_value_486;
    PyTracebackObject *exception_keeper_tb_486;
    PyObject *exception_keeper_type_487;
    PyObject *exception_keeper_value_487;
    PyTracebackObject *exception_keeper_tb_487;
    PyObject *exception_keeper_type_488;
    PyObject *exception_keeper_value_488;
    PyTracebackObject *exception_keeper_tb_488;
    PyObject *exception_keeper_type_489;
    PyObject *exception_keeper_value_489;
    PyTracebackObject *exception_keeper_tb_489;
    PyObject *exception_keeper_type_490;
    PyObject *exception_keeper_value_490;
    PyTracebackObject *exception_keeper_tb_490;
    PyObject *exception_keeper_type_491;
    PyObject *exception_keeper_value_491;
    PyTracebackObject *exception_keeper_tb_491;
    PyObject *exception_keeper_type_492;
    PyObject *exception_keeper_value_492;
    PyTracebackObject *exception_keeper_tb_492;
    PyObject *exception_keeper_type_493;
    PyObject *exception_keeper_value_493;
    PyTracebackObject *exception_keeper_tb_493;
    PyObject *exception_keeper_type_494;
    PyObject *exception_keeper_value_494;
    PyTracebackObject *exception_keeper_tb_494;
    PyObject *exception_keeper_type_495;
    PyObject *exception_keeper_value_495;
    PyTracebackObject *exception_keeper_tb_495;
    PyObject *exception_keeper_type_496;
    PyObject *exception_keeper_value_496;
    PyTracebackObject *exception_keeper_tb_496;
    PyObject *exception_keeper_type_497;
    PyObject *exception_keeper_value_497;
    PyTracebackObject *exception_keeper_tb_497;
    PyObject *exception_keeper_type_498;
    PyObject *exception_keeper_value_498;
    PyTracebackObject *exception_keeper_tb_498;
    PyObject *exception_keeper_type_499;
    PyObject *exception_keeper_value_499;
    PyTracebackObject *exception_keeper_tb_499;
    PyObject *exception_keeper_type_500;
    PyObject *exception_keeper_value_500;
    PyTracebackObject *exception_keeper_tb_500;
    PyObject *exception_keeper_type_501;
    PyObject *exception_keeper_value_501;
    PyTracebackObject *exception_keeper_tb_501;
    PyObject *exception_keeper_type_502;
    PyObject *exception_keeper_value_502;
    PyTracebackObject *exception_keeper_tb_502;
    PyObject *exception_keeper_type_503;
    PyObject *exception_keeper_value_503;
    PyTracebackObject *exception_keeper_tb_503;
    PyObject *exception_keeper_type_504;
    PyObject *exception_keeper_value_504;
    PyTracebackObject *exception_keeper_tb_504;
    PyObject *exception_keeper_type_505;
    PyObject *exception_keeper_value_505;
    PyTracebackObject *exception_keeper_tb_505;
    PyObject *exception_keeper_type_506;
    PyObject *exception_keeper_value_506;
    PyTracebackObject *exception_keeper_tb_506;
    PyObject *exception_keeper_type_507;
    PyObject *exception_keeper_value_507;
    PyTracebackObject *exception_keeper_tb_507;
    PyObject *exception_keeper_type_508;
    PyObject *exception_keeper_value_508;
    PyTracebackObject *exception_keeper_tb_508;
    PyObject *exception_keeper_type_509;
    PyObject *exception_keeper_value_509;
    PyTracebackObject *exception_keeper_tb_509;
    PyObject *exception_keeper_type_510;
    PyObject *exception_keeper_value_510;
    PyTracebackObject *exception_keeper_tb_510;
    PyObject *exception_keeper_type_511;
    PyObject *exception_keeper_value_511;
    PyTracebackObject *exception_keeper_tb_511;
    PyObject *exception_keeper_type_512;
    PyObject *exception_keeper_value_512;
    PyTracebackObject *exception_keeper_tb_512;
    PyObject *exception_keeper_type_513;
    PyObject *exception_keeper_value_513;
    PyTracebackObject *exception_keeper_tb_513;
    PyObject *exception_keeper_type_514;
    PyObject *exception_keeper_value_514;
    PyTracebackObject *exception_keeper_tb_514;
    PyObject *exception_keeper_type_515;
    PyObject *exception_keeper_value_515;
    PyTracebackObject *exception_keeper_tb_515;
    PyObject *exception_keeper_type_516;
    PyObject *exception_keeper_value_516;
    PyTracebackObject *exception_keeper_tb_516;
    PyObject *exception_keeper_type_517;
    PyObject *exception_keeper_value_517;
    PyTracebackObject *exception_keeper_tb_517;
    PyObject *exception_keeper_type_518;
    PyObject *exception_keeper_value_518;
    PyTracebackObject *exception_keeper_tb_518;
    PyObject *exception_keeper_type_519;
    PyObject *exception_keeper_value_519;
    PyTracebackObject *exception_keeper_tb_519;
    PyObject *exception_keeper_type_520;
    PyObject *exception_keeper_value_520;
    PyTracebackObject *exception_keeper_tb_520;
    PyObject *exception_keeper_type_521;
    PyObject *exception_keeper_value_521;
    PyTracebackObject *exception_keeper_tb_521;
    PyObject *exception_keeper_type_522;
    PyObject *exception_keeper_value_522;
    PyTracebackObject *exception_keeper_tb_522;
    PyObject *exception_keeper_type_523;
    PyObject *exception_keeper_value_523;
    PyTracebackObject *exception_keeper_tb_523;
    PyObject *exception_keeper_type_524;
    PyObject *exception_keeper_value_524;
    PyTracebackObject *exception_keeper_tb_524;
    PyObject *exception_keeper_type_525;
    PyObject *exception_keeper_value_525;
    PyTracebackObject *exception_keeper_tb_525;
    PyObject *exception_keeper_type_526;
    PyObject *exception_keeper_value_526;
    PyTracebackObject *exception_keeper_tb_526;
    PyObject *exception_keeper_type_527;
    PyObject *exception_keeper_value_527;
    PyTracebackObject *exception_keeper_tb_527;
    PyObject *exception_keeper_type_528;
    PyObject *exception_keeper_value_528;
    PyTracebackObject *exception_keeper_tb_528;
    PyObject *exception_keeper_type_529;
    PyObject *exception_keeper_value_529;
    PyTracebackObject *exception_keeper_tb_529;
    PyObject *exception_keeper_type_530;
    PyObject *exception_keeper_value_530;
    PyTracebackObject *exception_keeper_tb_530;
    PyObject *exception_keeper_type_531;
    PyObject *exception_keeper_value_531;
    PyTracebackObject *exception_keeper_tb_531;
    PyObject *exception_keeper_type_532;
    PyObject *exception_keeper_value_532;
    PyTracebackObject *exception_keeper_tb_532;
    PyObject *exception_keeper_type_533;
    PyObject *exception_keeper_value_533;
    PyTracebackObject *exception_keeper_tb_533;
    PyObject *exception_keeper_type_534;
    PyObject *exception_keeper_value_534;
    PyTracebackObject *exception_keeper_tb_534;
    PyObject *exception_keeper_type_535;
    PyObject *exception_keeper_value_535;
    PyTracebackObject *exception_keeper_tb_535;
    PyObject *exception_keeper_type_536;
    PyObject *exception_keeper_value_536;
    PyTracebackObject *exception_keeper_tb_536;
    PyObject *exception_keeper_type_537;
    PyObject *exception_keeper_value_537;
    PyTracebackObject *exception_keeper_tb_537;
    PyObject *exception_keeper_type_538;
    PyObject *exception_keeper_value_538;
    PyTracebackObject *exception_keeper_tb_538;
    PyObject *exception_keeper_type_539;
    PyObject *exception_keeper_value_539;
    PyTracebackObject *exception_keeper_tb_539;
    PyObject *exception_keeper_type_540;
    PyObject *exception_keeper_value_540;
    PyTracebackObject *exception_keeper_tb_540;
    PyObject *exception_keeper_type_541;
    PyObject *exception_keeper_value_541;
    PyTracebackObject *exception_keeper_tb_541;
    PyObject *exception_keeper_type_542;
    PyObject *exception_keeper_value_542;
    PyTracebackObject *exception_keeper_tb_542;
    PyObject *exception_keeper_type_543;
    PyObject *exception_keeper_value_543;
    PyTracebackObject *exception_keeper_tb_543;
    PyObject *exception_keeper_type_544;
    PyObject *exception_keeper_value_544;
    PyTracebackObject *exception_keeper_tb_544;
    PyObject *exception_keeper_type_545;
    PyObject *exception_keeper_value_545;
    PyTracebackObject *exception_keeper_tb_545;
    PyObject *exception_keeper_type_546;
    PyObject *exception_keeper_value_546;
    PyTracebackObject *exception_keeper_tb_546;
    PyObject *exception_keeper_type_547;
    PyObject *exception_keeper_value_547;
    PyTracebackObject *exception_keeper_tb_547;
    PyObject *exception_keeper_type_548;
    PyObject *exception_keeper_value_548;
    PyTracebackObject *exception_keeper_tb_548;
    PyObject *exception_keeper_type_549;
    PyObject *exception_keeper_value_549;
    PyTracebackObject *exception_keeper_tb_549;
    PyObject *exception_keeper_type_550;
    PyObject *exception_keeper_value_550;
    PyTracebackObject *exception_keeper_tb_550;
    PyObject *exception_keeper_type_551;
    PyObject *exception_keeper_value_551;
    PyTracebackObject *exception_keeper_tb_551;
    PyObject *exception_keeper_type_552;
    PyObject *exception_keeper_value_552;
    PyTracebackObject *exception_keeper_tb_552;
    PyObject *exception_keeper_type_553;
    PyObject *exception_keeper_value_553;
    PyTracebackObject *exception_keeper_tb_553;
    PyObject *exception_keeper_type_554;
    PyObject *exception_keeper_value_554;
    PyTracebackObject *exception_keeper_tb_554;
    PyObject *exception_keeper_type_555;
    PyObject *exception_keeper_value_555;
    PyTracebackObject *exception_keeper_tb_555;
    PyObject *exception_keeper_type_556;
    PyObject *exception_keeper_value_556;
    PyTracebackObject *exception_keeper_tb_556;
    PyObject *exception_keeper_type_557;
    PyObject *exception_keeper_value_557;
    PyTracebackObject *exception_keeper_tb_557;
    PyObject *exception_keeper_type_558;
    PyObject *exception_keeper_value_558;
    PyTracebackObject *exception_keeper_tb_558;
    PyObject *exception_keeper_type_559;
    PyObject *exception_keeper_value_559;
    PyTracebackObject *exception_keeper_tb_559;
    PyObject *exception_keeper_type_560;
    PyObject *exception_keeper_value_560;
    PyTracebackObject *exception_keeper_tb_560;
    PyObject *exception_keeper_type_561;
    PyObject *exception_keeper_value_561;
    PyTracebackObject *exception_keeper_tb_561;
    PyObject *exception_keeper_type_562;
    PyObject *exception_keeper_value_562;
    PyTracebackObject *exception_keeper_tb_562;
    PyObject *exception_keeper_type_563;
    PyObject *exception_keeper_value_563;
    PyTracebackObject *exception_keeper_tb_563;
    PyObject *exception_keeper_type_564;
    PyObject *exception_keeper_value_564;
    PyTracebackObject *exception_keeper_tb_564;
    PyObject *exception_keeper_type_565;
    PyObject *exception_keeper_value_565;
    PyTracebackObject *exception_keeper_tb_565;
    PyObject *exception_keeper_type_566;
    PyObject *exception_keeper_value_566;
    PyTracebackObject *exception_keeper_tb_566;
    PyObject *exception_keeper_type_567;
    PyObject *exception_keeper_value_567;
    PyTracebackObject *exception_keeper_tb_567;
    PyObject *exception_keeper_type_568;
    PyObject *exception_keeper_value_568;
    PyTracebackObject *exception_keeper_tb_568;
    PyObject *exception_keeper_type_569;
    PyObject *exception_keeper_value_569;
    PyTracebackObject *exception_keeper_tb_569;
    PyObject *exception_keeper_type_570;
    PyObject *exception_keeper_value_570;
    PyTracebackObject *exception_keeper_tb_570;
    PyObject *exception_keeper_type_571;
    PyObject *exception_keeper_value_571;
    PyTracebackObject *exception_keeper_tb_571;
    PyObject *exception_keeper_type_572;
    PyObject *exception_keeper_value_572;
    PyTracebackObject *exception_keeper_tb_572;
    PyObject *exception_keeper_type_573;
    PyObject *exception_keeper_value_573;
    PyTracebackObject *exception_keeper_tb_573;
    PyObject *exception_keeper_type_574;
    PyObject *exception_keeper_value_574;
    PyTracebackObject *exception_keeper_tb_574;
    PyObject *exception_keeper_type_575;
    PyObject *exception_keeper_value_575;
    PyTracebackObject *exception_keeper_tb_575;
    PyObject *exception_keeper_type_576;
    PyObject *exception_keeper_value_576;
    PyTracebackObject *exception_keeper_tb_576;
    PyObject *exception_keeper_type_577;
    PyObject *exception_keeper_value_577;
    PyTracebackObject *exception_keeper_tb_577;
    PyObject *exception_keeper_type_578;
    PyObject *exception_keeper_value_578;
    PyTracebackObject *exception_keeper_tb_578;
    PyObject *exception_keeper_type_579;
    PyObject *exception_keeper_value_579;
    PyTracebackObject *exception_keeper_tb_579;
    PyObject *exception_keeper_type_580;
    PyObject *exception_keeper_value_580;
    PyTracebackObject *exception_keeper_tb_580;
    PyObject *exception_keeper_type_581;
    PyObject *exception_keeper_value_581;
    PyTracebackObject *exception_keeper_tb_581;
    PyObject *exception_keeper_type_582;
    PyObject *exception_keeper_value_582;
    PyTracebackObject *exception_keeper_tb_582;
    PyObject *exception_keeper_type_583;
    PyObject *exception_keeper_value_583;
    PyTracebackObject *exception_keeper_tb_583;
    PyObject *exception_keeper_type_584;
    PyObject *exception_keeper_value_584;
    PyTracebackObject *exception_keeper_tb_584;
    PyObject *exception_keeper_type_585;
    PyObject *exception_keeper_value_585;
    PyTracebackObject *exception_keeper_tb_585;
    PyObject *exception_keeper_type_586;
    PyObject *exception_keeper_value_586;
    PyTracebackObject *exception_keeper_tb_586;
    PyObject *exception_keeper_type_587;
    PyObject *exception_keeper_value_587;
    PyTracebackObject *exception_keeper_tb_587;
    PyObject *exception_keeper_type_588;
    PyObject *exception_keeper_value_588;
    PyTracebackObject *exception_keeper_tb_588;
    PyObject *exception_keeper_type_589;
    PyObject *exception_keeper_value_589;
    PyTracebackObject *exception_keeper_tb_589;
    PyObject *exception_keeper_type_590;
    PyObject *exception_keeper_value_590;
    PyTracebackObject *exception_keeper_tb_590;
    PyObject *exception_keeper_type_591;
    PyObject *exception_keeper_value_591;
    PyTracebackObject *exception_keeper_tb_591;
    PyObject *exception_keeper_type_592;
    PyObject *exception_keeper_value_592;
    PyTracebackObject *exception_keeper_tb_592;
    PyObject *exception_keeper_type_593;
    PyObject *exception_keeper_value_593;
    PyTracebackObject *exception_keeper_tb_593;
    PyObject *exception_keeper_type_594;
    PyObject *exception_keeper_value_594;
    PyTracebackObject *exception_keeper_tb_594;
    PyObject *exception_keeper_type_595;
    PyObject *exception_keeper_value_595;
    PyTracebackObject *exception_keeper_tb_595;
    PyObject *exception_keeper_type_596;
    PyObject *exception_keeper_value_596;
    PyTracebackObject *exception_keeper_tb_596;
    PyObject *exception_keeper_type_597;
    PyObject *exception_keeper_value_597;
    PyTracebackObject *exception_keeper_tb_597;
    PyObject *exception_keeper_type_598;
    PyObject *exception_keeper_value_598;
    PyTracebackObject *exception_keeper_tb_598;
    PyObject *exception_keeper_type_599;
    PyObject *exception_keeper_value_599;
    PyTracebackObject *exception_keeper_tb_599;
    PyObject *exception_keeper_type_600;
    PyObject *exception_keeper_value_600;
    PyTracebackObject *exception_keeper_tb_600;
    PyObject *exception_keeper_type_601;
    PyObject *exception_keeper_value_601;
    PyTracebackObject *exception_keeper_tb_601;
    PyObject *exception_keeper_type_602;
    PyObject *exception_keeper_value_602;
    PyTracebackObject *exception_keeper_tb_602;
    PyObject *exception_keeper_type_603;
    PyObject *exception_keeper_value_603;
    PyTracebackObject *exception_keeper_tb_603;
    PyObject *exception_keeper_type_604;
    PyObject *exception_keeper_value_604;
    PyTracebackObject *exception_keeper_tb_604;
    PyObject *exception_keeper_type_605;
    PyObject *exception_keeper_value_605;
    PyTracebackObject *exception_keeper_tb_605;
    PyObject *exception_keeper_type_606;
    PyObject *exception_keeper_value_606;
    PyTracebackObject *exception_keeper_tb_606;
    PyObject *exception_keeper_type_607;
    PyObject *exception_keeper_value_607;
    PyTracebackObject *exception_keeper_tb_607;
    PyObject *exception_keeper_type_608;
    PyObject *exception_keeper_value_608;
    PyTracebackObject *exception_keeper_tb_608;
    PyObject *exception_keeper_type_609;
    PyObject *exception_keeper_value_609;
    PyTracebackObject *exception_keeper_tb_609;
    PyObject *exception_keeper_type_610;
    PyObject *exception_keeper_value_610;
    PyTracebackObject *exception_keeper_tb_610;
    PyObject *exception_keeper_type_611;
    PyObject *exception_keeper_value_611;
    PyTracebackObject *exception_keeper_tb_611;
    PyObject *exception_keeper_type_612;
    PyObject *exception_keeper_value_612;
    PyTracebackObject *exception_keeper_tb_612;
    PyObject *exception_keeper_type_613;
    PyObject *exception_keeper_value_613;
    PyTracebackObject *exception_keeper_tb_613;
    PyObject *exception_keeper_type_614;
    PyObject *exception_keeper_value_614;
    PyTracebackObject *exception_keeper_tb_614;
    PyObject *exception_keeper_type_615;
    PyObject *exception_keeper_value_615;
    PyTracebackObject *exception_keeper_tb_615;
    PyObject *exception_keeper_type_616;
    PyObject *exception_keeper_value_616;
    PyTracebackObject *exception_keeper_tb_616;
    PyObject *exception_keeper_type_617;
    PyObject *exception_keeper_value_617;
    PyTracebackObject *exception_keeper_tb_617;
    PyObject *exception_keeper_type_618;
    PyObject *exception_keeper_value_618;
    PyTracebackObject *exception_keeper_tb_618;
    PyObject *exception_keeper_type_619;
    PyObject *exception_keeper_value_619;
    PyTracebackObject *exception_keeper_tb_619;
    PyObject *exception_keeper_type_620;
    PyObject *exception_keeper_value_620;
    PyTracebackObject *exception_keeper_tb_620;
    PyObject *exception_keeper_type_621;
    PyObject *exception_keeper_value_621;
    PyTracebackObject *exception_keeper_tb_621;
    PyObject *exception_keeper_type_622;
    PyObject *exception_keeper_value_622;
    PyTracebackObject *exception_keeper_tb_622;
    PyObject *exception_keeper_type_623;
    PyObject *exception_keeper_value_623;
    PyTracebackObject *exception_keeper_tb_623;
    PyObject *exception_keeper_type_624;
    PyObject *exception_keeper_value_624;
    PyTracebackObject *exception_keeper_tb_624;
    PyObject *exception_keeper_type_625;
    PyObject *exception_keeper_value_625;
    PyTracebackObject *exception_keeper_tb_625;
    PyObject *exception_keeper_type_626;
    PyObject *exception_keeper_value_626;
    PyTracebackObject *exception_keeper_tb_626;
    PyObject *exception_keeper_type_627;
    PyObject *exception_keeper_value_627;
    PyTracebackObject *exception_keeper_tb_627;
    PyObject *exception_keeper_type_628;
    PyObject *exception_keeper_value_628;
    PyTracebackObject *exception_keeper_tb_628;
    PyObject *exception_keeper_type_629;
    PyObject *exception_keeper_value_629;
    PyTracebackObject *exception_keeper_tb_629;
    PyObject *exception_keeper_type_630;
    PyObject *exception_keeper_value_630;
    PyTracebackObject *exception_keeper_tb_630;
    PyObject *exception_keeper_type_631;
    PyObject *exception_keeper_value_631;
    PyTracebackObject *exception_keeper_tb_631;
    PyObject *exception_keeper_type_632;
    PyObject *exception_keeper_value_632;
    PyTracebackObject *exception_keeper_tb_632;
    PyObject *exception_keeper_type_633;
    PyObject *exception_keeper_value_633;
    PyTracebackObject *exception_keeper_tb_633;
    PyObject *exception_keeper_type_634;
    PyObject *exception_keeper_value_634;
    PyTracebackObject *exception_keeper_tb_634;
    PyObject *exception_keeper_type_635;
    PyObject *exception_keeper_value_635;
    PyTracebackObject *exception_keeper_tb_635;
    PyObject *exception_keeper_type_636;
    PyObject *exception_keeper_value_636;
    PyTracebackObject *exception_keeper_tb_636;
    PyObject *exception_keeper_type_637;
    PyObject *exception_keeper_value_637;
    PyTracebackObject *exception_keeper_tb_637;
    PyObject *exception_keeper_type_638;
    PyObject *exception_keeper_value_638;
    PyTracebackObject *exception_keeper_tb_638;
    PyObject *exception_keeper_type_639;
    PyObject *exception_keeper_value_639;
    PyTracebackObject *exception_keeper_tb_639;
    PyObject *exception_keeper_type_640;
    PyObject *exception_keeper_value_640;
    PyTracebackObject *exception_keeper_tb_640;
    PyObject *exception_keeper_type_641;
    PyObject *exception_keeper_value_641;
    PyTracebackObject *exception_keeper_tb_641;
    PyObject *exception_keeper_type_642;
    PyObject *exception_keeper_value_642;
    PyTracebackObject *exception_keeper_tb_642;
    PyObject *exception_keeper_type_643;
    PyObject *exception_keeper_value_643;
    PyTracebackObject *exception_keeper_tb_643;
    PyObject *exception_keeper_type_644;
    PyObject *exception_keeper_value_644;
    PyTracebackObject *exception_keeper_tb_644;
    PyObject *exception_keeper_type_645;
    PyObject *exception_keeper_value_645;
    PyTracebackObject *exception_keeper_tb_645;
    PyObject *exception_keeper_type_646;
    PyObject *exception_keeper_value_646;
    PyTracebackObject *exception_keeper_tb_646;
    PyObject *exception_keeper_type_647;
    PyObject *exception_keeper_value_647;
    PyTracebackObject *exception_keeper_tb_647;
    PyObject *exception_keeper_type_648;
    PyObject *exception_keeper_value_648;
    PyTracebackObject *exception_keeper_tb_648;
    PyObject *exception_keeper_type_649;
    PyObject *exception_keeper_value_649;
    PyTracebackObject *exception_keeper_tb_649;
    PyObject *exception_keeper_type_650;
    PyObject *exception_keeper_value_650;
    PyTracebackObject *exception_keeper_tb_650;
    PyObject *exception_keeper_type_651;
    PyObject *exception_keeper_value_651;
    PyTracebackObject *exception_keeper_tb_651;
    PyObject *exception_keeper_type_652;
    PyObject *exception_keeper_value_652;
    PyTracebackObject *exception_keeper_tb_652;
    PyObject *exception_keeper_type_653;
    PyObject *exception_keeper_value_653;
    PyTracebackObject *exception_keeper_tb_653;
    PyObject *exception_keeper_type_654;
    PyObject *exception_keeper_value_654;
    PyTracebackObject *exception_keeper_tb_654;
    PyObject *exception_keeper_type_655;
    PyObject *exception_keeper_value_655;
    PyTracebackObject *exception_keeper_tb_655;
    PyObject *exception_keeper_type_656;
    PyObject *exception_keeper_value_656;
    PyTracebackObject *exception_keeper_tb_656;
    PyObject *exception_keeper_type_657;
    PyObject *exception_keeper_value_657;
    PyTracebackObject *exception_keeper_tb_657;
    PyObject *exception_keeper_type_658;
    PyObject *exception_keeper_value_658;
    PyTracebackObject *exception_keeper_tb_658;
    PyObject *exception_keeper_type_659;
    PyObject *exception_keeper_value_659;
    PyTracebackObject *exception_keeper_tb_659;
    PyObject *exception_keeper_type_660;
    PyObject *exception_keeper_value_660;
    PyTracebackObject *exception_keeper_tb_660;
    PyObject *exception_keeper_type_661;
    PyObject *exception_keeper_value_661;
    PyTracebackObject *exception_keeper_tb_661;
    PyObject *exception_keeper_type_662;
    PyObject *exception_keeper_value_662;
    PyTracebackObject *exception_keeper_tb_662;
    PyObject *exception_keeper_type_663;
    PyObject *exception_keeper_value_663;
    PyTracebackObject *exception_keeper_tb_663;
    PyObject *exception_keeper_type_664;
    PyObject *exception_keeper_value_664;
    PyTracebackObject *exception_keeper_tb_664;
    PyObject *exception_keeper_type_665;
    PyObject *exception_keeper_value_665;
    PyTracebackObject *exception_keeper_tb_665;
    PyObject *exception_keeper_type_666;
    PyObject *exception_keeper_value_666;
    PyTracebackObject *exception_keeper_tb_666;
    PyObject *exception_keeper_type_667;
    PyObject *exception_keeper_value_667;
    PyTracebackObject *exception_keeper_tb_667;
    PyObject *exception_keeper_type_668;
    PyObject *exception_keeper_value_668;
    PyTracebackObject *exception_keeper_tb_668;
    PyObject *exception_keeper_type_669;
    PyObject *exception_keeper_value_669;
    PyTracebackObject *exception_keeper_tb_669;
    PyObject *exception_keeper_type_670;
    PyObject *exception_keeper_value_670;
    PyTracebackObject *exception_keeper_tb_670;
    PyObject *exception_keeper_type_671;
    PyObject *exception_keeper_value_671;
    PyTracebackObject *exception_keeper_tb_671;
    PyObject *exception_keeper_type_672;
    PyObject *exception_keeper_value_672;
    PyTracebackObject *exception_keeper_tb_672;
    PyObject *exception_keeper_type_673;
    PyObject *exception_keeper_value_673;
    PyTracebackObject *exception_keeper_tb_673;
    PyObject *exception_keeper_type_674;
    PyObject *exception_keeper_value_674;
    PyTracebackObject *exception_keeper_tb_674;
    PyObject *exception_keeper_type_675;
    PyObject *exception_keeper_value_675;
    PyTracebackObject *exception_keeper_tb_675;
    PyObject *exception_keeper_type_676;
    PyObject *exception_keeper_value_676;
    PyTracebackObject *exception_keeper_tb_676;
    PyObject *exception_keeper_type_677;
    PyObject *exception_keeper_value_677;
    PyTracebackObject *exception_keeper_tb_677;
    PyObject *exception_keeper_type_678;
    PyObject *exception_keeper_value_678;
    PyTracebackObject *exception_keeper_tb_678;
    PyObject *exception_keeper_type_679;
    PyObject *exception_keeper_value_679;
    PyTracebackObject *exception_keeper_tb_679;
    PyObject *exception_keeper_type_680;
    PyObject *exception_keeper_value_680;
    PyTracebackObject *exception_keeper_tb_680;
    PyObject *exception_keeper_type_681;
    PyObject *exception_keeper_value_681;
    PyTracebackObject *exception_keeper_tb_681;
    PyObject *exception_keeper_type_682;
    PyObject *exception_keeper_value_682;
    PyTracebackObject *exception_keeper_tb_682;
    PyObject *exception_keeper_type_683;
    PyObject *exception_keeper_value_683;
    PyTracebackObject *exception_keeper_tb_683;
    PyObject *exception_keeper_type_684;
    PyObject *exception_keeper_value_684;
    PyTracebackObject *exception_keeper_tb_684;
    PyObject *exception_keeper_type_685;
    PyObject *exception_keeper_value_685;
    PyTracebackObject *exception_keeper_tb_685;
    PyObject *exception_keeper_type_686;
    PyObject *exception_keeper_value_686;
    PyTracebackObject *exception_keeper_tb_686;
    PyObject *exception_keeper_type_687;
    PyObject *exception_keeper_value_687;
    PyTracebackObject *exception_keeper_tb_687;
    PyObject *exception_keeper_type_688;
    PyObject *exception_keeper_value_688;
    PyTracebackObject *exception_keeper_tb_688;
    PyObject *exception_keeper_type_689;
    PyObject *exception_keeper_value_689;
    PyTracebackObject *exception_keeper_tb_689;
    PyObject *exception_keeper_type_690;
    PyObject *exception_keeper_value_690;
    PyTracebackObject *exception_keeper_tb_690;
    PyObject *exception_keeper_type_691;
    PyObject *exception_keeper_value_691;
    PyTracebackObject *exception_keeper_tb_691;
    PyObject *exception_keeper_type_692;
    PyObject *exception_keeper_value_692;
    PyTracebackObject *exception_keeper_tb_692;
    PyObject *exception_keeper_type_693;
    PyObject *exception_keeper_value_693;
    PyTracebackObject *exception_keeper_tb_693;
    PyObject *exception_keeper_type_694;
    PyObject *exception_keeper_value_694;
    PyTracebackObject *exception_keeper_tb_694;
    PyObject *exception_keeper_type_695;
    PyObject *exception_keeper_value_695;
    PyTracebackObject *exception_keeper_tb_695;
    PyObject *exception_keeper_type_696;
    PyObject *exception_keeper_value_696;
    PyTracebackObject *exception_keeper_tb_696;
    PyObject *exception_keeper_type_697;
    PyObject *exception_keeper_value_697;
    PyTracebackObject *exception_keeper_tb_697;
    PyObject *exception_keeper_type_698;
    PyObject *exception_keeper_value_698;
    PyTracebackObject *exception_keeper_tb_698;
    PyObject *exception_keeper_type_699;
    PyObject *exception_keeper_value_699;
    PyTracebackObject *exception_keeper_tb_699;
    PyObject *exception_keeper_type_700;
    PyObject *exception_keeper_value_700;
    PyTracebackObject *exception_keeper_tb_700;
    PyObject *exception_keeper_type_701;
    PyObject *exception_keeper_value_701;
    PyTracebackObject *exception_keeper_tb_701;
    PyObject *exception_keeper_type_702;
    PyObject *exception_keeper_value_702;
    PyTracebackObject *exception_keeper_tb_702;
    PyObject *exception_keeper_type_703;
    PyObject *exception_keeper_value_703;
    PyTracebackObject *exception_keeper_tb_703;
    PyObject *exception_keeper_type_704;
    PyObject *exception_keeper_value_704;
    PyTracebackObject *exception_keeper_tb_704;
    PyObject *exception_keeper_type_705;
    PyObject *exception_keeper_value_705;
    PyTracebackObject *exception_keeper_tb_705;
    PyObject *exception_keeper_type_706;
    PyObject *exception_keeper_value_706;
    PyTracebackObject *exception_keeper_tb_706;
    PyObject *exception_keeper_type_707;
    PyObject *exception_keeper_value_707;
    PyTracebackObject *exception_keeper_tb_707;
    PyObject *exception_keeper_type_708;
    PyObject *exception_keeper_value_708;
    PyTracebackObject *exception_keeper_tb_708;
    PyObject *exception_keeper_type_709;
    PyObject *exception_keeper_value_709;
    PyTracebackObject *exception_keeper_tb_709;
    PyObject *exception_keeper_type_710;
    PyObject *exception_keeper_value_710;
    PyTracebackObject *exception_keeper_tb_710;
    PyObject *exception_keeper_type_711;
    PyObject *exception_keeper_value_711;
    PyTracebackObject *exception_keeper_tb_711;
    PyObject *exception_keeper_type_712;
    PyObject *exception_keeper_value_712;
    PyTracebackObject *exception_keeper_tb_712;
    PyObject *exception_keeper_type_713;
    PyObject *exception_keeper_value_713;
    PyTracebackObject *exception_keeper_tb_713;
    PyObject *exception_keeper_type_714;
    PyObject *exception_keeper_value_714;
    PyTracebackObject *exception_keeper_tb_714;
    PyObject *exception_keeper_type_715;
    PyObject *exception_keeper_value_715;
    PyTracebackObject *exception_keeper_tb_715;
    PyObject *exception_keeper_type_716;
    PyObject *exception_keeper_value_716;
    PyTracebackObject *exception_keeper_tb_716;
    PyObject *exception_keeper_type_717;
    PyObject *exception_keeper_value_717;
    PyTracebackObject *exception_keeper_tb_717;
    PyObject *exception_keeper_type_718;
    PyObject *exception_keeper_value_718;
    PyTracebackObject *exception_keeper_tb_718;
    PyObject *exception_keeper_type_719;
    PyObject *exception_keeper_value_719;
    PyTracebackObject *exception_keeper_tb_719;
    PyObject *exception_keeper_type_720;
    PyObject *exception_keeper_value_720;
    PyTracebackObject *exception_keeper_tb_720;
    PyObject *exception_keeper_type_721;
    PyObject *exception_keeper_value_721;
    PyTracebackObject *exception_keeper_tb_721;
    PyObject *exception_keeper_type_722;
    PyObject *exception_keeper_value_722;
    PyTracebackObject *exception_keeper_tb_722;
    PyObject *exception_keeper_type_723;
    PyObject *exception_keeper_value_723;
    PyTracebackObject *exception_keeper_tb_723;
    PyObject *exception_keeper_type_724;
    PyObject *exception_keeper_value_724;
    PyTracebackObject *exception_keeper_tb_724;
    PyObject *exception_keeper_type_725;
    PyObject *exception_keeper_value_725;
    PyTracebackObject *exception_keeper_tb_725;
    PyObject *exception_keeper_type_726;
    PyObject *exception_keeper_value_726;
    PyTracebackObject *exception_keeper_tb_726;
    PyObject *exception_keeper_type_727;
    PyObject *exception_keeper_value_727;
    PyTracebackObject *exception_keeper_tb_727;
    PyObject *exception_keeper_type_728;
    PyObject *exception_keeper_value_728;
    PyTracebackObject *exception_keeper_tb_728;
    PyObject *exception_keeper_type_729;
    PyObject *exception_keeper_value_729;
    PyTracebackObject *exception_keeper_tb_729;
    PyObject *exception_keeper_type_730;
    PyObject *exception_keeper_value_730;
    PyTracebackObject *exception_keeper_tb_730;
    PyObject *exception_keeper_type_731;
    PyObject *exception_keeper_value_731;
    PyTracebackObject *exception_keeper_tb_731;
    PyObject *exception_keeper_type_732;
    PyObject *exception_keeper_value_732;
    PyTracebackObject *exception_keeper_tb_732;
    PyObject *exception_keeper_type_733;
    PyObject *exception_keeper_value_733;
    PyTracebackObject *exception_keeper_tb_733;
    PyObject *exception_keeper_type_734;
    PyObject *exception_keeper_value_734;
    PyTracebackObject *exception_keeper_tb_734;
    PyObject *exception_keeper_type_735;
    PyObject *exception_keeper_value_735;
    PyTracebackObject *exception_keeper_tb_735;
    PyObject *exception_keeper_type_736;
    PyObject *exception_keeper_value_736;
    PyTracebackObject *exception_keeper_tb_736;
    PyObject *exception_keeper_type_737;
    PyObject *exception_keeper_value_737;
    PyTracebackObject *exception_keeper_tb_737;
    PyObject *exception_keeper_type_738;
    PyObject *exception_keeper_value_738;
    PyTracebackObject *exception_keeper_tb_738;
    PyObject *exception_keeper_type_739;
    PyObject *exception_keeper_value_739;
    PyTracebackObject *exception_keeper_tb_739;
    PyObject *exception_keeper_type_740;
    PyObject *exception_keeper_value_740;
    PyTracebackObject *exception_keeper_tb_740;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_name_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_assign_source_260;
    PyObject *tmp_assign_source_261;
    PyObject *tmp_assign_source_262;
    PyObject *tmp_assign_source_263;
    PyObject *tmp_assign_source_264;
    PyObject *tmp_assign_source_265;
    PyObject *tmp_assign_source_266;
    PyObject *tmp_assign_source_267;
    PyObject *tmp_assign_source_268;
    PyObject *tmp_assign_source_269;
    PyObject *tmp_assign_source_270;
    PyObject *tmp_assign_source_271;
    PyObject *tmp_assign_source_272;
    PyObject *tmp_assign_source_273;
    PyObject *tmp_assign_source_274;
    PyObject *tmp_assign_source_275;
    PyObject *tmp_assign_source_276;
    PyObject *tmp_assign_source_277;
    PyObject *tmp_assign_source_278;
    PyObject *tmp_assign_source_279;
    PyObject *tmp_assign_source_280;
    PyObject *tmp_assign_source_281;
    PyObject *tmp_assign_source_282;
    PyObject *tmp_assign_source_283;
    PyObject *tmp_assign_source_284;
    PyObject *tmp_assign_source_285;
    PyObject *tmp_assign_source_286;
    PyObject *tmp_assign_source_287;
    PyObject *tmp_assign_source_288;
    PyObject *tmp_assign_source_289;
    PyObject *tmp_assign_source_290;
    PyObject *tmp_assign_source_291;
    PyObject *tmp_assign_source_292;
    PyObject *tmp_assign_source_293;
    PyObject *tmp_assign_source_294;
    PyObject *tmp_assign_source_295;
    PyObject *tmp_assign_source_296;
    PyObject *tmp_assign_source_297;
    PyObject *tmp_assign_source_298;
    PyObject *tmp_assign_source_299;
    PyObject *tmp_assign_source_300;
    PyObject *tmp_assign_source_301;
    PyObject *tmp_assign_source_302;
    PyObject *tmp_assign_source_303;
    PyObject *tmp_assign_source_304;
    PyObject *tmp_assign_source_305;
    PyObject *tmp_assign_source_306;
    PyObject *tmp_assign_source_307;
    PyObject *tmp_assign_source_308;
    PyObject *tmp_assign_source_309;
    PyObject *tmp_assign_source_310;
    PyObject *tmp_assign_source_311;
    PyObject *tmp_assign_source_312;
    PyObject *tmp_assign_source_313;
    PyObject *tmp_assign_source_314;
    PyObject *tmp_assign_source_315;
    PyObject *tmp_assign_source_316;
    PyObject *tmp_assign_source_317;
    PyObject *tmp_assign_source_318;
    PyObject *tmp_assign_source_319;
    PyObject *tmp_assign_source_320;
    PyObject *tmp_assign_source_321;
    PyObject *tmp_assign_source_322;
    PyObject *tmp_assign_source_323;
    PyObject *tmp_assign_source_324;
    PyObject *tmp_assign_source_325;
    PyObject *tmp_assign_source_326;
    PyObject *tmp_assign_source_327;
    PyObject *tmp_assign_source_328;
    PyObject *tmp_assign_source_329;
    PyObject *tmp_assign_source_330;
    PyObject *tmp_assign_source_331;
    PyObject *tmp_assign_source_332;
    PyObject *tmp_assign_source_333;
    PyObject *tmp_assign_source_334;
    PyObject *tmp_assign_source_335;
    PyObject *tmp_assign_source_336;
    PyObject *tmp_assign_source_337;
    PyObject *tmp_assign_source_338;
    PyObject *tmp_assign_source_339;
    PyObject *tmp_assign_source_340;
    PyObject *tmp_assign_source_341;
    PyObject *tmp_assign_source_342;
    PyObject *tmp_assign_source_343;
    PyObject *tmp_assign_source_344;
    PyObject *tmp_assign_source_345;
    PyObject *tmp_assign_source_346;
    PyObject *tmp_assign_source_347;
    PyObject *tmp_assign_source_348;
    PyObject *tmp_assign_source_349;
    PyObject *tmp_assign_source_350;
    PyObject *tmp_assign_source_351;
    PyObject *tmp_assign_source_352;
    PyObject *tmp_assign_source_353;
    PyObject *tmp_assign_source_354;
    PyObject *tmp_assign_source_355;
    PyObject *tmp_assign_source_356;
    PyObject *tmp_assign_source_357;
    PyObject *tmp_assign_source_358;
    PyObject *tmp_assign_source_359;
    PyObject *tmp_assign_source_360;
    PyObject *tmp_assign_source_361;
    PyObject *tmp_assign_source_362;
    PyObject *tmp_assign_source_363;
    PyObject *tmp_assign_source_364;
    PyObject *tmp_assign_source_365;
    PyObject *tmp_assign_source_366;
    PyObject *tmp_assign_source_367;
    PyObject *tmp_assign_source_368;
    PyObject *tmp_assign_source_369;
    PyObject *tmp_assign_source_370;
    PyObject *tmp_assign_source_371;
    PyObject *tmp_assign_source_372;
    PyObject *tmp_assign_source_373;
    PyObject *tmp_assign_source_374;
    PyObject *tmp_assign_source_375;
    PyObject *tmp_assign_source_376;
    PyObject *tmp_assign_source_377;
    PyObject *tmp_assign_source_378;
    PyObject *tmp_assign_source_379;
    PyObject *tmp_assign_source_380;
    PyObject *tmp_assign_source_381;
    PyObject *tmp_assign_source_382;
    PyObject *tmp_assign_source_383;
    PyObject *tmp_assign_source_384;
    PyObject *tmp_assign_source_385;
    PyObject *tmp_assign_source_386;
    PyObject *tmp_assign_source_387;
    PyObject *tmp_assign_source_388;
    PyObject *tmp_assign_source_389;
    PyObject *tmp_assign_source_390;
    PyObject *tmp_assign_source_391;
    PyObject *tmp_assign_source_392;
    PyObject *tmp_assign_source_393;
    PyObject *tmp_assign_source_394;
    PyObject *tmp_assign_source_395;
    PyObject *tmp_assign_source_396;
    PyObject *tmp_assign_source_397;
    PyObject *tmp_assign_source_398;
    PyObject *tmp_assign_source_399;
    PyObject *tmp_assign_source_400;
    PyObject *tmp_assign_source_401;
    PyObject *tmp_assign_source_402;
    PyObject *tmp_assign_source_403;
    PyObject *tmp_assign_source_404;
    PyObject *tmp_assign_source_405;
    PyObject *tmp_assign_source_406;
    PyObject *tmp_assign_source_407;
    PyObject *tmp_assign_source_408;
    PyObject *tmp_assign_source_409;
    PyObject *tmp_assign_source_410;
    PyObject *tmp_assign_source_411;
    PyObject *tmp_assign_source_412;
    PyObject *tmp_assign_source_413;
    PyObject *tmp_assign_source_414;
    PyObject *tmp_assign_source_415;
    PyObject *tmp_assign_source_416;
    PyObject *tmp_assign_source_417;
    PyObject *tmp_assign_source_418;
    PyObject *tmp_assign_source_419;
    PyObject *tmp_assign_source_420;
    PyObject *tmp_assign_source_421;
    PyObject *tmp_assign_source_422;
    PyObject *tmp_assign_source_423;
    PyObject *tmp_assign_source_424;
    PyObject *tmp_assign_source_425;
    PyObject *tmp_assign_source_426;
    PyObject *tmp_assign_source_427;
    PyObject *tmp_assign_source_428;
    PyObject *tmp_assign_source_429;
    PyObject *tmp_assign_source_430;
    PyObject *tmp_assign_source_431;
    PyObject *tmp_assign_source_432;
    PyObject *tmp_assign_source_433;
    PyObject *tmp_assign_source_434;
    PyObject *tmp_assign_source_435;
    PyObject *tmp_assign_source_436;
    PyObject *tmp_assign_source_437;
    PyObject *tmp_assign_source_438;
    PyObject *tmp_assign_source_439;
    PyObject *tmp_assign_source_440;
    PyObject *tmp_assign_source_441;
    PyObject *tmp_assign_source_442;
    PyObject *tmp_assign_source_443;
    PyObject *tmp_assign_source_444;
    PyObject *tmp_assign_source_445;
    PyObject *tmp_assign_source_446;
    PyObject *tmp_assign_source_447;
    PyObject *tmp_assign_source_448;
    PyObject *tmp_assign_source_449;
    PyObject *tmp_assign_source_450;
    PyObject *tmp_assign_source_451;
    PyObject *tmp_assign_source_452;
    PyObject *tmp_assign_source_453;
    PyObject *tmp_assign_source_454;
    PyObject *tmp_assign_source_455;
    PyObject *tmp_assign_source_456;
    PyObject *tmp_assign_source_457;
    PyObject *tmp_assign_source_458;
    PyObject *tmp_assign_source_459;
    PyObject *tmp_assign_source_460;
    PyObject *tmp_assign_source_461;
    PyObject *tmp_assign_source_462;
    PyObject *tmp_assign_source_463;
    PyObject *tmp_assign_source_464;
    PyObject *tmp_assign_source_465;
    PyObject *tmp_assign_source_466;
    PyObject *tmp_assign_source_467;
    PyObject *tmp_assign_source_468;
    PyObject *tmp_assign_source_469;
    PyObject *tmp_assign_source_470;
    PyObject *tmp_assign_source_471;
    PyObject *tmp_assign_source_472;
    PyObject *tmp_assign_source_473;
    PyObject *tmp_assign_source_474;
    PyObject *tmp_assign_source_475;
    PyObject *tmp_assign_source_476;
    PyObject *tmp_assign_source_477;
    PyObject *tmp_assign_source_478;
    PyObject *tmp_assign_source_479;
    PyObject *tmp_assign_source_480;
    PyObject *tmp_assign_source_481;
    PyObject *tmp_assign_source_482;
    PyObject *tmp_assign_source_483;
    PyObject *tmp_assign_source_484;
    PyObject *tmp_assign_source_485;
    PyObject *tmp_assign_source_486;
    PyObject *tmp_assign_source_487;
    PyObject *tmp_assign_source_488;
    PyObject *tmp_assign_source_489;
    PyObject *tmp_assign_source_490;
    PyObject *tmp_assign_source_491;
    PyObject *tmp_assign_source_492;
    PyObject *tmp_assign_source_493;
    PyObject *tmp_assign_source_494;
    PyObject *tmp_assign_source_495;
    PyObject *tmp_assign_source_496;
    PyObject *tmp_assign_source_497;
    PyObject *tmp_assign_source_498;
    PyObject *tmp_assign_source_499;
    PyObject *tmp_assign_source_500;
    PyObject *tmp_assign_source_501;
    PyObject *tmp_assign_source_502;
    PyObject *tmp_assign_source_503;
    PyObject *tmp_assign_source_504;
    PyObject *tmp_assign_source_505;
    PyObject *tmp_assign_source_506;
    PyObject *tmp_assign_source_507;
    PyObject *tmp_assign_source_508;
    PyObject *tmp_assign_source_509;
    PyObject *tmp_assign_source_510;
    PyObject *tmp_assign_source_511;
    PyObject *tmp_assign_source_512;
    PyObject *tmp_assign_source_513;
    PyObject *tmp_assign_source_514;
    PyObject *tmp_assign_source_515;
    PyObject *tmp_assign_source_516;
    PyObject *tmp_assign_source_517;
    PyObject *tmp_assign_source_518;
    PyObject *tmp_assign_source_519;
    PyObject *tmp_assign_source_520;
    PyObject *tmp_assign_source_521;
    PyObject *tmp_assign_source_522;
    PyObject *tmp_assign_source_523;
    PyObject *tmp_assign_source_524;
    PyObject *tmp_assign_source_525;
    PyObject *tmp_assign_source_526;
    PyObject *tmp_assign_source_527;
    PyObject *tmp_assign_source_528;
    PyObject *tmp_assign_source_529;
    PyObject *tmp_assign_source_530;
    PyObject *tmp_assign_source_531;
    PyObject *tmp_assign_source_532;
    PyObject *tmp_assign_source_533;
    PyObject *tmp_assign_source_534;
    PyObject *tmp_assign_source_535;
    PyObject *tmp_assign_source_536;
    PyObject *tmp_assign_source_537;
    PyObject *tmp_assign_source_538;
    PyObject *tmp_assign_source_539;
    PyObject *tmp_assign_source_540;
    PyObject *tmp_assign_source_541;
    PyObject *tmp_assign_source_542;
    PyObject *tmp_assign_source_543;
    PyObject *tmp_assign_source_544;
    PyObject *tmp_assign_source_545;
    PyObject *tmp_assign_source_546;
    PyObject *tmp_assign_source_547;
    PyObject *tmp_assign_source_548;
    PyObject *tmp_assign_source_549;
    PyObject *tmp_assign_source_550;
    PyObject *tmp_assign_source_551;
    PyObject *tmp_assign_source_552;
    PyObject *tmp_assign_source_553;
    PyObject *tmp_assign_source_554;
    PyObject *tmp_assign_source_555;
    PyObject *tmp_assign_source_556;
    PyObject *tmp_assign_source_557;
    PyObject *tmp_assign_source_558;
    PyObject *tmp_assign_source_559;
    PyObject *tmp_assign_source_560;
    PyObject *tmp_assign_source_561;
    PyObject *tmp_assign_source_562;
    PyObject *tmp_assign_source_563;
    PyObject *tmp_assign_source_564;
    PyObject *tmp_assign_source_565;
    PyObject *tmp_assign_source_566;
    PyObject *tmp_assign_source_567;
    PyObject *tmp_assign_source_568;
    PyObject *tmp_assign_source_569;
    PyObject *tmp_assign_source_570;
    PyObject *tmp_assign_source_571;
    PyObject *tmp_assign_source_572;
    PyObject *tmp_assign_source_573;
    PyObject *tmp_assign_source_574;
    PyObject *tmp_assign_source_575;
    PyObject *tmp_assign_source_576;
    PyObject *tmp_assign_source_577;
    PyObject *tmp_assign_source_578;
    PyObject *tmp_assign_source_579;
    PyObject *tmp_assign_source_580;
    PyObject *tmp_assign_source_581;
    PyObject *tmp_assign_source_582;
    PyObject *tmp_assign_source_583;
    PyObject *tmp_assign_source_584;
    PyObject *tmp_assign_source_585;
    PyObject *tmp_assign_source_586;
    PyObject *tmp_assign_source_587;
    PyObject *tmp_assign_source_588;
    PyObject *tmp_assign_source_589;
    PyObject *tmp_assign_source_590;
    PyObject *tmp_assign_source_591;
    PyObject *tmp_assign_source_592;
    PyObject *tmp_assign_source_593;
    PyObject *tmp_assign_source_594;
    PyObject *tmp_assign_source_595;
    PyObject *tmp_assign_source_596;
    PyObject *tmp_assign_source_597;
    PyObject *tmp_assign_source_598;
    PyObject *tmp_assign_source_599;
    PyObject *tmp_assign_source_600;
    PyObject *tmp_assign_source_601;
    PyObject *tmp_assign_source_602;
    PyObject *tmp_assign_source_603;
    PyObject *tmp_assign_source_604;
    PyObject *tmp_assign_source_605;
    PyObject *tmp_assign_source_606;
    PyObject *tmp_assign_source_607;
    PyObject *tmp_assign_source_608;
    PyObject *tmp_assign_source_609;
    PyObject *tmp_assign_source_610;
    PyObject *tmp_assign_source_611;
    PyObject *tmp_assign_source_612;
    PyObject *tmp_assign_source_613;
    PyObject *tmp_assign_source_614;
    PyObject *tmp_assign_source_615;
    PyObject *tmp_assign_source_616;
    PyObject *tmp_assign_source_617;
    PyObject *tmp_assign_source_618;
    PyObject *tmp_assign_source_619;
    PyObject *tmp_assign_source_620;
    PyObject *tmp_assign_source_621;
    PyObject *tmp_assign_source_622;
    PyObject *tmp_assign_source_623;
    PyObject *tmp_assign_source_624;
    PyObject *tmp_assign_source_625;
    PyObject *tmp_assign_source_626;
    PyObject *tmp_assign_source_627;
    PyObject *tmp_assign_source_628;
    PyObject *tmp_assign_source_629;
    PyObject *tmp_assign_source_630;
    PyObject *tmp_assign_source_631;
    PyObject *tmp_assign_source_632;
    PyObject *tmp_assign_source_633;
    PyObject *tmp_assign_source_634;
    PyObject *tmp_assign_source_635;
    PyObject *tmp_assign_source_636;
    PyObject *tmp_assign_source_637;
    PyObject *tmp_assign_source_638;
    PyObject *tmp_assign_source_639;
    PyObject *tmp_assign_source_640;
    PyObject *tmp_assign_source_641;
    PyObject *tmp_assign_source_642;
    PyObject *tmp_assign_source_643;
    PyObject *tmp_assign_source_644;
    PyObject *tmp_assign_source_645;
    PyObject *tmp_assign_source_646;
    PyObject *tmp_assign_source_647;
    PyObject *tmp_assign_source_648;
    PyObject *tmp_assign_source_649;
    PyObject *tmp_assign_source_650;
    PyObject *tmp_assign_source_651;
    PyObject *tmp_assign_source_652;
    PyObject *tmp_assign_source_653;
    PyObject *tmp_assign_source_654;
    PyObject *tmp_assign_source_655;
    PyObject *tmp_assign_source_656;
    PyObject *tmp_assign_source_657;
    PyObject *tmp_assign_source_658;
    PyObject *tmp_assign_source_659;
    PyObject *tmp_assign_source_660;
    PyObject *tmp_assign_source_661;
    PyObject *tmp_assign_source_662;
    PyObject *tmp_assign_source_663;
    PyObject *tmp_assign_source_664;
    PyObject *tmp_assign_source_665;
    PyObject *tmp_assign_source_666;
    PyObject *tmp_assign_source_667;
    PyObject *tmp_assign_source_668;
    PyObject *tmp_assign_source_669;
    PyObject *tmp_assign_source_670;
    PyObject *tmp_assign_source_671;
    PyObject *tmp_assign_source_672;
    PyObject *tmp_assign_source_673;
    PyObject *tmp_assign_source_674;
    PyObject *tmp_assign_source_675;
    PyObject *tmp_assign_source_676;
    PyObject *tmp_assign_source_677;
    PyObject *tmp_assign_source_678;
    PyObject *tmp_assign_source_679;
    PyObject *tmp_assign_source_680;
    PyObject *tmp_assign_source_681;
    PyObject *tmp_assign_source_682;
    PyObject *tmp_assign_source_683;
    PyObject *tmp_assign_source_684;
    PyObject *tmp_assign_source_685;
    PyObject *tmp_assign_source_686;
    PyObject *tmp_assign_source_687;
    PyObject *tmp_assign_source_688;
    PyObject *tmp_assign_source_689;
    PyObject *tmp_assign_source_690;
    PyObject *tmp_assign_source_691;
    PyObject *tmp_assign_source_692;
    PyObject *tmp_assign_source_693;
    PyObject *tmp_assign_source_694;
    PyObject *tmp_assign_source_695;
    PyObject *tmp_assign_source_696;
    PyObject *tmp_assign_source_697;
    PyObject *tmp_assign_source_698;
    PyObject *tmp_assign_source_699;
    PyObject *tmp_assign_source_700;
    PyObject *tmp_assign_source_701;
    PyObject *tmp_assign_source_702;
    PyObject *tmp_assign_source_703;
    PyObject *tmp_assign_source_704;
    PyObject *tmp_assign_source_705;
    PyObject *tmp_assign_source_706;
    PyObject *tmp_assign_source_707;
    PyObject *tmp_assign_source_708;
    PyObject *tmp_assign_source_709;
    PyObject *tmp_assign_source_710;
    PyObject *tmp_assign_source_711;
    PyObject *tmp_assign_source_712;
    PyObject *tmp_assign_source_713;
    PyObject *tmp_assign_source_714;
    PyObject *tmp_assign_source_715;
    PyObject *tmp_assign_source_716;
    PyObject *tmp_assign_source_717;
    PyObject *tmp_assign_source_718;
    PyObject *tmp_assign_source_719;
    PyObject *tmp_assign_source_720;
    PyObject *tmp_assign_source_721;
    PyObject *tmp_assign_source_722;
    PyObject *tmp_assign_source_723;
    PyObject *tmp_assign_source_724;
    PyObject *tmp_assign_source_725;
    PyObject *tmp_assign_source_726;
    PyObject *tmp_assign_source_727;
    PyObject *tmp_assign_source_728;
    PyObject *tmp_assign_source_729;
    PyObject *tmp_assign_source_730;
    PyObject *tmp_assign_source_731;
    PyObject *tmp_assign_source_732;
    PyObject *tmp_assign_source_733;
    PyObject *tmp_assign_source_734;
    PyObject *tmp_assign_source_735;
    PyObject *tmp_assign_source_736;
    PyObject *tmp_assign_source_737;
    PyObject *tmp_assign_source_738;
    PyObject *tmp_assign_source_739;
    PyObject *tmp_assign_source_740;
    PyObject *tmp_assign_source_741;
    PyObject *tmp_assign_source_742;
    PyObject *tmp_assign_source_743;
    PyObject *tmp_assign_source_744;
    PyObject *tmp_assign_source_745;
    PyObject *tmp_assign_source_746;
    PyObject *tmp_assign_source_747;
    PyObject *tmp_assign_source_748;
    PyObject *tmp_assign_source_749;
    PyObject *tmp_assign_source_750;
    PyObject *tmp_assign_source_751;
    PyObject *tmp_assign_source_752;
    PyObject *tmp_assign_source_753;
    PyObject *tmp_assign_source_754;
    PyObject *tmp_assign_source_755;
    PyObject *tmp_assign_source_756;
    PyObject *tmp_assign_source_757;
    PyObject *tmp_attr_source_1;
    PyObject *tmp_attr_source_2;
    PyObject *tmp_attr_source_3;
    PyObject *tmp_attr_source_4;
    PyObject *tmp_attr_source_5;
    PyObject *tmp_attr_source_6;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_call_arg_element_53;
    PyObject *tmp_call_arg_element_54;
    PyObject *tmp_call_arg_element_55;
    PyObject *tmp_call_arg_element_56;
    PyObject *tmp_call_arg_element_57;
    PyObject *tmp_call_arg_element_58;
    PyObject *tmp_call_arg_element_59;
    PyObject *tmp_call_arg_element_60;
    PyObject *tmp_call_arg_element_61;
    PyObject *tmp_call_arg_element_62;
    PyObject *tmp_call_arg_element_63;
    PyObject *tmp_call_arg_element_64;
    PyObject *tmp_call_arg_element_65;
    PyObject *tmp_call_arg_element_66;
    PyObject *tmp_call_arg_element_67;
    PyObject *tmp_call_arg_element_68;
    PyObject *tmp_call_arg_element_69;
    PyObject *tmp_call_arg_element_70;
    PyObject *tmp_call_arg_element_71;
    PyObject *tmp_call_arg_element_72;
    PyObject *tmp_call_arg_element_73;
    PyObject *tmp_call_arg_element_74;
    PyObject *tmp_call_arg_element_75;
    PyObject *tmp_call_arg_element_76;
    PyObject *tmp_call_arg_element_77;
    PyObject *tmp_call_arg_element_78;
    PyObject *tmp_call_arg_element_79;
    PyObject *tmp_call_arg_element_80;
    PyObject *tmp_call_arg_element_81;
    PyObject *tmp_call_arg_element_82;
    PyObject *tmp_call_arg_element_83;
    PyObject *tmp_call_arg_element_84;
    PyObject *tmp_call_arg_element_85;
    PyObject *tmp_call_arg_element_86;
    PyObject *tmp_call_arg_element_87;
    PyObject *tmp_call_arg_element_88;
    PyObject *tmp_call_arg_element_89;
    PyObject *tmp_call_arg_element_90;
    PyObject *tmp_call_arg_element_91;
    PyObject *tmp_call_arg_element_92;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    PyObject *tmp_called_name_83;
    PyObject *tmp_called_name_84;
    PyObject *tmp_called_name_85;
    PyObject *tmp_called_name_86;
    PyObject *tmp_called_name_87;
    PyObject *tmp_called_name_88;
    PyObject *tmp_called_name_89;
    PyObject *tmp_called_name_90;
    PyObject *tmp_called_name_91;
    PyObject *tmp_called_name_92;
    PyObject *tmp_called_name_93;
    PyObject *tmp_called_name_94;
    PyObject *tmp_called_name_95;
    PyObject *tmp_called_name_96;
    PyObject *tmp_called_name_97;
    PyObject *tmp_called_name_98;
    PyObject *tmp_called_name_99;
    PyObject *tmp_called_name_100;
    PyObject *tmp_called_name_101;
    PyObject *tmp_called_name_102;
    PyObject *tmp_called_name_103;
    PyObject *tmp_called_name_104;
    PyObject *tmp_called_name_105;
    PyObject *tmp_called_name_106;
    PyObject *tmp_called_name_107;
    PyObject *tmp_class_bases_1;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_Eq_7;
    int tmp_cmp_Eq_8;
    int tmp_cmp_Eq_9;
    int tmp_cmp_Eq_10;
    int tmp_cmp_Eq_11;
    int tmp_cmp_Eq_12;
    int tmp_cmp_Eq_13;
    int tmp_cmp_Eq_14;
    int tmp_cmp_Eq_15;
    int tmp_cmp_Eq_16;
    int tmp_cmp_Eq_17;
    int tmp_cmp_Eq_18;
    int tmp_cmp_Eq_19;
    int tmp_cmp_Eq_20;
    int tmp_cmp_Eq_21;
    int tmp_cmp_Eq_22;
    int tmp_cmp_Eq_23;
    int tmp_cmp_Eq_24;
    int tmp_cmp_Eq_25;
    int tmp_cmp_Eq_26;
    int tmp_cmp_Eq_27;
    int tmp_cmp_Eq_28;
    int tmp_cmp_Eq_29;
    int tmp_cmp_Eq_30;
    int tmp_cmp_Eq_31;
    int tmp_cmp_Eq_32;
    int tmp_cmp_Eq_33;
    int tmp_cmp_Eq_34;
    int tmp_cmp_Eq_35;
    int tmp_cmp_Eq_36;
    int tmp_cmp_Eq_37;
    int tmp_cmp_Eq_38;
    int tmp_cmp_Eq_39;
    int tmp_cmp_Eq_40;
    int tmp_cmp_Eq_41;
    int tmp_cmp_Eq_42;
    int tmp_cmp_Eq_43;
    int tmp_cmp_Eq_44;
    int tmp_cmp_Eq_45;
    int tmp_cmp_Eq_46;
    int tmp_cmp_Eq_47;
    int tmp_cmp_Eq_48;
    int tmp_cmp_Eq_49;
    int tmp_cmp_Eq_50;
    int tmp_cmp_Eq_51;
    int tmp_cmp_Eq_52;
    int tmp_cmp_Eq_53;
    int tmp_cmp_Eq_54;
    int tmp_cmp_Eq_55;
    int tmp_cmp_Eq_56;
    int tmp_cmp_Eq_57;
    int tmp_cmp_Eq_58;
    int tmp_cmp_Eq_59;
    int tmp_cmp_Eq_60;
    int tmp_cmp_Eq_61;
    int tmp_cmp_Eq_62;
    int tmp_cmp_Eq_63;
    int tmp_cmp_Eq_64;
    int tmp_cmp_Eq_65;
    int tmp_cmp_Eq_66;
    int tmp_cmp_Eq_67;
    int tmp_cmp_Eq_68;
    int tmp_cmp_Eq_69;
    int tmp_cmp_Eq_70;
    int tmp_cmp_Eq_71;
    int tmp_cmp_Eq_72;
    int tmp_cmp_Eq_73;
    int tmp_cmp_Eq_74;
    int tmp_cmp_Eq_75;
    int tmp_cmp_Eq_76;
    int tmp_cmp_Eq_77;
    int tmp_cmp_Eq_78;
    int tmp_cmp_Eq_79;
    int tmp_cmp_Eq_80;
    int tmp_cmp_Eq_81;
    int tmp_cmp_Eq_82;
    int tmp_cmp_Eq_83;
    int tmp_cmp_Eq_84;
    int tmp_cmp_Eq_85;
    int tmp_cmp_Eq_86;
    int tmp_cmp_Eq_87;
    int tmp_cmp_Eq_88;
    int tmp_cmp_Eq_89;
    int tmp_cmp_Eq_90;
    int tmp_cmp_Eq_91;
    int tmp_cmp_Eq_92;
    int tmp_cmp_Eq_93;
    int tmp_cmp_Eq_94;
    int tmp_cmp_Eq_95;
    int tmp_cmp_Eq_96;
    int tmp_cmp_Eq_97;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_Gt_3;
    int tmp_cmp_Gt_4;
    int tmp_cmp_GtE_1;
    int tmp_cmp_GtE_2;
    int tmp_cmp_GtE_3;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_LtE_1;
    int tmp_cmp_LtE_2;
    int tmp_cmp_LtE_3;
    int tmp_cmp_NotEq_1;
    int tmp_cmp_NotEq_2;
    int tmp_cmp_NotEq_3;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_left_27;
    PyObject *tmp_compare_left_28;
    PyObject *tmp_compare_left_29;
    PyObject *tmp_compare_left_30;
    PyObject *tmp_compare_left_31;
    PyObject *tmp_compare_left_32;
    PyObject *tmp_compare_left_33;
    PyObject *tmp_compare_left_34;
    PyObject *tmp_compare_left_35;
    PyObject *tmp_compare_left_36;
    PyObject *tmp_compare_left_37;
    PyObject *tmp_compare_left_38;
    PyObject *tmp_compare_left_39;
    PyObject *tmp_compare_left_40;
    PyObject *tmp_compare_left_41;
    PyObject *tmp_compare_left_42;
    PyObject *tmp_compare_left_43;
    PyObject *tmp_compare_left_44;
    PyObject *tmp_compare_left_45;
    PyObject *tmp_compare_left_46;
    PyObject *tmp_compare_left_47;
    PyObject *tmp_compare_left_48;
    PyObject *tmp_compare_left_49;
    PyObject *tmp_compare_left_50;
    PyObject *tmp_compare_left_51;
    PyObject *tmp_compare_left_52;
    PyObject *tmp_compare_left_53;
    PyObject *tmp_compare_left_54;
    PyObject *tmp_compare_left_55;
    PyObject *tmp_compare_left_56;
    PyObject *tmp_compare_left_57;
    PyObject *tmp_compare_left_58;
    PyObject *tmp_compare_left_59;
    PyObject *tmp_compare_left_60;
    PyObject *tmp_compare_left_61;
    PyObject *tmp_compare_left_62;
    PyObject *tmp_compare_left_63;
    PyObject *tmp_compare_left_64;
    PyObject *tmp_compare_left_65;
    PyObject *tmp_compare_left_66;
    PyObject *tmp_compare_left_67;
    PyObject *tmp_compare_left_68;
    PyObject *tmp_compare_left_69;
    PyObject *tmp_compare_left_70;
    PyObject *tmp_compare_left_71;
    PyObject *tmp_compare_left_72;
    PyObject *tmp_compare_left_73;
    PyObject *tmp_compare_left_74;
    PyObject *tmp_compare_left_75;
    PyObject *tmp_compare_left_76;
    PyObject *tmp_compare_left_77;
    PyObject *tmp_compare_left_78;
    PyObject *tmp_compare_left_79;
    PyObject *tmp_compare_left_80;
    PyObject *tmp_compare_left_81;
    PyObject *tmp_compare_left_82;
    PyObject *tmp_compare_left_83;
    PyObject *tmp_compare_left_84;
    PyObject *tmp_compare_left_85;
    PyObject *tmp_compare_left_86;
    PyObject *tmp_compare_left_87;
    PyObject *tmp_compare_left_88;
    PyObject *tmp_compare_left_89;
    PyObject *tmp_compare_left_90;
    PyObject *tmp_compare_left_91;
    PyObject *tmp_compare_left_92;
    PyObject *tmp_compare_left_93;
    PyObject *tmp_compare_left_94;
    PyObject *tmp_compare_left_95;
    PyObject *tmp_compare_left_96;
    PyObject *tmp_compare_left_97;
    PyObject *tmp_compare_left_98;
    PyObject *tmp_compare_left_99;
    PyObject *tmp_compare_left_100;
    PyObject *tmp_compare_left_101;
    PyObject *tmp_compare_left_102;
    PyObject *tmp_compare_left_103;
    PyObject *tmp_compare_left_104;
    PyObject *tmp_compare_left_105;
    PyObject *tmp_compare_left_106;
    PyObject *tmp_compare_left_107;
    PyObject *tmp_compare_left_108;
    PyObject *tmp_compare_left_109;
    PyObject *tmp_compare_left_110;
    PyObject *tmp_compare_left_111;
    PyObject *tmp_compare_left_112;
    PyObject *tmp_compare_left_113;
    PyObject *tmp_compare_left_114;
    PyObject *tmp_compare_left_115;
    PyObject *tmp_compare_left_116;
    PyObject *tmp_compare_left_117;
    PyObject *tmp_compare_left_118;
    PyObject *tmp_compare_left_119;
    PyObject *tmp_compare_left_120;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compare_right_27;
    PyObject *tmp_compare_right_28;
    PyObject *tmp_compare_right_29;
    PyObject *tmp_compare_right_30;
    PyObject *tmp_compare_right_31;
    PyObject *tmp_compare_right_32;
    PyObject *tmp_compare_right_33;
    PyObject *tmp_compare_right_34;
    PyObject *tmp_compare_right_35;
    PyObject *tmp_compare_right_36;
    PyObject *tmp_compare_right_37;
    PyObject *tmp_compare_right_38;
    PyObject *tmp_compare_right_39;
    PyObject *tmp_compare_right_40;
    PyObject *tmp_compare_right_41;
    PyObject *tmp_compare_right_42;
    PyObject *tmp_compare_right_43;
    PyObject *tmp_compare_right_44;
    PyObject *tmp_compare_right_45;
    PyObject *tmp_compare_right_46;
    PyObject *tmp_compare_right_47;
    PyObject *tmp_compare_right_48;
    PyObject *tmp_compare_right_49;
    PyObject *tmp_compare_right_50;
    PyObject *tmp_compare_right_51;
    PyObject *tmp_compare_right_52;
    PyObject *tmp_compare_right_53;
    PyObject *tmp_compare_right_54;
    PyObject *tmp_compare_right_55;
    PyObject *tmp_compare_right_56;
    PyObject *tmp_compare_right_57;
    PyObject *tmp_compare_right_58;
    PyObject *tmp_compare_right_59;
    PyObject *tmp_compare_right_60;
    PyObject *tmp_compare_right_61;
    PyObject *tmp_compare_right_62;
    PyObject *tmp_compare_right_63;
    PyObject *tmp_compare_right_64;
    PyObject *tmp_compare_right_65;
    PyObject *tmp_compare_right_66;
    PyObject *tmp_compare_right_67;
    PyObject *tmp_compare_right_68;
    PyObject *tmp_compare_right_69;
    PyObject *tmp_compare_right_70;
    PyObject *tmp_compare_right_71;
    PyObject *tmp_compare_right_72;
    PyObject *tmp_compare_right_73;
    PyObject *tmp_compare_right_74;
    PyObject *tmp_compare_right_75;
    PyObject *tmp_compare_right_76;
    PyObject *tmp_compare_right_77;
    PyObject *tmp_compare_right_78;
    PyObject *tmp_compare_right_79;
    PyObject *tmp_compare_right_80;
    PyObject *tmp_compare_right_81;
    PyObject *tmp_compare_right_82;
    PyObject *tmp_compare_right_83;
    PyObject *tmp_compare_right_84;
    PyObject *tmp_compare_right_85;
    PyObject *tmp_compare_right_86;
    PyObject *tmp_compare_right_87;
    PyObject *tmp_compare_right_88;
    PyObject *tmp_compare_right_89;
    PyObject *tmp_compare_right_90;
    PyObject *tmp_compare_right_91;
    PyObject *tmp_compare_right_92;
    PyObject *tmp_compare_right_93;
    PyObject *tmp_compare_right_94;
    PyObject *tmp_compare_right_95;
    PyObject *tmp_compare_right_96;
    PyObject *tmp_compare_right_97;
    PyObject *tmp_compare_right_98;
    PyObject *tmp_compare_right_99;
    PyObject *tmp_compare_right_100;
    PyObject *tmp_compare_right_101;
    PyObject *tmp_compare_right_102;
    PyObject *tmp_compare_right_103;
    PyObject *tmp_compare_right_104;
    PyObject *tmp_compare_right_105;
    PyObject *tmp_compare_right_106;
    PyObject *tmp_compare_right_107;
    PyObject *tmp_compare_right_108;
    PyObject *tmp_compare_right_109;
    PyObject *tmp_compare_right_110;
    PyObject *tmp_compare_right_111;
    PyObject *tmp_compare_right_112;
    PyObject *tmp_compare_right_113;
    PyObject *tmp_compare_right_114;
    PyObject *tmp_compare_right_115;
    PyObject *tmp_compare_right_116;
    PyObject *tmp_compare_right_117;
    PyObject *tmp_compare_right_118;
    PyObject *tmp_compare_right_119;
    PyObject *tmp_compare_right_120;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_left_10;
    PyObject *tmp_compexpr_left_11;
    PyObject *tmp_compexpr_left_12;
    PyObject *tmp_compexpr_left_13;
    PyObject *tmp_compexpr_left_14;
    PyObject *tmp_compexpr_left_15;
    PyObject *tmp_compexpr_left_16;
    PyObject *tmp_compexpr_left_17;
    PyObject *tmp_compexpr_left_18;
    PyObject *tmp_compexpr_left_19;
    PyObject *tmp_compexpr_left_20;
    PyObject *tmp_compexpr_left_21;
    PyObject *tmp_compexpr_left_22;
    PyObject *tmp_compexpr_left_23;
    PyObject *tmp_compexpr_left_24;
    PyObject *tmp_compexpr_left_25;
    PyObject *tmp_compexpr_left_26;
    PyObject *tmp_compexpr_left_27;
    PyObject *tmp_compexpr_left_28;
    PyObject *tmp_compexpr_left_29;
    PyObject *tmp_compexpr_left_30;
    PyObject *tmp_compexpr_left_31;
    PyObject *tmp_compexpr_left_32;
    PyObject *tmp_compexpr_left_33;
    PyObject *tmp_compexpr_left_34;
    PyObject *tmp_compexpr_left_35;
    PyObject *tmp_compexpr_left_36;
    PyObject *tmp_compexpr_left_37;
    PyObject *tmp_compexpr_left_38;
    PyObject *tmp_compexpr_left_39;
    PyObject *tmp_compexpr_left_40;
    PyObject *tmp_compexpr_left_41;
    PyObject *tmp_compexpr_left_42;
    PyObject *tmp_compexpr_left_43;
    PyObject *tmp_compexpr_left_44;
    PyObject *tmp_compexpr_left_45;
    PyObject *tmp_compexpr_left_46;
    PyObject *tmp_compexpr_left_47;
    PyObject *tmp_compexpr_left_48;
    PyObject *tmp_compexpr_left_49;
    PyObject *tmp_compexpr_left_50;
    PyObject *tmp_compexpr_left_51;
    PyObject *tmp_compexpr_left_52;
    PyObject *tmp_compexpr_left_53;
    PyObject *tmp_compexpr_left_54;
    PyObject *tmp_compexpr_left_55;
    PyObject *tmp_compexpr_left_56;
    PyObject *tmp_compexpr_left_57;
    PyObject *tmp_compexpr_left_58;
    PyObject *tmp_compexpr_left_59;
    PyObject *tmp_compexpr_left_60;
    PyObject *tmp_compexpr_left_61;
    PyObject *tmp_compexpr_left_62;
    PyObject *tmp_compexpr_left_63;
    PyObject *tmp_compexpr_left_64;
    PyObject *tmp_compexpr_left_65;
    PyObject *tmp_compexpr_left_66;
    PyObject *tmp_compexpr_left_67;
    PyObject *tmp_compexpr_left_68;
    PyObject *tmp_compexpr_left_69;
    PyObject *tmp_compexpr_left_70;
    PyObject *tmp_compexpr_left_71;
    PyObject *tmp_compexpr_left_72;
    PyObject *tmp_compexpr_left_73;
    PyObject *tmp_compexpr_left_74;
    PyObject *tmp_compexpr_left_75;
    PyObject *tmp_compexpr_left_76;
    PyObject *tmp_compexpr_left_77;
    PyObject *tmp_compexpr_left_78;
    PyObject *tmp_compexpr_left_79;
    PyObject *tmp_compexpr_left_80;
    PyObject *tmp_compexpr_left_81;
    PyObject *tmp_compexpr_left_82;
    PyObject *tmp_compexpr_left_83;
    PyObject *tmp_compexpr_left_84;
    PyObject *tmp_compexpr_left_85;
    PyObject *tmp_compexpr_left_86;
    PyObject *tmp_compexpr_left_87;
    PyObject *tmp_compexpr_left_88;
    PyObject *tmp_compexpr_left_89;
    PyObject *tmp_compexpr_left_90;
    PyObject *tmp_compexpr_left_91;
    PyObject *tmp_compexpr_left_92;
    PyObject *tmp_compexpr_left_93;
    PyObject *tmp_compexpr_left_94;
    PyObject *tmp_compexpr_left_95;
    PyObject *tmp_compexpr_left_96;
    PyObject *tmp_compexpr_left_97;
    PyObject *tmp_compexpr_left_98;
    PyObject *tmp_compexpr_left_99;
    PyObject *tmp_compexpr_left_100;
    PyObject *tmp_compexpr_left_101;
    PyObject *tmp_compexpr_left_102;
    PyObject *tmp_compexpr_left_103;
    PyObject *tmp_compexpr_left_104;
    PyObject *tmp_compexpr_left_105;
    PyObject *tmp_compexpr_left_106;
    PyObject *tmp_compexpr_left_107;
    PyObject *tmp_compexpr_left_108;
    PyObject *tmp_compexpr_left_109;
    PyObject *tmp_compexpr_left_110;
    PyObject *tmp_compexpr_left_111;
    PyObject *tmp_compexpr_left_112;
    PyObject *tmp_compexpr_left_113;
    PyObject *tmp_compexpr_left_114;
    PyObject *tmp_compexpr_left_115;
    PyObject *tmp_compexpr_left_116;
    PyObject *tmp_compexpr_left_117;
    PyObject *tmp_compexpr_left_118;
    PyObject *tmp_compexpr_left_119;
    PyObject *tmp_compexpr_left_120;
    PyObject *tmp_compexpr_left_121;
    PyObject *tmp_compexpr_left_122;
    PyObject *tmp_compexpr_left_123;
    PyObject *tmp_compexpr_left_124;
    PyObject *tmp_compexpr_left_125;
    PyObject *tmp_compexpr_left_126;
    PyObject *tmp_compexpr_left_127;
    PyObject *tmp_compexpr_left_128;
    PyObject *tmp_compexpr_left_129;
    PyObject *tmp_compexpr_left_130;
    PyObject *tmp_compexpr_left_131;
    PyObject *tmp_compexpr_left_132;
    PyObject *tmp_compexpr_left_133;
    PyObject *tmp_compexpr_left_134;
    PyObject *tmp_compexpr_left_135;
    PyObject *tmp_compexpr_left_136;
    PyObject *tmp_compexpr_left_137;
    PyObject *tmp_compexpr_left_138;
    PyObject *tmp_compexpr_left_139;
    PyObject *tmp_compexpr_left_140;
    PyObject *tmp_compexpr_left_141;
    PyObject *tmp_compexpr_left_142;
    PyObject *tmp_compexpr_left_143;
    PyObject *tmp_compexpr_left_144;
    PyObject *tmp_compexpr_left_145;
    PyObject *tmp_compexpr_left_146;
    PyObject *tmp_compexpr_left_147;
    PyObject *tmp_compexpr_left_148;
    PyObject *tmp_compexpr_left_149;
    PyObject *tmp_compexpr_left_150;
    PyObject *tmp_compexpr_left_151;
    PyObject *tmp_compexpr_left_152;
    PyObject *tmp_compexpr_left_153;
    PyObject *tmp_compexpr_left_154;
    PyObject *tmp_compexpr_left_155;
    PyObject *tmp_compexpr_left_156;
    PyObject *tmp_compexpr_left_157;
    PyObject *tmp_compexpr_left_158;
    PyObject *tmp_compexpr_left_159;
    PyObject *tmp_compexpr_left_160;
    PyObject *tmp_compexpr_left_161;
    PyObject *tmp_compexpr_left_162;
    PyObject *tmp_compexpr_left_163;
    PyObject *tmp_compexpr_left_164;
    PyObject *tmp_compexpr_left_165;
    PyObject *tmp_compexpr_left_166;
    PyObject *tmp_compexpr_left_167;
    PyObject *tmp_compexpr_left_168;
    PyObject *tmp_compexpr_left_169;
    PyObject *tmp_compexpr_left_170;
    PyObject *tmp_compexpr_left_171;
    PyObject *tmp_compexpr_left_172;
    PyObject *tmp_compexpr_left_173;
    PyObject *tmp_compexpr_left_174;
    PyObject *tmp_compexpr_left_175;
    PyObject *tmp_compexpr_left_176;
    PyObject *tmp_compexpr_left_177;
    PyObject *tmp_compexpr_left_178;
    PyObject *tmp_compexpr_left_179;
    PyObject *tmp_compexpr_left_180;
    PyObject *tmp_compexpr_left_181;
    PyObject *tmp_compexpr_left_182;
    PyObject *tmp_compexpr_left_183;
    PyObject *tmp_compexpr_left_184;
    PyObject *tmp_compexpr_left_185;
    PyObject *tmp_compexpr_left_186;
    PyObject *tmp_compexpr_left_187;
    PyObject *tmp_compexpr_left_188;
    PyObject *tmp_compexpr_left_189;
    PyObject *tmp_compexpr_left_190;
    PyObject *tmp_compexpr_left_191;
    PyObject *tmp_compexpr_left_192;
    PyObject *tmp_compexpr_left_193;
    PyObject *tmp_compexpr_left_194;
    PyObject *tmp_compexpr_left_195;
    PyObject *tmp_compexpr_left_196;
    PyObject *tmp_compexpr_left_197;
    PyObject *tmp_compexpr_left_198;
    PyObject *tmp_compexpr_left_199;
    PyObject *tmp_compexpr_left_200;
    PyObject *tmp_compexpr_left_201;
    PyObject *tmp_compexpr_left_202;
    PyObject *tmp_compexpr_left_203;
    PyObject *tmp_compexpr_left_204;
    PyObject *tmp_compexpr_left_205;
    PyObject *tmp_compexpr_left_206;
    PyObject *tmp_compexpr_left_207;
    PyObject *tmp_compexpr_left_208;
    PyObject *tmp_compexpr_left_209;
    PyObject *tmp_compexpr_left_210;
    PyObject *tmp_compexpr_left_211;
    PyObject *tmp_compexpr_left_212;
    PyObject *tmp_compexpr_left_213;
    PyObject *tmp_compexpr_left_214;
    PyObject *tmp_compexpr_left_215;
    PyObject *tmp_compexpr_left_216;
    PyObject *tmp_compexpr_left_217;
    PyObject *tmp_compexpr_left_218;
    PyObject *tmp_compexpr_left_219;
    PyObject *tmp_compexpr_left_220;
    PyObject *tmp_compexpr_left_221;
    PyObject *tmp_compexpr_left_222;
    PyObject *tmp_compexpr_left_223;
    PyObject *tmp_compexpr_left_224;
    PyObject *tmp_compexpr_left_225;
    PyObject *tmp_compexpr_left_226;
    PyObject *tmp_compexpr_left_227;
    PyObject *tmp_compexpr_left_228;
    PyObject *tmp_compexpr_left_229;
    PyObject *tmp_compexpr_left_230;
    PyObject *tmp_compexpr_left_231;
    PyObject *tmp_compexpr_left_232;
    PyObject *tmp_compexpr_left_233;
    PyObject *tmp_compexpr_left_234;
    PyObject *tmp_compexpr_left_235;
    PyObject *tmp_compexpr_left_236;
    PyObject *tmp_compexpr_left_237;
    PyObject *tmp_compexpr_left_238;
    PyObject *tmp_compexpr_left_239;
    PyObject *tmp_compexpr_left_240;
    PyObject *tmp_compexpr_left_241;
    PyObject *tmp_compexpr_left_242;
    PyObject *tmp_compexpr_left_243;
    PyObject *tmp_compexpr_left_244;
    PyObject *tmp_compexpr_left_245;
    PyObject *tmp_compexpr_left_246;
    PyObject *tmp_compexpr_left_247;
    PyObject *tmp_compexpr_left_248;
    PyObject *tmp_compexpr_left_249;
    PyObject *tmp_compexpr_left_250;
    PyObject *tmp_compexpr_left_251;
    PyObject *tmp_compexpr_left_252;
    PyObject *tmp_compexpr_left_253;
    PyObject *tmp_compexpr_left_254;
    PyObject *tmp_compexpr_left_255;
    PyObject *tmp_compexpr_left_256;
    PyObject *tmp_compexpr_left_257;
    PyObject *tmp_compexpr_left_258;
    PyObject *tmp_compexpr_left_259;
    PyObject *tmp_compexpr_left_260;
    PyObject *tmp_compexpr_left_261;
    PyObject *tmp_compexpr_left_262;
    PyObject *tmp_compexpr_left_263;
    PyObject *tmp_compexpr_left_264;
    PyObject *tmp_compexpr_left_265;
    PyObject *tmp_compexpr_left_266;
    PyObject *tmp_compexpr_left_267;
    PyObject *tmp_compexpr_left_268;
    PyObject *tmp_compexpr_left_269;
    PyObject *tmp_compexpr_left_270;
    PyObject *tmp_compexpr_left_271;
    PyObject *tmp_compexpr_left_272;
    PyObject *tmp_compexpr_left_273;
    PyObject *tmp_compexpr_left_274;
    PyObject *tmp_compexpr_left_275;
    PyObject *tmp_compexpr_left_276;
    PyObject *tmp_compexpr_left_277;
    PyObject *tmp_compexpr_left_278;
    PyObject *tmp_compexpr_left_279;
    PyObject *tmp_compexpr_left_280;
    PyObject *tmp_compexpr_left_281;
    PyObject *tmp_compexpr_left_282;
    PyObject *tmp_compexpr_left_283;
    PyObject *tmp_compexpr_left_284;
    PyObject *tmp_compexpr_left_285;
    PyObject *tmp_compexpr_left_286;
    PyObject *tmp_compexpr_left_287;
    PyObject *tmp_compexpr_left_288;
    PyObject *tmp_compexpr_left_289;
    PyObject *tmp_compexpr_left_290;
    PyObject *tmp_compexpr_left_291;
    PyObject *tmp_compexpr_left_292;
    PyObject *tmp_compexpr_left_293;
    PyObject *tmp_compexpr_left_294;
    PyObject *tmp_compexpr_left_295;
    PyObject *tmp_compexpr_left_296;
    PyObject *tmp_compexpr_left_297;
    PyObject *tmp_compexpr_left_298;
    PyObject *tmp_compexpr_left_299;
    PyObject *tmp_compexpr_left_300;
    PyObject *tmp_compexpr_left_301;
    PyObject *tmp_compexpr_left_302;
    PyObject *tmp_compexpr_left_303;
    PyObject *tmp_compexpr_left_304;
    PyObject *tmp_compexpr_left_305;
    PyObject *tmp_compexpr_left_306;
    PyObject *tmp_compexpr_left_307;
    PyObject *tmp_compexpr_left_308;
    PyObject *tmp_compexpr_left_309;
    PyObject *tmp_compexpr_left_310;
    PyObject *tmp_compexpr_left_311;
    PyObject *tmp_compexpr_left_312;
    PyObject *tmp_compexpr_left_313;
    PyObject *tmp_compexpr_left_314;
    PyObject *tmp_compexpr_left_315;
    PyObject *tmp_compexpr_left_316;
    PyObject *tmp_compexpr_left_317;
    PyObject *tmp_compexpr_left_318;
    PyObject *tmp_compexpr_left_319;
    PyObject *tmp_compexpr_left_320;
    PyObject *tmp_compexpr_left_321;
    PyObject *tmp_compexpr_left_322;
    PyObject *tmp_compexpr_left_323;
    PyObject *tmp_compexpr_left_324;
    PyObject *tmp_compexpr_left_325;
    PyObject *tmp_compexpr_left_326;
    PyObject *tmp_compexpr_left_327;
    PyObject *tmp_compexpr_left_328;
    PyObject *tmp_compexpr_left_329;
    PyObject *tmp_compexpr_left_330;
    PyObject *tmp_compexpr_left_331;
    PyObject *tmp_compexpr_left_332;
    PyObject *tmp_compexpr_left_333;
    PyObject *tmp_compexpr_left_334;
    PyObject *tmp_compexpr_left_335;
    PyObject *tmp_compexpr_left_336;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    PyObject *tmp_compexpr_right_10;
    PyObject *tmp_compexpr_right_11;
    PyObject *tmp_compexpr_right_12;
    PyObject *tmp_compexpr_right_13;
    PyObject *tmp_compexpr_right_14;
    PyObject *tmp_compexpr_right_15;
    PyObject *tmp_compexpr_right_16;
    PyObject *tmp_compexpr_right_17;
    PyObject *tmp_compexpr_right_18;
    PyObject *tmp_compexpr_right_19;
    PyObject *tmp_compexpr_right_20;
    PyObject *tmp_compexpr_right_21;
    PyObject *tmp_compexpr_right_22;
    PyObject *tmp_compexpr_right_23;
    PyObject *tmp_compexpr_right_24;
    PyObject *tmp_compexpr_right_25;
    PyObject *tmp_compexpr_right_26;
    PyObject *tmp_compexpr_right_27;
    PyObject *tmp_compexpr_right_28;
    PyObject *tmp_compexpr_right_29;
    PyObject *tmp_compexpr_right_30;
    PyObject *tmp_compexpr_right_31;
    PyObject *tmp_compexpr_right_32;
    PyObject *tmp_compexpr_right_33;
    PyObject *tmp_compexpr_right_34;
    PyObject *tmp_compexpr_right_35;
    PyObject *tmp_compexpr_right_36;
    PyObject *tmp_compexpr_right_37;
    PyObject *tmp_compexpr_right_38;
    PyObject *tmp_compexpr_right_39;
    PyObject *tmp_compexpr_right_40;
    PyObject *tmp_compexpr_right_41;
    PyObject *tmp_compexpr_right_42;
    PyObject *tmp_compexpr_right_43;
    PyObject *tmp_compexpr_right_44;
    PyObject *tmp_compexpr_right_45;
    PyObject *tmp_compexpr_right_46;
    PyObject *tmp_compexpr_right_47;
    PyObject *tmp_compexpr_right_48;
    PyObject *tmp_compexpr_right_49;
    PyObject *tmp_compexpr_right_50;
    PyObject *tmp_compexpr_right_51;
    PyObject *tmp_compexpr_right_52;
    PyObject *tmp_compexpr_right_53;
    PyObject *tmp_compexpr_right_54;
    PyObject *tmp_compexpr_right_55;
    PyObject *tmp_compexpr_right_56;
    PyObject *tmp_compexpr_right_57;
    PyObject *tmp_compexpr_right_58;
    PyObject *tmp_compexpr_right_59;
    PyObject *tmp_compexpr_right_60;
    PyObject *tmp_compexpr_right_61;
    PyObject *tmp_compexpr_right_62;
    PyObject *tmp_compexpr_right_63;
    PyObject *tmp_compexpr_right_64;
    PyObject *tmp_compexpr_right_65;
    PyObject *tmp_compexpr_right_66;
    PyObject *tmp_compexpr_right_67;
    PyObject *tmp_compexpr_right_68;
    PyObject *tmp_compexpr_right_69;
    PyObject *tmp_compexpr_right_70;
    PyObject *tmp_compexpr_right_71;
    PyObject *tmp_compexpr_right_72;
    PyObject *tmp_compexpr_right_73;
    PyObject *tmp_compexpr_right_74;
    PyObject *tmp_compexpr_right_75;
    PyObject *tmp_compexpr_right_76;
    PyObject *tmp_compexpr_right_77;
    PyObject *tmp_compexpr_right_78;
    PyObject *tmp_compexpr_right_79;
    PyObject *tmp_compexpr_right_80;
    PyObject *tmp_compexpr_right_81;
    PyObject *tmp_compexpr_right_82;
    PyObject *tmp_compexpr_right_83;
    PyObject *tmp_compexpr_right_84;
    PyObject *tmp_compexpr_right_85;
    PyObject *tmp_compexpr_right_86;
    PyObject *tmp_compexpr_right_87;
    PyObject *tmp_compexpr_right_88;
    PyObject *tmp_compexpr_right_89;
    PyObject *tmp_compexpr_right_90;
    PyObject *tmp_compexpr_right_91;
    PyObject *tmp_compexpr_right_92;
    PyObject *tmp_compexpr_right_93;
    PyObject *tmp_compexpr_right_94;
    PyObject *tmp_compexpr_right_95;
    PyObject *tmp_compexpr_right_96;
    PyObject *tmp_compexpr_right_97;
    PyObject *tmp_compexpr_right_98;
    PyObject *tmp_compexpr_right_99;
    PyObject *tmp_compexpr_right_100;
    PyObject *tmp_compexpr_right_101;
    PyObject *tmp_compexpr_right_102;
    PyObject *tmp_compexpr_right_103;
    PyObject *tmp_compexpr_right_104;
    PyObject *tmp_compexpr_right_105;
    PyObject *tmp_compexpr_right_106;
    PyObject *tmp_compexpr_right_107;
    PyObject *tmp_compexpr_right_108;
    PyObject *tmp_compexpr_right_109;
    PyObject *tmp_compexpr_right_110;
    PyObject *tmp_compexpr_right_111;
    PyObject *tmp_compexpr_right_112;
    PyObject *tmp_compexpr_right_113;
    PyObject *tmp_compexpr_right_114;
    PyObject *tmp_compexpr_right_115;
    PyObject *tmp_compexpr_right_116;
    PyObject *tmp_compexpr_right_117;
    PyObject *tmp_compexpr_right_118;
    PyObject *tmp_compexpr_right_119;
    PyObject *tmp_compexpr_right_120;
    PyObject *tmp_compexpr_right_121;
    PyObject *tmp_compexpr_right_122;
    PyObject *tmp_compexpr_right_123;
    PyObject *tmp_compexpr_right_124;
    PyObject *tmp_compexpr_right_125;
    PyObject *tmp_compexpr_right_126;
    PyObject *tmp_compexpr_right_127;
    PyObject *tmp_compexpr_right_128;
    PyObject *tmp_compexpr_right_129;
    PyObject *tmp_compexpr_right_130;
    PyObject *tmp_compexpr_right_131;
    PyObject *tmp_compexpr_right_132;
    PyObject *tmp_compexpr_right_133;
    PyObject *tmp_compexpr_right_134;
    PyObject *tmp_compexpr_right_135;
    PyObject *tmp_compexpr_right_136;
    PyObject *tmp_compexpr_right_137;
    PyObject *tmp_compexpr_right_138;
    PyObject *tmp_compexpr_right_139;
    PyObject *tmp_compexpr_right_140;
    PyObject *tmp_compexpr_right_141;
    PyObject *tmp_compexpr_right_142;
    PyObject *tmp_compexpr_right_143;
    PyObject *tmp_compexpr_right_144;
    PyObject *tmp_compexpr_right_145;
    PyObject *tmp_compexpr_right_146;
    PyObject *tmp_compexpr_right_147;
    PyObject *tmp_compexpr_right_148;
    PyObject *tmp_compexpr_right_149;
    PyObject *tmp_compexpr_right_150;
    PyObject *tmp_compexpr_right_151;
    PyObject *tmp_compexpr_right_152;
    PyObject *tmp_compexpr_right_153;
    PyObject *tmp_compexpr_right_154;
    PyObject *tmp_compexpr_right_155;
    PyObject *tmp_compexpr_right_156;
    PyObject *tmp_compexpr_right_157;
    PyObject *tmp_compexpr_right_158;
    PyObject *tmp_compexpr_right_159;
    PyObject *tmp_compexpr_right_160;
    PyObject *tmp_compexpr_right_161;
    PyObject *tmp_compexpr_right_162;
    PyObject *tmp_compexpr_right_163;
    PyObject *tmp_compexpr_right_164;
    PyObject *tmp_compexpr_right_165;
    PyObject *tmp_compexpr_right_166;
    PyObject *tmp_compexpr_right_167;
    PyObject *tmp_compexpr_right_168;
    PyObject *tmp_compexpr_right_169;
    PyObject *tmp_compexpr_right_170;
    PyObject *tmp_compexpr_right_171;
    PyObject *tmp_compexpr_right_172;
    PyObject *tmp_compexpr_right_173;
    PyObject *tmp_compexpr_right_174;
    PyObject *tmp_compexpr_right_175;
    PyObject *tmp_compexpr_right_176;
    PyObject *tmp_compexpr_right_177;
    PyObject *tmp_compexpr_right_178;
    PyObject *tmp_compexpr_right_179;
    PyObject *tmp_compexpr_right_180;
    PyObject *tmp_compexpr_right_181;
    PyObject *tmp_compexpr_right_182;
    PyObject *tmp_compexpr_right_183;
    PyObject *tmp_compexpr_right_184;
    PyObject *tmp_compexpr_right_185;
    PyObject *tmp_compexpr_right_186;
    PyObject *tmp_compexpr_right_187;
    PyObject *tmp_compexpr_right_188;
    PyObject *tmp_compexpr_right_189;
    PyObject *tmp_compexpr_right_190;
    PyObject *tmp_compexpr_right_191;
    PyObject *tmp_compexpr_right_192;
    PyObject *tmp_compexpr_right_193;
    PyObject *tmp_compexpr_right_194;
    PyObject *tmp_compexpr_right_195;
    PyObject *tmp_compexpr_right_196;
    PyObject *tmp_compexpr_right_197;
    PyObject *tmp_compexpr_right_198;
    PyObject *tmp_compexpr_right_199;
    PyObject *tmp_compexpr_right_200;
    PyObject *tmp_compexpr_right_201;
    PyObject *tmp_compexpr_right_202;
    PyObject *tmp_compexpr_right_203;
    PyObject *tmp_compexpr_right_204;
    PyObject *tmp_compexpr_right_205;
    PyObject *tmp_compexpr_right_206;
    PyObject *tmp_compexpr_right_207;
    PyObject *tmp_compexpr_right_208;
    PyObject *tmp_compexpr_right_209;
    PyObject *tmp_compexpr_right_210;
    PyObject *tmp_compexpr_right_211;
    PyObject *tmp_compexpr_right_212;
    PyObject *tmp_compexpr_right_213;
    PyObject *tmp_compexpr_right_214;
    PyObject *tmp_compexpr_right_215;
    PyObject *tmp_compexpr_right_216;
    PyObject *tmp_compexpr_right_217;
    PyObject *tmp_compexpr_right_218;
    PyObject *tmp_compexpr_right_219;
    PyObject *tmp_compexpr_right_220;
    PyObject *tmp_compexpr_right_221;
    PyObject *tmp_compexpr_right_222;
    PyObject *tmp_compexpr_right_223;
    PyObject *tmp_compexpr_right_224;
    PyObject *tmp_compexpr_right_225;
    PyObject *tmp_compexpr_right_226;
    PyObject *tmp_compexpr_right_227;
    PyObject *tmp_compexpr_right_228;
    PyObject *tmp_compexpr_right_229;
    PyObject *tmp_compexpr_right_230;
    PyObject *tmp_compexpr_right_231;
    PyObject *tmp_compexpr_right_232;
    PyObject *tmp_compexpr_right_233;
    PyObject *tmp_compexpr_right_234;
    PyObject *tmp_compexpr_right_235;
    PyObject *tmp_compexpr_right_236;
    PyObject *tmp_compexpr_right_237;
    PyObject *tmp_compexpr_right_238;
    PyObject *tmp_compexpr_right_239;
    PyObject *tmp_compexpr_right_240;
    PyObject *tmp_compexpr_right_241;
    PyObject *tmp_compexpr_right_242;
    PyObject *tmp_compexpr_right_243;
    PyObject *tmp_compexpr_right_244;
    PyObject *tmp_compexpr_right_245;
    PyObject *tmp_compexpr_right_246;
    PyObject *tmp_compexpr_right_247;
    PyObject *tmp_compexpr_right_248;
    PyObject *tmp_compexpr_right_249;
    PyObject *tmp_compexpr_right_250;
    PyObject *tmp_compexpr_right_251;
    PyObject *tmp_compexpr_right_252;
    PyObject *tmp_compexpr_right_253;
    PyObject *tmp_compexpr_right_254;
    PyObject *tmp_compexpr_right_255;
    PyObject *tmp_compexpr_right_256;
    PyObject *tmp_compexpr_right_257;
    PyObject *tmp_compexpr_right_258;
    PyObject *tmp_compexpr_right_259;
    PyObject *tmp_compexpr_right_260;
    PyObject *tmp_compexpr_right_261;
    PyObject *tmp_compexpr_right_262;
    PyObject *tmp_compexpr_right_263;
    PyObject *tmp_compexpr_right_264;
    PyObject *tmp_compexpr_right_265;
    PyObject *tmp_compexpr_right_266;
    PyObject *tmp_compexpr_right_267;
    PyObject *tmp_compexpr_right_268;
    PyObject *tmp_compexpr_right_269;
    PyObject *tmp_compexpr_right_270;
    PyObject *tmp_compexpr_right_271;
    PyObject *tmp_compexpr_right_272;
    PyObject *tmp_compexpr_right_273;
    PyObject *tmp_compexpr_right_274;
    PyObject *tmp_compexpr_right_275;
    PyObject *tmp_compexpr_right_276;
    PyObject *tmp_compexpr_right_277;
    PyObject *tmp_compexpr_right_278;
    PyObject *tmp_compexpr_right_279;
    PyObject *tmp_compexpr_right_280;
    PyObject *tmp_compexpr_right_281;
    PyObject *tmp_compexpr_right_282;
    PyObject *tmp_compexpr_right_283;
    PyObject *tmp_compexpr_right_284;
    PyObject *tmp_compexpr_right_285;
    PyObject *tmp_compexpr_right_286;
    PyObject *tmp_compexpr_right_287;
    PyObject *tmp_compexpr_right_288;
    PyObject *tmp_compexpr_right_289;
    PyObject *tmp_compexpr_right_290;
    PyObject *tmp_compexpr_right_291;
    PyObject *tmp_compexpr_right_292;
    PyObject *tmp_compexpr_right_293;
    PyObject *tmp_compexpr_right_294;
    PyObject *tmp_compexpr_right_295;
    PyObject *tmp_compexpr_right_296;
    PyObject *tmp_compexpr_right_297;
    PyObject *tmp_compexpr_right_298;
    PyObject *tmp_compexpr_right_299;
    PyObject *tmp_compexpr_right_300;
    PyObject *tmp_compexpr_right_301;
    PyObject *tmp_compexpr_right_302;
    PyObject *tmp_compexpr_right_303;
    PyObject *tmp_compexpr_right_304;
    PyObject *tmp_compexpr_right_305;
    PyObject *tmp_compexpr_right_306;
    PyObject *tmp_compexpr_right_307;
    PyObject *tmp_compexpr_right_308;
    PyObject *tmp_compexpr_right_309;
    PyObject *tmp_compexpr_right_310;
    PyObject *tmp_compexpr_right_311;
    PyObject *tmp_compexpr_right_312;
    PyObject *tmp_compexpr_right_313;
    PyObject *tmp_compexpr_right_314;
    PyObject *tmp_compexpr_right_315;
    PyObject *tmp_compexpr_right_316;
    PyObject *tmp_compexpr_right_317;
    PyObject *tmp_compexpr_right_318;
    PyObject *tmp_compexpr_right_319;
    PyObject *tmp_compexpr_right_320;
    PyObject *tmp_compexpr_right_321;
    PyObject *tmp_compexpr_right_322;
    PyObject *tmp_compexpr_right_323;
    PyObject *tmp_compexpr_right_324;
    PyObject *tmp_compexpr_right_325;
    PyObject *tmp_compexpr_right_326;
    PyObject *tmp_compexpr_right_327;
    PyObject *tmp_compexpr_right_328;
    PyObject *tmp_compexpr_right_329;
    PyObject *tmp_compexpr_right_330;
    PyObject *tmp_compexpr_right_331;
    PyObject *tmp_compexpr_right_332;
    PyObject *tmp_compexpr_right_333;
    PyObject *tmp_compexpr_right_334;
    PyObject *tmp_compexpr_right_335;
    PyObject *tmp_compexpr_right_336;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    int tmp_cond_truth_23;
    int tmp_cond_truth_24;
    int tmp_cond_truth_25;
    int tmp_cond_truth_26;
    int tmp_cond_truth_27;
    int tmp_cond_truth_28;
    int tmp_cond_truth_29;
    int tmp_cond_truth_30;
    int tmp_cond_truth_31;
    int tmp_cond_truth_32;
    int tmp_cond_truth_33;
    int tmp_cond_truth_34;
    int tmp_cond_truth_35;
    int tmp_cond_truth_36;
    int tmp_cond_truth_37;
    int tmp_cond_truth_38;
    int tmp_cond_truth_39;
    int tmp_cond_truth_40;
    int tmp_cond_truth_41;
    int tmp_cond_truth_42;
    int tmp_cond_truth_43;
    int tmp_cond_truth_44;
    int tmp_cond_truth_45;
    int tmp_cond_truth_46;
    int tmp_cond_truth_47;
    int tmp_cond_truth_48;
    int tmp_cond_truth_49;
    int tmp_cond_truth_50;
    int tmp_cond_truth_51;
    int tmp_cond_truth_52;
    int tmp_cond_truth_53;
    int tmp_cond_truth_54;
    int tmp_cond_truth_55;
    int tmp_cond_truth_56;
    int tmp_cond_truth_57;
    int tmp_cond_truth_58;
    int tmp_cond_truth_59;
    int tmp_cond_truth_60;
    int tmp_cond_truth_61;
    int tmp_cond_truth_62;
    int tmp_cond_truth_63;
    int tmp_cond_truth_64;
    int tmp_cond_truth_65;
    int tmp_cond_truth_66;
    int tmp_cond_truth_67;
    int tmp_cond_truth_68;
    int tmp_cond_truth_69;
    int tmp_cond_truth_70;
    int tmp_cond_truth_71;
    int tmp_cond_truth_72;
    int tmp_cond_truth_73;
    int tmp_cond_truth_74;
    int tmp_cond_truth_75;
    int tmp_cond_truth_76;
    int tmp_cond_truth_77;
    int tmp_cond_truth_78;
    int tmp_cond_truth_79;
    int tmp_cond_truth_80;
    int tmp_cond_truth_81;
    int tmp_cond_truth_82;
    int tmp_cond_truth_83;
    int tmp_cond_truth_84;
    int tmp_cond_truth_85;
    int tmp_cond_truth_86;
    int tmp_cond_truth_87;
    int tmp_cond_truth_88;
    int tmp_cond_truth_89;
    int tmp_cond_truth_90;
    int tmp_cond_truth_91;
    int tmp_cond_truth_92;
    int tmp_cond_truth_93;
    int tmp_cond_truth_94;
    int tmp_cond_truth_95;
    int tmp_cond_truth_96;
    int tmp_cond_truth_97;
    int tmp_cond_truth_98;
    int tmp_cond_truth_99;
    int tmp_cond_truth_100;
    int tmp_cond_truth_101;
    int tmp_cond_truth_102;
    int tmp_cond_truth_103;
    int tmp_cond_truth_104;
    int tmp_cond_truth_105;
    int tmp_cond_truth_106;
    int tmp_cond_truth_107;
    int tmp_cond_truth_108;
    int tmp_cond_truth_109;
    int tmp_cond_truth_110;
    int tmp_cond_truth_111;
    int tmp_cond_truth_112;
    int tmp_cond_truth_113;
    int tmp_cond_truth_114;
    int tmp_cond_truth_115;
    int tmp_cond_truth_116;
    int tmp_cond_truth_117;
    int tmp_cond_truth_118;
    int tmp_cond_truth_119;
    int tmp_cond_truth_120;
    int tmp_cond_truth_121;
    int tmp_cond_truth_122;
    int tmp_cond_truth_123;
    int tmp_cond_truth_124;
    int tmp_cond_truth_125;
    int tmp_cond_truth_126;
    int tmp_cond_truth_127;
    int tmp_cond_truth_128;
    int tmp_cond_truth_129;
    int tmp_cond_truth_130;
    int tmp_cond_truth_131;
    int tmp_cond_truth_132;
    int tmp_cond_truth_133;
    int tmp_cond_truth_134;
    int tmp_cond_truth_135;
    int tmp_cond_truth_136;
    int tmp_cond_truth_137;
    int tmp_cond_truth_138;
    int tmp_cond_truth_139;
    int tmp_cond_truth_140;
    int tmp_cond_truth_141;
    int tmp_cond_truth_142;
    int tmp_cond_truth_143;
    int tmp_cond_truth_144;
    int tmp_cond_truth_145;
    int tmp_cond_truth_146;
    int tmp_cond_truth_147;
    int tmp_cond_truth_148;
    int tmp_cond_truth_149;
    int tmp_cond_truth_150;
    int tmp_cond_truth_151;
    int tmp_cond_truth_152;
    int tmp_cond_truth_153;
    int tmp_cond_truth_154;
    int tmp_cond_truth_155;
    int tmp_cond_truth_156;
    int tmp_cond_truth_157;
    int tmp_cond_truth_158;
    int tmp_cond_truth_159;
    int tmp_cond_truth_160;
    int tmp_cond_truth_161;
    int tmp_cond_truth_162;
    int tmp_cond_truth_163;
    int tmp_cond_truth_164;
    int tmp_cond_truth_165;
    int tmp_cond_truth_166;
    int tmp_cond_truth_167;
    int tmp_cond_truth_168;
    int tmp_cond_truth_169;
    int tmp_cond_truth_170;
    int tmp_cond_truth_171;
    int tmp_cond_truth_172;
    int tmp_cond_truth_173;
    int tmp_cond_truth_174;
    int tmp_cond_truth_175;
    int tmp_cond_truth_176;
    int tmp_cond_truth_177;
    int tmp_cond_truth_178;
    int tmp_cond_truth_179;
    int tmp_cond_truth_180;
    int tmp_cond_truth_181;
    int tmp_cond_truth_182;
    int tmp_cond_truth_183;
    int tmp_cond_truth_184;
    int tmp_cond_truth_185;
    int tmp_cond_truth_186;
    int tmp_cond_truth_187;
    int tmp_cond_truth_188;
    int tmp_cond_truth_189;
    int tmp_cond_truth_190;
    int tmp_cond_truth_191;
    int tmp_cond_truth_192;
    int tmp_cond_truth_193;
    int tmp_cond_truth_194;
    int tmp_cond_truth_195;
    int tmp_cond_truth_196;
    int tmp_cond_truth_197;
    int tmp_cond_truth_198;
    int tmp_cond_truth_199;
    int tmp_cond_truth_200;
    int tmp_cond_truth_201;
    int tmp_cond_truth_202;
    int tmp_cond_truth_203;
    int tmp_cond_truth_204;
    int tmp_cond_truth_205;
    int tmp_cond_truth_206;
    int tmp_cond_truth_207;
    int tmp_cond_truth_208;
    int tmp_cond_truth_209;
    int tmp_cond_truth_210;
    int tmp_cond_truth_211;
    int tmp_cond_truth_212;
    int tmp_cond_truth_213;
    int tmp_cond_truth_214;
    int tmp_cond_truth_215;
    int tmp_cond_truth_216;
    int tmp_cond_truth_217;
    int tmp_cond_truth_218;
    int tmp_cond_truth_219;
    int tmp_cond_truth_220;
    int tmp_cond_truth_221;
    int tmp_cond_truth_222;
    int tmp_cond_truth_223;
    int tmp_cond_truth_224;
    int tmp_cond_truth_225;
    int tmp_cond_truth_226;
    int tmp_cond_truth_227;
    int tmp_cond_truth_228;
    int tmp_cond_truth_229;
    int tmp_cond_truth_230;
    int tmp_cond_truth_231;
    int tmp_cond_truth_232;
    int tmp_cond_truth_233;
    int tmp_cond_truth_234;
    int tmp_cond_truth_235;
    int tmp_cond_truth_236;
    int tmp_cond_truth_237;
    int tmp_cond_truth_238;
    int tmp_cond_truth_239;
    int tmp_cond_truth_240;
    int tmp_cond_truth_241;
    int tmp_cond_truth_242;
    int tmp_cond_truth_243;
    int tmp_cond_truth_244;
    int tmp_cond_truth_245;
    int tmp_cond_truth_246;
    int tmp_cond_truth_247;
    int tmp_cond_truth_248;
    int tmp_cond_truth_249;
    int tmp_cond_truth_250;
    int tmp_cond_truth_251;
    int tmp_cond_truth_252;
    int tmp_cond_truth_253;
    int tmp_cond_truth_254;
    int tmp_cond_truth_255;
    int tmp_cond_truth_256;
    int tmp_cond_truth_257;
    int tmp_cond_truth_258;
    int tmp_cond_truth_259;
    int tmp_cond_truth_260;
    int tmp_cond_truth_261;
    int tmp_cond_truth_262;
    int tmp_cond_truth_263;
    int tmp_cond_truth_264;
    int tmp_cond_truth_265;
    int tmp_cond_truth_266;
    int tmp_cond_truth_267;
    int tmp_cond_truth_268;
    int tmp_cond_truth_269;
    int tmp_cond_truth_270;
    int tmp_cond_truth_271;
    int tmp_cond_truth_272;
    int tmp_cond_truth_273;
    int tmp_cond_truth_274;
    int tmp_cond_truth_275;
    int tmp_cond_truth_276;
    int tmp_cond_truth_277;
    int tmp_cond_truth_278;
    int tmp_cond_truth_279;
    int tmp_cond_truth_280;
    int tmp_cond_truth_281;
    int tmp_cond_truth_282;
    int tmp_cond_truth_283;
    int tmp_cond_truth_284;
    int tmp_cond_truth_285;
    int tmp_cond_truth_286;
    int tmp_cond_truth_287;
    int tmp_cond_truth_288;
    int tmp_cond_truth_289;
    int tmp_cond_truth_290;
    int tmp_cond_truth_291;
    int tmp_cond_truth_292;
    int tmp_cond_truth_293;
    int tmp_cond_truth_294;
    int tmp_cond_truth_295;
    int tmp_cond_truth_296;
    int tmp_cond_truth_297;
    int tmp_cond_truth_298;
    int tmp_cond_truth_299;
    int tmp_cond_truth_300;
    int tmp_cond_truth_301;
    int tmp_cond_truth_302;
    int tmp_cond_truth_303;
    int tmp_cond_truth_304;
    int tmp_cond_truth_305;
    int tmp_cond_truth_306;
    int tmp_cond_truth_307;
    int tmp_cond_truth_308;
    int tmp_cond_truth_309;
    int tmp_cond_truth_310;
    int tmp_cond_truth_311;
    int tmp_cond_truth_312;
    int tmp_cond_truth_313;
    int tmp_cond_truth_314;
    int tmp_cond_truth_315;
    int tmp_cond_truth_316;
    int tmp_cond_truth_317;
    int tmp_cond_truth_318;
    int tmp_cond_truth_319;
    int tmp_cond_truth_320;
    int tmp_cond_truth_321;
    int tmp_cond_truth_322;
    int tmp_cond_truth_323;
    int tmp_cond_truth_324;
    int tmp_cond_truth_325;
    int tmp_cond_truth_326;
    int tmp_cond_truth_327;
    int tmp_cond_truth_328;
    int tmp_cond_truth_329;
    int tmp_cond_truth_330;
    int tmp_cond_truth_331;
    int tmp_cond_truth_332;
    int tmp_cond_truth_333;
    int tmp_cond_truth_334;
    int tmp_cond_truth_335;
    int tmp_cond_truth_336;
    int tmp_cond_truth_337;
    int tmp_cond_truth_338;
    int tmp_cond_truth_339;
    int tmp_cond_truth_340;
    int tmp_cond_truth_341;
    int tmp_cond_truth_342;
    int tmp_cond_truth_343;
    int tmp_cond_truth_344;
    int tmp_cond_truth_345;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_cond_value_23;
    PyObject *tmp_cond_value_24;
    PyObject *tmp_cond_value_25;
    PyObject *tmp_cond_value_26;
    PyObject *tmp_cond_value_27;
    PyObject *tmp_cond_value_28;
    PyObject *tmp_cond_value_29;
    PyObject *tmp_cond_value_30;
    PyObject *tmp_cond_value_31;
    PyObject *tmp_cond_value_32;
    PyObject *tmp_cond_value_33;
    PyObject *tmp_cond_value_34;
    PyObject *tmp_cond_value_35;
    PyObject *tmp_cond_value_36;
    PyObject *tmp_cond_value_37;
    PyObject *tmp_cond_value_38;
    PyObject *tmp_cond_value_39;
    PyObject *tmp_cond_value_40;
    PyObject *tmp_cond_value_41;
    PyObject *tmp_cond_value_42;
    PyObject *tmp_cond_value_43;
    PyObject *tmp_cond_value_44;
    PyObject *tmp_cond_value_45;
    PyObject *tmp_cond_value_46;
    PyObject *tmp_cond_value_47;
    PyObject *tmp_cond_value_48;
    PyObject *tmp_cond_value_49;
    PyObject *tmp_cond_value_50;
    PyObject *tmp_cond_value_51;
    PyObject *tmp_cond_value_52;
    PyObject *tmp_cond_value_53;
    PyObject *tmp_cond_value_54;
    PyObject *tmp_cond_value_55;
    PyObject *tmp_cond_value_56;
    PyObject *tmp_cond_value_57;
    PyObject *tmp_cond_value_58;
    PyObject *tmp_cond_value_59;
    PyObject *tmp_cond_value_60;
    PyObject *tmp_cond_value_61;
    PyObject *tmp_cond_value_62;
    PyObject *tmp_cond_value_63;
    PyObject *tmp_cond_value_64;
    PyObject *tmp_cond_value_65;
    PyObject *tmp_cond_value_66;
    PyObject *tmp_cond_value_67;
    PyObject *tmp_cond_value_68;
    PyObject *tmp_cond_value_69;
    PyObject *tmp_cond_value_70;
    PyObject *tmp_cond_value_71;
    PyObject *tmp_cond_value_72;
    PyObject *tmp_cond_value_73;
    PyObject *tmp_cond_value_74;
    PyObject *tmp_cond_value_75;
    PyObject *tmp_cond_value_76;
    PyObject *tmp_cond_value_77;
    PyObject *tmp_cond_value_78;
    PyObject *tmp_cond_value_79;
    PyObject *tmp_cond_value_80;
    PyObject *tmp_cond_value_81;
    PyObject *tmp_cond_value_82;
    PyObject *tmp_cond_value_83;
    PyObject *tmp_cond_value_84;
    PyObject *tmp_cond_value_85;
    PyObject *tmp_cond_value_86;
    PyObject *tmp_cond_value_87;
    PyObject *tmp_cond_value_88;
    PyObject *tmp_cond_value_89;
    PyObject *tmp_cond_value_90;
    PyObject *tmp_cond_value_91;
    PyObject *tmp_cond_value_92;
    PyObject *tmp_cond_value_93;
    PyObject *tmp_cond_value_94;
    PyObject *tmp_cond_value_95;
    PyObject *tmp_cond_value_96;
    PyObject *tmp_cond_value_97;
    PyObject *tmp_cond_value_98;
    PyObject *tmp_cond_value_99;
    PyObject *tmp_cond_value_100;
    PyObject *tmp_cond_value_101;
    PyObject *tmp_cond_value_102;
    PyObject *tmp_cond_value_103;
    PyObject *tmp_cond_value_104;
    PyObject *tmp_cond_value_105;
    PyObject *tmp_cond_value_106;
    PyObject *tmp_cond_value_107;
    PyObject *tmp_cond_value_108;
    PyObject *tmp_cond_value_109;
    PyObject *tmp_cond_value_110;
    PyObject *tmp_cond_value_111;
    PyObject *tmp_cond_value_112;
    PyObject *tmp_cond_value_113;
    PyObject *tmp_cond_value_114;
    PyObject *tmp_cond_value_115;
    PyObject *tmp_cond_value_116;
    PyObject *tmp_cond_value_117;
    PyObject *tmp_cond_value_118;
    PyObject *tmp_cond_value_119;
    PyObject *tmp_cond_value_120;
    PyObject *tmp_cond_value_121;
    PyObject *tmp_cond_value_122;
    PyObject *tmp_cond_value_123;
    PyObject *tmp_cond_value_124;
    PyObject *tmp_cond_value_125;
    PyObject *tmp_cond_value_126;
    PyObject *tmp_cond_value_127;
    PyObject *tmp_cond_value_128;
    PyObject *tmp_cond_value_129;
    PyObject *tmp_cond_value_130;
    PyObject *tmp_cond_value_131;
    PyObject *tmp_cond_value_132;
    PyObject *tmp_cond_value_133;
    PyObject *tmp_cond_value_134;
    PyObject *tmp_cond_value_135;
    PyObject *tmp_cond_value_136;
    PyObject *tmp_cond_value_137;
    PyObject *tmp_cond_value_138;
    PyObject *tmp_cond_value_139;
    PyObject *tmp_cond_value_140;
    PyObject *tmp_cond_value_141;
    PyObject *tmp_cond_value_142;
    PyObject *tmp_cond_value_143;
    PyObject *tmp_cond_value_144;
    PyObject *tmp_cond_value_145;
    PyObject *tmp_cond_value_146;
    PyObject *tmp_cond_value_147;
    PyObject *tmp_cond_value_148;
    PyObject *tmp_cond_value_149;
    PyObject *tmp_cond_value_150;
    PyObject *tmp_cond_value_151;
    PyObject *tmp_cond_value_152;
    PyObject *tmp_cond_value_153;
    PyObject *tmp_cond_value_154;
    PyObject *tmp_cond_value_155;
    PyObject *tmp_cond_value_156;
    PyObject *tmp_cond_value_157;
    PyObject *tmp_cond_value_158;
    PyObject *tmp_cond_value_159;
    PyObject *tmp_cond_value_160;
    PyObject *tmp_cond_value_161;
    PyObject *tmp_cond_value_162;
    PyObject *tmp_cond_value_163;
    PyObject *tmp_cond_value_164;
    PyObject *tmp_cond_value_165;
    PyObject *tmp_cond_value_166;
    PyObject *tmp_cond_value_167;
    PyObject *tmp_cond_value_168;
    PyObject *tmp_cond_value_169;
    PyObject *tmp_cond_value_170;
    PyObject *tmp_cond_value_171;
    PyObject *tmp_cond_value_172;
    PyObject *tmp_cond_value_173;
    PyObject *tmp_cond_value_174;
    PyObject *tmp_cond_value_175;
    PyObject *tmp_cond_value_176;
    PyObject *tmp_cond_value_177;
    PyObject *tmp_cond_value_178;
    PyObject *tmp_cond_value_179;
    PyObject *tmp_cond_value_180;
    PyObject *tmp_cond_value_181;
    PyObject *tmp_cond_value_182;
    PyObject *tmp_cond_value_183;
    PyObject *tmp_cond_value_184;
    PyObject *tmp_cond_value_185;
    PyObject *tmp_cond_value_186;
    PyObject *tmp_cond_value_187;
    PyObject *tmp_cond_value_188;
    PyObject *tmp_cond_value_189;
    PyObject *tmp_cond_value_190;
    PyObject *tmp_cond_value_191;
    PyObject *tmp_cond_value_192;
    PyObject *tmp_cond_value_193;
    PyObject *tmp_cond_value_194;
    PyObject *tmp_cond_value_195;
    PyObject *tmp_cond_value_196;
    PyObject *tmp_cond_value_197;
    PyObject *tmp_cond_value_198;
    PyObject *tmp_cond_value_199;
    PyObject *tmp_cond_value_200;
    PyObject *tmp_cond_value_201;
    PyObject *tmp_cond_value_202;
    PyObject *tmp_cond_value_203;
    PyObject *tmp_cond_value_204;
    PyObject *tmp_cond_value_205;
    PyObject *tmp_cond_value_206;
    PyObject *tmp_cond_value_207;
    PyObject *tmp_cond_value_208;
    PyObject *tmp_cond_value_209;
    PyObject *tmp_cond_value_210;
    PyObject *tmp_cond_value_211;
    PyObject *tmp_cond_value_212;
    PyObject *tmp_cond_value_213;
    PyObject *tmp_cond_value_214;
    PyObject *tmp_cond_value_215;
    PyObject *tmp_cond_value_216;
    PyObject *tmp_cond_value_217;
    PyObject *tmp_cond_value_218;
    PyObject *tmp_cond_value_219;
    PyObject *tmp_cond_value_220;
    PyObject *tmp_cond_value_221;
    PyObject *tmp_cond_value_222;
    PyObject *tmp_cond_value_223;
    PyObject *tmp_cond_value_224;
    PyObject *tmp_cond_value_225;
    PyObject *tmp_cond_value_226;
    PyObject *tmp_cond_value_227;
    PyObject *tmp_cond_value_228;
    PyObject *tmp_cond_value_229;
    PyObject *tmp_cond_value_230;
    PyObject *tmp_cond_value_231;
    PyObject *tmp_cond_value_232;
    PyObject *tmp_cond_value_233;
    PyObject *tmp_cond_value_234;
    PyObject *tmp_cond_value_235;
    PyObject *tmp_cond_value_236;
    PyObject *tmp_cond_value_237;
    PyObject *tmp_cond_value_238;
    PyObject *tmp_cond_value_239;
    PyObject *tmp_cond_value_240;
    PyObject *tmp_cond_value_241;
    PyObject *tmp_cond_value_242;
    PyObject *tmp_cond_value_243;
    PyObject *tmp_cond_value_244;
    PyObject *tmp_cond_value_245;
    PyObject *tmp_cond_value_246;
    PyObject *tmp_cond_value_247;
    PyObject *tmp_cond_value_248;
    PyObject *tmp_cond_value_249;
    PyObject *tmp_cond_value_250;
    PyObject *tmp_cond_value_251;
    PyObject *tmp_cond_value_252;
    PyObject *tmp_cond_value_253;
    PyObject *tmp_cond_value_254;
    PyObject *tmp_cond_value_255;
    PyObject *tmp_cond_value_256;
    PyObject *tmp_cond_value_257;
    PyObject *tmp_cond_value_258;
    PyObject *tmp_cond_value_259;
    PyObject *tmp_cond_value_260;
    PyObject *tmp_cond_value_261;
    PyObject *tmp_cond_value_262;
    PyObject *tmp_cond_value_263;
    PyObject *tmp_cond_value_264;
    PyObject *tmp_cond_value_265;
    PyObject *tmp_cond_value_266;
    PyObject *tmp_cond_value_267;
    PyObject *tmp_cond_value_268;
    PyObject *tmp_cond_value_269;
    PyObject *tmp_cond_value_270;
    PyObject *tmp_cond_value_271;
    PyObject *tmp_cond_value_272;
    PyObject *tmp_cond_value_273;
    PyObject *tmp_cond_value_274;
    PyObject *tmp_cond_value_275;
    PyObject *tmp_cond_value_276;
    PyObject *tmp_cond_value_277;
    PyObject *tmp_cond_value_278;
    PyObject *tmp_cond_value_279;
    PyObject *tmp_cond_value_280;
    PyObject *tmp_cond_value_281;
    PyObject *tmp_cond_value_282;
    PyObject *tmp_cond_value_283;
    PyObject *tmp_cond_value_284;
    PyObject *tmp_cond_value_285;
    PyObject *tmp_cond_value_286;
    PyObject *tmp_cond_value_287;
    PyObject *tmp_cond_value_288;
    PyObject *tmp_cond_value_289;
    PyObject *tmp_cond_value_290;
    PyObject *tmp_cond_value_291;
    PyObject *tmp_cond_value_292;
    PyObject *tmp_cond_value_293;
    PyObject *tmp_cond_value_294;
    PyObject *tmp_cond_value_295;
    PyObject *tmp_cond_value_296;
    PyObject *tmp_cond_value_297;
    PyObject *tmp_cond_value_298;
    PyObject *tmp_cond_value_299;
    PyObject *tmp_cond_value_300;
    PyObject *tmp_cond_value_301;
    PyObject *tmp_cond_value_302;
    PyObject *tmp_cond_value_303;
    PyObject *tmp_cond_value_304;
    PyObject *tmp_cond_value_305;
    PyObject *tmp_cond_value_306;
    PyObject *tmp_cond_value_307;
    PyObject *tmp_cond_value_308;
    PyObject *tmp_cond_value_309;
    PyObject *tmp_cond_value_310;
    PyObject *tmp_cond_value_311;
    PyObject *tmp_cond_value_312;
    PyObject *tmp_cond_value_313;
    PyObject *tmp_cond_value_314;
    PyObject *tmp_cond_value_315;
    PyObject *tmp_cond_value_316;
    PyObject *tmp_cond_value_317;
    PyObject *tmp_cond_value_318;
    PyObject *tmp_cond_value_319;
    PyObject *tmp_cond_value_320;
    PyObject *tmp_cond_value_321;
    PyObject *tmp_cond_value_322;
    PyObject *tmp_cond_value_323;
    PyObject *tmp_cond_value_324;
    PyObject *tmp_cond_value_325;
    PyObject *tmp_cond_value_326;
    PyObject *tmp_cond_value_327;
    PyObject *tmp_cond_value_328;
    PyObject *tmp_cond_value_329;
    PyObject *tmp_cond_value_330;
    PyObject *tmp_cond_value_331;
    PyObject *tmp_cond_value_332;
    PyObject *tmp_cond_value_333;
    PyObject *tmp_cond_value_334;
    PyObject *tmp_cond_value_335;
    PyObject *tmp_cond_value_336;
    PyObject *tmp_cond_value_337;
    PyObject *tmp_cond_value_338;
    PyObject *tmp_cond_value_339;
    PyObject *tmp_cond_value_340;
    PyObject *tmp_cond_value_341;
    PyObject *tmp_cond_value_342;
    PyObject *tmp_cond_value_343;
    PyObject *tmp_cond_value_344;
    PyObject *tmp_cond_value_345;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_dict_seq_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_int_arg_1;
    PyObject *tmp_int_arg_2;
    PyObject *tmp_int_arg_3;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_left_name_15;
    PyObject *tmp_left_name_16;
    PyObject *tmp_left_name_17;
    PyObject *tmp_left_name_18;
    PyObject *tmp_left_name_19;
    PyObject *tmp_left_name_20;
    PyObject *tmp_left_name_21;
    PyObject *tmp_left_name_22;
    PyObject *tmp_left_name_23;
    PyObject *tmp_left_name_24;
    PyObject *tmp_left_name_25;
    PyObject *tmp_left_name_26;
    PyObject *tmp_left_name_27;
    PyObject *tmp_left_name_28;
    PyObject *tmp_left_name_29;
    PyObject *tmp_left_name_30;
    PyObject *tmp_left_name_31;
    PyObject *tmp_left_name_32;
    PyObject *tmp_left_name_33;
    PyObject *tmp_left_name_34;
    PyObject *tmp_left_name_35;
    PyObject *tmp_left_name_36;
    PyObject *tmp_left_name_37;
    PyObject *tmp_left_name_38;
    PyObject *tmp_left_name_39;
    PyObject *tmp_left_name_40;
    PyObject *tmp_left_name_41;
    PyObject *tmp_left_name_42;
    PyObject *tmp_left_name_43;
    PyObject *tmp_left_name_44;
    PyObject *tmp_left_name_45;
    PyObject *tmp_left_name_46;
    PyObject *tmp_left_name_47;
    PyObject *tmp_left_name_48;
    PyObject *tmp_left_name_49;
    PyObject *tmp_left_name_50;
    PyObject *tmp_left_name_51;
    PyObject *tmp_left_name_52;
    PyObject *tmp_left_name_53;
    PyObject *tmp_left_name_54;
    PyObject *tmp_left_name_55;
    PyObject *tmp_left_name_56;
    PyObject *tmp_left_name_57;
    PyObject *tmp_left_name_58;
    PyObject *tmp_left_name_59;
    PyObject *tmp_left_name_60;
    PyObject *tmp_left_name_61;
    PyObject *tmp_left_name_62;
    PyObject *tmp_left_name_63;
    PyObject *tmp_left_name_64;
    PyObject *tmp_left_name_65;
    PyObject *tmp_left_name_66;
    PyObject *tmp_left_name_67;
    PyObject *tmp_left_name_68;
    PyObject *tmp_left_name_69;
    PyObject *tmp_left_name_70;
    PyObject *tmp_left_name_71;
    PyObject *tmp_left_name_72;
    PyObject *tmp_left_name_73;
    PyObject *tmp_left_name_74;
    PyObject *tmp_left_name_75;
    PyObject *tmp_left_name_76;
    PyObject *tmp_left_name_77;
    PyObject *tmp_left_name_78;
    PyObject *tmp_left_name_79;
    PyObject *tmp_left_name_80;
    PyObject *tmp_left_name_81;
    PyObject *tmp_left_name_82;
    PyObject *tmp_left_name_83;
    PyObject *tmp_left_name_84;
    PyObject *tmp_left_name_85;
    PyObject *tmp_left_name_86;
    PyObject *tmp_left_name_87;
    PyObject *tmp_left_name_88;
    PyObject *tmp_left_name_89;
    PyObject *tmp_left_name_90;
    PyObject *tmp_left_name_91;
    PyObject *tmp_left_name_92;
    PyObject *tmp_left_name_93;
    PyObject *tmp_left_name_94;
    PyObject *tmp_left_name_95;
    PyObject *tmp_left_name_96;
    PyObject *tmp_left_name_97;
    PyObject *tmp_left_name_98;
    PyObject *tmp_left_name_99;
    PyObject *tmp_left_name_100;
    PyObject *tmp_left_name_101;
    PyObject *tmp_left_name_102;
    PyObject *tmp_left_name_103;
    PyObject *tmp_left_name_104;
    PyObject *tmp_left_name_105;
    PyObject *tmp_left_name_106;
    PyObject *tmp_left_name_107;
    PyObject *tmp_left_name_108;
    PyObject *tmp_left_name_109;
    PyObject *tmp_left_name_110;
    PyObject *tmp_left_name_111;
    PyObject *tmp_left_name_112;
    PyObject *tmp_left_name_113;
    PyObject *tmp_left_name_114;
    PyObject *tmp_left_name_115;
    PyObject *tmp_left_name_116;
    PyObject *tmp_left_name_117;
    PyObject *tmp_left_name_118;
    PyObject *tmp_left_name_119;
    PyObject *tmp_left_name_120;
    PyObject *tmp_left_name_121;
    PyObject *tmp_left_name_122;
    PyObject *tmp_left_name_123;
    PyObject *tmp_left_name_124;
    PyObject *tmp_left_name_125;
    PyObject *tmp_left_name_126;
    PyObject *tmp_left_name_127;
    PyObject *tmp_left_name_128;
    PyObject *tmp_left_name_129;
    PyObject *tmp_left_name_130;
    PyObject *tmp_left_name_131;
    PyObject *tmp_left_name_132;
    PyObject *tmp_left_name_133;
    PyObject *tmp_left_name_134;
    PyObject *tmp_left_name_135;
    PyObject *tmp_left_name_136;
    PyObject *tmp_left_name_137;
    PyObject *tmp_left_name_138;
    PyObject *tmp_left_name_139;
    PyObject *tmp_left_name_140;
    PyObject *tmp_left_name_141;
    PyObject *tmp_left_name_142;
    PyObject *tmp_left_name_143;
    PyObject *tmp_left_name_144;
    PyObject *tmp_left_name_145;
    PyObject *tmp_left_name_146;
    PyObject *tmp_left_name_147;
    PyObject *tmp_left_name_148;
    PyObject *tmp_left_name_149;
    PyObject *tmp_left_name_150;
    PyObject *tmp_left_name_151;
    PyObject *tmp_left_name_152;
    PyObject *tmp_left_name_153;
    PyObject *tmp_left_name_154;
    PyObject *tmp_left_name_155;
    PyObject *tmp_left_name_156;
    PyObject *tmp_left_name_157;
    PyObject *tmp_left_name_158;
    PyObject *tmp_left_name_159;
    PyObject *tmp_left_name_160;
    PyObject *tmp_left_name_161;
    PyObject *tmp_left_name_162;
    PyObject *tmp_left_name_163;
    PyObject *tmp_left_name_164;
    PyObject *tmp_left_name_165;
    PyObject *tmp_left_name_166;
    PyObject *tmp_left_name_167;
    PyObject *tmp_left_name_168;
    PyObject *tmp_left_name_169;
    PyObject *tmp_left_name_170;
    PyObject *tmp_left_name_171;
    PyObject *tmp_left_name_172;
    PyObject *tmp_left_name_173;
    PyObject *tmp_left_name_174;
    PyObject *tmp_left_name_175;
    PyObject *tmp_left_name_176;
    PyObject *tmp_left_name_177;
    PyObject *tmp_left_name_178;
    PyObject *tmp_left_name_179;
    PyObject *tmp_left_name_180;
    PyObject *tmp_left_name_181;
    PyObject *tmp_left_name_182;
    PyObject *tmp_left_name_183;
    PyObject *tmp_left_name_184;
    PyObject *tmp_left_name_185;
    PyObject *tmp_left_name_186;
    PyObject *tmp_left_name_187;
    PyObject *tmp_left_name_188;
    PyObject *tmp_left_name_189;
    PyObject *tmp_left_name_190;
    PyObject *tmp_left_name_191;
    PyObject *tmp_left_name_192;
    PyObject *tmp_left_name_193;
    PyObject *tmp_left_name_194;
    PyObject *tmp_left_name_195;
    PyObject *tmp_left_name_196;
    PyObject *tmp_left_name_197;
    PyObject *tmp_left_name_198;
    PyObject *tmp_left_name_199;
    PyObject *tmp_left_name_200;
    PyObject *tmp_left_name_201;
    PyObject *tmp_left_name_202;
    PyObject *tmp_left_name_203;
    PyObject *tmp_left_name_204;
    PyObject *tmp_left_name_205;
    PyObject *tmp_left_name_206;
    PyObject *tmp_left_name_207;
    PyObject *tmp_left_name_208;
    PyObject *tmp_left_name_209;
    PyObject *tmp_left_name_210;
    PyObject *tmp_left_name_211;
    PyObject *tmp_left_name_212;
    PyObject *tmp_left_name_213;
    PyObject *tmp_left_name_214;
    PyObject *tmp_left_name_215;
    PyObject *tmp_left_name_216;
    PyObject *tmp_left_name_217;
    PyObject *tmp_left_name_218;
    PyObject *tmp_left_name_219;
    PyObject *tmp_left_name_220;
    PyObject *tmp_left_name_221;
    PyObject *tmp_left_name_222;
    PyObject *tmp_left_name_223;
    PyObject *tmp_left_name_224;
    PyObject *tmp_left_name_225;
    PyObject *tmp_left_name_226;
    PyObject *tmp_left_name_227;
    PyObject *tmp_left_name_228;
    PyObject *tmp_left_name_229;
    PyObject *tmp_left_name_230;
    PyObject *tmp_left_name_231;
    PyObject *tmp_left_name_232;
    PyObject *tmp_left_name_233;
    PyObject *tmp_left_name_234;
    PyObject *tmp_left_name_235;
    PyObject *tmp_left_name_236;
    PyObject *tmp_left_name_237;
    PyObject *tmp_left_name_238;
    PyObject *tmp_left_name_239;
    PyObject *tmp_left_name_240;
    PyObject *tmp_left_name_241;
    PyObject *tmp_left_name_242;
    PyObject *tmp_left_name_243;
    PyObject *tmp_left_name_244;
    PyObject *tmp_left_name_245;
    PyObject *tmp_left_name_246;
    PyObject *tmp_left_name_247;
    PyObject *tmp_left_name_248;
    PyObject *tmp_left_name_249;
    PyObject *tmp_left_name_250;
    PyObject *tmp_left_name_251;
    PyObject *tmp_left_name_252;
    PyObject *tmp_left_name_253;
    PyObject *tmp_left_name_254;
    PyObject *tmp_left_name_255;
    PyObject *tmp_left_name_256;
    PyObject *tmp_left_name_257;
    PyObject *tmp_left_name_258;
    PyObject *tmp_left_name_259;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_list_arg_2;
    PyObject *tmp_list_arg_3;
    PyObject *tmp_list_arg_4;
    PyObject *tmp_list_arg_5;
    PyObject *tmp_list_arg_6;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_filename_2;
    PyObject *tmp_open_filename_3;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_open_mode_2;
    PyObject *tmp_open_mode_3;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_print_value;
    bool tmp_result;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    PyObject *tmp_right_name_15;
    PyObject *tmp_right_name_16;
    PyObject *tmp_right_name_17;
    PyObject *tmp_right_name_18;
    PyObject *tmp_right_name_19;
    PyObject *tmp_right_name_20;
    PyObject *tmp_right_name_21;
    PyObject *tmp_right_name_22;
    PyObject *tmp_right_name_23;
    PyObject *tmp_right_name_24;
    PyObject *tmp_right_name_25;
    PyObject *tmp_right_name_26;
    PyObject *tmp_right_name_27;
    PyObject *tmp_right_name_28;
    PyObject *tmp_right_name_29;
    PyObject *tmp_right_name_30;
    PyObject *tmp_right_name_31;
    PyObject *tmp_right_name_32;
    PyObject *tmp_right_name_33;
    PyObject *tmp_right_name_34;
    PyObject *tmp_right_name_35;
    PyObject *tmp_right_name_36;
    PyObject *tmp_right_name_37;
    PyObject *tmp_right_name_38;
    PyObject *tmp_right_name_39;
    PyObject *tmp_right_name_40;
    PyObject *tmp_right_name_41;
    PyObject *tmp_right_name_42;
    PyObject *tmp_right_name_43;
    PyObject *tmp_right_name_44;
    PyObject *tmp_right_name_45;
    PyObject *tmp_right_name_46;
    PyObject *tmp_right_name_47;
    PyObject *tmp_right_name_48;
    PyObject *tmp_right_name_49;
    PyObject *tmp_right_name_50;
    PyObject *tmp_right_name_51;
    PyObject *tmp_right_name_52;
    PyObject *tmp_right_name_53;
    PyObject *tmp_right_name_54;
    PyObject *tmp_right_name_55;
    PyObject *tmp_right_name_56;
    PyObject *tmp_right_name_57;
    PyObject *tmp_right_name_58;
    PyObject *tmp_right_name_59;
    PyObject *tmp_right_name_60;
    PyObject *tmp_right_name_61;
    PyObject *tmp_right_name_62;
    PyObject *tmp_right_name_63;
    PyObject *tmp_right_name_64;
    PyObject *tmp_right_name_65;
    PyObject *tmp_right_name_66;
    PyObject *tmp_right_name_67;
    PyObject *tmp_right_name_68;
    PyObject *tmp_right_name_69;
    PyObject *tmp_right_name_70;
    PyObject *tmp_right_name_71;
    PyObject *tmp_right_name_72;
    PyObject *tmp_right_name_73;
    PyObject *tmp_right_name_74;
    PyObject *tmp_right_name_75;
    PyObject *tmp_right_name_76;
    PyObject *tmp_right_name_77;
    PyObject *tmp_right_name_78;
    PyObject *tmp_right_name_79;
    PyObject *tmp_right_name_80;
    PyObject *tmp_right_name_81;
    PyObject *tmp_right_name_82;
    PyObject *tmp_right_name_83;
    PyObject *tmp_right_name_84;
    PyObject *tmp_right_name_85;
    PyObject *tmp_right_name_86;
    PyObject *tmp_right_name_87;
    PyObject *tmp_right_name_88;
    PyObject *tmp_right_name_89;
    PyObject *tmp_right_name_90;
    PyObject *tmp_right_name_91;
    PyObject *tmp_right_name_92;
    PyObject *tmp_right_name_93;
    PyObject *tmp_right_name_94;
    PyObject *tmp_right_name_95;
    PyObject *tmp_right_name_96;
    PyObject *tmp_right_name_97;
    PyObject *tmp_right_name_98;
    PyObject *tmp_right_name_99;
    PyObject *tmp_right_name_100;
    PyObject *tmp_right_name_101;
    PyObject *tmp_right_name_102;
    PyObject *tmp_right_name_103;
    PyObject *tmp_right_name_104;
    PyObject *tmp_right_name_105;
    PyObject *tmp_right_name_106;
    PyObject *tmp_right_name_107;
    PyObject *tmp_right_name_108;
    PyObject *tmp_right_name_109;
    PyObject *tmp_right_name_110;
    PyObject *tmp_right_name_111;
    PyObject *tmp_right_name_112;
    PyObject *tmp_right_name_113;
    PyObject *tmp_right_name_114;
    PyObject *tmp_right_name_115;
    PyObject *tmp_right_name_116;
    PyObject *tmp_right_name_117;
    PyObject *tmp_right_name_118;
    PyObject *tmp_right_name_119;
    PyObject *tmp_right_name_120;
    PyObject *tmp_right_name_121;
    PyObject *tmp_right_name_122;
    PyObject *tmp_right_name_123;
    PyObject *tmp_right_name_124;
    PyObject *tmp_right_name_125;
    PyObject *tmp_right_name_126;
    PyObject *tmp_right_name_127;
    PyObject *tmp_right_name_128;
    PyObject *tmp_right_name_129;
    PyObject *tmp_right_name_130;
    PyObject *tmp_right_name_131;
    PyObject *tmp_right_name_132;
    PyObject *tmp_right_name_133;
    PyObject *tmp_right_name_134;
    PyObject *tmp_right_name_135;
    PyObject *tmp_right_name_136;
    PyObject *tmp_right_name_137;
    PyObject *tmp_right_name_138;
    PyObject *tmp_right_name_139;
    PyObject *tmp_right_name_140;
    PyObject *tmp_right_name_141;
    PyObject *tmp_right_name_142;
    PyObject *tmp_right_name_143;
    PyObject *tmp_right_name_144;
    PyObject *tmp_right_name_145;
    PyObject *tmp_right_name_146;
    PyObject *tmp_right_name_147;
    PyObject *tmp_right_name_148;
    PyObject *tmp_right_name_149;
    PyObject *tmp_right_name_150;
    PyObject *tmp_right_name_151;
    PyObject *tmp_right_name_152;
    PyObject *tmp_right_name_153;
    PyObject *tmp_right_name_154;
    PyObject *tmp_right_name_155;
    PyObject *tmp_right_name_156;
    PyObject *tmp_right_name_157;
    PyObject *tmp_right_name_158;
    PyObject *tmp_right_name_159;
    PyObject *tmp_right_name_160;
    PyObject *tmp_right_name_161;
    PyObject *tmp_right_name_162;
    PyObject *tmp_right_name_163;
    PyObject *tmp_right_name_164;
    PyObject *tmp_right_name_165;
    PyObject *tmp_right_name_166;
    PyObject *tmp_right_name_167;
    PyObject *tmp_right_name_168;
    PyObject *tmp_right_name_169;
    PyObject *tmp_right_name_170;
    PyObject *tmp_right_name_171;
    PyObject *tmp_right_name_172;
    PyObject *tmp_right_name_173;
    PyObject *tmp_right_name_174;
    PyObject *tmp_right_name_175;
    PyObject *tmp_right_name_176;
    PyObject *tmp_right_name_177;
    PyObject *tmp_right_name_178;
    PyObject *tmp_right_name_179;
    PyObject *tmp_right_name_180;
    PyObject *tmp_right_name_181;
    PyObject *tmp_right_name_182;
    PyObject *tmp_right_name_183;
    PyObject *tmp_right_name_184;
    PyObject *tmp_right_name_185;
    PyObject *tmp_right_name_186;
    PyObject *tmp_right_name_187;
    PyObject *tmp_right_name_188;
    PyObject *tmp_right_name_189;
    PyObject *tmp_right_name_190;
    PyObject *tmp_right_name_191;
    PyObject *tmp_right_name_192;
    PyObject *tmp_right_name_193;
    PyObject *tmp_right_name_194;
    PyObject *tmp_right_name_195;
    PyObject *tmp_right_name_196;
    PyObject *tmp_right_name_197;
    PyObject *tmp_right_name_198;
    PyObject *tmp_right_name_199;
    PyObject *tmp_right_name_200;
    PyObject *tmp_right_name_201;
    PyObject *tmp_right_name_202;
    PyObject *tmp_right_name_203;
    PyObject *tmp_right_name_204;
    PyObject *tmp_right_name_205;
    PyObject *tmp_right_name_206;
    PyObject *tmp_right_name_207;
    PyObject *tmp_right_name_208;
    PyObject *tmp_right_name_209;
    PyObject *tmp_right_name_210;
    PyObject *tmp_right_name_211;
    PyObject *tmp_right_name_212;
    PyObject *tmp_right_name_213;
    PyObject *tmp_right_name_214;
    PyObject *tmp_right_name_215;
    PyObject *tmp_right_name_216;
    PyObject *tmp_right_name_217;
    PyObject *tmp_right_name_218;
    PyObject *tmp_right_name_219;
    PyObject *tmp_right_name_220;
    PyObject *tmp_right_name_221;
    PyObject *tmp_right_name_222;
    PyObject *tmp_right_name_223;
    PyObject *tmp_right_name_224;
    PyObject *tmp_right_name_225;
    PyObject *tmp_right_name_226;
    PyObject *tmp_right_name_227;
    PyObject *tmp_right_name_228;
    PyObject *tmp_right_name_229;
    PyObject *tmp_right_name_230;
    PyObject *tmp_right_name_231;
    PyObject *tmp_right_name_232;
    PyObject *tmp_right_name_233;
    PyObject *tmp_right_name_234;
    PyObject *tmp_right_name_235;
    PyObject *tmp_right_name_236;
    PyObject *tmp_right_name_237;
    PyObject *tmp_right_name_238;
    PyObject *tmp_right_name_239;
    PyObject *tmp_right_name_240;
    PyObject *tmp_right_name_241;
    PyObject *tmp_right_name_242;
    PyObject *tmp_right_name_243;
    PyObject *tmp_right_name_244;
    PyObject *tmp_right_name_245;
    PyObject *tmp_right_name_246;
    PyObject *tmp_right_name_247;
    PyObject *tmp_right_name_248;
    PyObject *tmp_right_name_249;
    PyObject *tmp_right_name_250;
    PyObject *tmp_right_name_251;
    PyObject *tmp_right_name_252;
    PyObject *tmp_right_name_253;
    PyObject *tmp_right_name_254;
    PyObject *tmp_right_name_255;
    PyObject *tmp_right_name_256;
    PyObject *tmp_right_name_257;
    PyObject *tmp_right_name_258;
    PyObject *tmp_right_name_259;
    PyObject *tmp_set_arg_1;
    PyObject *tmp_set_arg_2;
    PyObject *tmp_set_arg_3;
    PyObject *tmp_set_arg_4;
    PyObject *tmp_set_arg_5;
    PyObject *tmp_set_arg_6;
    PyObject *tmp_set_arg_7;
    PyObject *tmp_set_arg_8;
    PyObject *tmp_set_arg_9;
    PyObject *tmp_set_arg_10;
    PyObject *tmp_set_arg_11;
    PyObject *tmp_set_arg_12;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_source_name_83;
    PyObject *tmp_str_arg_1;
    PyObject *tmp_str_arg_2;
    PyObject *tmp_str_arg_3;
    PyObject *tmp_str_arg_4;
    PyObject *tmp_str_arg_5;
    PyObject *tmp_str_arg_6;
    PyObject *tmp_str_arg_7;
    PyObject *tmp_str_arg_8;
    PyObject *tmp_str_arg_9;
    PyObject *tmp_str_arg_10;
    PyObject *tmp_str_arg_11;
    PyObject *tmp_str_arg_12;
    PyObject *tmp_str_arg_13;
    PyObject *tmp_str_arg_14;
    PyObject *tmp_str_arg_15;
    PyObject *tmp_str_arg_16;
    PyObject *tmp_str_arg_17;
    PyObject *tmp_str_arg_18;
    PyObject *tmp_str_arg_19;
    PyObject *tmp_str_arg_20;
    PyObject *tmp_str_arg_21;
    PyObject *tmp_str_arg_22;
    PyObject *tmp_str_arg_23;
    PyObject *tmp_str_arg_24;
    PyObject *tmp_str_arg_25;
    PyObject *tmp_str_arg_26;
    PyObject *tmp_str_arg_27;
    PyObject *tmp_str_arg_28;
    PyObject *tmp_str_arg_29;
    PyObject *tmp_str_arg_30;
    PyObject *tmp_str_arg_31;
    PyObject *tmp_str_arg_32;
    PyObject *tmp_str_arg_33;
    PyObject *tmp_str_arg_34;
    PyObject *tmp_str_arg_35;
    PyObject *tmp_str_arg_36;
    PyObject *tmp_str_arg_37;
    PyObject *tmp_str_arg_38;
    PyObject *tmp_str_arg_39;
    PyObject *tmp_str_arg_40;
    PyObject *tmp_str_arg_41;
    PyObject *tmp_str_arg_42;
    PyObject *tmp_str_arg_43;
    PyObject *tmp_str_arg_44;
    PyObject *tmp_str_arg_45;
    PyObject *tmp_str_arg_46;
    PyObject *tmp_str_arg_47;
    PyObject *tmp_str_arg_48;
    PyObject *tmp_str_arg_49;
    PyObject *tmp_str_arg_50;
    PyObject *tmp_str_arg_51;
    PyObject *tmp_str_arg_52;
    PyObject *tmp_str_arg_53;
    PyObject *tmp_str_arg_54;
    PyObject *tmp_str_arg_55;
    PyObject *tmp_str_arg_56;
    PyObject *tmp_str_arg_57;
    PyObject *tmp_str_arg_58;
    PyObject *tmp_str_arg_59;
    PyObject *tmp_str_arg_60;
    PyObject *tmp_str_arg_61;
    PyObject *tmp_str_arg_62;
    PyObject *tmp_str_arg_63;
    PyObject *tmp_str_arg_64;
    PyObject *tmp_str_arg_65;
    PyObject *tmp_str_arg_66;
    PyObject *tmp_str_arg_67;
    PyObject *tmp_str_arg_68;
    PyObject *tmp_str_arg_69;
    PyObject *tmp_str_arg_70;
    PyObject *tmp_str_arg_71;
    PyObject *tmp_str_arg_72;
    PyObject *tmp_str_arg_73;
    PyObject *tmp_str_arg_74;
    PyObject *tmp_str_arg_75;
    PyObject *tmp_str_arg_76;
    PyObject *tmp_str_arg_77;
    PyObject *tmp_str_arg_78;
    PyObject *tmp_str_arg_79;
    PyObject *tmp_str_arg_80;
    PyObject *tmp_str_arg_81;
    PyObject *tmp_str_arg_82;
    PyObject *tmp_str_arg_83;
    PyObject *tmp_str_arg_84;
    PyObject *tmp_str_arg_85;
    PyObject *tmp_str_arg_86;
    PyObject *tmp_str_arg_87;
    PyObject *tmp_str_arg_88;
    PyObject *tmp_str_arg_89;
    PyObject *tmp_str_arg_90;
    PyObject *tmp_str_arg_91;
    PyObject *tmp_str_arg_92;
    PyObject *tmp_str_arg_93;
    PyObject *tmp_str_arg_94;
    PyObject *tmp_str_arg_95;
    PyObject *tmp_str_arg_96;
    PyObject *tmp_str_arg_97;
    PyObject *tmp_str_arg_98;
    PyObject *tmp_str_arg_99;
    PyObject *tmp_str_arg_100;
    PyObject *tmp_str_arg_101;
    PyObject *tmp_str_arg_102;
    PyObject *tmp_str_arg_103;
    PyObject *tmp_str_arg_104;
    PyObject *tmp_str_arg_105;
    PyObject *tmp_str_arg_106;
    PyObject *tmp_str_arg_107;
    PyObject *tmp_str_arg_108;
    PyObject *tmp_str_arg_109;
    PyObject *tmp_str_arg_110;
    PyObject *tmp_str_arg_111;
    PyObject *tmp_str_arg_112;
    PyObject *tmp_str_arg_113;
    PyObject *tmp_str_arg_114;
    PyObject *tmp_str_arg_115;
    PyObject *tmp_str_arg_116;
    PyObject *tmp_str_arg_117;
    PyObject *tmp_str_arg_118;
    PyObject *tmp_str_arg_119;
    PyObject *tmp_str_arg_120;
    PyObject *tmp_str_arg_121;
    PyObject *tmp_str_arg_122;
    PyObject *tmp_str_arg_123;
    PyObject *tmp_str_arg_124;
    PyObject *tmp_str_arg_125;
    PyObject *tmp_str_arg_126;
    PyObject *tmp_str_arg_127;
    PyObject *tmp_str_arg_128;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscribed_name_20;
    PyObject *tmp_subscribed_name_21;
    PyObject *tmp_subscribed_name_22;
    PyObject *tmp_subscribed_name_23;
    PyObject *tmp_subscribed_name_24;
    PyObject *tmp_subscribed_name_25;
    PyObject *tmp_subscribed_name_26;
    PyObject *tmp_subscribed_name_27;
    PyObject *tmp_subscribed_name_28;
    PyObject *tmp_subscribed_name_29;
    PyObject *tmp_subscribed_name_30;
    PyObject *tmp_subscribed_name_31;
    PyObject *tmp_subscribed_name_32;
    PyObject *tmp_subscribed_name_33;
    PyObject *tmp_subscribed_name_34;
    PyObject *tmp_subscribed_name_35;
    PyObject *tmp_subscribed_name_36;
    PyObject *tmp_subscribed_name_37;
    PyObject *tmp_subscribed_name_38;
    PyObject *tmp_subscribed_name_39;
    PyObject *tmp_subscribed_name_40;
    PyObject *tmp_subscribed_name_41;
    PyObject *tmp_subscribed_name_42;
    PyObject *tmp_subscribed_name_43;
    PyObject *tmp_subscribed_name_44;
    PyObject *tmp_subscribed_name_45;
    PyObject *tmp_subscribed_name_46;
    PyObject *tmp_subscribed_name_47;
    PyObject *tmp_subscribed_name_48;
    PyObject *tmp_subscribed_name_49;
    PyObject *tmp_subscribed_name_50;
    PyObject *tmp_subscribed_name_51;
    PyObject *tmp_subscribed_name_52;
    PyObject *tmp_subscribed_name_53;
    PyObject *tmp_subscribed_name_54;
    PyObject *tmp_subscribed_name_55;
    PyObject *tmp_subscribed_name_56;
    PyObject *tmp_subscribed_name_57;
    PyObject *tmp_subscribed_name_58;
    PyObject *tmp_subscribed_name_59;
    PyObject *tmp_subscribed_name_60;
    PyObject *tmp_subscribed_name_61;
    PyObject *tmp_subscribed_name_62;
    PyObject *tmp_subscribed_name_63;
    PyObject *tmp_subscribed_name_64;
    PyObject *tmp_subscribed_name_65;
    PyObject *tmp_subscribed_name_66;
    PyObject *tmp_subscribed_name_67;
    PyObject *tmp_subscribed_name_68;
    PyObject *tmp_subscribed_name_69;
    PyObject *tmp_subscribed_name_70;
    PyObject *tmp_subscribed_name_71;
    PyObject *tmp_subscribed_name_72;
    PyObject *tmp_subscribed_name_73;
    PyObject *tmp_subscribed_name_74;
    PyObject *tmp_subscribed_name_75;
    PyObject *tmp_subscribed_name_76;
    PyObject *tmp_subscribed_name_77;
    PyObject *tmp_subscribed_name_78;
    PyObject *tmp_subscribed_name_79;
    PyObject *tmp_subscribed_name_80;
    PyObject *tmp_subscribed_name_81;
    PyObject *tmp_subscribed_name_82;
    PyObject *tmp_subscribed_name_83;
    PyObject *tmp_subscribed_name_84;
    PyObject *tmp_subscribed_name_85;
    PyObject *tmp_subscribed_name_86;
    PyObject *tmp_subscribed_name_87;
    PyObject *tmp_subscribed_name_88;
    PyObject *tmp_subscribed_name_89;
    PyObject *tmp_subscribed_name_90;
    PyObject *tmp_subscribed_name_91;
    PyObject *tmp_subscribed_name_92;
    PyObject *tmp_subscribed_name_93;
    PyObject *tmp_subscribed_name_94;
    PyObject *tmp_subscribed_name_95;
    PyObject *tmp_subscribed_name_96;
    PyObject *tmp_subscribed_name_97;
    PyObject *tmp_subscribed_name_98;
    PyObject *tmp_subscribed_name_99;
    PyObject *tmp_subscribed_name_100;
    PyObject *tmp_subscribed_name_101;
    PyObject *tmp_subscribed_name_102;
    PyObject *tmp_subscribed_name_103;
    PyObject *tmp_subscribed_name_104;
    PyObject *tmp_subscribed_name_105;
    PyObject *tmp_subscribed_name_106;
    PyObject *tmp_subscribed_name_107;
    PyObject *tmp_subscribed_name_108;
    PyObject *tmp_subscribed_name_109;
    PyObject *tmp_subscribed_name_110;
    PyObject *tmp_subscribed_name_111;
    PyObject *tmp_subscribed_name_112;
    PyObject *tmp_subscribed_name_113;
    PyObject *tmp_subscribed_name_114;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_subscript_name_20;
    PyObject *tmp_subscript_name_21;
    PyObject *tmp_subscript_name_22;
    PyObject *tmp_subscript_name_23;
    PyObject *tmp_subscript_name_24;
    PyObject *tmp_subscript_name_25;
    PyObject *tmp_subscript_name_26;
    PyObject *tmp_subscript_name_27;
    PyObject *tmp_subscript_name_28;
    PyObject *tmp_subscript_name_29;
    PyObject *tmp_subscript_name_30;
    PyObject *tmp_subscript_name_31;
    PyObject *tmp_subscript_name_32;
    PyObject *tmp_subscript_name_33;
    PyObject *tmp_subscript_name_34;
    PyObject *tmp_subscript_name_35;
    PyObject *tmp_subscript_name_36;
    PyObject *tmp_subscript_name_37;
    PyObject *tmp_subscript_name_38;
    PyObject *tmp_subscript_name_39;
    PyObject *tmp_subscript_name_40;
    PyObject *tmp_subscript_name_41;
    PyObject *tmp_subscript_name_42;
    PyObject *tmp_subscript_name_43;
    PyObject *tmp_subscript_name_44;
    PyObject *tmp_subscript_name_45;
    PyObject *tmp_subscript_name_46;
    PyObject *tmp_subscript_name_47;
    PyObject *tmp_subscript_name_48;
    PyObject *tmp_subscript_name_49;
    PyObject *tmp_subscript_name_50;
    PyObject *tmp_subscript_name_51;
    PyObject *tmp_subscript_name_52;
    PyObject *tmp_subscript_name_53;
    PyObject *tmp_subscript_name_54;
    PyObject *tmp_subscript_name_55;
    PyObject *tmp_subscript_name_56;
    PyObject *tmp_subscript_name_57;
    PyObject *tmp_subscript_name_58;
    PyObject *tmp_subscript_name_59;
    PyObject *tmp_subscript_name_60;
    PyObject *tmp_subscript_name_61;
    PyObject *tmp_subscript_name_62;
    PyObject *tmp_subscript_name_63;
    PyObject *tmp_subscript_name_64;
    PyObject *tmp_subscript_name_65;
    PyObject *tmp_subscript_name_66;
    PyObject *tmp_subscript_name_67;
    PyObject *tmp_subscript_name_68;
    PyObject *tmp_subscript_name_69;
    PyObject *tmp_subscript_name_70;
    PyObject *tmp_subscript_name_71;
    PyObject *tmp_subscript_name_72;
    PyObject *tmp_subscript_name_73;
    PyObject *tmp_subscript_name_74;
    PyObject *tmp_subscript_name_75;
    PyObject *tmp_subscript_name_76;
    PyObject *tmp_subscript_name_77;
    PyObject *tmp_subscript_name_78;
    PyObject *tmp_subscript_name_79;
    PyObject *tmp_subscript_name_80;
    PyObject *tmp_subscript_name_81;
    PyObject *tmp_subscript_name_82;
    PyObject *tmp_subscript_name_83;
    PyObject *tmp_subscript_name_84;
    PyObject *tmp_subscript_name_85;
    PyObject *tmp_subscript_name_86;
    PyObject *tmp_subscript_name_87;
    PyObject *tmp_subscript_name_88;
    PyObject *tmp_subscript_name_89;
    PyObject *tmp_subscript_name_90;
    PyObject *tmp_subscript_name_91;
    PyObject *tmp_subscript_name_92;
    PyObject *tmp_subscript_name_93;
    PyObject *tmp_subscript_name_94;
    PyObject *tmp_subscript_name_95;
    PyObject *tmp_subscript_name_96;
    PyObject *tmp_subscript_name_97;
    PyObject *tmp_subscript_name_98;
    PyObject *tmp_subscript_name_99;
    PyObject *tmp_subscript_name_100;
    PyObject *tmp_subscript_name_101;
    PyObject *tmp_subscript_name_102;
    PyObject *tmp_subscript_name_103;
    PyObject *tmp_subscript_name_104;
    PyObject *tmp_subscript_name_105;
    PyObject *tmp_subscript_name_106;
    PyObject *tmp_subscript_name_107;
    PyObject *tmp_subscript_name_108;
    PyObject *tmp_subscript_name_109;
    PyObject *tmp_subscript_name_110;
    PyObject *tmp_subscript_name_111;
    PyObject *tmp_subscript_name_112;
    PyObject *tmp_subscript_name_113;
    PyObject *tmp_subscript_name_114;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    int tmp_tried_lineno_11;
    int tmp_tried_lineno_12;
    int tmp_tried_lineno_13;
    int tmp_tried_lineno_14;
    int tmp_tried_lineno_15;
    int tmp_tried_lineno_16;
    int tmp_tried_lineno_17;
    int tmp_tried_lineno_18;
    int tmp_tried_lineno_19;
    int tmp_tried_lineno_20;
    int tmp_tried_lineno_21;
    int tmp_tried_lineno_22;
    int tmp_tried_lineno_23;
    int tmp_tried_lineno_24;
    int tmp_tried_lineno_25;
    int tmp_tried_lineno_26;
    int tmp_tried_lineno_27;
    int tmp_tried_lineno_28;
    int tmp_tried_lineno_29;
    int tmp_tried_lineno_30;
    int tmp_tried_lineno_31;
    int tmp_tried_lineno_32;
    int tmp_tried_lineno_33;
    int tmp_tried_lineno_34;
    int tmp_tried_lineno_35;
    int tmp_tried_lineno_36;
    int tmp_tried_lineno_37;
    int tmp_tried_lineno_38;
    int tmp_tried_lineno_39;
    int tmp_tried_lineno_40;
    int tmp_tried_lineno_41;
    int tmp_tried_lineno_42;
    int tmp_tried_lineno_43;
    int tmp_tried_lineno_44;
    int tmp_tried_lineno_45;
    int tmp_tried_lineno_46;
    int tmp_tried_lineno_47;
    int tmp_tried_lineno_48;
    int tmp_tried_lineno_49;
    int tmp_tried_lineno_50;
    int tmp_tried_lineno_51;
    int tmp_tried_lineno_52;
    int tmp_tried_lineno_53;
    int tmp_tried_lineno_54;
    int tmp_tried_lineno_55;
    int tmp_tried_lineno_56;
    int tmp_tried_lineno_57;
    int tmp_tried_lineno_58;
    int tmp_tried_lineno_59;
    int tmp_tried_lineno_60;
    int tmp_tried_lineno_61;
    int tmp_tried_lineno_62;
    int tmp_tried_lineno_63;
    int tmp_tried_lineno_64;
    int tmp_tried_lineno_65;
    int tmp_tried_lineno_66;
    int tmp_tried_lineno_67;
    int tmp_tried_lineno_68;
    int tmp_tried_lineno_69;
    int tmp_tried_lineno_70;
    int tmp_tried_lineno_71;
    int tmp_tried_lineno_72;
    int tmp_tried_lineno_73;
    int tmp_tried_lineno_74;
    int tmp_tried_lineno_75;
    int tmp_tried_lineno_76;
    int tmp_tried_lineno_77;
    int tmp_tried_lineno_78;
    int tmp_tried_lineno_79;
    int tmp_tried_lineno_80;
    int tmp_tried_lineno_81;
    int tmp_tried_lineno_82;
    int tmp_tried_lineno_83;
    int tmp_tried_lineno_84;
    int tmp_tried_lineno_85;
    int tmp_tried_lineno_86;
    int tmp_tried_lineno_87;
    int tmp_tried_lineno_88;
    int tmp_tried_lineno_89;
    int tmp_tried_lineno_90;
    int tmp_tried_lineno_91;
    int tmp_tried_lineno_92;
    int tmp_tried_lineno_93;
    int tmp_tried_lineno_94;
    int tmp_tried_lineno_95;
    int tmp_tried_lineno_96;
    int tmp_tried_lineno_97;
    int tmp_tried_lineno_98;
    int tmp_tried_lineno_99;
    int tmp_tried_lineno_100;
    int tmp_tried_lineno_101;
    int tmp_tried_lineno_102;
    int tmp_tried_lineno_103;
    int tmp_tried_lineno_104;
    int tmp_tried_lineno_105;
    int tmp_tried_lineno_106;
    int tmp_tried_lineno_107;
    int tmp_tried_lineno_108;
    int tmp_tried_lineno_109;
    int tmp_tried_lineno_110;
    int tmp_tried_lineno_111;
    int tmp_tried_lineno_112;
    int tmp_tried_lineno_113;
    int tmp_tried_lineno_114;
    int tmp_tried_lineno_115;
    int tmp_tried_lineno_116;
    int tmp_tried_lineno_117;
    int tmp_tried_lineno_118;
    int tmp_tried_lineno_119;
    int tmp_tried_lineno_120;
    int tmp_tried_lineno_121;
    int tmp_tried_lineno_122;
    int tmp_tried_lineno_123;
    int tmp_tried_lineno_124;
    int tmp_tried_lineno_125;
    int tmp_tried_lineno_126;
    int tmp_tried_lineno_127;
    int tmp_tried_lineno_128;
    int tmp_tried_lineno_129;
    int tmp_tried_lineno_130;
    int tmp_tried_lineno_131;
    int tmp_tried_lineno_132;
    int tmp_tried_lineno_133;
    int tmp_tried_lineno_134;
    int tmp_tried_lineno_135;
    int tmp_tried_lineno_136;
    int tmp_tried_lineno_137;
    int tmp_tried_lineno_138;
    int tmp_tried_lineno_139;
    int tmp_tried_lineno_140;
    int tmp_tried_lineno_141;
    int tmp_tried_lineno_142;
    int tmp_tried_lineno_143;
    int tmp_tried_lineno_144;
    int tmp_tried_lineno_145;
    int tmp_tried_lineno_146;
    int tmp_tried_lineno_147;
    int tmp_tried_lineno_148;
    int tmp_tried_lineno_149;
    int tmp_tried_lineno_150;
    int tmp_tried_lineno_151;
    int tmp_tried_lineno_152;
    int tmp_tried_lineno_153;
    int tmp_tried_lineno_154;
    int tmp_tried_lineno_155;
    int tmp_tried_lineno_156;
    int tmp_tried_lineno_157;
    int tmp_tried_lineno_158;
    int tmp_tried_lineno_159;
    int tmp_tried_lineno_160;
    int tmp_tried_lineno_161;
    int tmp_tried_lineno_162;
    int tmp_tried_lineno_163;
    int tmp_tried_lineno_164;
    int tmp_tried_lineno_165;
    int tmp_tried_lineno_166;
    int tmp_tried_lineno_167;
    int tmp_tried_lineno_168;
    int tmp_tried_lineno_169;
    int tmp_tried_lineno_170;
    int tmp_tried_lineno_171;
    int tmp_tried_lineno_172;
    int tmp_tried_lineno_173;
    int tmp_tried_lineno_174;
    int tmp_tried_lineno_175;
    int tmp_tried_lineno_176;
    int tmp_tried_lineno_177;
    int tmp_tried_lineno_178;
    int tmp_tried_lineno_179;
    int tmp_tried_lineno_180;
    int tmp_tried_lineno_181;
    int tmp_tried_lineno_182;
    int tmp_tried_lineno_183;
    int tmp_tried_lineno_184;
    int tmp_tried_lineno_185;
    int tmp_tried_lineno_186;
    int tmp_tried_lineno_187;
    int tmp_tried_lineno_188;
    int tmp_tried_lineno_189;
    int tmp_tried_lineno_190;
    int tmp_tried_lineno_191;
    int tmp_tried_lineno_192;
    int tmp_tried_lineno_193;
    int tmp_tried_lineno_194;
    int tmp_tried_lineno_195;
    int tmp_tried_lineno_196;
    int tmp_tried_lineno_197;
    int tmp_tried_lineno_198;
    int tmp_tried_lineno_199;
    int tmp_tried_lineno_200;
    int tmp_tried_lineno_201;
    int tmp_tried_lineno_202;
    int tmp_tried_lineno_203;
    int tmp_tried_lineno_204;
    int tmp_tried_lineno_205;
    int tmp_tried_lineno_206;
    int tmp_tried_lineno_207;
    int tmp_tried_lineno_208;
    int tmp_tried_lineno_209;
    int tmp_tried_lineno_210;
    int tmp_tried_lineno_211;
    int tmp_tried_lineno_212;
    int tmp_tried_lineno_213;
    int tmp_tried_lineno_214;
    int tmp_tried_lineno_215;
    int tmp_tried_lineno_216;
    int tmp_tried_lineno_217;
    int tmp_tried_lineno_218;
    int tmp_tried_lineno_219;
    int tmp_tried_lineno_220;
    int tmp_tried_lineno_221;
    int tmp_tried_lineno_222;
    int tmp_tried_lineno_223;
    int tmp_tried_lineno_224;
    int tmp_tried_lineno_225;
    int tmp_tried_lineno_226;
    int tmp_tried_lineno_227;
    int tmp_tried_lineno_228;
    int tmp_tried_lineno_229;
    int tmp_tried_lineno_230;
    int tmp_tried_lineno_231;
    int tmp_tried_lineno_232;
    int tmp_tried_lineno_233;
    int tmp_tried_lineno_234;
    int tmp_tried_lineno_235;
    int tmp_tried_lineno_236;
    int tmp_tried_lineno_237;
    int tmp_tried_lineno_238;
    int tmp_tried_lineno_239;
    int tmp_tried_lineno_240;
    int tmp_tried_lineno_241;
    int tmp_tried_lineno_242;
    int tmp_tried_lineno_243;
    int tmp_tried_lineno_244;
    int tmp_tried_lineno_245;
    int tmp_tried_lineno_246;
    int tmp_tried_lineno_247;
    int tmp_tried_lineno_248;
    int tmp_tried_lineno_249;
    int tmp_tried_lineno_250;
    int tmp_tried_lineno_251;
    int tmp_tried_lineno_252;
    int tmp_tried_lineno_253;
    int tmp_tried_lineno_254;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    PyObject *tmp_unpack_7;
    PyObject *tmp_unpack_8;
    PyObject *tmp_unpack_9;
    PyObject *tmp_unpack_10;
    PyObject *tmp_unpack_11;
    PyObject *tmp_unpack_12;
    PyObject *tmp_unpack_13;
    PyObject *tmp_unpack_14;
    PyObject *tmp_unpack_15;
    PyObject *tmp_unpack_16;
    PyObject *tmp_unpack_17;
    PyObject *tmp_unpack_18;
    PyObject *tmp_unpack_19;
    PyObject *tmp_unpack_20;
    PyObject *tmp_unpack_21;
    PyObject *tmp_unpack_22;
    PyObject *tmp_unpack_23;
    PyObject *tmp_unpack_24;
    PyObject *tmp_unpack_25;
    PyObject *tmp_unpack_26;
    PyObject *tmp_unpack_27;
    PyObject *tmp_unpack_28;
    PyObject *tmp_unpack_29;
    PyObject *tmp_unpack_30;
    PyObject *tmp_unpack_31;
    PyObject *tmp_unpack_32;
    PyObject *tmp_unpack_33;
    PyObject *tmp_unpack_34;
    PyObject *tmp_unpack_35;
    PyObject *tmp_unpack_36;
    PyObject *tmp_unpack_37;
    PyObject *tmp_unpack_38;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = Py_None;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_6f604464852122ad87838c62aa7d02d1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    frame_module = MAKE_FRAME( codeobj_16f4bf8f789b0866386122624a9ae93f, module_kazooquest );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 53;
    tmp_assign_source_3 = IMPORT_MODULE( const_str_plain_os, tmp_import_globals_1, tmp_import_globals_1, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_3 );
    tmp_import_globals_2 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 53;
    tmp_assign_source_4 = IMPORT_MODULE( const_str_plain_random, tmp_import_globals_2, tmp_import_globals_2, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random, tmp_assign_source_4 );
    tmp_import_globals_3 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 53;
    tmp_assign_source_5 = IMPORT_MODULE( const_str_plain_time, tmp_import_globals_3, tmp_import_globals_3, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_5 );
    tmp_import_globals_4 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 53;
    tmp_assign_source_6 = IMPORT_MODULE( const_str_plain_pickle, tmp_import_globals_4, tmp_import_globals_4, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_pickle, tmp_assign_source_6 );
    tmp_import_globals_5 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 53;
    tmp_assign_source_7 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_5, tmp_import_globals_5, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_7 );
    tmp_import_globals_6 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 53;
    tmp_assign_source_8 = IMPORT_MODULE( const_str_plain_signal, tmp_import_globals_6, tmp_import_globals_6, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_signal, tmp_assign_source_8 );
    tmp_import_globals_7 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 54;
    tmp_assign_source_9 = IMPORT_MODULE( const_str_plain_argparse, tmp_import_globals_7, tmp_import_globals_7, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 54;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_argparse, tmp_assign_source_9 );
    tmp_import_globals_8 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 55;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_collections, tmp_import_globals_8, tmp_import_globals_8, const_tuple_str_plain_Counter_tuple, const_int_neg_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 55;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_Counter );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 55;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_Counter, tmp_assign_source_10 );
    tmp_assign_source_11 = const_str_digest_cefb65712d341b22b75ba1a7d029df78;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_current_version, tmp_assign_source_11 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 57;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_system );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain_clear;
    frame_module->f_lineno = 57;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_stdout );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_write );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = const_str_digest_e473a28e1148a90d05cc0fa2ed8c576c;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_format );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = PyDict_Copy( const_dict_283dacd4984ab69b6cfcca3a8f5e15e1 );
    frame_module->f_lineno = 58;
    tmp_args_element_name_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 58;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, tmp_args_element_name_1 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_import_globals_9 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 59;
    tmp_assign_source_12 = IMPORT_MODULE( const_str_plain_Loadingbar, tmp_import_globals_9, tmp_import_globals_9, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 59;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_Loadingbar, tmp_assign_source_12 );
    tmp_assign_source_13 = MAKE_FUNCTION_function_1_update_of_kazooquest(  );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_13 );

        frame_module->f_lineno = 60;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_update, tmp_assign_source_13 );
    tmp_assign_source_14 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_wait, tmp_assign_source_14 );
    tmp_assign_source_15 = PyDict_Copy( const_dict_c008e769f7ad26f5db2cafc17e3e1194 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color, tmp_assign_source_15 );
    tmp_assign_source_16 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon, tmp_assign_source_16 );
    tmp_assign_source_17 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor, tmp_assign_source_17 );
    tmp_assign_source_18 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges, tmp_assign_source_18 );
    tmp_assign_source_19 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodge_act, tmp_assign_source_19 );
    tmp_assign_source_20 = const_int_pos_3;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_20 );
    tmp_assign_source_21 = const_int_pos_20;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_21 );
    tmp_assign_source_22 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_22 );
    tmp_assign_source_23 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level, tmp_assign_source_23 );
    tmp_assign_source_24 = const_str_empty;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels, tmp_assign_source_24 );
    tmp_assign_source_25 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skills, tmp_assign_source_25 );
    tmp_assign_source_26 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy, tmp_assign_source_26 );
    tmp_assign_source_27 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_energy, tmp_assign_source_27 );
    tmp_assign_source_28 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells, tmp_assign_source_28 );
    tmp_assign_source_29 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing, tmp_assign_source_29 );
    tmp_assign_source_30 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_30 );
    tmp_assign_source_31 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_evolve_count, tmp_assign_source_31 );
    tmp_assign_source_32 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_32 );
    tmp_assign_source_33 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers, tmp_assign_source_33 );
    tmp_assign_source_34 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory, tmp_assign_source_34 );
    tmp_assign_source_35 = LIST_COPY( const_list_8ddbb8e53af92888ce3915ec42122900_list );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_take_words, tmp_assign_source_35 );
    tmp_assign_source_36 = LIST_COPY( const_list_str_plain_use_str_plain_eat_str_plain_read_str_plain_drink_list );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_use_words, tmp_assign_source_36 );
    tmp_assign_source_37 = LIST_COPY( const_list_str_plain_n_str_plain_north_list );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_n_words, tmp_assign_source_37 );
    tmp_assign_source_38 = LIST_COPY( const_list_str_plain_s_str_plain_south_list );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_s_words, tmp_assign_source_38 );
    tmp_assign_source_39 = LIST_COPY( const_list_str_plain_e_str_plain_east_list );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_e_words, tmp_assign_source_39 );
    tmp_assign_source_40 = LIST_COPY( const_list_str_plain_w_str_plain_west_list );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_w_words, tmp_assign_source_40 );
    tmp_assign_source_41 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop, tmp_assign_source_41 );
    tmp_assign_source_42 = const_str_digest_6a4bf94506853f1d150b80164b7ba35a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_letter, tmp_assign_source_42 );
    tmp_assign_source_43 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_set, tmp_assign_source_43 );
    tmp_assign_source_44 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_44 );
    tmp_assign_source_45 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_45 );
    tmp_assign_source_46 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skip, tmp_assign_source_46 );
    tmp_assign_source_47 = const_str_empty;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_47 );
    tmp_assign_source_48 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_48 );
    tmp_assign_source_49 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_49 );
    tmp_assign_source_50 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_buffs, tmp_assign_source_50 );
    tmp_assign_source_51 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs, tmp_assign_source_51 );
    tmp_assign_source_52 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer, tmp_assign_source_52 );
    tmp_assign_source_53 = const_str_empty;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_info, tmp_assign_source_53 );
    tmp_assign_source_54 = const_str_empty;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_54 );
    tmp_assign_source_55 = const_int_pos_20;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_55 );
    tmp_assign_source_56 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_56 );
    tmp_assign_source_57 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_57 );
    tmp_assign_source_58 = const_int_pos_10;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_58 );
    tmp_assign_source_59 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_kills, tmp_assign_source_59 );
    tmp_assign_source_60 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_60 );
    tmp_assign_source_61 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_history, tmp_assign_source_61 );
    // Tried code
    tmp_assign_source_62 = PyTuple_New( 1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_62 );

        frame_module->f_lineno = 160;
        goto try_finally_handler_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_62, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_62;

    tmp_assign_source_63 = impl_class_2_CleanExit_of_kazooquest(  );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 160;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_63;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 160;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dget_dict_1 = tmp_class_creation_1__class_dict;

    tmp_dget_key_1 = const_str_plain___metaclass__;
    tmp_assign_source_64 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 160;
        goto try_finally_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_class_bases_1 = tmp_class_creation_1__bases;

    tmp_assign_source_64 = SELECT_METACLASS( tmp_class_bases_1, GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_64;

    tmp_called_name_4 = tmp_class_creation_1__metaclass;

    tmp_args_element_name_2 = const_str_plain_CleanExit;
    tmp_args_element_name_3 = tmp_class_creation_1__bases;

    tmp_args_element_name_4 = tmp_class_creation_1__class_dict;

    frame_module->f_lineno = 160;
    tmp_assign_source_65 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 160;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_65;

    tmp_assign_source_66 = tmp_class_creation_1__class;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_CleanExit, tmp_assign_source_66 );
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    frame_module->f_lineno = tmp_tried_lineno_1;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assign_source_67 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_67 );
    tmp_assign_source_68 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_68 );
    tmp_assign_source_69 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_69 );
    tmp_import_globals_10 = ((PyModuleObject *)module_kazooquest)->md_dict;
    frame_module->f_lineno = 170;
    tmp_assign_source_70 = IMPORT_MODULE( const_str_digest_55f9bb09fd8231b1e010dca4626f5961, tmp_import_globals_10, tmp_import_globals_10, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 170;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_70 );
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 171;
        goto frame_exception_exit_1;
    }

    tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_path );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_isfile );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = const_str_digest_1eb2227f3fa8b83a9787c24f3380e29d;
    frame_module->f_lineno = 171;
    tmp_assign_source_71 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_autoload, tmp_assign_source_71 );
    tmp_compare_left_2 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_autoload );

    if (unlikely( tmp_compare_left_2 == NULL ))
    {
        tmp_compare_left_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_autoload );
    }

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 172;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = Py_True;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 172;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code
    tmp_open_filename_1 = const_str_digest_1eb2227f3fa8b83a9787c24f3380e29d;
    tmp_open_mode_1 = const_str_plain_rb;
    tmp_assign_source_72 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 173;
        goto try_finally_handler_2;
    }
    assert( tmp_with_1__source == NULL );
    tmp_with_1__source = tmp_assign_source_72;

    tmp_attr_source_1 = tmp_with_1__source;

    tmp_assign_source_73 = LOOKUP_SPECIAL( tmp_attr_source_1, const_str_plain___exit__ );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 173;
        goto try_finally_handler_2;
    }
    assert( tmp_with_1__exit == NULL );
    tmp_with_1__exit = tmp_assign_source_73;

    tmp_attr_source_2 = tmp_with_1__source;

    tmp_called_name_6 = LOOKUP_SPECIAL( tmp_attr_source_2, const_str_plain___enter__ );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 173;
        goto try_finally_handler_2;
    }
    frame_module->f_lineno = 173;
    tmp_assign_source_74 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    Py_DECREF( tmp_called_name_6 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 173;
        goto try_finally_handler_2;
    }
    assert( tmp_with_1__enter == NULL );
    tmp_with_1__enter = tmp_assign_source_74;

    tmp_assign_source_75 = Py_True;
    assert( tmp_with_1__indicator == NULL );
    Py_INCREF( tmp_assign_source_75 );
    tmp_with_1__indicator = tmp_assign_source_75;

    tmp_assign_source_76 = tmp_with_1__enter;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f, tmp_assign_source_76 );
    // Tried code
    // Tried block of try/except
    // Tried code
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_pickle );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_pickle );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 158 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_load );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    tmp_args_element_name_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f );

    if (unlikely( tmp_args_element_name_5 == NULL ))
    {
        tmp_args_element_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }

    frame_module->f_lineno = 174;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, tmp_args_element_name_5 );
    Py_DECREF( tmp_called_name_7 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    tmp_assign_source_77 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_77;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_78 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_78 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_78;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_79 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_79 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_79;

    tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_80 = UNPACK_NEXT( tmp_unpack_3, 2 );
    if ( tmp_assign_source_80 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_3 == NULL );
    tmp_tuple_unpack_1__element_3 = tmp_assign_source_80;

    tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_81 = UNPACK_NEXT( tmp_unpack_4, 3 );
    if ( tmp_assign_source_81 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_4 == NULL );
    tmp_tuple_unpack_1__element_4 = tmp_assign_source_81;

    tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_82 = UNPACK_NEXT( tmp_unpack_5, 4 );
    if ( tmp_assign_source_82 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_5 == NULL );
    tmp_tuple_unpack_1__element_5 = tmp_assign_source_82;

    tmp_unpack_6 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_83 = UNPACK_NEXT( tmp_unpack_6, 5 );
    if ( tmp_assign_source_83 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_6 == NULL );
    tmp_tuple_unpack_1__element_6 = tmp_assign_source_83;

    tmp_unpack_7 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_84 = UNPACK_NEXT( tmp_unpack_7, 6 );
    if ( tmp_assign_source_84 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_7 == NULL );
    tmp_tuple_unpack_1__element_7 = tmp_assign_source_84;

    tmp_unpack_8 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_85 = UNPACK_NEXT( tmp_unpack_8, 7 );
    if ( tmp_assign_source_85 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_8 == NULL );
    tmp_tuple_unpack_1__element_8 = tmp_assign_source_85;

    tmp_unpack_9 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_86 = UNPACK_NEXT( tmp_unpack_9, 8 );
    if ( tmp_assign_source_86 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_9 == NULL );
    tmp_tuple_unpack_1__element_9 = tmp_assign_source_86;

    tmp_unpack_10 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_87 = UNPACK_NEXT( tmp_unpack_10, 9 );
    if ( tmp_assign_source_87 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_10 == NULL );
    tmp_tuple_unpack_1__element_10 = tmp_assign_source_87;

    tmp_unpack_11 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_88 = UNPACK_NEXT( tmp_unpack_11, 10 );
    if ( tmp_assign_source_88 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_11 == NULL );
    tmp_tuple_unpack_1__element_11 = tmp_assign_source_88;

    tmp_unpack_12 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_89 = UNPACK_NEXT( tmp_unpack_12, 11 );
    if ( tmp_assign_source_89 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_12 == NULL );
    tmp_tuple_unpack_1__element_12 = tmp_assign_source_89;

    tmp_unpack_13 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_90 = UNPACK_NEXT( tmp_unpack_13, 12 );
    if ( tmp_assign_source_90 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_13 == NULL );
    tmp_tuple_unpack_1__element_13 = tmp_assign_source_90;

    tmp_unpack_14 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_91 = UNPACK_NEXT( tmp_unpack_14, 13 );
    if ( tmp_assign_source_91 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_14 == NULL );
    tmp_tuple_unpack_1__element_14 = tmp_assign_source_91;

    tmp_unpack_15 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_92 = UNPACK_NEXT( tmp_unpack_15, 14 );
    if ( tmp_assign_source_92 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_15 == NULL );
    tmp_tuple_unpack_1__element_15 = tmp_assign_source_92;

    tmp_unpack_16 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_93 = UNPACK_NEXT( tmp_unpack_16, 15 );
    if ( tmp_assign_source_93 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_16 == NULL );
    tmp_tuple_unpack_1__element_16 = tmp_assign_source_93;

    tmp_unpack_17 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_94 = UNPACK_NEXT( tmp_unpack_17, 16 );
    if ( tmp_assign_source_94 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_17 == NULL );
    tmp_tuple_unpack_1__element_17 = tmp_assign_source_94;

    tmp_unpack_18 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_95 = UNPACK_NEXT( tmp_unpack_18, 17 );
    if ( tmp_assign_source_95 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_18 == NULL );
    tmp_tuple_unpack_1__element_18 = tmp_assign_source_95;

    tmp_unpack_19 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_96 = UNPACK_NEXT( tmp_unpack_19, 18 );
    if ( tmp_assign_source_96 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 174;
        goto try_finally_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_19 == NULL );
    tmp_tuple_unpack_1__element_19 = tmp_assign_source_96;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_finally_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 19)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_finally_handler_4;
    }
    tmp_assign_source_97 = tmp_tuple_unpack_1__element_1;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_97 );
    tmp_assign_source_98 = tmp_tuple_unpack_1__element_2;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_98 );
    tmp_assign_source_99 = tmp_tuple_unpack_1__element_3;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_99 );
    tmp_assign_source_100 = tmp_tuple_unpack_1__element_4;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_100 );
    tmp_assign_source_101 = tmp_tuple_unpack_1__element_5;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory, tmp_assign_source_101 );
    tmp_assign_source_102 = tmp_tuple_unpack_1__element_6;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells, tmp_assign_source_102 );
    tmp_assign_source_103 = tmp_tuple_unpack_1__element_7;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing, tmp_assign_source_103 );
    tmp_assign_source_104 = tmp_tuple_unpack_1__element_8;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_104 );
    tmp_assign_source_105 = tmp_tuple_unpack_1__element_9;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_105 );
    tmp_assign_source_106 = tmp_tuple_unpack_1__element_10;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_106 );
    tmp_assign_source_107 = tmp_tuple_unpack_1__element_11;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_107 );
    tmp_assign_source_108 = tmp_tuple_unpack_1__element_12;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_108 );
    tmp_assign_source_109 = tmp_tuple_unpack_1__element_13;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers, tmp_assign_source_109 );
    tmp_assign_source_110 = tmp_tuple_unpack_1__element_14;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_kills, tmp_assign_source_110 );
    tmp_assign_source_111 = tmp_tuple_unpack_1__element_15;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_111 );
    tmp_assign_source_112 = tmp_tuple_unpack_1__element_16;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor, tmp_assign_source_112 );
    tmp_assign_source_113 = tmp_tuple_unpack_1__element_17;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon, tmp_assign_source_113 );
    tmp_assign_source_114 = tmp_tuple_unpack_1__element_18;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_114 );
    tmp_assign_source_115 = tmp_tuple_unpack_1__element_19;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_115 );
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_module->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_7 );
    tmp_tuple_unpack_1__element_7 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_8 );
    tmp_tuple_unpack_1__element_8 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_9 );
    tmp_tuple_unpack_1__element_9 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_10 );
    tmp_tuple_unpack_1__element_10 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_11 );
    tmp_tuple_unpack_1__element_11 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_12 );
    tmp_tuple_unpack_1__element_12 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_13 );
    tmp_tuple_unpack_1__element_13 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_14 );
    tmp_tuple_unpack_1__element_14 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_15 );
    tmp_tuple_unpack_1__element_15 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_16 );
    tmp_tuple_unpack_1__element_16 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_17 );
    tmp_tuple_unpack_1__element_17 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_18 );
    tmp_tuple_unpack_1__element_18 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_19 );
    tmp_tuple_unpack_1__element_19 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_2;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_except_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( frame_module );
    }
    else if ( exception_tb->tb_frame != frame_module || exception_tb->tb_lineno != frame_module->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_module, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_finally_handler_3;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_116 = Py_False;
    {
        PyObject *old = tmp_with_1__indicator;
        assert( old != NULL );
        tmp_with_1__indicator = tmp_assign_source_116;
        Py_INCREF( tmp_with_1__indicator );
        Py_DECREF( old );
    }

    tmp_called_name_8 = tmp_with_1__exit;

    tmp_args_element_name_6 = PyThreadState_GET()->exc_type;
    tmp_args_element_name_7 = PyThreadState_GET()->exc_value;
    tmp_args_element_name_8 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_finally_handler_3;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );


        goto try_finally_handler_3;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (exception_tb && exception_tb->tb_frame == frame_module)     frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_3;
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (exception_tb && exception_tb->tb_frame == frame_module)     frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_3;
    branch_end_2:;
    try_except_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_module->f_lineno;
    tmp_compare_left_4 = tmp_with_1__indicator;

    tmp_compare_right_4 = Py_True;
    tmp_is_1 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_9 = tmp_with_1__exit;

    tmp_call_arg_element_3 = Py_None;
    tmp_call_arg_element_4 = Py_None;
    tmp_call_arg_element_5 = Py_None;
    frame_module->f_lineno = 174;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, tmp_call_arg_element_3, tmp_call_arg_element_4, tmp_call_arg_element_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 174;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    frame_module->f_lineno = tmp_tried_lineno_3;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_2;
    }

    goto finally_end_3;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_3 );exception_keeper_type_3 = NULL;
    Py_XDECREF( exception_keeper_value_3 );exception_keeper_value_3 = NULL;
    Py_XDECREF( exception_keeper_tb_3 );exception_keeper_tb_3 = NULL;
    goto try_finally_handler_2;
    finally_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_module->f_lineno;
    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    Py_XDECREF( tmp_with_1__indicator );
    tmp_with_1__indicator = NULL;

    frame_module->f_lineno = tmp_tried_lineno_4;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 175;
        goto frame_exception_exit_1;
    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_close );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 175;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 175;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
    Py_DECREF( tmp_called_name_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 175;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 176;
        goto frame_exception_exit_1;
    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_system );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 176;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_6 = const_str_plain_clear;
    frame_module->f_lineno = 176;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_name_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 176;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_1 == NULL ))
    {
        tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = const_str_plain_cyan;
    tmp_left_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_str_digest_24915685862d2d9353b95d1b6fcb334a;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_2 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_2 == NULL ))
    {
        tmp_subscribed_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_2 = const_str_plain_off;
    tmp_right_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_str_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_1 );
    Py_DECREF( tmp_str_arg_1 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 177;
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    tmp_assign_source_117 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_silly, tmp_assign_source_117 );
    loop_start_1:;
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_operand_name_1 = NULL;
    // Tried code
    tmp_compexpr_left_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_silly );

    if (unlikely( tmp_compexpr_left_1 == NULL ))
    {
        tmp_compexpr_left_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_silly );
    }

    if ( tmp_compexpr_left_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 209 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 181;
        goto try_finally_handler_6;
    }

    tmp_compexpr_right_1 = const_int_pos_1;
    tmp_assign_source_118 = RICH_COMPARE_NE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_assign_source_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 181;
        goto try_finally_handler_6;
    }
    {
        PyObject *old = tmp_and_1__value_1;
        tmp_and_1__value_1 = tmp_assign_source_118;
        Py_XDECREF( old );
    }

    tmp_cond_value_3 = tmp_and_1__value_1;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 181;
        goto try_finally_handler_6;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_operand_name_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1 );
        tmp_and_1__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_2 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_autoload );

    if (unlikely( tmp_compexpr_left_2 == NULL ))
    {
        tmp_compexpr_left_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_autoload );
    }

    if ( tmp_compexpr_left_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 181;
        goto try_finally_handler_7;
    }

    tmp_compexpr_right_2 = Py_True;
    tmp_operand_name_1 = RICH_COMPARE_NE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 181;
        goto try_finally_handler_7;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_6;
    }

    goto finally_end_5;
    finally_end_5:;
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_operand_name_1 = tmp_and_1__value_1;

    Py_INCREF( tmp_operand_name_1 );
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_5;
    }

    goto finally_end_6;
    finally_end_6:;
    tmp_cond_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 181;
        goto try_finally_handler_5;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_1__value_1 );
    tmp_and_1__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_5;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto frame_exception_exit_1;
    }

    goto finally_end_7;
    finally_end_7:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 181;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    goto loop_end_1;
    branch_no_5:;
    tmp_called_name_12 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_3 == NULL ))
    {
        tmp_subscribed_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_3 = const_str_plain_blue;
    tmp_left_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_left_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = const_str_digest_7ec46522d4cc1841e4db22e50f8381be;
    tmp_left_name_5 = BINARY_OPERATION_ADD( tmp_left_name_6, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_6 );
    if ( tmp_left_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_4 == NULL ))
    {
        tmp_subscribed_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_4 == NULL )
    {
        Py_DECREF( tmp_left_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_4 = const_str_plain_yellow;
    tmp_right_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_right_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_5 );

        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_left_name_4 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_4 );
    Py_DECREF( tmp_left_name_5 );
    Py_DECREF( tmp_right_name_4 );
    if ( tmp_left_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_right_name_5 = const_str_digest_43e1128b2fabd0561bae6d2289783e70;
    tmp_left_name_3 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_5 );
    Py_DECREF( tmp_left_name_4 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_5 == NULL ))
    {
        tmp_subscribed_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_5 == NULL )
    {
        Py_DECREF( tmp_left_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_5 = const_str_plain_off;
    tmp_right_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_right_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_3 );

        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_6 );
    Py_DECREF( tmp_left_name_3 );
    Py_DECREF( tmp_right_name_6 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 182;
    tmp_assign_source_119 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, tmp_args_element_name_9 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_classsc, tmp_assign_source_119 );
    tmp_compare_left_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_classsc );

    if (unlikely( tmp_compare_left_5 == NULL ))
    {
        tmp_compare_left_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_classsc );
    }

    if ( tmp_compare_left_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 236 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 183;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_5 = const_str_plain_1;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 183;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skills );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skills );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 265 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 184;
        goto frame_exception_exit_1;
    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_append );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 184;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_7 = const_str_plain_Rage;
    frame_module->f_lineno = 184;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_name_13 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 184;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_6 == NULL ))
    {
        tmp_subscribed_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_6 = const_str_plain_cyan;
    tmp_left_name_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_left_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_right_name_7 = const_str_digest_65c15fb892f499b11c270cb41bc59a2a;
    tmp_left_name_7 = BINARY_OPERATION_ADD( tmp_left_name_8, tmp_right_name_7 );
    Py_DECREF( tmp_left_name_8 );
    if ( tmp_left_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_7 == NULL ))
    {
        tmp_subscribed_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_7 == NULL )
    {
        Py_DECREF( tmp_left_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_7 = const_str_plain_off;
    tmp_right_name_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_right_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_7 );

        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_2 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_8 );
    Py_DECREF( tmp_left_name_7 );
    Py_DECREF( tmp_right_name_8 );
    if ( tmp_str_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_2 );
    Py_DECREF( tmp_str_arg_2 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_120 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_silly, tmp_assign_source_120 );
    goto branch_end_6;
    branch_no_6:;
    tmp_compare_left_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_classsc );

    if (unlikely( tmp_compare_left_6 == NULL ))
    {
        tmp_compare_left_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_classsc );
    }

    if ( tmp_compare_left_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 236 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 187;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_6 = const_str_plain_2;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 187;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_3 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skills );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skills );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 265 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 188;
        goto frame_exception_exit_1;
    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_append );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 188;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_8 = const_str_plain_Recover;
    frame_module->f_lineno = 188;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_name_14 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 188;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_8 == NULL ))
    {
        tmp_subscribed_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_8 = const_str_plain_cyan;
    tmp_left_name_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_left_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_right_name_9 = const_str_digest_65c15fb892f499b11c270cb41bc59a2a;
    tmp_left_name_9 = BINARY_OPERATION_ADD( tmp_left_name_10, tmp_right_name_9 );
    Py_DECREF( tmp_left_name_10 );
    if ( tmp_left_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_9 == NULL ))
    {
        tmp_subscribed_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_9 == NULL )
    {
        Py_DECREF( tmp_left_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_9 = const_str_plain_off;
    tmp_right_name_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_right_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_9 );

        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_3 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_10 );
    Py_DECREF( tmp_left_name_9 );
    Py_DECREF( tmp_right_name_10 );
    if ( tmp_str_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_3 );
    Py_DECREF( tmp_str_arg_3 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_121 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_silly, tmp_assign_source_121 );
    goto branch_end_7;
    branch_no_7:;
    tmp_compare_left_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_classsc );

    if (unlikely( tmp_compare_left_7 == NULL ))
    {
        tmp_compare_left_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_classsc );
    }

    if ( tmp_compare_left_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 236 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 191;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_7 = const_str_plain_3;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 191;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_4 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skills );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skills );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 265 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 192;
        goto frame_exception_exit_1;
    }

    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_append );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 192;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = const_str_plain_Stealth;
    frame_module->f_lineno = 192;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, tmp_call_arg_element_9 );
    Py_DECREF( tmp_called_name_15 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 192;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_10 == NULL ))
    {
        tmp_subscribed_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_10 = const_str_plain_cyan;
    tmp_left_name_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_right_name_11 = const_str_digest_65c15fb892f499b11c270cb41bc59a2a;
    tmp_left_name_11 = BINARY_OPERATION_ADD( tmp_left_name_12, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_12 );
    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_11 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_11 == NULL ))
    {
        tmp_subscribed_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_11 == NULL )
    {
        Py_DECREF( tmp_left_name_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_11 = const_str_plain_off;
    tmp_right_name_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_right_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_11 );

        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_4 = BINARY_OPERATION_ADD( tmp_left_name_11, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_11 );
    Py_DECREF( tmp_right_name_12 );
    if ( tmp_str_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_4 );
    Py_DECREF( tmp_str_arg_4 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_122 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_silly, tmp_assign_source_122 );
    branch_no_8:;
    branch_end_7:;
    branch_end_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 181;
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_compare_left_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_autoload );

    if (unlikely( tmp_compare_left_8 == NULL ))
    {
        tmp_compare_left_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_autoload );
    }

    if ( tmp_compare_left_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 195;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_8 = Py_True;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 195;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_5 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_subscribed_name_12 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_12 == NULL ))
    {
        tmp_subscribed_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_12 = const_str_plain_cyan;
    tmp_left_name_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_left_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    tmp_right_name_13 = const_str_digest_65c15fb892f499b11c270cb41bc59a2a;
    tmp_left_name_13 = BINARY_OPERATION_ADD( tmp_left_name_14, tmp_right_name_13 );
    Py_DECREF( tmp_left_name_14 );
    if ( tmp_left_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_13 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_13 == NULL ))
    {
        tmp_subscribed_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_13 == NULL )
    {
        Py_DECREF( tmp_left_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_13 = const_str_plain_off;
    tmp_right_name_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_right_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_13 );

        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_5 = BINARY_OPERATION_ADD( tmp_left_name_13, tmp_right_name_14 );
    Py_DECREF( tmp_left_name_13 );
    Py_DECREF( tmp_right_name_14 );
    if ( tmp_str_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_5 );
    Py_DECREF( tmp_str_arg_5 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_14 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_14 == NULL ))
    {
        tmp_subscribed_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_14 = const_str_plain_red;
    tmp_left_name_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_left_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    tmp_right_name_15 = const_str_digest_3bd07c570e48aff7a991701ad5b36b18;
    tmp_left_name_15 = BINARY_OPERATION_ADD( tmp_left_name_16, tmp_right_name_15 );
    Py_DECREF( tmp_left_name_16 );
    if ( tmp_left_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_15 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_15 == NULL ))
    {
        tmp_subscribed_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_15 == NULL )
    {
        Py_DECREF( tmp_left_name_15 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_15 = const_str_plain_off;
    tmp_right_name_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_right_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_15 );

        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_6 = BINARY_OPERATION_ADD( tmp_left_name_15, tmp_right_name_16 );
    Py_DECREF( tmp_left_name_15 );
    Py_DECREF( tmp_right_name_16 );
    if ( tmp_str_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_6 );
    Py_DECREF( tmp_str_arg_6 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    branch_no_9:;
    tmp_called_name_16 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 199;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_10 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 199;
    tmp_assign_source_123 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, tmp_call_arg_element_10 );
    if ( tmp_assign_source_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 199;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act, tmp_assign_source_123 );
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 200;
        goto frame_exception_exit_1;
    }

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_split );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 200;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_11 = const_str_space;
    frame_module->f_lineno = 200;
    tmp_assign_source_124 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_name_17 );
    if ( tmp_assign_source_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 200;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words, tmp_assign_source_124 );
    tmp_assign_source_125 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop, tmp_assign_source_125 );
    loop_start_2:;
    tmp_compare_left_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop );

    if (unlikely( tmp_compare_left_9 == NULL ))
    {
        tmp_compare_left_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stop );
    }

    if ( tmp_compare_left_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 318 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 202;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_9 = const_int_pos_1;
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 202;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotEq_1 == 1)
    {
        goto branch_no_10;
    }
    else
    {
        goto branch_yes_10;
    }
    branch_yes_10:;
    goto loop_end_2;
    branch_no_10:;
    tmp_set_arg_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_n_words );

    if (unlikely( tmp_set_arg_1 == NULL ))
    {
        tmp_set_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_n_words );
    }

    if ( tmp_set_arg_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 344 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }

    tmp_left_name_17 = PySet_New( tmp_set_arg_1 );
    if ( tmp_left_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    tmp_set_arg_2 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_set_arg_2 == NULL ))
    {
        tmp_set_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_set_arg_2 == NULL )
    {
        Py_DECREF( tmp_left_name_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }

    tmp_right_name_17 = PySet_New( tmp_set_arg_2 );
    if ( tmp_right_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_17 );

        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    tmp_list_arg_1 = BINARY_OPERATION( PyNumber_And, tmp_left_name_17, tmp_right_name_17 );
    Py_DECREF( tmp_left_name_17 );
    Py_DECREF( tmp_right_name_17 );
    if ( tmp_list_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_4 = PySequence_List( tmp_list_arg_1 );
    Py_DECREF( tmp_list_arg_1 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_4 );
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_left_name_18 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_left_name_18 == NULL ))
    {
        tmp_left_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_left_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 208;
        goto frame_exception_exit_1;
    }

    tmp_right_name_18 = const_int_pos_1;
    tmp_assign_source_126 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_18, tmp_right_name_18 );
    if ( tmp_assign_source_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 208;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_126 );
    goto branch_end_11;
    branch_no_11:;
    tmp_set_arg_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_s_words );

    if (unlikely( tmp_set_arg_3 == NULL ))
    {
        tmp_set_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_s_words );
    }

    if ( tmp_set_arg_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 423 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }

    tmp_left_name_19 = PySet_New( tmp_set_arg_3 );
    if ( tmp_left_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }
    tmp_set_arg_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_set_arg_4 == NULL ))
    {
        tmp_set_arg_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_set_arg_4 == NULL )
    {
        Py_DECREF( tmp_left_name_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }

    tmp_right_name_19 = PySet_New( tmp_set_arg_4 );
    if ( tmp_right_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_19 );

        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }
    tmp_list_arg_2 = BINARY_OPERATION( PyNumber_And, tmp_left_name_19, tmp_right_name_19 );
    Py_DECREF( tmp_left_name_19 );
    Py_DECREF( tmp_right_name_19 );
    if ( tmp_list_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_5 = PySequence_List( tmp_list_arg_2 );
    Py_DECREF( tmp_list_arg_2 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        frame_module->f_lineno = 209;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_5 );
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_left_name_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_left_name_20 == NULL ))
    {
        tmp_left_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_left_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 210;
        goto frame_exception_exit_1;
    }

    tmp_right_name_20 = const_int_pos_1;
    tmp_assign_source_127 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_20, tmp_right_name_20 );
    if ( tmp_assign_source_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 210;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_127 );
    goto branch_end_12;
    branch_no_12:;
    tmp_set_arg_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_e_words );

    if (unlikely( tmp_set_arg_5 == NULL ))
    {
        tmp_set_arg_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_e_words );
    }

    if ( tmp_set_arg_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 452 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }

    tmp_left_name_21 = PySet_New( tmp_set_arg_5 );
    if ( tmp_left_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_set_arg_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_set_arg_6 == NULL ))
    {
        tmp_set_arg_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_set_arg_6 == NULL )
    {
        Py_DECREF( tmp_left_name_21 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }

    tmp_right_name_21 = PySet_New( tmp_set_arg_6 );
    if ( tmp_right_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_21 );

        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_list_arg_3 = BINARY_OPERATION( PyNumber_And, tmp_left_name_21, tmp_right_name_21 );
    Py_DECREF( tmp_left_name_21 );
    Py_DECREF( tmp_right_name_21 );
    if ( tmp_list_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_6 = PySequence_List( tmp_list_arg_3 );
    Py_DECREF( tmp_list_arg_3 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        frame_module->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_6 );
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_left_name_22 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_left_name_22 == NULL ))
    {
        tmp_left_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_left_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 212;
        goto frame_exception_exit_1;
    }

    tmp_right_name_22 = const_int_pos_1;
    tmp_assign_source_128 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_22, tmp_right_name_22 );
    if ( tmp_assign_source_128 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 212;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_128 );
    goto branch_end_13;
    branch_no_13:;
    tmp_set_arg_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_w_words );

    if (unlikely( tmp_set_arg_7 == NULL ))
    {
        tmp_set_arg_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_w_words );
    }

    if ( tmp_set_arg_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 504 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }

    tmp_left_name_23 = PySet_New( tmp_set_arg_7 );
    if ( tmp_left_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }
    tmp_set_arg_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_set_arg_8 == NULL ))
    {
        tmp_set_arg_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_set_arg_8 == NULL )
    {
        Py_DECREF( tmp_left_name_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }

    tmp_right_name_23 = PySet_New( tmp_set_arg_8 );
    if ( tmp_right_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_23 );

        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }
    tmp_list_arg_4 = BINARY_OPERATION( PyNumber_And, tmp_left_name_23, tmp_right_name_23 );
    Py_DECREF( tmp_left_name_23 );
    Py_DECREF( tmp_right_name_23 );
    if ( tmp_list_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_7 = PySequence_List( tmp_list_arg_4 );
    Py_DECREF( tmp_list_arg_4 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        frame_module->f_lineno = 213;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_7 );
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_left_name_24 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_left_name_24 == NULL ))
    {
        tmp_left_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_left_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 214;
        goto frame_exception_exit_1;
    }

    tmp_right_name_24 = const_int_pos_1;
    tmp_assign_source_129 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_24, tmp_right_name_24 );
    if ( tmp_assign_source_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 214;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_129 );
    goto branch_end_14;
    branch_no_14:;
    tmp_compare_left_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_10 == NULL ))
    {
        tmp_compare_left_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 215;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_10 = const_str_plain_d;
    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 215;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_6 == 1)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_left_name_25 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_left_name_25 == NULL ))
    {
        tmp_left_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_left_name_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 216;
        goto frame_exception_exit_1;
    }

    tmp_right_name_25 = const_int_pos_1;
    tmp_assign_source_130 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_25, tmp_right_name_25 );
    if ( tmp_assign_source_130 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 216;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_130 );
    goto branch_end_15;
    branch_no_15:;
    tmp_compare_left_11 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_11 == NULL ))
    {
        tmp_compare_left_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 217;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_11 = const_str_plain_u;
    tmp_cmp_Eq_7 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_11, tmp_compare_right_11 );
    if ( tmp_cmp_Eq_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 217;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_7 == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_left_name_26 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_left_name_26 == NULL ))
    {
        tmp_left_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_left_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 218;
        goto frame_exception_exit_1;
    }

    tmp_right_name_26 = const_int_pos_1;
    tmp_assign_source_131 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_26, tmp_right_name_26 );
    if ( tmp_assign_source_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 218;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_131 );
    branch_no_16:;
    branch_end_15:;
    branch_end_14:;
    branch_end_13:;
    branch_end_12:;
    branch_end_11:;
    tmp_compare_left_12 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_12 == NULL ))
    {
        tmp_compare_left_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 220;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_12 = const_str_plain_num;
    tmp_cmp_Eq_8 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_12, tmp_compare_right_12 );
    if ( tmp_cmp_Eq_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 220;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_8 == 1)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_str_arg_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_str_arg_7 == NULL ))
    {
        tmp_str_arg_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_str_arg_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 221;
        goto frame_exception_exit_1;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_7 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 221;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 221;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 221;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_str_arg_8 == NULL ))
    {
        tmp_str_arg_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_str_arg_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 222;
        goto frame_exception_exit_1;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_8 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 222;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 222;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 222;
        goto frame_exception_exit_1;
    }
    tmp_left_name_27 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_left_name_27 == NULL ))
    {
        tmp_left_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_left_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 223;
        goto frame_exception_exit_1;
    }

    tmp_right_name_27 = const_int_pos_1;
    tmp_assign_source_132 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_27, tmp_right_name_27 );
    if ( tmp_assign_source_132 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 223;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_132 );
    branch_no_17:;
    tmp_set_arg_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_use_words );

    if (unlikely( tmp_set_arg_9 == NULL ))
    {
        tmp_set_arg_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_use_words );
    }

    if ( tmp_set_arg_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 592 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }

    tmp_left_name_28 = PySet_New( tmp_set_arg_9 );
    if ( tmp_left_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_set_arg_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_set_arg_10 == NULL ))
    {
        tmp_set_arg_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_set_arg_10 == NULL )
    {
        Py_DECREF( tmp_left_name_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }

    tmp_right_name_28 = PySet_New( tmp_set_arg_10 );
    if ( tmp_right_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_28 );

        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_list_arg_5 = BINARY_OPERATION( PyNumber_And, tmp_left_name_28, tmp_right_name_28 );
    Py_DECREF( tmp_left_name_28 );
    Py_DECREF( tmp_right_name_28 );
    if ( tmp_list_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_8 = PySequence_List( tmp_list_arg_5 );
    Py_DECREF( tmp_list_arg_5 );
    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_8 );
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_compexpr_left_3 = const_str_plain_switch;
    tmp_compexpr_right_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_3 == NULL ))
    {
        tmp_compexpr_right_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 225;
        goto try_finally_handler_9;
    }

    tmp_assign_source_133 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    if ( tmp_assign_source_133 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_9;
    }
    {
        PyObject *old = tmp_and_2__value_3;
        tmp_and_2__value_3 = tmp_assign_source_133;
        Py_INCREF( tmp_and_2__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_10 = tmp_and_2__value_3;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_9;
    }
    if (tmp_cond_truth_10 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_3 );
        tmp_and_2__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_compexpr_left_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_4 == NULL ))
    {
        tmp_compexpr_left_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 225;
        goto try_finally_handler_12;
    }

    tmp_compexpr_right_4 = const_int_pos_3;
    tmp_assign_source_134 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    if ( tmp_assign_source_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_12;
    }
    {
        PyObject *old = tmp_and_2__value_2;
        tmp_and_2__value_2 = tmp_assign_source_134;
        Py_XDECREF( old );
    }

    tmp_cond_value_11 = tmp_and_2__value_2;

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_12;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_2 );
        tmp_and_2__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_compexpr_left_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_5 == NULL ))
    {
        tmp_compexpr_left_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 225;
        goto try_finally_handler_15;
    }

    tmp_compexpr_right_5 = const_int_pos_7;
    tmp_assign_source_135 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    if ( tmp_assign_source_135 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_15;
    }
    {
        PyObject *old = tmp_and_2__value_1;
        tmp_and_2__value_1 = tmp_assign_source_135;
        Py_XDECREF( old );
    }

    tmp_cond_value_12 = tmp_and_2__value_1;

    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_15;
    }
    if (tmp_cond_truth_12 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1 );
        tmp_and_2__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_6 == NULL ))
    {
        tmp_compexpr_left_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 225;
        goto try_finally_handler_16;
    }

    tmp_compexpr_right_6 = const_int_0;
    tmp_cond_value_9 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 225;
        goto try_finally_handler_16;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_15;
    }

    goto finally_end_8;
    finally_end_8:;
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_cond_value_9 = tmp_and_2__value_1;

    Py_INCREF( tmp_cond_value_9 );
    condexpr_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_14;
    }

    goto finally_end_9;
    finally_end_9:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_13;
    }

    goto finally_end_10;
    finally_end_10:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_2__value_1 );
    tmp_and_2__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_6;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_12;
    }

    goto finally_end_11;
    finally_end_11:;
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_9 = tmp_and_2__value_2;

    Py_INCREF( tmp_cond_value_9 );
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto try_finally_handler_11;
    }

    goto finally_end_12;
    finally_end_12:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_10;
    }

    goto finally_end_13;
    finally_end_13:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_2__value_2 );
    tmp_and_2__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_7;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_9;
    }

    goto finally_end_14;
    finally_end_14:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_cond_value_9 = tmp_and_2__value_3;

    Py_INCREF( tmp_cond_value_9 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_finally_handler_8;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        frame_module->f_lineno = 225;
        goto try_finally_handler_8;
    }
    Py_DECREF( tmp_cond_value_9 );
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 226;
        goto try_finally_handler_8;
    }

    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_append );
    if ( tmp_called_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 226;
        goto try_finally_handler_8;
    }
    tmp_call_arg_element_12 = const_str_plain_lights;
    frame_module->f_lineno = 226;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, tmp_call_arg_element_12 );
    Py_DECREF( tmp_called_name_18 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 226;
        goto try_finally_handler_8;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_16 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_16 == NULL ))
    {
        tmp_subscribed_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }

    tmp_subscript_name_16 = const_str_plain_magenta;
    tmp_left_name_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_left_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    tmp_right_name_29 = const_str_digest_73d0e83ff127c5a42ba89a97d9aaf41f;
    tmp_left_name_29 = BINARY_OPERATION_ADD( tmp_left_name_30, tmp_right_name_29 );
    Py_DECREF( tmp_left_name_30 );
    if ( tmp_left_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    tmp_subscribed_name_17 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_17 == NULL ))
    {
        tmp_subscribed_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_17 == NULL )
    {
        Py_DECREF( tmp_left_name_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }

    tmp_subscript_name_17 = const_str_plain_off;
    tmp_right_name_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_right_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_29 );

        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    tmp_str_arg_9 = BINARY_OPERATION_ADD( tmp_left_name_29, tmp_right_name_30 );
    Py_DECREF( tmp_left_name_29 );
    Py_DECREF( tmp_right_name_30 );
    if ( tmp_str_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_9 );
    Py_DECREF( tmp_str_arg_9 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 227;
        goto try_finally_handler_8;
    }
    goto branch_end_19;
    branch_no_19:;
    // Tried code
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_compexpr_left_7 = const_str_plain_switch;
    tmp_compexpr_right_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_7 == NULL ))
    {
        tmp_compexpr_right_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 228;
        goto try_finally_handler_18;
    }

    tmp_assign_source_136 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_assign_source_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_18;
    }
    {
        PyObject *old = tmp_and_3__value_4;
        tmp_and_3__value_4 = tmp_assign_source_136;
        Py_INCREF( tmp_and_3__value_4 );
        Py_XDECREF( old );
    }

    tmp_cond_value_14 = tmp_and_3__value_4;

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_18;
    }
    if (tmp_cond_truth_14 == 1)
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_4 );
        tmp_and_3__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_compexpr_left_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_8 == NULL ))
    {
        tmp_compexpr_left_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 228;
        goto try_finally_handler_21;
    }

    tmp_compexpr_right_8 = const_int_pos_3;
    tmp_assign_source_137 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    if ( tmp_assign_source_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_21;
    }
    {
        PyObject *old = tmp_and_3__value_3;
        tmp_and_3__value_3 = tmp_assign_source_137;
        Py_XDECREF( old );
    }

    tmp_cond_value_15 = tmp_and_3__value_3;

    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_21;
    }
    if (tmp_cond_truth_15 == 1)
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_3 );
        tmp_and_3__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_compexpr_left_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_9 == NULL ))
    {
        tmp_compexpr_left_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 228;
        goto try_finally_handler_24;
    }

    tmp_compexpr_right_9 = const_int_pos_7;
    tmp_assign_source_138 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    if ( tmp_assign_source_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_24;
    }
    {
        PyObject *old = tmp_and_3__value_2;
        tmp_and_3__value_2 = tmp_assign_source_138;
        Py_XDECREF( old );
    }

    tmp_cond_value_16 = tmp_and_3__value_2;

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_24;
    }
    if (tmp_cond_truth_16 == 1)
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_2 );
        tmp_and_3__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_compexpr_left_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_10 == NULL ))
    {
        tmp_compexpr_left_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 228;
        goto try_finally_handler_27;
    }

    tmp_compexpr_right_10 = const_int_0;
    tmp_assign_source_139 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_10, tmp_compexpr_right_10 );
    if ( tmp_assign_source_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_27;
    }
    {
        PyObject *old = tmp_and_3__value_1;
        tmp_and_3__value_1 = tmp_assign_source_139;
        Py_XDECREF( old );
    }

    tmp_cond_value_17 = tmp_and_3__value_1;

    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_27;
    }
    if (tmp_cond_truth_17 == 1)
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_1 );
        tmp_and_3__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_11 = const_str_plain_lights;
    tmp_compexpr_right_11 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_11 == NULL ))
    {
        tmp_compexpr_right_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 228;
        goto try_finally_handler_28;
    }

    tmp_cond_value_13 = SEQUENCE_CONTAINS( tmp_compexpr_left_11, tmp_compexpr_right_11 );
    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_28;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_28:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_27;
    }

    goto finally_end_16;
    finally_end_16:;
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_cond_value_13 = tmp_and_3__value_1;

    condexpr_end_9:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_27:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_26;
    }

    goto finally_end_17;
    finally_end_17:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_26:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_25;
    }

    goto finally_end_18;
    finally_end_18:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_25:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_3__value_1 );
    tmp_and_3__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_8;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto try_finally_handler_24;
    }

    goto finally_end_19;
    finally_end_19:;
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_cond_value_13 = tmp_and_3__value_2;

    condexpr_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto try_finally_handler_23;
    }

    goto finally_end_20;
    finally_end_20:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto try_finally_handler_22;
    }

    goto finally_end_21;
    finally_end_21:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_3__value_2 );
    tmp_and_3__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_9;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto try_finally_handler_21;
    }

    goto finally_end_22;
    finally_end_22:;
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_cond_value_13 = tmp_and_3__value_3;

    condexpr_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto try_finally_handler_20;
    }

    goto finally_end_23;
    finally_end_23:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_24 != NULL )
    {
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;

        goto try_finally_handler_19;
    }

    goto finally_end_24;
    finally_end_24:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_3__value_3 );
    tmp_and_3__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_10;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_25 != NULL )
    {
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;

        goto try_finally_handler_18;
    }

    goto finally_end_25;
    finally_end_25:;
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_cond_value_13 = tmp_and_3__value_4;

    condexpr_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_26 != NULL )
    {
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;

        goto try_finally_handler_17;
    }

    goto finally_end_26;
    finally_end_26:;
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 228;
        goto try_finally_handler_17;
    }
    if (tmp_cond_truth_13 == 1)
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_subscribed_name_18 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_18 == NULL ))
    {
        tmp_subscribed_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }

    tmp_subscript_name_18 = const_str_plain_magenta;
    tmp_left_name_32 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_left_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    tmp_right_name_31 = const_str_digest_324bc35cdbb95a43cb591e9f38b86ec1;
    tmp_left_name_31 = BINARY_OPERATION_ADD( tmp_left_name_32, tmp_right_name_31 );
    Py_DECREF( tmp_left_name_32 );
    if ( tmp_left_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    tmp_subscribed_name_19 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_19 == NULL ))
    {
        tmp_subscribed_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_19 == NULL )
    {
        Py_DECREF( tmp_left_name_31 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }

    tmp_subscript_name_19 = const_str_plain_off;
    tmp_right_name_32 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    if ( tmp_right_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_31 );

        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    tmp_str_arg_10 = BINARY_OPERATION_ADD( tmp_left_name_31, tmp_right_name_32 );
    Py_DECREF( tmp_left_name_31 );
    Py_DECREF( tmp_right_name_32 );
    if ( tmp_str_arg_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_10 );
    Py_DECREF( tmp_str_arg_10 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 229;
        goto try_finally_handler_17;
    }
    goto branch_end_20;
    branch_no_20:;
    // Tried code
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_compexpr_left_12 = const_str_plain_crowbar;
    tmp_compexpr_right_12 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_12 == NULL ))
    {
        tmp_compexpr_right_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 230;
        goto try_finally_handler_30;
    }

    tmp_assign_source_140 = SEQUENCE_CONTAINS( tmp_compexpr_left_12, tmp_compexpr_right_12 );
    if ( tmp_assign_source_140 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_30;
    }
    {
        PyObject *old = tmp_and_4__value_3;
        tmp_and_4__value_3 = tmp_assign_source_140;
        Py_INCREF( tmp_and_4__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_19 = tmp_and_4__value_3;

    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_30;
    }
    if (tmp_cond_truth_19 == 1)
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_result = tmp_and_4__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_4__value_3 );
        tmp_and_4__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_compexpr_left_13 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_13 == NULL ))
    {
        tmp_compexpr_left_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 230;
        goto try_finally_handler_33;
    }

    tmp_compexpr_right_13 = const_int_pos_3;
    tmp_assign_source_141 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_13, tmp_compexpr_right_13 );
    if ( tmp_assign_source_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_33;
    }
    {
        PyObject *old = tmp_and_4__value_2;
        tmp_and_4__value_2 = tmp_assign_source_141;
        Py_XDECREF( old );
    }

    tmp_cond_value_20 = tmp_and_4__value_2;

    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_33;
    }
    if (tmp_cond_truth_20 == 1)
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_result = tmp_and_4__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_4__value_2 );
        tmp_and_4__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_compexpr_left_14 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_14 == NULL ))
    {
        tmp_compexpr_left_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 230;
        goto try_finally_handler_36;
    }

    tmp_compexpr_right_14 = const_int_pos_12;
    tmp_assign_source_142 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_14, tmp_compexpr_right_14 );
    if ( tmp_assign_source_142 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_36;
    }
    {
        PyObject *old = tmp_and_4__value_1;
        tmp_and_4__value_1 = tmp_assign_source_142;
        Py_XDECREF( old );
    }

    tmp_cond_value_21 = tmp_and_4__value_1;

    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_36;
    }
    if (tmp_cond_truth_21 == 1)
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_result = tmp_and_4__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_4__value_1 );
        tmp_and_4__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_15 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_15 == NULL ))
    {
        tmp_compexpr_left_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 230;
        goto try_finally_handler_37;
    }

    tmp_compexpr_right_15 = const_int_pos_1;
    tmp_cond_value_18 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_15, tmp_compexpr_right_15 );
    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 230;
        goto try_finally_handler_37;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_37:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_27 != NULL )
    {
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;

        goto try_finally_handler_36;
    }

    goto finally_end_27;
    finally_end_27:;
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_cond_value_18 = tmp_and_4__value_1;

    Py_INCREF( tmp_cond_value_18 );
    condexpr_end_12:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_36:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_28 != NULL )
    {
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;

        goto try_finally_handler_35;
    }

    goto finally_end_28;
    finally_end_28:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_35:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_29 != NULL )
    {
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;

        goto try_finally_handler_34;
    }

    goto finally_end_29;
    finally_end_29:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_34:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_11 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_4__value_1 );
    tmp_and_4__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_11;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_30 != NULL )
    {
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;

        goto try_finally_handler_33;
    }

    goto finally_end_30;
    finally_end_30:;
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_cond_value_18 = tmp_and_4__value_2;

    Py_INCREF( tmp_cond_value_18 );
    condexpr_end_11:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_33:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_31 != NULL )
    {
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;

        goto try_finally_handler_32;
    }

    goto finally_end_31;
    finally_end_31:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_32:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_32 != NULL )
    {
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;

        goto try_finally_handler_31;
    }

    goto finally_end_32;
    finally_end_32:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_31:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_12 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_4__value_2 );
    tmp_and_4__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_12;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_33 != NULL )
    {
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;

        goto try_finally_handler_30;
    }

    goto finally_end_33;
    finally_end_33:;
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_cond_value_18 = tmp_and_4__value_3;

    Py_INCREF( tmp_cond_value_18 );
    condexpr_end_10:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_30:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_34 != NULL )
    {
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;

        goto try_finally_handler_29;
    }

    goto finally_end_34;
    finally_end_34:;
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        frame_module->f_lineno = 230;
        goto try_finally_handler_29;
    }
    Py_DECREF( tmp_cond_value_18 );
    if (tmp_cond_truth_18 == 1)
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_subscribed_name_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_20 == NULL ))
    {
        tmp_subscribed_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }

    tmp_subscript_name_20 = const_str_plain_magenta;
    tmp_left_name_34 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_20 );
    if ( tmp_left_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    tmp_right_name_33 = const_str_digest_5e03a65903adeb24599b32c1dc908346;
    tmp_left_name_33 = BINARY_OPERATION_ADD( tmp_left_name_34, tmp_right_name_33 );
    Py_DECREF( tmp_left_name_34 );
    if ( tmp_left_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    tmp_subscribed_name_21 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_21 == NULL ))
    {
        tmp_subscribed_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_21 == NULL )
    {
        Py_DECREF( tmp_left_name_33 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }

    tmp_subscript_name_21 = const_str_plain_off;
    tmp_right_name_34 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_21 );
    if ( tmp_right_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_33 );

        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    tmp_str_arg_11 = BINARY_OPERATION_ADD( tmp_left_name_33, tmp_right_name_34 );
    Py_DECREF( tmp_left_name_33 );
    Py_DECREF( tmp_right_name_34 );
    if ( tmp_str_arg_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_11 );
    Py_DECREF( tmp_str_arg_11 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 231;
        goto try_finally_handler_29;
    }
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 232;
        goto try_finally_handler_29;
    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_append );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 232;
        goto try_finally_handler_29;
    }
    tmp_call_arg_element_13 = const_str_plain_underground_door;
    frame_module->f_lineno = 232;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, tmp_call_arg_element_13 );
    Py_DECREF( tmp_called_name_19 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 232;
        goto try_finally_handler_29;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_21;
    branch_no_21:;
    // Tried code
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_compexpr_left_16 = const_str_plain_crowbar;
    tmp_compexpr_right_16 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_16 == NULL ))
    {
        tmp_compexpr_right_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 233;
        goto try_finally_handler_39;
    }

    tmp_assign_source_143 = SEQUENCE_CONTAINS( tmp_compexpr_left_16, tmp_compexpr_right_16 );
    if ( tmp_assign_source_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_39;
    }
    {
        PyObject *old = tmp_and_5__value_3;
        tmp_and_5__value_3 = tmp_assign_source_143;
        Py_INCREF( tmp_and_5__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_23 = tmp_and_5__value_3;

    tmp_cond_truth_23 = CHECK_IF_TRUE( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_39;
    }
    if (tmp_cond_truth_23 == 1)
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_result = tmp_and_5__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_5__value_3 );
        tmp_and_5__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_compexpr_left_17 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_17 == NULL ))
    {
        tmp_compexpr_left_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 233;
        goto try_finally_handler_42;
    }

    tmp_compexpr_right_17 = const_int_pos_2;
    tmp_assign_source_144 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_17, tmp_compexpr_right_17 );
    if ( tmp_assign_source_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_42;
    }
    {
        PyObject *old = tmp_and_5__value_2;
        tmp_and_5__value_2 = tmp_assign_source_144;
        Py_XDECREF( old );
    }

    tmp_cond_value_24 = tmp_and_5__value_2;

    tmp_cond_truth_24 = CHECK_IF_TRUE( tmp_cond_value_24 );
    if ( tmp_cond_truth_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_42;
    }
    if (tmp_cond_truth_24 == 1)
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_result = tmp_and_5__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_5__value_2 );
        tmp_and_5__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_compexpr_left_18 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_18 == NULL ))
    {
        tmp_compexpr_left_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 233;
        goto try_finally_handler_45;
    }

    tmp_compexpr_right_18 = const_int_pos_8;
    tmp_assign_source_145 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_18, tmp_compexpr_right_18 );
    if ( tmp_assign_source_145 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_45;
    }
    {
        PyObject *old = tmp_and_5__value_1;
        tmp_and_5__value_1 = tmp_assign_source_145;
        Py_XDECREF( old );
    }

    tmp_cond_value_25 = tmp_and_5__value_1;

    tmp_cond_truth_25 = CHECK_IF_TRUE( tmp_cond_value_25 );
    if ( tmp_cond_truth_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_45;
    }
    if (tmp_cond_truth_25 == 1)
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_cond_value_22 = NULL;
    // Tried code
    tmp_result = tmp_and_5__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_5__value_1 );
        tmp_and_5__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_19 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_19 == NULL ))
    {
        tmp_compexpr_left_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 233;
        goto try_finally_handler_46;
    }

    tmp_compexpr_right_19 = const_int_0;
    tmp_cond_value_22 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_19, tmp_compexpr_right_19 );
    if ( tmp_cond_value_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 233;
        goto try_finally_handler_46;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_46:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_35 != NULL )
    {
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;

        goto try_finally_handler_45;
    }

    goto finally_end_35;
    finally_end_35:;
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_cond_value_22 = tmp_and_5__value_1;

    Py_INCREF( tmp_cond_value_22 );
    condexpr_end_15:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_45:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_36 != NULL )
    {
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;

        goto try_finally_handler_44;
    }

    goto finally_end_36;
    finally_end_36:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_44:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_37 != NULL )
    {
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;

        goto try_finally_handler_43;
    }

    goto finally_end_37;
    finally_end_37:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_43:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_13 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_5__value_1 );
    tmp_and_5__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_13;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_38 != NULL )
    {
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;

        goto try_finally_handler_42;
    }

    goto finally_end_38;
    finally_end_38:;
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_cond_value_22 = tmp_and_5__value_2;

    Py_INCREF( tmp_cond_value_22 );
    condexpr_end_14:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_42:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_39 != NULL )
    {
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;

        goto try_finally_handler_41;
    }

    goto finally_end_39;
    finally_end_39:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_41:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_40 != NULL )
    {
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;

        goto try_finally_handler_40;
    }

    goto finally_end_40;
    finally_end_40:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_40:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_14 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_5__value_2 );
    tmp_and_5__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_14;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_41 != NULL )
    {
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;

        goto try_finally_handler_39;
    }

    goto finally_end_41;
    finally_end_41:;
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_cond_value_22 = tmp_and_5__value_3;

    Py_INCREF( tmp_cond_value_22 );
    condexpr_end_13:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_39:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_42 != NULL )
    {
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;

        goto try_finally_handler_38;
    }

    goto finally_end_42;
    finally_end_42:;
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_22 );

        frame_module->f_lineno = 233;
        goto try_finally_handler_38;
    }
    Py_DECREF( tmp_cond_value_22 );
    if (tmp_cond_truth_22 == 1)
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_subscribed_name_22 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_22 == NULL ))
    {
        tmp_subscribed_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }

    tmp_subscript_name_22 = const_str_plain_magenta;
    tmp_left_name_36 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_22, tmp_subscript_name_22 );
    if ( tmp_left_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    tmp_right_name_35 = const_str_digest_412044c6dfd7615df5f6930bfad902fd;
    tmp_left_name_35 = BINARY_OPERATION_ADD( tmp_left_name_36, tmp_right_name_35 );
    Py_DECREF( tmp_left_name_36 );
    if ( tmp_left_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    tmp_subscribed_name_23 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_23 == NULL ))
    {
        tmp_subscribed_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_23 == NULL )
    {
        Py_DECREF( tmp_left_name_35 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }

    tmp_subscript_name_23 = const_str_plain_off;
    tmp_right_name_36 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_23, tmp_subscript_name_23 );
    if ( tmp_right_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_35 );

        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    tmp_str_arg_12 = BINARY_OPERATION_ADD( tmp_left_name_35, tmp_right_name_36 );
    Py_DECREF( tmp_left_name_35 );
    Py_DECREF( tmp_right_name_36 );
    if ( tmp_str_arg_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_12 );
    Py_DECREF( tmp_str_arg_12 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 234;
        goto try_finally_handler_38;
    }
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 235;
        goto try_finally_handler_38;
    }

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_append );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 235;
        goto try_finally_handler_38;
    }
    tmp_call_arg_element_14 = const_str_plain_trapdoor;
    frame_module->f_lineno = 235;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, tmp_call_arg_element_14 );
    Py_DECREF( tmp_called_name_20 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 235;
        goto try_finally_handler_38;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_22;
    branch_no_22:;
    // Tried code
    tmp_cond_value_26 = NULL;
    // Tried code
    tmp_compexpr_left_20 = const_str_plain_spellbook;
    tmp_compexpr_right_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_20 == NULL ))
    {
        tmp_compexpr_right_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 236;
        goto try_finally_handler_48;
    }

    tmp_assign_source_146 = SEQUENCE_CONTAINS( tmp_compexpr_left_20, tmp_compexpr_right_20 );
    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 236;
        goto try_finally_handler_48;
    }
    {
        PyObject *old = tmp_and_6__value_1;
        tmp_and_6__value_1 = tmp_assign_source_146;
        Py_INCREF( tmp_and_6__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_27 = tmp_and_6__value_1;

    tmp_cond_truth_27 = CHECK_IF_TRUE( tmp_cond_value_27 );
    if ( tmp_cond_truth_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 236;
        goto try_finally_handler_48;
    }
    if (tmp_cond_truth_27 == 1)
    {
        goto condexpr_true_16;
    }
    else
    {
        goto condexpr_false_16;
    }
    condexpr_true_16:;
    tmp_cond_value_26 = NULL;
    // Tried code
    tmp_result = tmp_and_6__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_6__value_1 );
        tmp_and_6__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_21 = const_str_digest_62e0e143b9e2a50d815df0a5c6a7df84;
    tmp_compexpr_right_21 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_21 == NULL ))
    {
        tmp_compexpr_right_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 236;
        goto try_finally_handler_49;
    }

    tmp_cond_value_26 = SEQUENCE_CONTAINS( tmp_compexpr_left_21, tmp_compexpr_right_21 );
    if ( tmp_cond_value_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 236;
        goto try_finally_handler_49;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_49:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_43 != NULL )
    {
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;

        goto try_finally_handler_48;
    }

    goto finally_end_43;
    finally_end_43:;
    goto condexpr_end_16;
    condexpr_false_16:;
    tmp_cond_value_26 = tmp_and_6__value_1;

    condexpr_end_16:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_48:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_44 != NULL )
    {
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;

        goto try_finally_handler_47;
    }

    goto finally_end_44;
    finally_end_44:;
    tmp_cond_truth_26 = CHECK_IF_TRUE( tmp_cond_value_26 );
    if ( tmp_cond_truth_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 236;
        goto try_finally_handler_47;
    }
    if (tmp_cond_truth_26 == 1)
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_subscribed_name_24 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_24 == NULL ))
    {
        tmp_subscribed_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }

    tmp_subscript_name_24 = const_str_plain_magenta;
    tmp_left_name_38 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_24, tmp_subscript_name_24 );
    if ( tmp_left_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    tmp_right_name_37 = const_str_digest_baa7bcaacef7e28787dda5b6a2d79d8c;
    tmp_left_name_37 = BINARY_OPERATION_ADD( tmp_left_name_38, tmp_right_name_37 );
    Py_DECREF( tmp_left_name_38 );
    if ( tmp_left_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    tmp_subscribed_name_25 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_25 == NULL ))
    {
        tmp_subscribed_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_25 == NULL )
    {
        Py_DECREF( tmp_left_name_37 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }

    tmp_subscript_name_25 = const_str_plain_off;
    tmp_right_name_38 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_25, tmp_subscript_name_25 );
    if ( tmp_right_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_37 );

        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    tmp_str_arg_13 = BINARY_OPERATION_ADD( tmp_left_name_37, tmp_right_name_38 );
    Py_DECREF( tmp_left_name_37 );
    Py_DECREF( tmp_right_name_38 );
    if ( tmp_str_arg_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_13 );
    Py_DECREF( tmp_str_arg_13 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 237;
        goto try_finally_handler_47;
    }
    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 238;
        goto try_finally_handler_47;
    }

    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_append );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 238;
        goto try_finally_handler_47;
    }
    tmp_call_arg_element_15 = const_str_plain_firebolt;
    frame_module->f_lineno = 238;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, tmp_call_arg_element_15 );
    Py_DECREF( tmp_called_name_21 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 238;
        goto try_finally_handler_47;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 239;
        goto try_finally_handler_47;
    }

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_append );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 239;
        goto try_finally_handler_47;
    }
    tmp_call_arg_element_16 = const_str_digest_c60ab00efa2cacc33283c89f980f8268;
    frame_module->f_lineno = 239;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_22, tmp_call_arg_element_16 );
    Py_DECREF( tmp_called_name_22 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 239;
        goto try_finally_handler_47;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_23;
    branch_no_23:;
    // Tried code
    tmp_cond_value_28 = NULL;
    // Tried code
    tmp_compexpr_left_22 = const_str_plain_charm;
    tmp_compexpr_right_22 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_22 == NULL ))
    {
        tmp_compexpr_right_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 241;
        goto try_finally_handler_51;
    }

    tmp_assign_source_147 = SEQUENCE_CONTAINS( tmp_compexpr_left_22, tmp_compexpr_right_22 );
    if ( tmp_assign_source_147 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 241;
        goto try_finally_handler_51;
    }
    {
        PyObject *old = tmp_and_7__value_1;
        tmp_and_7__value_1 = tmp_assign_source_147;
        Py_INCREF( tmp_and_7__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_29 = tmp_and_7__value_1;

    tmp_cond_truth_29 = CHECK_IF_TRUE( tmp_cond_value_29 );
    if ( tmp_cond_truth_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 241;
        goto try_finally_handler_51;
    }
    if (tmp_cond_truth_29 == 1)
    {
        goto condexpr_true_17;
    }
    else
    {
        goto condexpr_false_17;
    }
    condexpr_true_17:;
    tmp_cond_value_28 = NULL;
    // Tried code
    tmp_result = tmp_and_7__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_7__value_1 );
        tmp_and_7__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_23 = const_str_digest_e5496a7381dca2b005e24cfb33f20ef7;
    tmp_compexpr_right_23 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_23 == NULL ))
    {
        tmp_compexpr_right_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 241;
        goto try_finally_handler_52;
    }

    tmp_cond_value_28 = SEQUENCE_CONTAINS( tmp_compexpr_left_23, tmp_compexpr_right_23 );
    if ( tmp_cond_value_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 241;
        goto try_finally_handler_52;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_52:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_45 != NULL )
    {
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;

        goto try_finally_handler_51;
    }

    goto finally_end_45;
    finally_end_45:;
    goto condexpr_end_17;
    condexpr_false_17:;
    tmp_cond_value_28 = tmp_and_7__value_1;

    condexpr_end_17:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_51:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_46 != NULL )
    {
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;

        goto try_finally_handler_50;
    }

    goto finally_end_46;
    finally_end_46:;
    tmp_cond_truth_28 = CHECK_IF_TRUE( tmp_cond_value_28 );
    if ( tmp_cond_truth_28 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 241;
        goto try_finally_handler_50;
    }
    if (tmp_cond_truth_28 == 1)
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_subscribed_name_26 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_26 == NULL ))
    {
        tmp_subscribed_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }

    tmp_subscript_name_26 = const_str_plain_blue;
    tmp_left_name_40 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_26, tmp_subscript_name_26 );
    if ( tmp_left_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    tmp_right_name_39 = const_str_digest_ae64ea560719e62b71aed5918c813258;
    tmp_left_name_39 = BINARY_OPERATION_ADD( tmp_left_name_40, tmp_right_name_39 );
    Py_DECREF( tmp_left_name_40 );
    if ( tmp_left_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    tmp_subscribed_name_27 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_27 == NULL ))
    {
        tmp_subscribed_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_27 == NULL )
    {
        Py_DECREF( tmp_left_name_39 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }

    tmp_subscript_name_27 = const_str_plain_off;
    tmp_right_name_40 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_27, tmp_subscript_name_27 );
    if ( tmp_right_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_39 );

        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    tmp_str_arg_14 = BINARY_OPERATION_ADD( tmp_left_name_39, tmp_right_name_40 );
    Py_DECREF( tmp_left_name_39 );
    Py_DECREF( tmp_right_name_40 );
    if ( tmp_str_arg_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_14 );
    Py_DECREF( tmp_str_arg_14 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 242;
        goto try_finally_handler_50;
    }
    tmp_left_name_41 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_evolve_count );

    if (unlikely( tmp_left_name_41 == NULL ))
    {
        tmp_left_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_evolve_count );
    }

    if ( tmp_left_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 746 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 243;
        goto try_finally_handler_50;
    }

    tmp_right_name_41 = const_int_pos_1;
    tmp_assign_source_148 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_41, tmp_right_name_41 );
    if ( tmp_assign_source_148 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 243;
        goto try_finally_handler_50;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_evolve_count, tmp_assign_source_148 );
    tmp_subscribed_name_28 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_28 == NULL ))
    {
        tmp_subscribed_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 244;
        goto try_finally_handler_50;
    }

    tmp_subscript_name_28 = const_str_plain_green;
    tmp_left_name_42 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_28, tmp_subscript_name_28 );
    if ( tmp_left_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 244;
        goto try_finally_handler_50;
    }
    tmp_right_name_42 = const_str_digest_7699a8bf0a690398754316575c9ea863;
    tmp_str_arg_15 = BINARY_OPERATION_ADD( tmp_left_name_42, tmp_right_name_42 );
    Py_DECREF( tmp_left_name_42 );
    if ( tmp_str_arg_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 244;
        goto try_finally_handler_50;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_15 );
    Py_DECREF( tmp_str_arg_15 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 244;
        goto try_finally_handler_50;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 244;
        goto try_finally_handler_50;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 244;
        goto try_finally_handler_50;
    }
    branch_no_24:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_50:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_15 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_7__value_1 );
    tmp_and_7__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_15;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_47 != NULL )
    {
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;

        goto try_finally_handler_47;
    }

    goto finally_end_47;
    finally_end_47:;
    branch_end_23:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_47:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_16 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_6__value_1 );
    tmp_and_6__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_16;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_48 != NULL )
    {
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;

        goto try_finally_handler_38;
    }

    goto finally_end_48;
    finally_end_48:;
    branch_end_22:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_38:;
    exception_keeper_type_49 = exception_type;
    exception_keeper_value_49 = exception_value;
    exception_keeper_tb_49 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_17 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_5__value_3 );
    tmp_and_5__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_17;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_49 != NULL )
    {
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;

        goto try_finally_handler_29;
    }

    goto finally_end_49;
    finally_end_49:;
    branch_end_21:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_29:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_18 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_4__value_3 );
    tmp_and_4__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_18;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_50 != NULL )
    {
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;

        goto try_finally_handler_17;
    }

    goto finally_end_50;
    finally_end_50:;
    branch_end_20:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_51 = exception_type;
    exception_keeper_value_51 = exception_value;
    exception_keeper_tb_51 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_19 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_3__value_4 );
    tmp_and_3__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_19;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_51 != NULL )
    {
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;

        goto try_finally_handler_8;
    }

    goto finally_end_51;
    finally_end_51:;
    branch_end_19:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_52 = exception_type;
    exception_keeper_value_52 = exception_value;
    exception_keeper_tb_52 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_20 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_2__value_3 );
    tmp_and_2__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_20;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_52 != NULL )
    {
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;

        goto frame_exception_exit_1;
    }

    goto finally_end_52;
    finally_end_52:;
    branch_no_18:;
    tmp_set_arg_11 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_take_words );

    if (unlikely( tmp_set_arg_11 == NULL ))
    {
        tmp_set_arg_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_take_words );
    }

    if ( tmp_set_arg_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 780 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_left_name_43 = PySet_New( tmp_set_arg_11 );
    if ( tmp_left_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_set_arg_12 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_set_arg_12 == NULL ))
    {
        tmp_set_arg_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_set_arg_12 == NULL )
    {
        Py_DECREF( tmp_left_name_43 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_right_name_43 = PySet_New( tmp_set_arg_12 );
    if ( tmp_right_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_43 );

        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_list_arg_6 = BINARY_OPERATION( PyNumber_And, tmp_left_name_43, tmp_right_name_43 );
    Py_DECREF( tmp_left_name_43 );
    Py_DECREF( tmp_right_name_43 );
    if ( tmp_list_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_30 = PySequence_List( tmp_list_arg_6 );
    Py_DECREF( tmp_list_arg_6 );
    if ( tmp_cond_value_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_30 = CHECK_IF_TRUE( tmp_cond_value_30 );
    if ( tmp_cond_truth_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_30 );

        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_30 );
    if (tmp_cond_truth_30 == 1)
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    // Tried code
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_compexpr_left_24 = const_str_plain_torch;
    tmp_compexpr_right_24 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_24 == NULL ))
    {
        tmp_compexpr_right_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 246;
        goto try_finally_handler_54;
    }

    tmp_assign_source_149 = SEQUENCE_CONTAINS( tmp_compexpr_left_24, tmp_compexpr_right_24 );
    if ( tmp_assign_source_149 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_54;
    }
    {
        PyObject *old = tmp_and_8__value_3;
        tmp_and_8__value_3 = tmp_assign_source_149;
        Py_INCREF( tmp_and_8__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_32 = tmp_and_8__value_3;

    tmp_cond_truth_32 = CHECK_IF_TRUE( tmp_cond_value_32 );
    if ( tmp_cond_truth_32 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_54;
    }
    if (tmp_cond_truth_32 == 1)
    {
        goto condexpr_true_18;
    }
    else
    {
        goto condexpr_false_18;
    }
    condexpr_true_18:;
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_result = tmp_and_8__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_8__value_3 );
        tmp_and_8__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_compexpr_left_25 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_25 == NULL ))
    {
        tmp_compexpr_left_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 246;
        goto try_finally_handler_57;
    }

    tmp_compexpr_right_25 = const_int_0;
    tmp_assign_source_150 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_25, tmp_compexpr_right_25 );
    if ( tmp_assign_source_150 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_57;
    }
    {
        PyObject *old = tmp_and_8__value_2;
        tmp_and_8__value_2 = tmp_assign_source_150;
        Py_XDECREF( old );
    }

    tmp_cond_value_33 = tmp_and_8__value_2;

    tmp_cond_truth_33 = CHECK_IF_TRUE( tmp_cond_value_33 );
    if ( tmp_cond_truth_33 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_57;
    }
    if (tmp_cond_truth_33 == 1)
    {
        goto condexpr_true_19;
    }
    else
    {
        goto condexpr_false_19;
    }
    condexpr_true_19:;
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_result = tmp_and_8__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_8__value_2 );
        tmp_and_8__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_compexpr_left_26 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_26 == NULL ))
    {
        tmp_compexpr_left_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 246;
        goto try_finally_handler_60;
    }

    tmp_compexpr_right_26 = const_int_0;
    tmp_assign_source_151 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_26, tmp_compexpr_right_26 );
    if ( tmp_assign_source_151 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_60;
    }
    {
        PyObject *old = tmp_and_8__value_1;
        tmp_and_8__value_1 = tmp_assign_source_151;
        Py_XDECREF( old );
    }

    tmp_cond_value_34 = tmp_and_8__value_1;

    tmp_cond_truth_34 = CHECK_IF_TRUE( tmp_cond_value_34 );
    if ( tmp_cond_truth_34 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_60;
    }
    if (tmp_cond_truth_34 == 1)
    {
        goto condexpr_true_20;
    }
    else
    {
        goto condexpr_false_20;
    }
    condexpr_true_20:;
    tmp_cond_value_31 = NULL;
    // Tried code
    tmp_result = tmp_and_8__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_8__value_1 );
        tmp_and_8__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_27 = const_str_plain_torch;
    tmp_compexpr_right_27 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_27 == NULL ))
    {
        tmp_compexpr_right_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 246;
        goto try_finally_handler_61;
    }

    tmp_cond_value_31 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_27, tmp_compexpr_right_27 );
    if ( tmp_cond_value_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_61;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_61:;
    exception_keeper_type_53 = exception_type;
    exception_keeper_value_53 = exception_value;
    exception_keeper_tb_53 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_53 != NULL )
    {
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;

        goto try_finally_handler_60;
    }

    goto finally_end_53;
    finally_end_53:;
    goto condexpr_end_20;
    condexpr_false_20:;
    tmp_cond_value_31 = tmp_and_8__value_1;

    condexpr_end_20:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_60:;
    exception_keeper_type_54 = exception_type;
    exception_keeper_value_54 = exception_value;
    exception_keeper_tb_54 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_54 != NULL )
    {
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;

        goto try_finally_handler_59;
    }

    goto finally_end_54;
    finally_end_54:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_59:;
    exception_keeper_type_55 = exception_type;
    exception_keeper_value_55 = exception_value;
    exception_keeper_tb_55 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_55 != NULL )
    {
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;

        goto try_finally_handler_58;
    }

    goto finally_end_55;
    finally_end_55:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_58:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_21 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_8__value_1 );
    tmp_and_8__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_21;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_56 != NULL )
    {
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;

        goto try_finally_handler_57;
    }

    goto finally_end_56;
    finally_end_56:;
    goto condexpr_end_19;
    condexpr_false_19:;
    tmp_cond_value_31 = tmp_and_8__value_2;

    condexpr_end_19:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_57:;
    exception_keeper_type_57 = exception_type;
    exception_keeper_value_57 = exception_value;
    exception_keeper_tb_57 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_57 != NULL )
    {
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;

        goto try_finally_handler_56;
    }

    goto finally_end_57;
    finally_end_57:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_56:;
    exception_keeper_type_58 = exception_type;
    exception_keeper_value_58 = exception_value;
    exception_keeper_tb_58 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_58 != NULL )
    {
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;

        goto try_finally_handler_55;
    }

    goto finally_end_58;
    finally_end_58:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_55:;
    exception_keeper_type_59 = exception_type;
    exception_keeper_value_59 = exception_value;
    exception_keeper_tb_59 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_22 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_8__value_2 );
    tmp_and_8__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_22;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_59 != NULL )
    {
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;

        goto try_finally_handler_54;
    }

    goto finally_end_59;
    finally_end_59:;
    goto condexpr_end_18;
    condexpr_false_18:;
    tmp_cond_value_31 = tmp_and_8__value_3;

    condexpr_end_18:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_54:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_60 != NULL )
    {
        exception_type = exception_keeper_type_60;
        exception_value = exception_keeper_value_60;
        exception_tb = exception_keeper_tb_60;

        goto try_finally_handler_53;
    }

    goto finally_end_60;
    finally_end_60:;
    tmp_cond_truth_31 = CHECK_IF_TRUE( tmp_cond_value_31 );
    if ( tmp_cond_truth_31 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 246;
        goto try_finally_handler_53;
    }
    if (tmp_cond_truth_31 == 1)
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_assign_source_152 = const_str_plain_torch;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_152 );
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 248;
        goto try_finally_handler_53;
    }

    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_append );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 248;
        goto try_finally_handler_53;
    }
    tmp_args_element_name_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_10 == NULL ))
    {
        tmp_args_element_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 248;
        goto try_finally_handler_53;
    }

    frame_module->f_lineno = 248;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, tmp_args_element_name_10 );
    Py_DECREF( tmp_called_name_23 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 248;
        goto try_finally_handler_53;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 249;
        goto try_finally_handler_53;
    }

    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_append );
    if ( tmp_called_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 249;
        goto try_finally_handler_53;
    }
    tmp_args_element_name_11 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_11 == NULL ))
    {
        tmp_args_element_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_11 == NULL )
    {
        Py_DECREF( tmp_called_name_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 249;
        goto try_finally_handler_53;
    }

    frame_module->f_lineno = 249;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, tmp_args_element_name_11 );
    Py_DECREF( tmp_called_name_24 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 249;
        goto try_finally_handler_53;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_29 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_29 == NULL ))
    {
        tmp_subscribed_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }

    tmp_subscript_name_29 = const_str_plain_magenta;
    tmp_left_name_45 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_29, tmp_subscript_name_29 );
    if ( tmp_left_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    tmp_right_name_44 = const_str_digest_67f27265aa8e4a7b3b329e94137028c2;
    tmp_left_name_44 = BINARY_OPERATION_ADD( tmp_left_name_45, tmp_right_name_44 );
    Py_DECREF( tmp_left_name_45 );
    if ( tmp_left_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    tmp_subscribed_name_30 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_30 == NULL ))
    {
        tmp_subscribed_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_30 == NULL )
    {
        Py_DECREF( tmp_left_name_44 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }

    tmp_subscript_name_30 = const_str_plain_off;
    tmp_right_name_45 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_30, tmp_subscript_name_30 );
    if ( tmp_right_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_44 );

        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    tmp_str_arg_16 = BINARY_OPERATION_ADD( tmp_left_name_44, tmp_right_name_45 );
    Py_DECREF( tmp_left_name_44 );
    Py_DECREF( tmp_right_name_45 );
    if ( tmp_str_arg_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_16 );
    Py_DECREF( tmp_str_arg_16 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 250;
        goto try_finally_handler_53;
    }
    goto branch_end_26;
    branch_no_26:;
    // Tried code
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_compexpr_left_28 = const_str_plain_shuriken;
    tmp_compexpr_right_28 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_28 == NULL ))
    {
        tmp_compexpr_right_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 251;
        goto try_finally_handler_63;
    }

    tmp_assign_source_153 = SEQUENCE_CONTAINS( tmp_compexpr_left_28, tmp_compexpr_right_28 );
    if ( tmp_assign_source_153 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_63;
    }
    {
        PyObject *old = tmp_and_9__value_3;
        tmp_and_9__value_3 = tmp_assign_source_153;
        Py_INCREF( tmp_and_9__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_36 = tmp_and_9__value_3;

    tmp_cond_truth_36 = CHECK_IF_TRUE( tmp_cond_value_36 );
    if ( tmp_cond_truth_36 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_63;
    }
    if (tmp_cond_truth_36 == 1)
    {
        goto condexpr_true_21;
    }
    else
    {
        goto condexpr_false_21;
    }
    condexpr_true_21:;
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_result = tmp_and_9__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_9__value_3 );
        tmp_and_9__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_compexpr_left_29 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_29 == NULL ))
    {
        tmp_compexpr_left_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 251;
        goto try_finally_handler_66;
    }

    tmp_compexpr_right_29 = const_int_0;
    tmp_assign_source_154 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_29, tmp_compexpr_right_29 );
    if ( tmp_assign_source_154 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_66;
    }
    {
        PyObject *old = tmp_and_9__value_2;
        tmp_and_9__value_2 = tmp_assign_source_154;
        Py_XDECREF( old );
    }

    tmp_cond_value_37 = tmp_and_9__value_2;

    tmp_cond_truth_37 = CHECK_IF_TRUE( tmp_cond_value_37 );
    if ( tmp_cond_truth_37 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_66;
    }
    if (tmp_cond_truth_37 == 1)
    {
        goto condexpr_true_22;
    }
    else
    {
        goto condexpr_false_22;
    }
    condexpr_true_22:;
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_result = tmp_and_9__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_9__value_2 );
        tmp_and_9__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_compexpr_left_30 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_30 == NULL ))
    {
        tmp_compexpr_left_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 251;
        goto try_finally_handler_69;
    }

    tmp_compexpr_right_30 = const_int_neg_1;
    tmp_assign_source_155 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_30, tmp_compexpr_right_30 );
    if ( tmp_assign_source_155 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_69;
    }
    {
        PyObject *old = tmp_and_9__value_1;
        tmp_and_9__value_1 = tmp_assign_source_155;
        Py_XDECREF( old );
    }

    tmp_cond_value_38 = tmp_and_9__value_1;

    tmp_cond_truth_38 = CHECK_IF_TRUE( tmp_cond_value_38 );
    if ( tmp_cond_truth_38 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_69;
    }
    if (tmp_cond_truth_38 == 1)
    {
        goto condexpr_true_23;
    }
    else
    {
        goto condexpr_false_23;
    }
    condexpr_true_23:;
    tmp_cond_value_35 = NULL;
    // Tried code
    tmp_result = tmp_and_9__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_9__value_1 );
        tmp_and_9__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_31 = const_str_plain_shuriken;
    tmp_compexpr_right_31 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_31 == NULL ))
    {
        tmp_compexpr_right_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 251;
        goto try_finally_handler_70;
    }

    tmp_cond_value_35 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_31, tmp_compexpr_right_31 );
    if ( tmp_cond_value_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_70;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_70:;
    exception_keeper_type_61 = exception_type;
    exception_keeper_value_61 = exception_value;
    exception_keeper_tb_61 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_61 != NULL )
    {
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;

        goto try_finally_handler_69;
    }

    goto finally_end_61;
    finally_end_61:;
    goto condexpr_end_23;
    condexpr_false_23:;
    tmp_cond_value_35 = tmp_and_9__value_1;

    condexpr_end_23:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_69:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_62 != NULL )
    {
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;

        goto try_finally_handler_68;
    }

    goto finally_end_62;
    finally_end_62:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_68:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_63 != NULL )
    {
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;

        goto try_finally_handler_67;
    }

    goto finally_end_63;
    finally_end_63:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_67:;
    exception_keeper_type_64 = exception_type;
    exception_keeper_value_64 = exception_value;
    exception_keeper_tb_64 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_23 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_9__value_1 );
    tmp_and_9__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_23;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_64 != NULL )
    {
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;

        goto try_finally_handler_66;
    }

    goto finally_end_64;
    finally_end_64:;
    goto condexpr_end_22;
    condexpr_false_22:;
    tmp_cond_value_35 = tmp_and_9__value_2;

    condexpr_end_22:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_66:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_65 != NULL )
    {
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;

        goto try_finally_handler_65;
    }

    goto finally_end_65;
    finally_end_65:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_65:;
    exception_keeper_type_66 = exception_type;
    exception_keeper_value_66 = exception_value;
    exception_keeper_tb_66 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_66 != NULL )
    {
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;

        goto try_finally_handler_64;
    }

    goto finally_end_66;
    finally_end_66:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_64:;
    exception_keeper_type_67 = exception_type;
    exception_keeper_value_67 = exception_value;
    exception_keeper_tb_67 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_24 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_9__value_2 );
    tmp_and_9__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_24;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_67 != NULL )
    {
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;

        goto try_finally_handler_63;
    }

    goto finally_end_67;
    finally_end_67:;
    goto condexpr_end_21;
    condexpr_false_21:;
    tmp_cond_value_35 = tmp_and_9__value_3;

    condexpr_end_21:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_63:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_68 != NULL )
    {
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;

        goto try_finally_handler_62;
    }

    goto finally_end_68;
    finally_end_68:;
    tmp_cond_truth_35 = CHECK_IF_TRUE( tmp_cond_value_35 );
    if ( tmp_cond_truth_35 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 251;
        goto try_finally_handler_62;
    }
    if (tmp_cond_truth_35 == 1)
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_assign_source_156 = const_str_plain_shuriken;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_156 );
    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 253;
        goto try_finally_handler_62;
    }

    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_append );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 253;
        goto try_finally_handler_62;
    }
    tmp_args_element_name_12 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_12 == NULL ))
    {
        tmp_args_element_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_25 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 253;
        goto try_finally_handler_62;
    }

    frame_module->f_lineno = 253;
    tmp_left_name_46 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, tmp_args_element_name_12 );
    Py_DECREF( tmp_called_name_25 );
    if ( tmp_left_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 253;
        goto try_finally_handler_62;
    }
    tmp_right_name_46 = const_int_pos_7;
    tmp_unused = BINARY_OPERATION_MUL( tmp_left_name_46, tmp_right_name_46 );
    Py_DECREF( tmp_left_name_46 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 253;
        goto try_finally_handler_62;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_31 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_31 == NULL ))
    {
        tmp_subscribed_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }

    tmp_subscript_name_31 = const_str_plain_magenta;
    tmp_left_name_48 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_31, tmp_subscript_name_31 );
    if ( tmp_left_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    tmp_right_name_47 = const_str_digest_9830ba37050a4a51c93152bb5cc741e0;
    tmp_left_name_47 = BINARY_OPERATION_ADD( tmp_left_name_48, tmp_right_name_47 );
    Py_DECREF( tmp_left_name_48 );
    if ( tmp_left_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    tmp_subscribed_name_32 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_32 == NULL ))
    {
        tmp_subscribed_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_32 == NULL )
    {
        Py_DECREF( tmp_left_name_47 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }

    tmp_subscript_name_32 = const_str_plain_off;
    tmp_right_name_48 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_32, tmp_subscript_name_32 );
    if ( tmp_right_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_47 );

        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    tmp_str_arg_17 = BINARY_OPERATION_ADD( tmp_left_name_47, tmp_right_name_48 );
    Py_DECREF( tmp_left_name_47 );
    Py_DECREF( tmp_right_name_48 );
    if ( tmp_str_arg_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_17 );
    Py_DECREF( tmp_str_arg_17 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 254;
        goto try_finally_handler_62;
    }
    goto branch_end_27;
    branch_no_27:;
    // Tried code
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_compexpr_left_32 = const_str_plain_branch;
    tmp_compexpr_right_32 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_32 == NULL ))
    {
        tmp_compexpr_right_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto try_finally_handler_72;
    }

    tmp_assign_source_157 = SEQUENCE_CONTAINS( tmp_compexpr_left_32, tmp_compexpr_right_32 );
    if ( tmp_assign_source_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_72;
    }
    {
        PyObject *old = tmp_and_10__value_3;
        tmp_and_10__value_3 = tmp_assign_source_157;
        Py_INCREF( tmp_and_10__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_40 = tmp_and_10__value_3;

    tmp_cond_truth_40 = CHECK_IF_TRUE( tmp_cond_value_40 );
    if ( tmp_cond_truth_40 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_72;
    }
    if (tmp_cond_truth_40 == 1)
    {
        goto condexpr_true_24;
    }
    else
    {
        goto condexpr_false_24;
    }
    condexpr_true_24:;
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_result = tmp_and_10__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_10__value_3 );
        tmp_and_10__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_compexpr_left_33 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_33 == NULL ))
    {
        tmp_compexpr_left_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto try_finally_handler_75;
    }

    tmp_compexpr_right_33 = const_int_pos_2;
    tmp_assign_source_158 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_33, tmp_compexpr_right_33 );
    if ( tmp_assign_source_158 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_75;
    }
    {
        PyObject *old = tmp_and_10__value_2;
        tmp_and_10__value_2 = tmp_assign_source_158;
        Py_XDECREF( old );
    }

    tmp_cond_value_41 = tmp_and_10__value_2;

    tmp_cond_truth_41 = CHECK_IF_TRUE( tmp_cond_value_41 );
    if ( tmp_cond_truth_41 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_75;
    }
    if (tmp_cond_truth_41 == 1)
    {
        goto condexpr_true_25;
    }
    else
    {
        goto condexpr_false_25;
    }
    condexpr_true_25:;
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_result = tmp_and_10__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_10__value_2 );
        tmp_and_10__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_compexpr_left_34 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_34 == NULL ))
    {
        tmp_compexpr_left_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto try_finally_handler_78;
    }

    tmp_compexpr_right_34 = const_int_pos_1;
    tmp_assign_source_159 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_34, tmp_compexpr_right_34 );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_78;
    }
    {
        PyObject *old = tmp_and_10__value_1;
        tmp_and_10__value_1 = tmp_assign_source_159;
        Py_XDECREF( old );
    }

    tmp_cond_value_42 = tmp_and_10__value_1;

    tmp_cond_truth_42 = CHECK_IF_TRUE( tmp_cond_value_42 );
    if ( tmp_cond_truth_42 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_78;
    }
    if (tmp_cond_truth_42 == 1)
    {
        goto condexpr_true_26;
    }
    else
    {
        goto condexpr_false_26;
    }
    condexpr_true_26:;
    tmp_cond_value_39 = NULL;
    // Tried code
    tmp_result = tmp_and_10__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_10__value_1 );
        tmp_and_10__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_35 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compexpr_left_35 == NULL ))
    {
        tmp_compexpr_left_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compexpr_left_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto try_finally_handler_79;
    }

    tmp_compexpr_right_35 = const_int_pos_1;
    tmp_cond_value_39 = RICH_COMPARE_LT( tmp_compexpr_left_35, tmp_compexpr_right_35 );
    if ( tmp_cond_value_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 255;
        goto try_finally_handler_79;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_79:;
    exception_keeper_type_69 = exception_type;
    exception_keeper_value_69 = exception_value;
    exception_keeper_tb_69 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_69 != NULL )
    {
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;

        goto try_finally_handler_78;
    }

    goto finally_end_69;
    finally_end_69:;
    goto condexpr_end_26;
    condexpr_false_26:;
    tmp_cond_value_39 = tmp_and_10__value_1;

    Py_INCREF( tmp_cond_value_39 );
    condexpr_end_26:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_78:;
    exception_keeper_type_70 = exception_type;
    exception_keeper_value_70 = exception_value;
    exception_keeper_tb_70 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_70 != NULL )
    {
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;

        goto try_finally_handler_77;
    }

    goto finally_end_70;
    finally_end_70:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_77:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_71 != NULL )
    {
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;

        goto try_finally_handler_76;
    }

    goto finally_end_71;
    finally_end_71:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_76:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_25 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_10__value_1 );
    tmp_and_10__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_25;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_72 != NULL )
    {
        exception_type = exception_keeper_type_72;
        exception_value = exception_keeper_value_72;
        exception_tb = exception_keeper_tb_72;

        goto try_finally_handler_75;
    }

    goto finally_end_72;
    finally_end_72:;
    goto condexpr_end_25;
    condexpr_false_25:;
    tmp_cond_value_39 = tmp_and_10__value_2;

    Py_INCREF( tmp_cond_value_39 );
    condexpr_end_25:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_75:;
    exception_keeper_type_73 = exception_type;
    exception_keeper_value_73 = exception_value;
    exception_keeper_tb_73 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_73 != NULL )
    {
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;

        goto try_finally_handler_74;
    }

    goto finally_end_73;
    finally_end_73:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_74:;
    exception_keeper_type_74 = exception_type;
    exception_keeper_value_74 = exception_value;
    exception_keeper_tb_74 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_74 != NULL )
    {
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;

        goto try_finally_handler_73;
    }

    goto finally_end_74;
    finally_end_74:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_73:;
    exception_keeper_type_75 = exception_type;
    exception_keeper_value_75 = exception_value;
    exception_keeper_tb_75 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_26 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_10__value_2 );
    tmp_and_10__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_26;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_75 != NULL )
    {
        exception_type = exception_keeper_type_75;
        exception_value = exception_keeper_value_75;
        exception_tb = exception_keeper_tb_75;

        goto try_finally_handler_72;
    }

    goto finally_end_75;
    finally_end_75:;
    goto condexpr_end_24;
    condexpr_false_24:;
    tmp_cond_value_39 = tmp_and_10__value_3;

    Py_INCREF( tmp_cond_value_39 );
    condexpr_end_24:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_72:;
    exception_keeper_type_76 = exception_type;
    exception_keeper_value_76 = exception_value;
    exception_keeper_tb_76 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_76 != NULL )
    {
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;

        goto try_finally_handler_71;
    }

    goto finally_end_76;
    finally_end_76:;
    tmp_cond_truth_39 = CHECK_IF_TRUE( tmp_cond_value_39 );
    if ( tmp_cond_truth_39 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_39 );

        frame_module->f_lineno = 255;
        goto try_finally_handler_71;
    }
    Py_DECREF( tmp_cond_value_39 );
    if (tmp_cond_truth_39 == 1)
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_assign_source_160 = const_str_plain_branch;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_160 );
    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 257;
        goto try_finally_handler_71;
    }

    tmp_called_name_26 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_append );
    if ( tmp_called_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 257;
        goto try_finally_handler_71;
    }
    tmp_args_element_name_13 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_13 == NULL ))
    {
        tmp_args_element_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_13 == NULL )
    {
        Py_DECREF( tmp_called_name_26 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 257;
        goto try_finally_handler_71;
    }

    frame_module->f_lineno = 257;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_26, tmp_args_element_name_13 );
    Py_DECREF( tmp_called_name_26 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 257;
        goto try_finally_handler_71;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 258;
        goto try_finally_handler_71;
    }

    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_append );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 258;
        goto try_finally_handler_71;
    }
    tmp_args_element_name_14 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_14 == NULL ))
    {
        tmp_args_element_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_14 == NULL )
    {
        Py_DECREF( tmp_called_name_27 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 258;
        goto try_finally_handler_71;
    }

    frame_module->f_lineno = 258;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, tmp_args_element_name_14 );
    Py_DECREF( tmp_called_name_27 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 258;
        goto try_finally_handler_71;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_161 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon, tmp_assign_source_161 );
    tmp_subscribed_name_33 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_33 == NULL ))
    {
        tmp_subscribed_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }

    tmp_subscript_name_33 = const_str_plain_magenta;
    tmp_left_name_50 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_33, tmp_subscript_name_33 );
    if ( tmp_left_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    tmp_right_name_49 = const_str_digest_3a5877a4161eb05e64dc9371f585c2c9;
    tmp_left_name_49 = BINARY_OPERATION_ADD( tmp_left_name_50, tmp_right_name_49 );
    Py_DECREF( tmp_left_name_50 );
    if ( tmp_left_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    tmp_subscribed_name_34 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_34 == NULL ))
    {
        tmp_subscribed_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_34 == NULL )
    {
        Py_DECREF( tmp_left_name_49 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }

    tmp_subscript_name_34 = const_str_plain_off;
    tmp_right_name_50 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_34, tmp_subscript_name_34 );
    if ( tmp_right_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_49 );

        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    tmp_str_arg_18 = BINARY_OPERATION_ADD( tmp_left_name_49, tmp_right_name_50 );
    Py_DECREF( tmp_left_name_49 );
    Py_DECREF( tmp_right_name_50 );
    if ( tmp_str_arg_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_18 );
    Py_DECREF( tmp_str_arg_18 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 260;
        goto try_finally_handler_71;
    }
    goto branch_end_28;
    branch_no_28:;
    // Tried code
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_compexpr_left_36 = const_str_plain_letter;
    tmp_compexpr_right_36 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_36 == NULL ))
    {
        tmp_compexpr_right_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 261;
        goto try_finally_handler_81;
    }

    tmp_assign_source_162 = SEQUENCE_CONTAINS( tmp_compexpr_left_36, tmp_compexpr_right_36 );
    if ( tmp_assign_source_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_81;
    }
    {
        PyObject *old = tmp_and_11__value_3;
        tmp_and_11__value_3 = tmp_assign_source_162;
        Py_INCREF( tmp_and_11__value_3 );
        Py_XDECREF( old );
    }

    tmp_cond_value_44 = tmp_and_11__value_3;

    tmp_cond_truth_44 = CHECK_IF_TRUE( tmp_cond_value_44 );
    if ( tmp_cond_truth_44 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_81;
    }
    if (tmp_cond_truth_44 == 1)
    {
        goto condexpr_true_27;
    }
    else
    {
        goto condexpr_false_27;
    }
    condexpr_true_27:;
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_result = tmp_and_11__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_11__value_3 );
        tmp_and_11__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_compexpr_left_37 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_37 == NULL ))
    {
        tmp_compexpr_left_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 261;
        goto try_finally_handler_84;
    }

    tmp_compexpr_right_37 = const_int_pos_2;
    tmp_assign_source_163 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_37, tmp_compexpr_right_37 );
    if ( tmp_assign_source_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_84;
    }
    {
        PyObject *old = tmp_and_11__value_2;
        tmp_and_11__value_2 = tmp_assign_source_163;
        Py_XDECREF( old );
    }

    tmp_cond_value_45 = tmp_and_11__value_2;

    tmp_cond_truth_45 = CHECK_IF_TRUE( tmp_cond_value_45 );
    if ( tmp_cond_truth_45 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_84;
    }
    if (tmp_cond_truth_45 == 1)
    {
        goto condexpr_true_28;
    }
    else
    {
        goto condexpr_false_28;
    }
    condexpr_true_28:;
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_result = tmp_and_11__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_11__value_2 );
        tmp_and_11__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_compexpr_left_38 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_38 == NULL ))
    {
        tmp_compexpr_left_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 261;
        goto try_finally_handler_87;
    }

    tmp_compexpr_right_38 = const_int_pos_6;
    tmp_assign_source_164 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_38, tmp_compexpr_right_38 );
    if ( tmp_assign_source_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_87;
    }
    {
        PyObject *old = tmp_and_11__value_1;
        tmp_and_11__value_1 = tmp_assign_source_164;
        Py_XDECREF( old );
    }

    tmp_cond_value_46 = tmp_and_11__value_1;

    tmp_cond_truth_46 = CHECK_IF_TRUE( tmp_cond_value_46 );
    if ( tmp_cond_truth_46 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_87;
    }
    if (tmp_cond_truth_46 == 1)
    {
        goto condexpr_true_29;
    }
    else
    {
        goto condexpr_false_29;
    }
    condexpr_true_29:;
    tmp_cond_value_43 = NULL;
    // Tried code
    tmp_result = tmp_and_11__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_11__value_1 );
        tmp_and_11__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_39 = const_str_plain_letter;
    tmp_compexpr_right_39 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_39 == NULL ))
    {
        tmp_compexpr_right_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 261;
        goto try_finally_handler_88;
    }

    tmp_cond_value_43 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_39, tmp_compexpr_right_39 );
    if ( tmp_cond_value_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_88;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_88:;
    exception_keeper_type_77 = exception_type;
    exception_keeper_value_77 = exception_value;
    exception_keeper_tb_77 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_77 != NULL )
    {
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;

        goto try_finally_handler_87;
    }

    goto finally_end_77;
    finally_end_77:;
    goto condexpr_end_29;
    condexpr_false_29:;
    tmp_cond_value_43 = tmp_and_11__value_1;

    condexpr_end_29:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_87:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_78 != NULL )
    {
        exception_type = exception_keeper_type_78;
        exception_value = exception_keeper_value_78;
        exception_tb = exception_keeper_tb_78;

        goto try_finally_handler_86;
    }

    goto finally_end_78;
    finally_end_78:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_86:;
    exception_keeper_type_79 = exception_type;
    exception_keeper_value_79 = exception_value;
    exception_keeper_tb_79 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_79 != NULL )
    {
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;

        goto try_finally_handler_85;
    }

    goto finally_end_79;
    finally_end_79:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_85:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_27 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_11__value_1 );
    tmp_and_11__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_27;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_80 != NULL )
    {
        exception_type = exception_keeper_type_80;
        exception_value = exception_keeper_value_80;
        exception_tb = exception_keeper_tb_80;

        goto try_finally_handler_84;
    }

    goto finally_end_80;
    finally_end_80:;
    goto condexpr_end_28;
    condexpr_false_28:;
    tmp_cond_value_43 = tmp_and_11__value_2;

    condexpr_end_28:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_84:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_81 != NULL )
    {
        exception_type = exception_keeper_type_81;
        exception_value = exception_keeper_value_81;
        exception_tb = exception_keeper_tb_81;

        goto try_finally_handler_83;
    }

    goto finally_end_81;
    finally_end_81:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_83:;
    exception_keeper_type_82 = exception_type;
    exception_keeper_value_82 = exception_value;
    exception_keeper_tb_82 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_82 != NULL )
    {
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;

        goto try_finally_handler_82;
    }

    goto finally_end_82;
    finally_end_82:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_82:;
    exception_keeper_type_83 = exception_type;
    exception_keeper_value_83 = exception_value;
    exception_keeper_tb_83 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_28 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_11__value_2 );
    tmp_and_11__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_28;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_83 != NULL )
    {
        exception_type = exception_keeper_type_83;
        exception_value = exception_keeper_value_83;
        exception_tb = exception_keeper_tb_83;

        goto try_finally_handler_81;
    }

    goto finally_end_83;
    finally_end_83:;
    goto condexpr_end_27;
    condexpr_false_27:;
    tmp_cond_value_43 = tmp_and_11__value_3;

    condexpr_end_27:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_81:;
    exception_keeper_type_84 = exception_type;
    exception_keeper_value_84 = exception_value;
    exception_keeper_tb_84 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_84 != NULL )
    {
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;

        goto try_finally_handler_80;
    }

    goto finally_end_84;
    finally_end_84:;
    tmp_cond_truth_43 = CHECK_IF_TRUE( tmp_cond_value_43 );
    if ( tmp_cond_truth_43 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 261;
        goto try_finally_handler_80;
    }
    if (tmp_cond_truth_43 == 1)
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_assign_source_165 = const_str_plain_letter;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_165 );
    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 263;
        goto try_finally_handler_80;
    }

    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_append );
    if ( tmp_called_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 263;
        goto try_finally_handler_80;
    }
    tmp_args_element_name_15 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_15 == NULL ))
    {
        tmp_args_element_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_15 == NULL )
    {
        Py_DECREF( tmp_called_name_28 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 263;
        goto try_finally_handler_80;
    }

    frame_module->f_lineno = 263;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, tmp_args_element_name_15 );
    Py_DECREF( tmp_called_name_28 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 263;
        goto try_finally_handler_80;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 264;
        goto try_finally_handler_80;
    }

    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_append );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 264;
        goto try_finally_handler_80;
    }
    tmp_args_element_name_16 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_16 == NULL ))
    {
        tmp_args_element_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_16 == NULL )
    {
        Py_DECREF( tmp_called_name_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 264;
        goto try_finally_handler_80;
    }

    frame_module->f_lineno = 264;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, tmp_args_element_name_16 );
    Py_DECREF( tmp_called_name_29 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 264;
        goto try_finally_handler_80;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_35 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_35 == NULL ))
    {
        tmp_subscribed_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }

    tmp_subscript_name_35 = const_str_plain_magenta;
    tmp_left_name_52 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_35, tmp_subscript_name_35 );
    if ( tmp_left_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    tmp_right_name_51 = const_str_digest_f927cc2b0da9fef259b908ac3a9f0933;
    tmp_left_name_51 = BINARY_OPERATION_ADD( tmp_left_name_52, tmp_right_name_51 );
    Py_DECREF( tmp_left_name_52 );
    if ( tmp_left_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    tmp_subscribed_name_36 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_36 == NULL ))
    {
        tmp_subscribed_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_36 == NULL )
    {
        Py_DECREF( tmp_left_name_51 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }

    tmp_subscript_name_36 = const_str_plain_off;
    tmp_right_name_52 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_36, tmp_subscript_name_36 );
    if ( tmp_right_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_51 );

        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    tmp_str_arg_19 = BINARY_OPERATION_ADD( tmp_left_name_51, tmp_right_name_52 );
    Py_DECREF( tmp_left_name_51 );
    Py_DECREF( tmp_right_name_52 );
    if ( tmp_str_arg_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_19 );
    Py_DECREF( tmp_str_arg_19 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 265;
        goto try_finally_handler_80;
    }
    tmp_str_arg_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_letter );

    if (unlikely( tmp_str_arg_20 == NULL ))
    {
        tmp_str_arg_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_letter );
    }

    if ( tmp_str_arg_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 867 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 266;
        goto try_finally_handler_80;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_20 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 266;
        goto try_finally_handler_80;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 266;
        goto try_finally_handler_80;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 266;
        goto try_finally_handler_80;
    }
    goto branch_end_29;
    branch_no_29:;
    // Tried code
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_compexpr_left_40 = const_str_plain_dagger;
    tmp_compexpr_right_40 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_40 == NULL ))
    {
        tmp_compexpr_right_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 267;
        goto try_finally_handler_90;
    }

    tmp_assign_source_166 = SEQUENCE_CONTAINS( tmp_compexpr_left_40, tmp_compexpr_right_40 );
    if ( tmp_assign_source_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_90;
    }
    {
        PyObject *old = tmp_and_12__value_4;
        tmp_and_12__value_4 = tmp_assign_source_166;
        Py_INCREF( tmp_and_12__value_4 );
        Py_XDECREF( old );
    }

    tmp_cond_value_48 = tmp_and_12__value_4;

    tmp_cond_truth_48 = CHECK_IF_TRUE( tmp_cond_value_48 );
    if ( tmp_cond_truth_48 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_90;
    }
    if (tmp_cond_truth_48 == 1)
    {
        goto condexpr_true_30;
    }
    else
    {
        goto condexpr_false_30;
    }
    condexpr_true_30:;
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_result = tmp_and_12__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_12__value_4 );
        tmp_and_12__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_compexpr_left_41 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_41 == NULL ))
    {
        tmp_compexpr_left_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 267;
        goto try_finally_handler_93;
    }

    tmp_compexpr_right_41 = const_int_pos_3;
    tmp_assign_source_167 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_41, tmp_compexpr_right_41 );
    if ( tmp_assign_source_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_93;
    }
    {
        PyObject *old = tmp_and_12__value_3;
        tmp_and_12__value_3 = tmp_assign_source_167;
        Py_XDECREF( old );
    }

    tmp_cond_value_49 = tmp_and_12__value_3;

    tmp_cond_truth_49 = CHECK_IF_TRUE( tmp_cond_value_49 );
    if ( tmp_cond_truth_49 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_93;
    }
    if (tmp_cond_truth_49 == 1)
    {
        goto condexpr_true_31;
    }
    else
    {
        goto condexpr_false_31;
    }
    condexpr_true_31:;
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_result = tmp_and_12__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_12__value_3 );
        tmp_and_12__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_compexpr_left_42 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_42 == NULL ))
    {
        tmp_compexpr_left_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 267;
        goto try_finally_handler_96;
    }

    tmp_compexpr_right_42 = const_int_pos_7;
    tmp_assign_source_168 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_42, tmp_compexpr_right_42 );
    if ( tmp_assign_source_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_96;
    }
    {
        PyObject *old = tmp_and_12__value_2;
        tmp_and_12__value_2 = tmp_assign_source_168;
        Py_XDECREF( old );
    }

    tmp_cond_value_50 = tmp_and_12__value_2;

    tmp_cond_truth_50 = CHECK_IF_TRUE( tmp_cond_value_50 );
    if ( tmp_cond_truth_50 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_96;
    }
    if (tmp_cond_truth_50 == 1)
    {
        goto condexpr_true_32;
    }
    else
    {
        goto condexpr_false_32;
    }
    condexpr_true_32:;
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_result = tmp_and_12__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_12__value_2 );
        tmp_and_12__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_compexpr_left_43 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_43 == NULL ))
    {
        tmp_compexpr_left_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 267;
        goto try_finally_handler_99;
    }

    tmp_compexpr_right_43 = const_int_pos_1;
    tmp_assign_source_169 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_43, tmp_compexpr_right_43 );
    if ( tmp_assign_source_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_99;
    }
    {
        PyObject *old = tmp_and_12__value_1;
        tmp_and_12__value_1 = tmp_assign_source_169;
        Py_XDECREF( old );
    }

    tmp_cond_value_51 = tmp_and_12__value_1;

    tmp_cond_truth_51 = CHECK_IF_TRUE( tmp_cond_value_51 );
    if ( tmp_cond_truth_51 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_99;
    }
    if (tmp_cond_truth_51 == 1)
    {
        goto condexpr_true_33;
    }
    else
    {
        goto condexpr_false_33;
    }
    condexpr_true_33:;
    tmp_cond_value_47 = NULL;
    // Tried code
    tmp_result = tmp_and_12__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_12__value_1 );
        tmp_and_12__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_44 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compexpr_left_44 == NULL ))
    {
        tmp_compexpr_left_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compexpr_left_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 267;
        goto try_finally_handler_100;
    }

    tmp_compexpr_right_44 = const_int_pos_2;
    tmp_cond_value_47 = RICH_COMPARE_LT( tmp_compexpr_left_44, tmp_compexpr_right_44 );
    if ( tmp_cond_value_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 267;
        goto try_finally_handler_100;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_100:;
    exception_keeper_type_85 = exception_type;
    exception_keeper_value_85 = exception_value;
    exception_keeper_tb_85 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_85 != NULL )
    {
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;

        goto try_finally_handler_99;
    }

    goto finally_end_85;
    finally_end_85:;
    goto condexpr_end_33;
    condexpr_false_33:;
    tmp_cond_value_47 = tmp_and_12__value_1;

    Py_INCREF( tmp_cond_value_47 );
    condexpr_end_33:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_99:;
    exception_keeper_type_86 = exception_type;
    exception_keeper_value_86 = exception_value;
    exception_keeper_tb_86 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_86 != NULL )
    {
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;

        goto try_finally_handler_98;
    }

    goto finally_end_86;
    finally_end_86:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_98:;
    exception_keeper_type_87 = exception_type;
    exception_keeper_value_87 = exception_value;
    exception_keeper_tb_87 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_87 != NULL )
    {
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;

        goto try_finally_handler_97;
    }

    goto finally_end_87;
    finally_end_87:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_97:;
    exception_keeper_type_88 = exception_type;
    exception_keeper_value_88 = exception_value;
    exception_keeper_tb_88 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_29 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_12__value_1 );
    tmp_and_12__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_29;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_88 != NULL )
    {
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;

        goto try_finally_handler_96;
    }

    goto finally_end_88;
    finally_end_88:;
    goto condexpr_end_32;
    condexpr_false_32:;
    tmp_cond_value_47 = tmp_and_12__value_2;

    Py_INCREF( tmp_cond_value_47 );
    condexpr_end_32:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_96:;
    exception_keeper_type_89 = exception_type;
    exception_keeper_value_89 = exception_value;
    exception_keeper_tb_89 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_89 != NULL )
    {
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;

        goto try_finally_handler_95;
    }

    goto finally_end_89;
    finally_end_89:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_95:;
    exception_keeper_type_90 = exception_type;
    exception_keeper_value_90 = exception_value;
    exception_keeper_tb_90 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_90 != NULL )
    {
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;

        goto try_finally_handler_94;
    }

    goto finally_end_90;
    finally_end_90:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_94:;
    exception_keeper_type_91 = exception_type;
    exception_keeper_value_91 = exception_value;
    exception_keeper_tb_91 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_30 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_12__value_2 );
    tmp_and_12__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_30;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_91 != NULL )
    {
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;

        goto try_finally_handler_93;
    }

    goto finally_end_91;
    finally_end_91:;
    goto condexpr_end_31;
    condexpr_false_31:;
    tmp_cond_value_47 = tmp_and_12__value_3;

    Py_INCREF( tmp_cond_value_47 );
    condexpr_end_31:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_93:;
    exception_keeper_type_92 = exception_type;
    exception_keeper_value_92 = exception_value;
    exception_keeper_tb_92 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_92 != NULL )
    {
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;

        goto try_finally_handler_92;
    }

    goto finally_end_92;
    finally_end_92:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_92:;
    exception_keeper_type_93 = exception_type;
    exception_keeper_value_93 = exception_value;
    exception_keeper_tb_93 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_93 != NULL )
    {
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;

        goto try_finally_handler_91;
    }

    goto finally_end_93;
    finally_end_93:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_91:;
    exception_keeper_type_94 = exception_type;
    exception_keeper_value_94 = exception_value;
    exception_keeper_tb_94 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_31 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_12__value_3 );
    tmp_and_12__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_31;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_94 != NULL )
    {
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;

        goto try_finally_handler_90;
    }

    goto finally_end_94;
    finally_end_94:;
    goto condexpr_end_30;
    condexpr_false_30:;
    tmp_cond_value_47 = tmp_and_12__value_4;

    Py_INCREF( tmp_cond_value_47 );
    condexpr_end_30:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_90:;
    exception_keeper_type_95 = exception_type;
    exception_keeper_value_95 = exception_value;
    exception_keeper_tb_95 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_95 != NULL )
    {
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;

        goto try_finally_handler_89;
    }

    goto finally_end_95;
    finally_end_95:;
    tmp_cond_truth_47 = CHECK_IF_TRUE( tmp_cond_value_47 );
    if ( tmp_cond_truth_47 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_47 );

        frame_module->f_lineno = 267;
        goto try_finally_handler_89;
    }
    Py_DECREF( tmp_cond_value_47 );
    if (tmp_cond_truth_47 == 1)
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_assign_source_170 = const_str_plain_dagger;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_170 );
    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 269;
        goto try_finally_handler_89;
    }

    tmp_called_name_30 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_append );
    if ( tmp_called_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 269;
        goto try_finally_handler_89;
    }
    tmp_args_element_name_17 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_17 == NULL ))
    {
        tmp_args_element_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_17 == NULL )
    {
        Py_DECREF( tmp_called_name_30 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 269;
        goto try_finally_handler_89;
    }

    frame_module->f_lineno = 269;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, tmp_args_element_name_17 );
    Py_DECREF( tmp_called_name_30 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 269;
        goto try_finally_handler_89;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_171 = const_int_pos_2;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon, tmp_assign_source_171 );
    tmp_subscribed_name_37 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_37 == NULL ))
    {
        tmp_subscribed_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }

    tmp_subscript_name_37 = const_str_plain_magenta;
    tmp_left_name_54 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_37, tmp_subscript_name_37 );
    if ( tmp_left_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    tmp_right_name_53 = const_str_digest_9f93b30ef609b5929a11e58a6c9fdef3;
    tmp_left_name_53 = BINARY_OPERATION_ADD( tmp_left_name_54, tmp_right_name_53 );
    Py_DECREF( tmp_left_name_54 );
    if ( tmp_left_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    tmp_subscribed_name_38 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_38 == NULL ))
    {
        tmp_subscribed_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_38 == NULL )
    {
        Py_DECREF( tmp_left_name_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }

    tmp_subscript_name_38 = const_str_plain_off;
    tmp_right_name_54 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_38, tmp_subscript_name_38 );
    if ( tmp_right_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_53 );

        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    tmp_str_arg_21 = BINARY_OPERATION_ADD( tmp_left_name_53, tmp_right_name_54 );
    Py_DECREF( tmp_left_name_53 );
    Py_DECREF( tmp_right_name_54 );
    if ( tmp_str_arg_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_21 );
    Py_DECREF( tmp_str_arg_21 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 271;
        goto try_finally_handler_89;
    }
    tmp_assign_source_172 = const_str_plain_branch;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_172 );
    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 273;
        goto try_finally_handler_89;
    }

    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_remove );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 273;
        goto try_finally_handler_89;
    }
    tmp_args_element_name_18 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_18 == NULL ))
    {
        tmp_args_element_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_18 == NULL )
    {
        Py_DECREF( tmp_called_name_31 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 273;
        goto try_finally_handler_89;
    }

    frame_module->f_lineno = 273;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_31, tmp_args_element_name_18 );
    Py_DECREF( tmp_called_name_31 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 273;
        goto try_finally_handler_89;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_30;
    branch_no_30:;
    // Tried code
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_compexpr_left_45 = const_str_plain_armor;
    tmp_compexpr_right_45 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_45 == NULL ))
    {
        tmp_compexpr_right_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 274;
        goto try_finally_handler_102;
    }

    tmp_assign_source_173 = SEQUENCE_CONTAINS( tmp_compexpr_left_45, tmp_compexpr_right_45 );
    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_102;
    }
    {
        PyObject *old = tmp_and_13__value_4;
        tmp_and_13__value_4 = tmp_assign_source_173;
        Py_INCREF( tmp_and_13__value_4 );
        Py_XDECREF( old );
    }

    tmp_cond_value_53 = tmp_and_13__value_4;

    tmp_cond_truth_53 = CHECK_IF_TRUE( tmp_cond_value_53 );
    if ( tmp_cond_truth_53 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_102;
    }
    if (tmp_cond_truth_53 == 1)
    {
        goto condexpr_true_34;
    }
    else
    {
        goto condexpr_false_34;
    }
    condexpr_true_34:;
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_result = tmp_and_13__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_13__value_4 );
        tmp_and_13__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_compexpr_left_46 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_46 == NULL ))
    {
        tmp_compexpr_left_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 274;
        goto try_finally_handler_105;
    }

    tmp_compexpr_right_46 = const_int_pos_3;
    tmp_assign_source_174 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_46, tmp_compexpr_right_46 );
    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_105;
    }
    {
        PyObject *old = tmp_and_13__value_3;
        tmp_and_13__value_3 = tmp_assign_source_174;
        Py_XDECREF( old );
    }

    tmp_cond_value_54 = tmp_and_13__value_3;

    tmp_cond_truth_54 = CHECK_IF_TRUE( tmp_cond_value_54 );
    if ( tmp_cond_truth_54 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_105;
    }
    if (tmp_cond_truth_54 == 1)
    {
        goto condexpr_true_35;
    }
    else
    {
        goto condexpr_false_35;
    }
    condexpr_true_35:;
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_result = tmp_and_13__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_13__value_3 );
        tmp_and_13__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_compexpr_left_47 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_47 == NULL ))
    {
        tmp_compexpr_left_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 274;
        goto try_finally_handler_108;
    }

    tmp_compexpr_right_47 = const_int_pos_7;
    tmp_assign_source_175 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_47, tmp_compexpr_right_47 );
    if ( tmp_assign_source_175 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_108;
    }
    {
        PyObject *old = tmp_and_13__value_2;
        tmp_and_13__value_2 = tmp_assign_source_175;
        Py_XDECREF( old );
    }

    tmp_cond_value_55 = tmp_and_13__value_2;

    tmp_cond_truth_55 = CHECK_IF_TRUE( tmp_cond_value_55 );
    if ( tmp_cond_truth_55 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_108;
    }
    if (tmp_cond_truth_55 == 1)
    {
        goto condexpr_true_36;
    }
    else
    {
        goto condexpr_false_36;
    }
    condexpr_true_36:;
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_result = tmp_and_13__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_13__value_2 );
        tmp_and_13__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_compexpr_left_48 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_48 == NULL ))
    {
        tmp_compexpr_left_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 274;
        goto try_finally_handler_111;
    }

    tmp_compexpr_right_48 = const_int_pos_1;
    tmp_assign_source_176 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_48, tmp_compexpr_right_48 );
    if ( tmp_assign_source_176 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_111;
    }
    {
        PyObject *old = tmp_and_13__value_1;
        tmp_and_13__value_1 = tmp_assign_source_176;
        Py_XDECREF( old );
    }

    tmp_cond_value_56 = tmp_and_13__value_1;

    tmp_cond_truth_56 = CHECK_IF_TRUE( tmp_cond_value_56 );
    if ( tmp_cond_truth_56 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_111;
    }
    if (tmp_cond_truth_56 == 1)
    {
        goto condexpr_true_37;
    }
    else
    {
        goto condexpr_false_37;
    }
    condexpr_true_37:;
    tmp_cond_value_52 = NULL;
    // Tried code
    tmp_result = tmp_and_13__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_13__value_1 );
        tmp_and_13__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_49 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_49 == NULL ))
    {
        tmp_compexpr_left_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 274;
        goto try_finally_handler_112;
    }

    tmp_compexpr_right_49 = const_int_pos_1;
    tmp_cond_value_52 = RICH_COMPARE_LT( tmp_compexpr_left_49, tmp_compexpr_right_49 );
    if ( tmp_cond_value_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 274;
        goto try_finally_handler_112;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_112:;
    exception_keeper_type_96 = exception_type;
    exception_keeper_value_96 = exception_value;
    exception_keeper_tb_96 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_96 != NULL )
    {
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;

        goto try_finally_handler_111;
    }

    goto finally_end_96;
    finally_end_96:;
    goto condexpr_end_37;
    condexpr_false_37:;
    tmp_cond_value_52 = tmp_and_13__value_1;

    Py_INCREF( tmp_cond_value_52 );
    condexpr_end_37:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_111:;
    exception_keeper_type_97 = exception_type;
    exception_keeper_value_97 = exception_value;
    exception_keeper_tb_97 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_97 != NULL )
    {
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;

        goto try_finally_handler_110;
    }

    goto finally_end_97;
    finally_end_97:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_110:;
    exception_keeper_type_98 = exception_type;
    exception_keeper_value_98 = exception_value;
    exception_keeper_tb_98 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_98 != NULL )
    {
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;

        goto try_finally_handler_109;
    }

    goto finally_end_98;
    finally_end_98:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_109:;
    exception_keeper_type_99 = exception_type;
    exception_keeper_value_99 = exception_value;
    exception_keeper_tb_99 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_32 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_13__value_1 );
    tmp_and_13__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_32;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_99 != NULL )
    {
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;

        goto try_finally_handler_108;
    }

    goto finally_end_99;
    finally_end_99:;
    goto condexpr_end_36;
    condexpr_false_36:;
    tmp_cond_value_52 = tmp_and_13__value_2;

    Py_INCREF( tmp_cond_value_52 );
    condexpr_end_36:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_108:;
    exception_keeper_type_100 = exception_type;
    exception_keeper_value_100 = exception_value;
    exception_keeper_tb_100 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_100 != NULL )
    {
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;

        goto try_finally_handler_107;
    }

    goto finally_end_100;
    finally_end_100:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_107:;
    exception_keeper_type_101 = exception_type;
    exception_keeper_value_101 = exception_value;
    exception_keeper_tb_101 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_101 != NULL )
    {
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;

        goto try_finally_handler_106;
    }

    goto finally_end_101;
    finally_end_101:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_106:;
    exception_keeper_type_102 = exception_type;
    exception_keeper_value_102 = exception_value;
    exception_keeper_tb_102 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_33 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_13__value_2 );
    tmp_and_13__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_33;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_102 != NULL )
    {
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;

        goto try_finally_handler_105;
    }

    goto finally_end_102;
    finally_end_102:;
    goto condexpr_end_35;
    condexpr_false_35:;
    tmp_cond_value_52 = tmp_and_13__value_3;

    Py_INCREF( tmp_cond_value_52 );
    condexpr_end_35:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_105:;
    exception_keeper_type_103 = exception_type;
    exception_keeper_value_103 = exception_value;
    exception_keeper_tb_103 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_103 != NULL )
    {
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;

        goto try_finally_handler_104;
    }

    goto finally_end_103;
    finally_end_103:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_104:;
    exception_keeper_type_104 = exception_type;
    exception_keeper_value_104 = exception_value;
    exception_keeper_tb_104 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_104 != NULL )
    {
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;

        goto try_finally_handler_103;
    }

    goto finally_end_104;
    finally_end_104:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_103:;
    exception_keeper_type_105 = exception_type;
    exception_keeper_value_105 = exception_value;
    exception_keeper_tb_105 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_34 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_13__value_3 );
    tmp_and_13__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_34;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_105 != NULL )
    {
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;

        goto try_finally_handler_102;
    }

    goto finally_end_105;
    finally_end_105:;
    goto condexpr_end_34;
    condexpr_false_34:;
    tmp_cond_value_52 = tmp_and_13__value_4;

    Py_INCREF( tmp_cond_value_52 );
    condexpr_end_34:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_102:;
    exception_keeper_type_106 = exception_type;
    exception_keeper_value_106 = exception_value;
    exception_keeper_tb_106 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_106 != NULL )
    {
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;

        goto try_finally_handler_101;
    }

    goto finally_end_106;
    finally_end_106:;
    tmp_cond_truth_52 = CHECK_IF_TRUE( tmp_cond_value_52 );
    if ( tmp_cond_truth_52 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_52 );

        frame_module->f_lineno = 274;
        goto try_finally_handler_101;
    }
    Py_DECREF( tmp_cond_value_52 );
    if (tmp_cond_truth_52 == 1)
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_assign_source_177 = const_str_digest_44100138cde27645852625ec8f9691ea;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_177 );
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 276;
        goto try_finally_handler_101;
    }

    tmp_called_name_32 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_append );
    if ( tmp_called_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 276;
        goto try_finally_handler_101;
    }
    tmp_args_element_name_19 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_19 == NULL ))
    {
        tmp_args_element_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_19 == NULL )
    {
        Py_DECREF( tmp_called_name_32 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 276;
        goto try_finally_handler_101;
    }

    frame_module->f_lineno = 276;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, tmp_args_element_name_19 );
    Py_DECREF( tmp_called_name_32 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 276;
        goto try_finally_handler_101;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_178 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor, tmp_assign_source_178 );
    tmp_subscribed_name_39 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_39 == NULL ))
    {
        tmp_subscribed_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }

    tmp_subscript_name_39 = const_str_plain_magenta;
    tmp_left_name_56 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_39, tmp_subscript_name_39 );
    if ( tmp_left_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    tmp_right_name_55 = const_str_digest_9050e3e30294d1b4a589cee7da7381f6;
    tmp_left_name_55 = BINARY_OPERATION_ADD( tmp_left_name_56, tmp_right_name_55 );
    Py_DECREF( tmp_left_name_56 );
    if ( tmp_left_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    tmp_subscribed_name_40 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_40 == NULL ))
    {
        tmp_subscribed_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_40 == NULL )
    {
        Py_DECREF( tmp_left_name_55 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }

    tmp_subscript_name_40 = const_str_plain_off;
    tmp_right_name_56 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_40, tmp_subscript_name_40 );
    if ( tmp_right_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_55 );

        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    tmp_str_arg_22 = BINARY_OPERATION_ADD( tmp_left_name_55, tmp_right_name_56 );
    Py_DECREF( tmp_left_name_55 );
    Py_DECREF( tmp_right_name_56 );
    if ( tmp_str_arg_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_22 );
    Py_DECREF( tmp_str_arg_22 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 278;
        goto try_finally_handler_101;
    }
    goto branch_end_31;
    branch_no_31:;
    // Tried code
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_compexpr_left_50 = const_str_plain_lamp;
    tmp_compexpr_right_50 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_50 == NULL ))
    {
        tmp_compexpr_right_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 279;
        goto try_finally_handler_114;
    }

    tmp_assign_source_179 = SEQUENCE_CONTAINS( tmp_compexpr_left_50, tmp_compexpr_right_50 );
    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_114;
    }
    {
        PyObject *old = tmp_and_14__value_4;
        tmp_and_14__value_4 = tmp_assign_source_179;
        Py_INCREF( tmp_and_14__value_4 );
        Py_XDECREF( old );
    }

    tmp_cond_value_58 = tmp_and_14__value_4;

    tmp_cond_truth_58 = CHECK_IF_TRUE( tmp_cond_value_58 );
    if ( tmp_cond_truth_58 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_114;
    }
    if (tmp_cond_truth_58 == 1)
    {
        goto condexpr_true_38;
    }
    else
    {
        goto condexpr_false_38;
    }
    condexpr_true_38:;
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_result = tmp_and_14__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_14__value_4 );
        tmp_and_14__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_compexpr_left_51 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_51 == NULL ))
    {
        tmp_compexpr_left_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 279;
        goto try_finally_handler_117;
    }

    tmp_compexpr_right_51 = const_int_pos_3;
    tmp_assign_source_180 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_51, tmp_compexpr_right_51 );
    if ( tmp_assign_source_180 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_117;
    }
    {
        PyObject *old = tmp_and_14__value_3;
        tmp_and_14__value_3 = tmp_assign_source_180;
        Py_XDECREF( old );
    }

    tmp_cond_value_59 = tmp_and_14__value_3;

    tmp_cond_truth_59 = CHECK_IF_TRUE( tmp_cond_value_59 );
    if ( tmp_cond_truth_59 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_117;
    }
    if (tmp_cond_truth_59 == 1)
    {
        goto condexpr_true_39;
    }
    else
    {
        goto condexpr_false_39;
    }
    condexpr_true_39:;
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_result = tmp_and_14__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_14__value_3 );
        tmp_and_14__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_compexpr_left_52 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_52 == NULL ))
    {
        tmp_compexpr_left_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 279;
        goto try_finally_handler_120;
    }

    tmp_compexpr_right_52 = const_int_pos_7;
    tmp_assign_source_181 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_52, tmp_compexpr_right_52 );
    if ( tmp_assign_source_181 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_120;
    }
    {
        PyObject *old = tmp_and_14__value_2;
        tmp_and_14__value_2 = tmp_assign_source_181;
        Py_XDECREF( old );
    }

    tmp_cond_value_60 = tmp_and_14__value_2;

    tmp_cond_truth_60 = CHECK_IF_TRUE( tmp_cond_value_60 );
    if ( tmp_cond_truth_60 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_120;
    }
    if (tmp_cond_truth_60 == 1)
    {
        goto condexpr_true_40;
    }
    else
    {
        goto condexpr_false_40;
    }
    condexpr_true_40:;
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_result = tmp_and_14__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_14__value_2 );
        tmp_and_14__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_compexpr_left_53 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_53 == NULL ))
    {
        tmp_compexpr_left_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 279;
        goto try_finally_handler_123;
    }

    tmp_compexpr_right_53 = const_int_pos_1;
    tmp_assign_source_182 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_53, tmp_compexpr_right_53 );
    if ( tmp_assign_source_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_123;
    }
    {
        PyObject *old = tmp_and_14__value_1;
        tmp_and_14__value_1 = tmp_assign_source_182;
        Py_XDECREF( old );
    }

    tmp_cond_value_61 = tmp_and_14__value_1;

    tmp_cond_truth_61 = CHECK_IF_TRUE( tmp_cond_value_61 );
    if ( tmp_cond_truth_61 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_123;
    }
    if (tmp_cond_truth_61 == 1)
    {
        goto condexpr_true_41;
    }
    else
    {
        goto condexpr_false_41;
    }
    condexpr_true_41:;
    tmp_cond_value_57 = NULL;
    // Tried code
    tmp_result = tmp_and_14__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_14__value_1 );
        tmp_and_14__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_54 = const_str_plain_lamp;
    tmp_compexpr_right_54 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_54 == NULL ))
    {
        tmp_compexpr_right_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_54 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 279;
        goto try_finally_handler_124;
    }

    tmp_cond_value_57 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_54, tmp_compexpr_right_54 );
    if ( tmp_cond_value_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_124;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_124:;
    exception_keeper_type_107 = exception_type;
    exception_keeper_value_107 = exception_value;
    exception_keeper_tb_107 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_107 != NULL )
    {
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;

        goto try_finally_handler_123;
    }

    goto finally_end_107;
    finally_end_107:;
    goto condexpr_end_41;
    condexpr_false_41:;
    tmp_cond_value_57 = tmp_and_14__value_1;

    condexpr_end_41:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_123:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_108 != NULL )
    {
        exception_type = exception_keeper_type_108;
        exception_value = exception_keeper_value_108;
        exception_tb = exception_keeper_tb_108;

        goto try_finally_handler_122;
    }

    goto finally_end_108;
    finally_end_108:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_122:;
    exception_keeper_type_109 = exception_type;
    exception_keeper_value_109 = exception_value;
    exception_keeper_tb_109 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_109 != NULL )
    {
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;

        goto try_finally_handler_121;
    }

    goto finally_end_109;
    finally_end_109:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_121:;
    exception_keeper_type_110 = exception_type;
    exception_keeper_value_110 = exception_value;
    exception_keeper_tb_110 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_35 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_14__value_1 );
    tmp_and_14__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_35;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_110 != NULL )
    {
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;

        goto try_finally_handler_120;
    }

    goto finally_end_110;
    finally_end_110:;
    goto condexpr_end_40;
    condexpr_false_40:;
    tmp_cond_value_57 = tmp_and_14__value_2;

    condexpr_end_40:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_120:;
    exception_keeper_type_111 = exception_type;
    exception_keeper_value_111 = exception_value;
    exception_keeper_tb_111 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_111 != NULL )
    {
        exception_type = exception_keeper_type_111;
        exception_value = exception_keeper_value_111;
        exception_tb = exception_keeper_tb_111;

        goto try_finally_handler_119;
    }

    goto finally_end_111;
    finally_end_111:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_119:;
    exception_keeper_type_112 = exception_type;
    exception_keeper_value_112 = exception_value;
    exception_keeper_tb_112 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_112 != NULL )
    {
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;

        goto try_finally_handler_118;
    }

    goto finally_end_112;
    finally_end_112:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_118:;
    exception_keeper_type_113 = exception_type;
    exception_keeper_value_113 = exception_value;
    exception_keeper_tb_113 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_36 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_14__value_2 );
    tmp_and_14__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_36;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_113 != NULL )
    {
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;

        goto try_finally_handler_117;
    }

    goto finally_end_113;
    finally_end_113:;
    goto condexpr_end_39;
    condexpr_false_39:;
    tmp_cond_value_57 = tmp_and_14__value_3;

    condexpr_end_39:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_117:;
    exception_keeper_type_114 = exception_type;
    exception_keeper_value_114 = exception_value;
    exception_keeper_tb_114 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_114 != NULL )
    {
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;

        goto try_finally_handler_116;
    }

    goto finally_end_114;
    finally_end_114:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_116:;
    exception_keeper_type_115 = exception_type;
    exception_keeper_value_115 = exception_value;
    exception_keeper_tb_115 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_115 != NULL )
    {
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;

        goto try_finally_handler_115;
    }

    goto finally_end_115;
    finally_end_115:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_115:;
    exception_keeper_type_116 = exception_type;
    exception_keeper_value_116 = exception_value;
    exception_keeper_tb_116 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_37 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_14__value_3 );
    tmp_and_14__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_37;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_116 != NULL )
    {
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;

        goto try_finally_handler_114;
    }

    goto finally_end_116;
    finally_end_116:;
    goto condexpr_end_38;
    condexpr_false_38:;
    tmp_cond_value_57 = tmp_and_14__value_4;

    condexpr_end_38:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_114:;
    exception_keeper_type_117 = exception_type;
    exception_keeper_value_117 = exception_value;
    exception_keeper_tb_117 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_117 != NULL )
    {
        exception_type = exception_keeper_type_117;
        exception_value = exception_keeper_value_117;
        exception_tb = exception_keeper_tb_117;

        goto try_finally_handler_113;
    }

    goto finally_end_117;
    finally_end_117:;
    tmp_cond_truth_57 = CHECK_IF_TRUE( tmp_cond_value_57 );
    if ( tmp_cond_truth_57 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 279;
        goto try_finally_handler_113;
    }
    if (tmp_cond_truth_57 == 1)
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_assign_source_183 = const_str_plain_lamp;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_183 );
    tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_29 == NULL ))
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 281;
        goto try_finally_handler_113;
    }

    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_append );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 281;
        goto try_finally_handler_113;
    }
    tmp_args_element_name_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_20 == NULL ))
    {
        tmp_args_element_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_20 == NULL )
    {
        Py_DECREF( tmp_called_name_33 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 281;
        goto try_finally_handler_113;
    }

    frame_module->f_lineno = 281;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_33, tmp_args_element_name_20 );
    Py_DECREF( tmp_called_name_33 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 281;
        goto try_finally_handler_113;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 282;
        goto try_finally_handler_113;
    }

    tmp_called_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_append );
    if ( tmp_called_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 282;
        goto try_finally_handler_113;
    }
    tmp_args_element_name_21 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_21 == NULL ))
    {
        tmp_args_element_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_21 == NULL )
    {
        Py_DECREF( tmp_called_name_34 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 282;
        goto try_finally_handler_113;
    }

    frame_module->f_lineno = 282;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_34, tmp_args_element_name_21 );
    Py_DECREF( tmp_called_name_34 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 282;
        goto try_finally_handler_113;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_184 = const_str_plain_torch;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_184 );
    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 284;
        goto try_finally_handler_113;
    }

    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_remove );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 284;
        goto try_finally_handler_113;
    }
    tmp_args_element_name_22 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_22 == NULL ))
    {
        tmp_args_element_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_22 == NULL )
    {
        Py_DECREF( tmp_called_name_35 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 284;
        goto try_finally_handler_113;
    }

    frame_module->f_lineno = 284;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_35, tmp_args_element_name_22 );
    Py_DECREF( tmp_called_name_35 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 284;
        goto try_finally_handler_113;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_41 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_41 == NULL ))
    {
        tmp_subscribed_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }

    tmp_subscript_name_41 = const_str_plain_magenta;
    tmp_left_name_58 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_41, tmp_subscript_name_41 );
    if ( tmp_left_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    tmp_right_name_57 = const_str_digest_0fc174668f82e67f7f52a8cbddef11e4;
    tmp_left_name_57 = BINARY_OPERATION_ADD( tmp_left_name_58, tmp_right_name_57 );
    Py_DECREF( tmp_left_name_58 );
    if ( tmp_left_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    tmp_subscribed_name_42 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_42 == NULL ))
    {
        tmp_subscribed_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_42 == NULL )
    {
        Py_DECREF( tmp_left_name_57 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }

    tmp_subscript_name_42 = const_str_plain_off;
    tmp_right_name_58 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_42, tmp_subscript_name_42 );
    if ( tmp_right_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_57 );

        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    tmp_str_arg_23 = BINARY_OPERATION_ADD( tmp_left_name_57, tmp_right_name_58 );
    Py_DECREF( tmp_left_name_57 );
    Py_DECREF( tmp_right_name_58 );
    if ( tmp_str_arg_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_23 );
    Py_DECREF( tmp_str_arg_23 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 285;
        goto try_finally_handler_113;
    }
    goto branch_end_32;
    branch_no_32:;
    // Tried code
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_compexpr_left_55 = const_str_plain_armor;
    tmp_compexpr_right_55 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_55 == NULL ))
    {
        tmp_compexpr_right_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_55 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 286;
        goto try_finally_handler_126;
    }

    tmp_assign_source_185 = SEQUENCE_CONTAINS( tmp_compexpr_left_55, tmp_compexpr_right_55 );
    if ( tmp_assign_source_185 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_126;
    }
    {
        PyObject *old = tmp_and_15__value_4;
        tmp_and_15__value_4 = tmp_assign_source_185;
        Py_INCREF( tmp_and_15__value_4 );
        Py_XDECREF( old );
    }

    tmp_cond_value_63 = tmp_and_15__value_4;

    tmp_cond_truth_63 = CHECK_IF_TRUE( tmp_cond_value_63 );
    if ( tmp_cond_truth_63 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_126;
    }
    if (tmp_cond_truth_63 == 1)
    {
        goto condexpr_true_42;
    }
    else
    {
        goto condexpr_false_42;
    }
    condexpr_true_42:;
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_result = tmp_and_15__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_15__value_4 );
        tmp_and_15__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_compexpr_left_56 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_56 == NULL ))
    {
        tmp_compexpr_left_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_56 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 286;
        goto try_finally_handler_129;
    }

    tmp_compexpr_right_56 = const_int_neg_1;
    tmp_assign_source_186 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_56, tmp_compexpr_right_56 );
    if ( tmp_assign_source_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_129;
    }
    {
        PyObject *old = tmp_and_15__value_3;
        tmp_and_15__value_3 = tmp_assign_source_186;
        Py_XDECREF( old );
    }

    tmp_cond_value_64 = tmp_and_15__value_3;

    tmp_cond_truth_64 = CHECK_IF_TRUE( tmp_cond_value_64 );
    if ( tmp_cond_truth_64 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_129;
    }
    if (tmp_cond_truth_64 == 1)
    {
        goto condexpr_true_43;
    }
    else
    {
        goto condexpr_false_43;
    }
    condexpr_true_43:;
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_result = tmp_and_15__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_15__value_3 );
        tmp_and_15__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_compexpr_left_57 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_57 == NULL ))
    {
        tmp_compexpr_left_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_57 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 286;
        goto try_finally_handler_132;
    }

    tmp_compexpr_right_57 = const_int_pos_15;
    tmp_assign_source_187 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_57, tmp_compexpr_right_57 );
    if ( tmp_assign_source_187 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_132;
    }
    {
        PyObject *old = tmp_and_15__value_2;
        tmp_and_15__value_2 = tmp_assign_source_187;
        Py_XDECREF( old );
    }

    tmp_cond_value_65 = tmp_and_15__value_2;

    tmp_cond_truth_65 = CHECK_IF_TRUE( tmp_cond_value_65 );
    if ( tmp_cond_truth_65 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_132;
    }
    if (tmp_cond_truth_65 == 1)
    {
        goto condexpr_true_44;
    }
    else
    {
        goto condexpr_false_44;
    }
    condexpr_true_44:;
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_result = tmp_and_15__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_15__value_2 );
        tmp_and_15__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_compexpr_left_58 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_58 == NULL ))
    {
        tmp_compexpr_left_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 286;
        goto try_finally_handler_135;
    }

    tmp_compexpr_right_58 = const_int_pos_1;
    tmp_assign_source_188 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_58, tmp_compexpr_right_58 );
    if ( tmp_assign_source_188 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_135;
    }
    {
        PyObject *old = tmp_and_15__value_1;
        tmp_and_15__value_1 = tmp_assign_source_188;
        Py_XDECREF( old );
    }

    tmp_cond_value_66 = tmp_and_15__value_1;

    tmp_cond_truth_66 = CHECK_IF_TRUE( tmp_cond_value_66 );
    if ( tmp_cond_truth_66 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_135;
    }
    if (tmp_cond_truth_66 == 1)
    {
        goto condexpr_true_45;
    }
    else
    {
        goto condexpr_false_45;
    }
    condexpr_true_45:;
    tmp_cond_value_62 = NULL;
    // Tried code
    tmp_result = tmp_and_15__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_15__value_1 );
        tmp_and_15__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_59 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_59 == NULL ))
    {
        tmp_compexpr_left_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 286;
        goto try_finally_handler_136;
    }

    tmp_compexpr_right_59 = const_int_pos_1;
    tmp_cond_value_62 = RICH_COMPARE_LE( tmp_compexpr_left_59, tmp_compexpr_right_59 );
    if ( tmp_cond_value_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 286;
        goto try_finally_handler_136;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_136:;
    exception_keeper_type_118 = exception_type;
    exception_keeper_value_118 = exception_value;
    exception_keeper_tb_118 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_118 != NULL )
    {
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;

        goto try_finally_handler_135;
    }

    goto finally_end_118;
    finally_end_118:;
    goto condexpr_end_45;
    condexpr_false_45:;
    tmp_cond_value_62 = tmp_and_15__value_1;

    Py_INCREF( tmp_cond_value_62 );
    condexpr_end_45:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_135:;
    exception_keeper_type_119 = exception_type;
    exception_keeper_value_119 = exception_value;
    exception_keeper_tb_119 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_119 != NULL )
    {
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;

        goto try_finally_handler_134;
    }

    goto finally_end_119;
    finally_end_119:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_134:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_120 != NULL )
    {
        exception_type = exception_keeper_type_120;
        exception_value = exception_keeper_value_120;
        exception_tb = exception_keeper_tb_120;

        goto try_finally_handler_133;
    }

    goto finally_end_120;
    finally_end_120:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_133:;
    exception_keeper_type_121 = exception_type;
    exception_keeper_value_121 = exception_value;
    exception_keeper_tb_121 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_38 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_15__value_1 );
    tmp_and_15__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_38;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_121 != NULL )
    {
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;

        goto try_finally_handler_132;
    }

    goto finally_end_121;
    finally_end_121:;
    goto condexpr_end_44;
    condexpr_false_44:;
    tmp_cond_value_62 = tmp_and_15__value_2;

    Py_INCREF( tmp_cond_value_62 );
    condexpr_end_44:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_132:;
    exception_keeper_type_122 = exception_type;
    exception_keeper_value_122 = exception_value;
    exception_keeper_tb_122 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_122 != NULL )
    {
        exception_type = exception_keeper_type_122;
        exception_value = exception_keeper_value_122;
        exception_tb = exception_keeper_tb_122;

        goto try_finally_handler_131;
    }

    goto finally_end_122;
    finally_end_122:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_131:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_123 != NULL )
    {
        exception_type = exception_keeper_type_123;
        exception_value = exception_keeper_value_123;
        exception_tb = exception_keeper_tb_123;

        goto try_finally_handler_130;
    }

    goto finally_end_123;
    finally_end_123:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_130:;
    exception_keeper_type_124 = exception_type;
    exception_keeper_value_124 = exception_value;
    exception_keeper_tb_124 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_39 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_15__value_2 );
    tmp_and_15__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_39;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_124 != NULL )
    {
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;

        goto try_finally_handler_129;
    }

    goto finally_end_124;
    finally_end_124:;
    goto condexpr_end_43;
    condexpr_false_43:;
    tmp_cond_value_62 = tmp_and_15__value_3;

    Py_INCREF( tmp_cond_value_62 );
    condexpr_end_43:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_129:;
    exception_keeper_type_125 = exception_type;
    exception_keeper_value_125 = exception_value;
    exception_keeper_tb_125 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_125 != NULL )
    {
        exception_type = exception_keeper_type_125;
        exception_value = exception_keeper_value_125;
        exception_tb = exception_keeper_tb_125;

        goto try_finally_handler_128;
    }

    goto finally_end_125;
    finally_end_125:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_128:;
    exception_keeper_type_126 = exception_type;
    exception_keeper_value_126 = exception_value;
    exception_keeper_tb_126 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_126 != NULL )
    {
        exception_type = exception_keeper_type_126;
        exception_value = exception_keeper_value_126;
        exception_tb = exception_keeper_tb_126;

        goto try_finally_handler_127;
    }

    goto finally_end_126;
    finally_end_126:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_127:;
    exception_keeper_type_127 = exception_type;
    exception_keeper_value_127 = exception_value;
    exception_keeper_tb_127 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_40 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_15__value_3 );
    tmp_and_15__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_40;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_127 != NULL )
    {
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;

        goto try_finally_handler_126;
    }

    goto finally_end_127;
    finally_end_127:;
    goto condexpr_end_42;
    condexpr_false_42:;
    tmp_cond_value_62 = tmp_and_15__value_4;

    Py_INCREF( tmp_cond_value_62 );
    condexpr_end_42:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_126:;
    exception_keeper_type_128 = exception_type;
    exception_keeper_value_128 = exception_value;
    exception_keeper_tb_128 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_128 != NULL )
    {
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;

        goto try_finally_handler_125;
    }

    goto finally_end_128;
    finally_end_128:;
    tmp_cond_truth_62 = CHECK_IF_TRUE( tmp_cond_value_62 );
    if ( tmp_cond_truth_62 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_62 );

        frame_module->f_lineno = 286;
        goto try_finally_handler_125;
    }
    Py_DECREF( tmp_cond_value_62 );
    if (tmp_cond_truth_62 == 1)
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    tmp_assign_source_189 = const_str_digest_e525d90150ef85057284bbc950630c16;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_189 );
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 288;
        goto try_finally_handler_125;
    }

    tmp_called_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_append );
    if ( tmp_called_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 288;
        goto try_finally_handler_125;
    }
    tmp_args_element_name_23 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_23 == NULL ))
    {
        tmp_args_element_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_23 == NULL )
    {
        Py_DECREF( tmp_called_name_36 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 288;
        goto try_finally_handler_125;
    }

    frame_module->f_lineno = 288;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_36, tmp_args_element_name_23 );
    Py_DECREF( tmp_called_name_36 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 288;
        goto try_finally_handler_125;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_190 = const_int_pos_2;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor, tmp_assign_source_190 );
    tmp_subscribed_name_43 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_43 == NULL ))
    {
        tmp_subscribed_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }

    tmp_subscript_name_43 = const_str_plain_magenta;
    tmp_left_name_60 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_43, tmp_subscript_name_43 );
    if ( tmp_left_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    tmp_right_name_59 = const_str_digest_19834c7840186e327b750e3b3db727a3;
    tmp_left_name_59 = BINARY_OPERATION_ADD( tmp_left_name_60, tmp_right_name_59 );
    Py_DECREF( tmp_left_name_60 );
    if ( tmp_left_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    tmp_subscribed_name_44 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_44 == NULL ))
    {
        tmp_subscribed_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_44 == NULL )
    {
        Py_DECREF( tmp_left_name_59 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }

    tmp_subscript_name_44 = const_str_plain_off;
    tmp_right_name_60 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_44, tmp_subscript_name_44 );
    if ( tmp_right_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_59 );

        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    tmp_str_arg_24 = BINARY_OPERATION_ADD( tmp_left_name_59, tmp_right_name_60 );
    Py_DECREF( tmp_left_name_59 );
    Py_DECREF( tmp_right_name_60 );
    if ( tmp_str_arg_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_24 );
    Py_DECREF( tmp_str_arg_24 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_125;
    }
    tmp_assign_source_191 = const_str_digest_44100138cde27645852625ec8f9691ea;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_191 );
    tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_33 == NULL ))
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 292;
        goto try_finally_handler_125;
    }

    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_remove );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 292;
        goto try_finally_handler_125;
    }
    tmp_args_element_name_24 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_24 == NULL ))
    {
        tmp_args_element_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_24 == NULL )
    {
        Py_DECREF( tmp_called_name_37 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 292;
        goto try_finally_handler_125;
    }

    frame_module->f_lineno = 292;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_37, tmp_args_element_name_24 );
    Py_DECREF( tmp_called_name_37 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 292;
        goto try_finally_handler_125;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_33;
    branch_no_33:;
    // Tried code
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_compexpr_left_60 = const_str_plain_crowbar;
    tmp_compexpr_right_60 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_60 == NULL ))
    {
        tmp_compexpr_right_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto try_finally_handler_138;
    }

    tmp_assign_source_192 = SEQUENCE_CONTAINS( tmp_compexpr_left_60, tmp_compexpr_right_60 );
    if ( tmp_assign_source_192 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_138;
    }
    {
        PyObject *old = tmp_and_16__value_4;
        tmp_and_16__value_4 = tmp_assign_source_192;
        Py_INCREF( tmp_and_16__value_4 );
        Py_XDECREF( old );
    }

    tmp_cond_value_68 = tmp_and_16__value_4;

    tmp_cond_truth_68 = CHECK_IF_TRUE( tmp_cond_value_68 );
    if ( tmp_cond_truth_68 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_138;
    }
    if (tmp_cond_truth_68 == 1)
    {
        goto condexpr_true_46;
    }
    else
    {
        goto condexpr_false_46;
    }
    condexpr_true_46:;
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_result = tmp_and_16__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_16__value_4 );
        tmp_and_16__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_compexpr_left_61 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_61 == NULL ))
    {
        tmp_compexpr_left_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_61 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto try_finally_handler_141;
    }

    tmp_compexpr_right_61 = const_int_pos_9;
    tmp_assign_source_193 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_61, tmp_compexpr_right_61 );
    if ( tmp_assign_source_193 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_141;
    }
    {
        PyObject *old = tmp_and_16__value_3;
        tmp_and_16__value_3 = tmp_assign_source_193;
        Py_XDECREF( old );
    }

    tmp_cond_value_69 = tmp_and_16__value_3;

    tmp_cond_truth_69 = CHECK_IF_TRUE( tmp_cond_value_69 );
    if ( tmp_cond_truth_69 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_141;
    }
    if (tmp_cond_truth_69 == 1)
    {
        goto condexpr_true_47;
    }
    else
    {
        goto condexpr_false_47;
    }
    condexpr_true_47:;
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_result = tmp_and_16__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_16__value_3 );
        tmp_and_16__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_compexpr_left_62 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_62 == NULL ))
    {
        tmp_compexpr_left_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto try_finally_handler_144;
    }

    tmp_compexpr_right_62 = const_int_pos_9;
    tmp_assign_source_194 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_62, tmp_compexpr_right_62 );
    if ( tmp_assign_source_194 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_144;
    }
    {
        PyObject *old = tmp_and_16__value_2;
        tmp_and_16__value_2 = tmp_assign_source_194;
        Py_XDECREF( old );
    }

    tmp_cond_value_70 = tmp_and_16__value_2;

    tmp_cond_truth_70 = CHECK_IF_TRUE( tmp_cond_value_70 );
    if ( tmp_cond_truth_70 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_144;
    }
    if (tmp_cond_truth_70 == 1)
    {
        goto condexpr_true_48;
    }
    else
    {
        goto condexpr_false_48;
    }
    condexpr_true_48:;
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_result = tmp_and_16__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_16__value_2 );
        tmp_and_16__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_compexpr_left_63 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_63 == NULL ))
    {
        tmp_compexpr_left_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto try_finally_handler_147;
    }

    tmp_compexpr_right_63 = const_int_pos_1;
    tmp_assign_source_195 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_63, tmp_compexpr_right_63 );
    if ( tmp_assign_source_195 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_147;
    }
    {
        PyObject *old = tmp_and_16__value_1;
        tmp_and_16__value_1 = tmp_assign_source_195;
        Py_XDECREF( old );
    }

    tmp_cond_value_71 = tmp_and_16__value_1;

    tmp_cond_truth_71 = CHECK_IF_TRUE( tmp_cond_value_71 );
    if ( tmp_cond_truth_71 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_147;
    }
    if (tmp_cond_truth_71 == 1)
    {
        goto condexpr_true_49;
    }
    else
    {
        goto condexpr_false_49;
    }
    condexpr_true_49:;
    tmp_cond_value_67 = NULL;
    // Tried code
    tmp_result = tmp_and_16__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_16__value_1 );
        tmp_and_16__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_64 = const_str_plain_crowbar;
    tmp_compexpr_right_64 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_64 == NULL ))
    {
        tmp_compexpr_right_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_64 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto try_finally_handler_148;
    }

    tmp_cond_value_67 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_64, tmp_compexpr_right_64 );
    if ( tmp_cond_value_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_148;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_148:;
    exception_keeper_type_129 = exception_type;
    exception_keeper_value_129 = exception_value;
    exception_keeper_tb_129 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_129 != NULL )
    {
        exception_type = exception_keeper_type_129;
        exception_value = exception_keeper_value_129;
        exception_tb = exception_keeper_tb_129;

        goto try_finally_handler_147;
    }

    goto finally_end_129;
    finally_end_129:;
    goto condexpr_end_49;
    condexpr_false_49:;
    tmp_cond_value_67 = tmp_and_16__value_1;

    condexpr_end_49:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_147:;
    exception_keeper_type_130 = exception_type;
    exception_keeper_value_130 = exception_value;
    exception_keeper_tb_130 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_130 != NULL )
    {
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;

        goto try_finally_handler_146;
    }

    goto finally_end_130;
    finally_end_130:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_146:;
    exception_keeper_type_131 = exception_type;
    exception_keeper_value_131 = exception_value;
    exception_keeper_tb_131 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_131 != NULL )
    {
        exception_type = exception_keeper_type_131;
        exception_value = exception_keeper_value_131;
        exception_tb = exception_keeper_tb_131;

        goto try_finally_handler_145;
    }

    goto finally_end_131;
    finally_end_131:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_145:;
    exception_keeper_type_132 = exception_type;
    exception_keeper_value_132 = exception_value;
    exception_keeper_tb_132 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_41 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_16__value_1 );
    tmp_and_16__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_41;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_132 != NULL )
    {
        exception_type = exception_keeper_type_132;
        exception_value = exception_keeper_value_132;
        exception_tb = exception_keeper_tb_132;

        goto try_finally_handler_144;
    }

    goto finally_end_132;
    finally_end_132:;
    goto condexpr_end_48;
    condexpr_false_48:;
    tmp_cond_value_67 = tmp_and_16__value_2;

    condexpr_end_48:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_144:;
    exception_keeper_type_133 = exception_type;
    exception_keeper_value_133 = exception_value;
    exception_keeper_tb_133 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_133 != NULL )
    {
        exception_type = exception_keeper_type_133;
        exception_value = exception_keeper_value_133;
        exception_tb = exception_keeper_tb_133;

        goto try_finally_handler_143;
    }

    goto finally_end_133;
    finally_end_133:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_143:;
    exception_keeper_type_134 = exception_type;
    exception_keeper_value_134 = exception_value;
    exception_keeper_tb_134 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_134 != NULL )
    {
        exception_type = exception_keeper_type_134;
        exception_value = exception_keeper_value_134;
        exception_tb = exception_keeper_tb_134;

        goto try_finally_handler_142;
    }

    goto finally_end_134;
    finally_end_134:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_142:;
    exception_keeper_type_135 = exception_type;
    exception_keeper_value_135 = exception_value;
    exception_keeper_tb_135 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_42 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_16__value_2 );
    tmp_and_16__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_42;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_135 != NULL )
    {
        exception_type = exception_keeper_type_135;
        exception_value = exception_keeper_value_135;
        exception_tb = exception_keeper_tb_135;

        goto try_finally_handler_141;
    }

    goto finally_end_135;
    finally_end_135:;
    goto condexpr_end_47;
    condexpr_false_47:;
    tmp_cond_value_67 = tmp_and_16__value_3;

    condexpr_end_47:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_141:;
    exception_keeper_type_136 = exception_type;
    exception_keeper_value_136 = exception_value;
    exception_keeper_tb_136 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_136 != NULL )
    {
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;

        goto try_finally_handler_140;
    }

    goto finally_end_136;
    finally_end_136:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_140:;
    exception_keeper_type_137 = exception_type;
    exception_keeper_value_137 = exception_value;
    exception_keeper_tb_137 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_137 != NULL )
    {
        exception_type = exception_keeper_type_137;
        exception_value = exception_keeper_value_137;
        exception_tb = exception_keeper_tb_137;

        goto try_finally_handler_139;
    }

    goto finally_end_137;
    finally_end_137:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_139:;
    exception_keeper_type_138 = exception_type;
    exception_keeper_value_138 = exception_value;
    exception_keeper_tb_138 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_43 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_16__value_3 );
    tmp_and_16__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_43;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_138 != NULL )
    {
        exception_type = exception_keeper_type_138;
        exception_value = exception_keeper_value_138;
        exception_tb = exception_keeper_tb_138;

        goto try_finally_handler_138;
    }

    goto finally_end_138;
    finally_end_138:;
    goto condexpr_end_46;
    condexpr_false_46:;
    tmp_cond_value_67 = tmp_and_16__value_4;

    condexpr_end_46:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_138:;
    exception_keeper_type_139 = exception_type;
    exception_keeper_value_139 = exception_value;
    exception_keeper_tb_139 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_139 != NULL )
    {
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;

        goto try_finally_handler_137;
    }

    goto finally_end_139;
    finally_end_139:;
    tmp_cond_truth_67 = CHECK_IF_TRUE( tmp_cond_value_67 );
    if ( tmp_cond_truth_67 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 293;
        goto try_finally_handler_137;
    }
    if (tmp_cond_truth_67 == 1)
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    tmp_assign_source_196 = const_str_plain_crowbar;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_196 );
    tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_34 == NULL ))
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 295;
        goto try_finally_handler_137;
    }

    tmp_called_name_38 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_append );
    if ( tmp_called_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 295;
        goto try_finally_handler_137;
    }
    tmp_args_element_name_25 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_25 == NULL ))
    {
        tmp_args_element_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_25 == NULL )
    {
        Py_DECREF( tmp_called_name_38 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 295;
        goto try_finally_handler_137;
    }

    frame_module->f_lineno = 295;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_38, tmp_args_element_name_25 );
    Py_DECREF( tmp_called_name_38 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 295;
        goto try_finally_handler_137;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_45 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_45 == NULL ))
    {
        tmp_subscribed_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }

    tmp_subscript_name_45 = const_str_plain_magenta;
    tmp_left_name_62 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_45, tmp_subscript_name_45 );
    if ( tmp_left_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    tmp_right_name_61 = const_str_digest_bc2a664119fc0a83a6aaabc696e5800e;
    tmp_left_name_61 = BINARY_OPERATION_ADD( tmp_left_name_62, tmp_right_name_61 );
    Py_DECREF( tmp_left_name_62 );
    if ( tmp_left_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    tmp_subscribed_name_46 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_46 == NULL ))
    {
        tmp_subscribed_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_46 == NULL )
    {
        Py_DECREF( tmp_left_name_61 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }

    tmp_subscript_name_46 = const_str_plain_off;
    tmp_right_name_62 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_46, tmp_subscript_name_46 );
    if ( tmp_right_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_61 );

        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    tmp_str_arg_25 = BINARY_OPERATION_ADD( tmp_left_name_61, tmp_right_name_62 );
    Py_DECREF( tmp_left_name_61 );
    Py_DECREF( tmp_right_name_62 );
    if ( tmp_str_arg_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_25 );
    Py_DECREF( tmp_str_arg_25 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 296;
        goto try_finally_handler_137;
    }
    goto branch_end_34;
    branch_no_34:;
    // Tried code
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_compexpr_left_65 = const_str_plain_key;
    tmp_compexpr_right_65 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_65 == NULL ))
    {
        tmp_compexpr_right_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 297;
        goto try_finally_handler_150;
    }

    tmp_assign_source_197 = SEQUENCE_CONTAINS( tmp_compexpr_left_65, tmp_compexpr_right_65 );
    if ( tmp_assign_source_197 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_150;
    }
    {
        PyObject *old = tmp_and_17__value_5;
        tmp_and_17__value_5 = tmp_assign_source_197;
        Py_INCREF( tmp_and_17__value_5 );
        Py_XDECREF( old );
    }

    tmp_cond_value_73 = tmp_and_17__value_5;

    tmp_cond_truth_73 = CHECK_IF_TRUE( tmp_cond_value_73 );
    if ( tmp_cond_truth_73 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_150;
    }
    if (tmp_cond_truth_73 == 1)
    {
        goto condexpr_true_50;
    }
    else
    {
        goto condexpr_false_50;
    }
    condexpr_true_50:;
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_result = tmp_and_17__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_17__value_5 );
        tmp_and_17__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_compexpr_left_66 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_66 == NULL ))
    {
        tmp_compexpr_left_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_66 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 297;
        goto try_finally_handler_153;
    }

    tmp_compexpr_right_66 = const_int_pos_2;
    tmp_assign_source_198 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_66, tmp_compexpr_right_66 );
    if ( tmp_assign_source_198 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_153;
    }
    {
        PyObject *old = tmp_and_17__value_4;
        tmp_and_17__value_4 = tmp_assign_source_198;
        Py_XDECREF( old );
    }

    tmp_cond_value_74 = tmp_and_17__value_4;

    tmp_cond_truth_74 = CHECK_IF_TRUE( tmp_cond_value_74 );
    if ( tmp_cond_truth_74 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_153;
    }
    if (tmp_cond_truth_74 == 1)
    {
        goto condexpr_true_51;
    }
    else
    {
        goto condexpr_false_51;
    }
    condexpr_true_51:;
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_result = tmp_and_17__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_17__value_4 );
        tmp_and_17__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_compexpr_left_67 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_67 == NULL ))
    {
        tmp_compexpr_left_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_67 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 297;
        goto try_finally_handler_156;
    }

    tmp_compexpr_right_67 = const_int_pos_8;
    tmp_assign_source_199 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_67, tmp_compexpr_right_67 );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_156;
    }
    {
        PyObject *old = tmp_and_17__value_3;
        tmp_and_17__value_3 = tmp_assign_source_199;
        Py_XDECREF( old );
    }

    tmp_cond_value_75 = tmp_and_17__value_3;

    tmp_cond_truth_75 = CHECK_IF_TRUE( tmp_cond_value_75 );
    if ( tmp_cond_truth_75 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_156;
    }
    if (tmp_cond_truth_75 == 1)
    {
        goto condexpr_true_52;
    }
    else
    {
        goto condexpr_false_52;
    }
    condexpr_true_52:;
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_result = tmp_and_17__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_17__value_3 );
        tmp_and_17__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_compexpr_left_68 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_68 == NULL ))
    {
        tmp_compexpr_left_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 297;
        goto try_finally_handler_159;
    }

    tmp_compexpr_right_68 = const_int_0;
    tmp_assign_source_200 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_68, tmp_compexpr_right_68 );
    if ( tmp_assign_source_200 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_159;
    }
    {
        PyObject *old = tmp_and_17__value_2;
        tmp_and_17__value_2 = tmp_assign_source_200;
        Py_XDECREF( old );
    }

    tmp_cond_value_76 = tmp_and_17__value_2;

    tmp_cond_truth_76 = CHECK_IF_TRUE( tmp_cond_value_76 );
    if ( tmp_cond_truth_76 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_159;
    }
    if (tmp_cond_truth_76 == 1)
    {
        goto condexpr_true_53;
    }
    else
    {
        goto condexpr_false_53;
    }
    condexpr_true_53:;
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_result = tmp_and_17__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_17__value_2 );
        tmp_and_17__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_compexpr_left_69 = const_str_plain_key;
    tmp_compexpr_right_69 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_69 == NULL ))
    {
        tmp_compexpr_right_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 297;
        goto try_finally_handler_162;
    }

    tmp_assign_source_201 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_69, tmp_compexpr_right_69 );
    if ( tmp_assign_source_201 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_162;
    }
    {
        PyObject *old = tmp_and_17__value_1;
        tmp_and_17__value_1 = tmp_assign_source_201;
        Py_INCREF( tmp_and_17__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_77 = tmp_and_17__value_1;

    tmp_cond_truth_77 = CHECK_IF_TRUE( tmp_cond_value_77 );
    if ( tmp_cond_truth_77 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_162;
    }
    if (tmp_cond_truth_77 == 1)
    {
        goto condexpr_true_54;
    }
    else
    {
        goto condexpr_false_54;
    }
    condexpr_true_54:;
    tmp_cond_value_72 = NULL;
    // Tried code
    tmp_result = tmp_and_17__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_17__value_1 );
        tmp_and_17__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_70 = const_str_plain_trapdoor;
    tmp_compexpr_right_70 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_70 == NULL ))
    {
        tmp_compexpr_right_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_70 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 297;
        goto try_finally_handler_163;
    }

    tmp_cond_value_72 = SEQUENCE_CONTAINS( tmp_compexpr_left_70, tmp_compexpr_right_70 );
    if ( tmp_cond_value_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_163;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_163:;
    exception_keeper_type_140 = exception_type;
    exception_keeper_value_140 = exception_value;
    exception_keeper_tb_140 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_140 != NULL )
    {
        exception_type = exception_keeper_type_140;
        exception_value = exception_keeper_value_140;
        exception_tb = exception_keeper_tb_140;

        goto try_finally_handler_162;
    }

    goto finally_end_140;
    finally_end_140:;
    goto condexpr_end_54;
    condexpr_false_54:;
    tmp_cond_value_72 = tmp_and_17__value_1;

    condexpr_end_54:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_162:;
    exception_keeper_type_141 = exception_type;
    exception_keeper_value_141 = exception_value;
    exception_keeper_tb_141 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_141 != NULL )
    {
        exception_type = exception_keeper_type_141;
        exception_value = exception_keeper_value_141;
        exception_tb = exception_keeper_tb_141;

        goto try_finally_handler_161;
    }

    goto finally_end_141;
    finally_end_141:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_161:;
    exception_keeper_type_142 = exception_type;
    exception_keeper_value_142 = exception_value;
    exception_keeper_tb_142 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_142 != NULL )
    {
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;

        goto try_finally_handler_160;
    }

    goto finally_end_142;
    finally_end_142:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_160:;
    exception_keeper_type_143 = exception_type;
    exception_keeper_value_143 = exception_value;
    exception_keeper_tb_143 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_44 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_17__value_1 );
    tmp_and_17__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_44;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_143 != NULL )
    {
        exception_type = exception_keeper_type_143;
        exception_value = exception_keeper_value_143;
        exception_tb = exception_keeper_tb_143;

        goto try_finally_handler_159;
    }

    goto finally_end_143;
    finally_end_143:;
    goto condexpr_end_53;
    condexpr_false_53:;
    tmp_cond_value_72 = tmp_and_17__value_2;

    condexpr_end_53:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_159:;
    exception_keeper_type_144 = exception_type;
    exception_keeper_value_144 = exception_value;
    exception_keeper_tb_144 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_144 != NULL )
    {
        exception_type = exception_keeper_type_144;
        exception_value = exception_keeper_value_144;
        exception_tb = exception_keeper_tb_144;

        goto try_finally_handler_158;
    }

    goto finally_end_144;
    finally_end_144:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_158:;
    exception_keeper_type_145 = exception_type;
    exception_keeper_value_145 = exception_value;
    exception_keeper_tb_145 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_145 != NULL )
    {
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;

        goto try_finally_handler_157;
    }

    goto finally_end_145;
    finally_end_145:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_157:;
    exception_keeper_type_146 = exception_type;
    exception_keeper_value_146 = exception_value;
    exception_keeper_tb_146 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_45 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_17__value_2 );
    tmp_and_17__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_45;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_146 != NULL )
    {
        exception_type = exception_keeper_type_146;
        exception_value = exception_keeper_value_146;
        exception_tb = exception_keeper_tb_146;

        goto try_finally_handler_156;
    }

    goto finally_end_146;
    finally_end_146:;
    goto condexpr_end_52;
    condexpr_false_52:;
    tmp_cond_value_72 = tmp_and_17__value_3;

    condexpr_end_52:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_156:;
    exception_keeper_type_147 = exception_type;
    exception_keeper_value_147 = exception_value;
    exception_keeper_tb_147 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_147 != NULL )
    {
        exception_type = exception_keeper_type_147;
        exception_value = exception_keeper_value_147;
        exception_tb = exception_keeper_tb_147;

        goto try_finally_handler_155;
    }

    goto finally_end_147;
    finally_end_147:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_155:;
    exception_keeper_type_148 = exception_type;
    exception_keeper_value_148 = exception_value;
    exception_keeper_tb_148 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_148 != NULL )
    {
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;

        goto try_finally_handler_154;
    }

    goto finally_end_148;
    finally_end_148:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_154:;
    exception_keeper_type_149 = exception_type;
    exception_keeper_value_149 = exception_value;
    exception_keeper_tb_149 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_46 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_17__value_3 );
    tmp_and_17__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_46;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_149 != NULL )
    {
        exception_type = exception_keeper_type_149;
        exception_value = exception_keeper_value_149;
        exception_tb = exception_keeper_tb_149;

        goto try_finally_handler_153;
    }

    goto finally_end_149;
    finally_end_149:;
    goto condexpr_end_51;
    condexpr_false_51:;
    tmp_cond_value_72 = tmp_and_17__value_4;

    condexpr_end_51:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_153:;
    exception_keeper_type_150 = exception_type;
    exception_keeper_value_150 = exception_value;
    exception_keeper_tb_150 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_150 != NULL )
    {
        exception_type = exception_keeper_type_150;
        exception_value = exception_keeper_value_150;
        exception_tb = exception_keeper_tb_150;

        goto try_finally_handler_152;
    }

    goto finally_end_150;
    finally_end_150:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_152:;
    exception_keeper_type_151 = exception_type;
    exception_keeper_value_151 = exception_value;
    exception_keeper_tb_151 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_151 != NULL )
    {
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;

        goto try_finally_handler_151;
    }

    goto finally_end_151;
    finally_end_151:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_151:;
    exception_keeper_type_152 = exception_type;
    exception_keeper_value_152 = exception_value;
    exception_keeper_tb_152 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_47 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_17__value_4 );
    tmp_and_17__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_47;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_152 != NULL )
    {
        exception_type = exception_keeper_type_152;
        exception_value = exception_keeper_value_152;
        exception_tb = exception_keeper_tb_152;

        goto try_finally_handler_150;
    }

    goto finally_end_152;
    finally_end_152:;
    goto condexpr_end_50;
    condexpr_false_50:;
    tmp_cond_value_72 = tmp_and_17__value_5;

    condexpr_end_50:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_150:;
    exception_keeper_type_153 = exception_type;
    exception_keeper_value_153 = exception_value;
    exception_keeper_tb_153 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_153 != NULL )
    {
        exception_type = exception_keeper_type_153;
        exception_value = exception_keeper_value_153;
        exception_tb = exception_keeper_tb_153;

        goto try_finally_handler_149;
    }

    goto finally_end_153;
    finally_end_153:;
    tmp_cond_truth_72 = CHECK_IF_TRUE( tmp_cond_value_72 );
    if ( tmp_cond_truth_72 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 297;
        goto try_finally_handler_149;
    }
    if (tmp_cond_truth_72 == 1)
    {
        goto branch_yes_35;
    }
    else
    {
        goto branch_no_35;
    }
    branch_yes_35:;
    tmp_assign_source_202 = const_str_plain_key;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_202 );
    tmp_source_name_35 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_35 == NULL ))
    {
        tmp_source_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 299;
        goto try_finally_handler_149;
    }

    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_append );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 299;
        goto try_finally_handler_149;
    }
    tmp_args_element_name_26 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_26 == NULL ))
    {
        tmp_args_element_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_26 == NULL )
    {
        Py_DECREF( tmp_called_name_39 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 299;
        goto try_finally_handler_149;
    }

    frame_module->f_lineno = 299;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_39, tmp_args_element_name_26 );
    Py_DECREF( tmp_called_name_39 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 299;
        goto try_finally_handler_149;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_47 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_47 == NULL ))
    {
        tmp_subscribed_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }

    tmp_subscript_name_47 = const_str_plain_magenta;
    tmp_left_name_64 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_47, tmp_subscript_name_47 );
    if ( tmp_left_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    tmp_right_name_63 = const_str_digest_2dd3bcc35d86990c94e1dbe5b45f35b8;
    tmp_left_name_63 = BINARY_OPERATION_ADD( tmp_left_name_64, tmp_right_name_63 );
    Py_DECREF( tmp_left_name_64 );
    if ( tmp_left_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    tmp_subscribed_name_48 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_48 == NULL ))
    {
        tmp_subscribed_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_48 == NULL )
    {
        Py_DECREF( tmp_left_name_63 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }

    tmp_subscript_name_48 = const_str_plain_off;
    tmp_right_name_64 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_48, tmp_subscript_name_48 );
    if ( tmp_right_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_63 );

        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    tmp_str_arg_26 = BINARY_OPERATION_ADD( tmp_left_name_63, tmp_right_name_64 );
    Py_DECREF( tmp_left_name_63 );
    Py_DECREF( tmp_right_name_64 );
    if ( tmp_str_arg_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_26 );
    Py_DECREF( tmp_str_arg_26 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 300;
        goto try_finally_handler_149;
    }
    goto branch_end_35;
    branch_no_35:;
    // Tried code
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_compexpr_left_71 = const_str_plain_book;
    tmp_compexpr_right_71 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words );

    if (unlikely( tmp_compexpr_right_71 == NULL ))
    {
        tmp_compexpr_right_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_words );
    }

    if ( tmp_compexpr_right_71 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 373 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 301;
        goto try_finally_handler_165;
    }

    tmp_assign_source_203 = SEQUENCE_CONTAINS( tmp_compexpr_left_71, tmp_compexpr_right_71 );
    if ( tmp_assign_source_203 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_165;
    }
    {
        PyObject *old = tmp_and_18__value_5;
        tmp_and_18__value_5 = tmp_assign_source_203;
        Py_INCREF( tmp_and_18__value_5 );
        Py_XDECREF( old );
    }

    tmp_cond_value_79 = tmp_and_18__value_5;

    tmp_cond_truth_79 = CHECK_IF_TRUE( tmp_cond_value_79 );
    if ( tmp_cond_truth_79 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_165;
    }
    if (tmp_cond_truth_79 == 1)
    {
        goto condexpr_true_55;
    }
    else
    {
        goto condexpr_false_55;
    }
    condexpr_true_55:;
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_result = tmp_and_18__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_18__value_5 );
        tmp_and_18__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_compexpr_left_72 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_72 == NULL ))
    {
        tmp_compexpr_left_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_72 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 301;
        goto try_finally_handler_168;
    }

    tmp_compexpr_right_72 = const_int_pos_3;
    tmp_assign_source_204 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_72, tmp_compexpr_right_72 );
    if ( tmp_assign_source_204 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_168;
    }
    {
        PyObject *old = tmp_and_18__value_4;
        tmp_and_18__value_4 = tmp_assign_source_204;
        Py_XDECREF( old );
    }

    tmp_cond_value_80 = tmp_and_18__value_4;

    tmp_cond_truth_80 = CHECK_IF_TRUE( tmp_cond_value_80 );
    if ( tmp_cond_truth_80 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_168;
    }
    if (tmp_cond_truth_80 == 1)
    {
        goto condexpr_true_56;
    }
    else
    {
        goto condexpr_false_56;
    }
    condexpr_true_56:;
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_result = tmp_and_18__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_18__value_4 );
        tmp_and_18__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_compexpr_left_73 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_73 == NULL ))
    {
        tmp_compexpr_left_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_73 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 301;
        goto try_finally_handler_171;
    }

    tmp_compexpr_right_73 = const_int_pos_13;
    tmp_assign_source_205 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_73, tmp_compexpr_right_73 );
    if ( tmp_assign_source_205 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_171;
    }
    {
        PyObject *old = tmp_and_18__value_3;
        tmp_and_18__value_3 = tmp_assign_source_205;
        Py_XDECREF( old );
    }

    tmp_cond_value_81 = tmp_and_18__value_3;

    tmp_cond_truth_81 = CHECK_IF_TRUE( tmp_cond_value_81 );
    if ( tmp_cond_truth_81 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_171;
    }
    if (tmp_cond_truth_81 == 1)
    {
        goto condexpr_true_57;
    }
    else
    {
        goto condexpr_false_57;
    }
    condexpr_true_57:;
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_result = tmp_and_18__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_18__value_3 );
        tmp_and_18__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_compexpr_left_74 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_74 == NULL ))
    {
        tmp_compexpr_left_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_74 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 301;
        goto try_finally_handler_174;
    }

    tmp_compexpr_right_74 = const_int_pos_1;
    tmp_assign_source_206 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_74, tmp_compexpr_right_74 );
    if ( tmp_assign_source_206 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_174;
    }
    {
        PyObject *old = tmp_and_18__value_2;
        tmp_and_18__value_2 = tmp_assign_source_206;
        Py_XDECREF( old );
    }

    tmp_cond_value_82 = tmp_and_18__value_2;

    tmp_cond_truth_82 = CHECK_IF_TRUE( tmp_cond_value_82 );
    if ( tmp_cond_truth_82 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_174;
    }
    if (tmp_cond_truth_82 == 1)
    {
        goto condexpr_true_58;
    }
    else
    {
        goto condexpr_false_58;
    }
    condexpr_true_58:;
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_result = tmp_and_18__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_18__value_2 );
        tmp_and_18__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_compexpr_left_75 = const_str_digest_62e0e143b9e2a50d815df0a5c6a7df84;
    tmp_compexpr_right_75 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_75 == NULL ))
    {
        tmp_compexpr_right_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_75 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 301;
        goto try_finally_handler_177;
    }

    tmp_assign_source_207 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_75, tmp_compexpr_right_75 );
    if ( tmp_assign_source_207 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_177;
    }
    {
        PyObject *old = tmp_and_18__value_1;
        tmp_and_18__value_1 = tmp_assign_source_207;
        Py_INCREF( tmp_and_18__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_83 = tmp_and_18__value_1;

    tmp_cond_truth_83 = CHECK_IF_TRUE( tmp_cond_value_83 );
    if ( tmp_cond_truth_83 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_177;
    }
    if (tmp_cond_truth_83 == 1)
    {
        goto condexpr_true_59;
    }
    else
    {
        goto condexpr_false_59;
    }
    condexpr_true_59:;
    tmp_cond_value_78 = NULL;
    // Tried code
    tmp_result = tmp_and_18__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_18__value_1 );
        tmp_and_18__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_76 = const_str_plain_firebolt;
    tmp_compexpr_right_76 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_76 == NULL ))
    {
        tmp_compexpr_right_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_76 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 301;
        goto try_finally_handler_178;
    }

    tmp_cond_value_78 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_76, tmp_compexpr_right_76 );
    if ( tmp_cond_value_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_178;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_178:;
    exception_keeper_type_154 = exception_type;
    exception_keeper_value_154 = exception_value;
    exception_keeper_tb_154 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_154 != NULL )
    {
        exception_type = exception_keeper_type_154;
        exception_value = exception_keeper_value_154;
        exception_tb = exception_keeper_tb_154;

        goto try_finally_handler_177;
    }

    goto finally_end_154;
    finally_end_154:;
    goto condexpr_end_59;
    condexpr_false_59:;
    tmp_cond_value_78 = tmp_and_18__value_1;

    condexpr_end_59:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_177:;
    exception_keeper_type_155 = exception_type;
    exception_keeper_value_155 = exception_value;
    exception_keeper_tb_155 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_155 != NULL )
    {
        exception_type = exception_keeper_type_155;
        exception_value = exception_keeper_value_155;
        exception_tb = exception_keeper_tb_155;

        goto try_finally_handler_176;
    }

    goto finally_end_155;
    finally_end_155:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_176:;
    exception_keeper_type_156 = exception_type;
    exception_keeper_value_156 = exception_value;
    exception_keeper_tb_156 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_156 != NULL )
    {
        exception_type = exception_keeper_type_156;
        exception_value = exception_keeper_value_156;
        exception_tb = exception_keeper_tb_156;

        goto try_finally_handler_175;
    }

    goto finally_end_156;
    finally_end_156:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_175:;
    exception_keeper_type_157 = exception_type;
    exception_keeper_value_157 = exception_value;
    exception_keeper_tb_157 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_48 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_18__value_1 );
    tmp_and_18__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_48;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_157 != NULL )
    {
        exception_type = exception_keeper_type_157;
        exception_value = exception_keeper_value_157;
        exception_tb = exception_keeper_tb_157;

        goto try_finally_handler_174;
    }

    goto finally_end_157;
    finally_end_157:;
    goto condexpr_end_58;
    condexpr_false_58:;
    tmp_cond_value_78 = tmp_and_18__value_2;

    condexpr_end_58:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_174:;
    exception_keeper_type_158 = exception_type;
    exception_keeper_value_158 = exception_value;
    exception_keeper_tb_158 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_158 != NULL )
    {
        exception_type = exception_keeper_type_158;
        exception_value = exception_keeper_value_158;
        exception_tb = exception_keeper_tb_158;

        goto try_finally_handler_173;
    }

    goto finally_end_158;
    finally_end_158:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_173:;
    exception_keeper_type_159 = exception_type;
    exception_keeper_value_159 = exception_value;
    exception_keeper_tb_159 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_159 != NULL )
    {
        exception_type = exception_keeper_type_159;
        exception_value = exception_keeper_value_159;
        exception_tb = exception_keeper_tb_159;

        goto try_finally_handler_172;
    }

    goto finally_end_159;
    finally_end_159:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_172:;
    exception_keeper_type_160 = exception_type;
    exception_keeper_value_160 = exception_value;
    exception_keeper_tb_160 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_49 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_18__value_2 );
    tmp_and_18__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_49;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_160 != NULL )
    {
        exception_type = exception_keeper_type_160;
        exception_value = exception_keeper_value_160;
        exception_tb = exception_keeper_tb_160;

        goto try_finally_handler_171;
    }

    goto finally_end_160;
    finally_end_160:;
    goto condexpr_end_57;
    condexpr_false_57:;
    tmp_cond_value_78 = tmp_and_18__value_3;

    condexpr_end_57:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_171:;
    exception_keeper_type_161 = exception_type;
    exception_keeper_value_161 = exception_value;
    exception_keeper_tb_161 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_161 != NULL )
    {
        exception_type = exception_keeper_type_161;
        exception_value = exception_keeper_value_161;
        exception_tb = exception_keeper_tb_161;

        goto try_finally_handler_170;
    }

    goto finally_end_161;
    finally_end_161:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_170:;
    exception_keeper_type_162 = exception_type;
    exception_keeper_value_162 = exception_value;
    exception_keeper_tb_162 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_162 != NULL )
    {
        exception_type = exception_keeper_type_162;
        exception_value = exception_keeper_value_162;
        exception_tb = exception_keeper_tb_162;

        goto try_finally_handler_169;
    }

    goto finally_end_162;
    finally_end_162:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_169:;
    exception_keeper_type_163 = exception_type;
    exception_keeper_value_163 = exception_value;
    exception_keeper_tb_163 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_50 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_18__value_3 );
    tmp_and_18__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_50;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_163 != NULL )
    {
        exception_type = exception_keeper_type_163;
        exception_value = exception_keeper_value_163;
        exception_tb = exception_keeper_tb_163;

        goto try_finally_handler_168;
    }

    goto finally_end_163;
    finally_end_163:;
    goto condexpr_end_56;
    condexpr_false_56:;
    tmp_cond_value_78 = tmp_and_18__value_4;

    condexpr_end_56:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_168:;
    exception_keeper_type_164 = exception_type;
    exception_keeper_value_164 = exception_value;
    exception_keeper_tb_164 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_164 != NULL )
    {
        exception_type = exception_keeper_type_164;
        exception_value = exception_keeper_value_164;
        exception_tb = exception_keeper_tb_164;

        goto try_finally_handler_167;
    }

    goto finally_end_164;
    finally_end_164:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_167:;
    exception_keeper_type_165 = exception_type;
    exception_keeper_value_165 = exception_value;
    exception_keeper_tb_165 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_165 != NULL )
    {
        exception_type = exception_keeper_type_165;
        exception_value = exception_keeper_value_165;
        exception_tb = exception_keeper_tb_165;

        goto try_finally_handler_166;
    }

    goto finally_end_165;
    finally_end_165:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_166:;
    exception_keeper_type_166 = exception_type;
    exception_keeper_value_166 = exception_value;
    exception_keeper_tb_166 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_51 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_18__value_4 );
    tmp_and_18__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_51;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_166 != NULL )
    {
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;

        goto try_finally_handler_165;
    }

    goto finally_end_166;
    finally_end_166:;
    goto condexpr_end_55;
    condexpr_false_55:;
    tmp_cond_value_78 = tmp_and_18__value_5;

    condexpr_end_55:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_165:;
    exception_keeper_type_167 = exception_type;
    exception_keeper_value_167 = exception_value;
    exception_keeper_tb_167 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_167 != NULL )
    {
        exception_type = exception_keeper_type_167;
        exception_value = exception_keeper_value_167;
        exception_tb = exception_keeper_tb_167;

        goto try_finally_handler_164;
    }

    goto finally_end_167;
    finally_end_167:;
    tmp_cond_truth_78 = CHECK_IF_TRUE( tmp_cond_value_78 );
    if ( tmp_cond_truth_78 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 301;
        goto try_finally_handler_164;
    }
    if (tmp_cond_truth_78 == 1)
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    tmp_assign_source_208 = const_str_digest_62e0e143b9e2a50d815df0a5c6a7df84;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items, tmp_assign_source_208 );
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 303;
        goto try_finally_handler_164;
    }

    tmp_called_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_append );
    if ( tmp_called_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 303;
        goto try_finally_handler_164;
    }
    tmp_args_element_name_27 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_items );

    if (unlikely( tmp_args_element_name_27 == NULL ))
    {
        tmp_args_element_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_items );
    }

    if ( tmp_args_element_name_27 == NULL )
    {
        Py_DECREF( tmp_called_name_40 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 812 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 303;
        goto try_finally_handler_164;
    }

    frame_module->f_lineno = 303;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_40, tmp_args_element_name_27 );
    Py_DECREF( tmp_called_name_40 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 303;
        goto try_finally_handler_164;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_49 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_49 == NULL ))
    {
        tmp_subscribed_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }

    tmp_subscript_name_49 = const_str_plain_magenta;
    tmp_left_name_66 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_49, tmp_subscript_name_49 );
    if ( tmp_left_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    tmp_right_name_65 = const_str_digest_ac3116951fc9adedef4c2546f927c1b1;
    tmp_left_name_65 = BINARY_OPERATION_ADD( tmp_left_name_66, tmp_right_name_65 );
    Py_DECREF( tmp_left_name_66 );
    if ( tmp_left_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    tmp_subscribed_name_50 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_50 == NULL ))
    {
        tmp_subscribed_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_50 == NULL )
    {
        Py_DECREF( tmp_left_name_65 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }

    tmp_subscript_name_50 = const_str_plain_off;
    tmp_right_name_66 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_50, tmp_subscript_name_50 );
    if ( tmp_right_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_65 );

        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    tmp_str_arg_27 = BINARY_OPERATION_ADD( tmp_left_name_65, tmp_right_name_66 );
    Py_DECREF( tmp_left_name_65 );
    Py_DECREF( tmp_right_name_66 );
    if ( tmp_str_arg_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_27 );
    Py_DECREF( tmp_str_arg_27 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 304;
        goto try_finally_handler_164;
    }
    goto branch_end_36;
    branch_no_36:;
    tmp_subscribed_name_51 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_51 == NULL ))
    {
        tmp_subscribed_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }

    tmp_subscript_name_51 = const_str_plain_magenta;
    tmp_left_name_68 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_51, tmp_subscript_name_51 );
    if ( tmp_left_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    tmp_right_name_67 = const_str_digest_33ee215ea4ec1e7a6b3f6faf3aa80de4;
    tmp_left_name_67 = BINARY_OPERATION_ADD( tmp_left_name_68, tmp_right_name_67 );
    Py_DECREF( tmp_left_name_68 );
    if ( tmp_left_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    tmp_subscribed_name_52 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_52 == NULL ))
    {
        tmp_subscribed_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_52 == NULL )
    {
        Py_DECREF( tmp_left_name_67 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }

    tmp_subscript_name_52 = const_str_plain_off;
    tmp_right_name_68 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_52, tmp_subscript_name_52 );
    if ( tmp_right_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_67 );

        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    tmp_str_arg_28 = BINARY_OPERATION_ADD( tmp_left_name_67, tmp_right_name_68 );
    Py_DECREF( tmp_left_name_67 );
    Py_DECREF( tmp_right_name_68 );
    if ( tmp_str_arg_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_28 );
    Py_DECREF( tmp_str_arg_28 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 306;
        goto try_finally_handler_164;
    }
    branch_end_36:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_164:;
    exception_keeper_type_168 = exception_type;
    exception_keeper_value_168 = exception_value;
    exception_keeper_tb_168 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_52 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_18__value_5 );
    tmp_and_18__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_52;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_168 != NULL )
    {
        exception_type = exception_keeper_type_168;
        exception_value = exception_keeper_value_168;
        exception_tb = exception_keeper_tb_168;

        goto try_finally_handler_149;
    }

    goto finally_end_168;
    finally_end_168:;
    branch_end_35:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_149:;
    exception_keeper_type_169 = exception_type;
    exception_keeper_value_169 = exception_value;
    exception_keeper_tb_169 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_53 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_17__value_5 );
    tmp_and_17__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_53;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_169 != NULL )
    {
        exception_type = exception_keeper_type_169;
        exception_value = exception_keeper_value_169;
        exception_tb = exception_keeper_tb_169;

        goto try_finally_handler_137;
    }

    goto finally_end_169;
    finally_end_169:;
    branch_end_34:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_137:;
    exception_keeper_type_170 = exception_type;
    exception_keeper_value_170 = exception_value;
    exception_keeper_tb_170 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_54 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_16__value_4 );
    tmp_and_16__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_54;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_170 != NULL )
    {
        exception_type = exception_keeper_type_170;
        exception_value = exception_keeper_value_170;
        exception_tb = exception_keeper_tb_170;

        goto try_finally_handler_125;
    }

    goto finally_end_170;
    finally_end_170:;
    branch_end_33:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_125:;
    exception_keeper_type_171 = exception_type;
    exception_keeper_value_171 = exception_value;
    exception_keeper_tb_171 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_55 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_15__value_4 );
    tmp_and_15__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_55;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_171 != NULL )
    {
        exception_type = exception_keeper_type_171;
        exception_value = exception_keeper_value_171;
        exception_tb = exception_keeper_tb_171;

        goto try_finally_handler_113;
    }

    goto finally_end_171;
    finally_end_171:;
    branch_end_32:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_113:;
    exception_keeper_type_172 = exception_type;
    exception_keeper_value_172 = exception_value;
    exception_keeper_tb_172 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_56 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_14__value_4 );
    tmp_and_14__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_56;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_172 != NULL )
    {
        exception_type = exception_keeper_type_172;
        exception_value = exception_keeper_value_172;
        exception_tb = exception_keeper_tb_172;

        goto try_finally_handler_101;
    }

    goto finally_end_172;
    finally_end_172:;
    branch_end_31:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_101:;
    exception_keeper_type_173 = exception_type;
    exception_keeper_value_173 = exception_value;
    exception_keeper_tb_173 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_57 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_13__value_4 );
    tmp_and_13__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_57;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_173 != NULL )
    {
        exception_type = exception_keeper_type_173;
        exception_value = exception_keeper_value_173;
        exception_tb = exception_keeper_tb_173;

        goto try_finally_handler_89;
    }

    goto finally_end_173;
    finally_end_173:;
    branch_end_30:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_89:;
    exception_keeper_type_174 = exception_type;
    exception_keeper_value_174 = exception_value;
    exception_keeper_tb_174 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_58 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_12__value_4 );
    tmp_and_12__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_58;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_174 != NULL )
    {
        exception_type = exception_keeper_type_174;
        exception_value = exception_keeper_value_174;
        exception_tb = exception_keeper_tb_174;

        goto try_finally_handler_80;
    }

    goto finally_end_174;
    finally_end_174:;
    branch_end_29:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_80:;
    exception_keeper_type_175 = exception_type;
    exception_keeper_value_175 = exception_value;
    exception_keeper_tb_175 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_59 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_11__value_3 );
    tmp_and_11__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_59;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_175 != NULL )
    {
        exception_type = exception_keeper_type_175;
        exception_value = exception_keeper_value_175;
        exception_tb = exception_keeper_tb_175;

        goto try_finally_handler_71;
    }

    goto finally_end_175;
    finally_end_175:;
    branch_end_28:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_71:;
    exception_keeper_type_176 = exception_type;
    exception_keeper_value_176 = exception_value;
    exception_keeper_tb_176 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_60 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_10__value_3 );
    tmp_and_10__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_60;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_176 != NULL )
    {
        exception_type = exception_keeper_type_176;
        exception_value = exception_keeper_value_176;
        exception_tb = exception_keeper_tb_176;

        goto try_finally_handler_62;
    }

    goto finally_end_176;
    finally_end_176:;
    branch_end_27:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_62:;
    exception_keeper_type_177 = exception_type;
    exception_keeper_value_177 = exception_value;
    exception_keeper_tb_177 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_61 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_9__value_3 );
    tmp_and_9__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_61;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_177 != NULL )
    {
        exception_type = exception_keeper_type_177;
        exception_value = exception_keeper_value_177;
        exception_tb = exception_keeper_tb_177;

        goto try_finally_handler_53;
    }

    goto finally_end_177;
    finally_end_177:;
    branch_end_26:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_53:;
    exception_keeper_type_178 = exception_type;
    exception_keeper_value_178 = exception_value;
    exception_keeper_tb_178 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_62 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_8__value_3 );
    tmp_and_8__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_62;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_178 != NULL )
    {
        exception_type = exception_keeper_type_178;
        exception_value = exception_keeper_value_178;
        exception_tb = exception_keeper_tb_178;

        goto frame_exception_exit_1;
    }

    goto finally_end_178;
    finally_end_178:;
    branch_no_25:;
    tmp_compare_left_13 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_13 == NULL ))
    {
        tmp_compare_left_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 307;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_13 = const_str_plain_clear;
    tmp_cmp_Eq_9 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_13, tmp_compare_right_13 );
    if ( tmp_cmp_Eq_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 307;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_9 == 1)
    {
        goto branch_yes_37;
    }
    else
    {
        goto branch_no_37;
    }
    branch_yes_37:;
    tmp_left_name_69 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_left_name_69 == NULL ))
    {
        tmp_left_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_left_name_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_right_name_69 = const_int_pos_1;
    tmp_assign_source_209 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_69, tmp_right_name_69 );
    if ( tmp_assign_source_209 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 308;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_209 );
    tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_37 == NULL ))
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 309;
        goto frame_exception_exit_1;
    }

    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_system );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 309;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_17 = const_str_plain_clear;
    frame_module->f_lineno = 309;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_41, tmp_call_arg_element_17 );
    Py_DECREF( tmp_called_name_41 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 309;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_37;
    branch_no_37:;
    tmp_compare_left_14 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_14 == NULL ))
    {
        tmp_compare_left_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 310;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_14 = const_str_plain_inv;
    tmp_cmp_Eq_10 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_14, tmp_compare_right_14 );
    if ( tmp_cmp_Eq_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 310;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_10 == 1)
    {
        goto branch_yes_38;
    }
    else
    {
        goto branch_no_38;
    }
    branch_yes_38:;
    tmp_source_name_38 = const_str_newline;
    tmp_called_name_42 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_join );
    if ( tmp_called_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_28 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_args_element_name_28 == NULL ))
    {
        tmp_args_element_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_args_element_name_28 == NULL )
    {
        Py_DECREF( tmp_called_name_42 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 311;
    tmp_str_arg_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_42, tmp_args_element_name_28 );
    Py_DECREF( tmp_called_name_42 );
    if ( tmp_str_arg_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_29 );
    Py_DECREF( tmp_str_arg_29 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }
    goto branch_end_38;
    branch_no_38:;
    tmp_compare_left_15 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_15 == NULL ))
    {
        tmp_compare_left_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 312;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_15 = const_str_plain_restart;
    tmp_cmp_Eq_11 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_15, tmp_compare_right_15 );
    if ( tmp_cmp_Eq_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 312;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_11 == 1)
    {
        goto branch_yes_39;
    }
    else
    {
        goto branch_no_39;
    }
    branch_yes_39:;
    loop_start_3:;
    tmp_compare_left_16 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_wait );

    if (unlikely( tmp_compare_left_16 == NULL ))
    {
        tmp_compare_left_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_wait );
    }

    if ( tmp_compare_left_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 102 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 313;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_16 = const_int_0;
    tmp_cmp_Eq_12 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_cmp_Eq_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 313;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_12 == 1)
    {
        goto branch_no_40;
    }
    else
    {
        goto branch_yes_40;
    }
    branch_yes_40:;
    goto loop_end_3;
    branch_no_40:;
    tmp_subscribed_name_53 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_53 == NULL ))
    {
        tmp_subscribed_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_53 = const_str_plain_red;
    tmp_left_name_71 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_53, tmp_subscript_name_53 );
    if ( tmp_left_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    tmp_right_name_70 = const_str_digest_3e97787fc5acfab6be55e15661e58b99;
    tmp_left_name_70 = BINARY_OPERATION_ADD( tmp_left_name_71, tmp_right_name_70 );
    Py_DECREF( tmp_left_name_71 );
    if ( tmp_left_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_54 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_54 == NULL ))
    {
        tmp_subscribed_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_54 == NULL )
    {
        Py_DECREF( tmp_left_name_70 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_54 = const_str_plain_off;
    tmp_right_name_71 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_54, tmp_subscript_name_54 );
    if ( tmp_right_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_70 );

        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_30 = BINARY_OPERATION_ADD( tmp_left_name_70, tmp_right_name_71 );
    Py_DECREF( tmp_left_name_70 );
    Py_DECREF( tmp_right_name_71 );
    if ( tmp_str_arg_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_30 );
    Py_DECREF( tmp_str_arg_30 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    tmp_called_name_43 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 315;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_18 = const_str_digest_59e22e82ef3174b5fc0cc7164207e5de;
    frame_module->f_lineno = 315;
    tmp_assign_source_210 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_43, tmp_call_arg_element_18 );
    if ( tmp_assign_source_210 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 315;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_response, tmp_assign_source_210 );
    tmp_compare_left_17 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_response );

    if (unlikely( tmp_compare_left_17 == NULL ))
    {
        tmp_compare_left_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_response );
    }

    if ( tmp_compare_left_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 922 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 316;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_17 = const_str_plain_y;
    tmp_cmp_Eq_13 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_cmp_Eq_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 316;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_13 == 1)
    {
        goto branch_yes_41;
    }
    else
    {
        goto branch_no_41;
    }
    branch_yes_41:;
    tmp_print_value = const_str_digest_ac9e1f57f7967f9d69f76b7b1ac4c8d9;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 317;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 317;
        goto frame_exception_exit_1;
    }
    tmp_source_name_39 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_39 == NULL ))
    {
        tmp_source_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 318;
        goto frame_exception_exit_1;
    }

    tmp_called_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_system );
    if ( tmp_called_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 318;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_19 = const_str_digest_ec6bdca020403edbbf007956ca7d0f4b;
    frame_module->f_lineno = 318;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_44, tmp_call_arg_element_19 );
    Py_DECREF( tmp_called_name_44 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 318;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_40 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_40 == NULL ))
    {
        tmp_source_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 319;
        goto frame_exception_exit_1;
    }

    tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_system );
    if ( tmp_called_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 319;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_20 = const_str_digest_2c7bc0aca158cc57064732335584c44f;
    frame_module->f_lineno = 319;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_45, tmp_call_arg_element_20 );
    Py_DECREF( tmp_called_name_45 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 319;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_211 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_wait, tmp_assign_source_211 );
    goto branch_end_41;
    branch_no_41:;
    tmp_compare_left_18 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_response );

    if (unlikely( tmp_compare_left_18 == NULL ))
    {
        tmp_compare_left_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_response );
    }

    if ( tmp_compare_left_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 922 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 321;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_18 = const_str_plain_n;
    tmp_cmp_Eq_14 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_18, tmp_compare_right_18 );
    if ( tmp_cmp_Eq_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 321;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_14 == 1)
    {
        goto branch_yes_42;
    }
    else
    {
        goto branch_no_42;
    }
    branch_yes_42:;
    tmp_assign_source_212 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_wait, tmp_assign_source_212 );
    branch_no_42:;
    branch_end_41:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 313;
        goto frame_exception_exit_1;
    }
    goto loop_start_3;
    loop_end_3:;
    goto branch_end_39;
    branch_no_39:;
    tmp_compare_left_19 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_19 == NULL ))
    {
        tmp_compare_left_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 323;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_19 = const_str_plain_look;
    tmp_cmp_Eq_15 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_19, tmp_compare_right_19 );
    if ( tmp_cmp_Eq_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 323;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_15 == 1)
    {
        goto branch_yes_43;
    }
    else
    {
        goto branch_no_43;
    }
    branch_yes_43:;
    tmp_assign_source_213 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skip, tmp_assign_source_213 );
    tmp_left_name_72 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_left_name_72 == NULL ))
    {
        tmp_left_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_left_name_72 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 325;
        goto frame_exception_exit_1;
    }

    tmp_right_name_72 = const_int_pos_1;
    tmp_assign_source_214 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_72, tmp_right_name_72 );
    if ( tmp_assign_source_214 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 325;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_214 );
    goto branch_end_43;
    branch_no_43:;
    // Tried code
    tmp_cond_value_84 = NULL;
    // Tried code
    tmp_compexpr_left_77 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compexpr_left_77 == NULL ))
    {
        tmp_compexpr_left_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compexpr_left_77 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 326;
        goto try_finally_handler_180;
    }

    tmp_compexpr_right_77 = const_str_plain_sneak;
    tmp_assign_source_215 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_77, tmp_compexpr_right_77 );
    if ( tmp_assign_source_215 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 326;
        goto try_finally_handler_180;
    }
    {
        PyObject *old = tmp_and_19__value_2;
        tmp_and_19__value_2 = tmp_assign_source_215;
        Py_XDECREF( old );
    }

    tmp_cond_value_85 = tmp_and_19__value_2;

    tmp_cond_truth_85 = CHECK_IF_TRUE( tmp_cond_value_85 );
    if ( tmp_cond_truth_85 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 326;
        goto try_finally_handler_180;
    }
    if (tmp_cond_truth_85 == 1)
    {
        goto condexpr_true_60;
    }
    else
    {
        goto condexpr_false_60;
    }
    condexpr_true_60:;
    tmp_cond_value_84 = NULL;
    // Tried code
    tmp_cond_value_84 = NULL;
    // Tried code
    tmp_result = tmp_and_19__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_19__value_2 );
        tmp_and_19__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_84 = NULL;
    // Tried code
    tmp_compexpr_left_78 = const_str_plain_Stealth;
    tmp_compexpr_right_78 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skills );

    if (unlikely( tmp_compexpr_right_78 == NULL ))
    {
        tmp_compexpr_right_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skills );
    }

    if ( tmp_compexpr_right_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 265 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 326;
        goto try_finally_handler_183;
    }

    tmp_assign_source_216 = SEQUENCE_CONTAINS( tmp_compexpr_left_78, tmp_compexpr_right_78 );
    if ( tmp_assign_source_216 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 326;
        goto try_finally_handler_183;
    }
    {
        PyObject *old = tmp_and_19__value_1;
        tmp_and_19__value_1 = tmp_assign_source_216;
        Py_INCREF( tmp_and_19__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_86 = tmp_and_19__value_1;

    tmp_cond_truth_86 = CHECK_IF_TRUE( tmp_cond_value_86 );
    if ( tmp_cond_truth_86 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 326;
        goto try_finally_handler_183;
    }
    if (tmp_cond_truth_86 == 1)
    {
        goto condexpr_true_61;
    }
    else
    {
        goto condexpr_false_61;
    }
    condexpr_true_61:;
    tmp_cond_value_84 = NULL;
    // Tried code
    tmp_result = tmp_and_19__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_19__value_1 );
        tmp_and_19__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_79 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy );

    if (unlikely( tmp_compexpr_left_79 == NULL ))
    {
        tmp_compexpr_left_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_energy );
    }

    if ( tmp_compexpr_left_79 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 952 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 326;
        goto try_finally_handler_184;
    }

    tmp_compexpr_right_79 = const_int_pos_5;
    tmp_cond_value_84 = RICH_COMPARE_GE( tmp_compexpr_left_79, tmp_compexpr_right_79 );
    if ( tmp_cond_value_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 326;
        goto try_finally_handler_184;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_184:;
    exception_keeper_type_179 = exception_type;
    exception_keeper_value_179 = exception_value;
    exception_keeper_tb_179 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_179 != NULL )
    {
        exception_type = exception_keeper_type_179;
        exception_value = exception_keeper_value_179;
        exception_tb = exception_keeper_tb_179;

        goto try_finally_handler_183;
    }

    goto finally_end_179;
    finally_end_179:;
    goto condexpr_end_61;
    condexpr_false_61:;
    tmp_cond_value_84 = tmp_and_19__value_1;

    Py_INCREF( tmp_cond_value_84 );
    condexpr_end_61:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_183:;
    exception_keeper_type_180 = exception_type;
    exception_keeper_value_180 = exception_value;
    exception_keeper_tb_180 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_180 != NULL )
    {
        exception_type = exception_keeper_type_180;
        exception_value = exception_keeper_value_180;
        exception_tb = exception_keeper_tb_180;

        goto try_finally_handler_182;
    }

    goto finally_end_180;
    finally_end_180:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_182:;
    exception_keeper_type_181 = exception_type;
    exception_keeper_value_181 = exception_value;
    exception_keeper_tb_181 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_181 != NULL )
    {
        exception_type = exception_keeper_type_181;
        exception_value = exception_keeper_value_181;
        exception_tb = exception_keeper_tb_181;

        goto try_finally_handler_181;
    }

    goto finally_end_181;
    finally_end_181:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_181:;
    exception_keeper_type_182 = exception_type;
    exception_keeper_value_182 = exception_value;
    exception_keeper_tb_182 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_63 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_19__value_1 );
    tmp_and_19__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_63;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_182 != NULL )
    {
        exception_type = exception_keeper_type_182;
        exception_value = exception_keeper_value_182;
        exception_tb = exception_keeper_tb_182;

        goto try_finally_handler_180;
    }

    goto finally_end_182;
    finally_end_182:;
    goto condexpr_end_60;
    condexpr_false_60:;
    tmp_cond_value_84 = tmp_and_19__value_2;

    Py_INCREF( tmp_cond_value_84 );
    condexpr_end_60:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_180:;
    exception_keeper_type_183 = exception_type;
    exception_keeper_value_183 = exception_value;
    exception_keeper_tb_183 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_183 != NULL )
    {
        exception_type = exception_keeper_type_183;
        exception_value = exception_keeper_value_183;
        exception_tb = exception_keeper_tb_183;

        goto try_finally_handler_179;
    }

    goto finally_end_183;
    finally_end_183:;
    tmp_cond_truth_84 = CHECK_IF_TRUE( tmp_cond_value_84 );
    if ( tmp_cond_truth_84 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_84 );

        frame_module->f_lineno = 326;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_cond_value_84 );
    if (tmp_cond_truth_84 == 1)
    {
        goto branch_yes_44;
    }
    else
    {
        goto branch_no_44;
    }
    branch_yes_44:;
    tmp_left_name_73 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_left_name_73 == NULL ))
    {
        tmp_left_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_left_name_73 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 327;
        goto try_finally_handler_179;
    }

    tmp_right_name_73 = const_int_pos_6;
    tmp_assign_source_217 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_73, tmp_right_name_73 );
    if ( tmp_assign_source_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 327;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_217 );
    tmp_left_name_74 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy );

    if (unlikely( tmp_left_name_74 == NULL ))
    {
        tmp_left_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_energy );
    }

    if ( tmp_left_name_74 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 952 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 328;
        goto try_finally_handler_179;
    }

    tmp_right_name_74 = const_int_pos_5;
    tmp_assign_source_218 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_74, tmp_right_name_74 );
    if ( tmp_assign_source_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 328;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy, tmp_assign_source_218 );
    goto branch_end_44;
    branch_no_44:;
    tmp_compare_left_20 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_20 == NULL ))
    {
        tmp_compare_left_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 330;
        goto try_finally_handler_179;
    }

    tmp_compare_right_20 = const_str_digest_4e2a0f28bbd43215fd0f4f4feec2aefa;
    tmp_cmp_Eq_16 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_20, tmp_compare_right_20 );
    if ( tmp_cmp_Eq_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 330;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_16 == 1)
    {
        goto branch_yes_45;
    }
    else
    {
        goto branch_no_45;
    }
    branch_yes_45:;
    tmp_called_name_46 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_update );

    if (unlikely( tmp_called_name_46 == NULL ))
    {
        tmp_called_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_update );
    }

    if ( tmp_called_name_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 986 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 331;
        goto try_finally_handler_179;
    }

    frame_module->f_lineno = 331;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_46 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 331;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_45;
    branch_no_45:;
    tmp_compare_left_21 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_21 == NULL ))
    {
        tmp_compare_left_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 332;
        goto try_finally_handler_179;
    }

    tmp_compare_right_21 = const_str_digest_65ebca787c1e00ffe7d3f40e320816e6;
    tmp_cmp_Eq_17 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_21, tmp_compare_right_21 );
    if ( tmp_cmp_Eq_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 332;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_17 == 1)
    {
        goto branch_yes_46;
    }
    else
    {
        goto branch_no_46;
    }
    branch_yes_46:;
    tmp_str_arg_31 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_str_arg_31 == NULL ))
    {
        tmp_str_arg_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_str_arg_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 333;
        goto try_finally_handler_179;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_31 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 333;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 333;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 333;
        goto try_finally_handler_179;
    }
    goto branch_end_46;
    branch_no_46:;
    tmp_compare_left_22 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_22 == NULL ))
    {
        tmp_compare_left_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 334;
        goto try_finally_handler_179;
    }

    tmp_compare_right_22 = const_str_plain_save;
    tmp_cmp_Eq_18 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_22, tmp_compare_right_22 );
    if ( tmp_cmp_Eq_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 334;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_18 == 1)
    {
        goto branch_yes_47;
    }
    else
    {
        goto branch_no_47;
    }
    branch_yes_47:;
    // Tried code
    tmp_open_filename_2 = const_str_digest_1eb2227f3fa8b83a9787c24f3380e29d;
    tmp_open_mode_2 = const_str_plain_wb;
    tmp_assign_source_219 = BUILTIN_OPEN( tmp_open_filename_2, tmp_open_mode_2, NULL );
    if ( tmp_assign_source_219 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 335;
        goto try_finally_handler_185;
    }
    {
        PyObject *old = tmp_with_2__source;
        tmp_with_2__source = tmp_assign_source_219;
        Py_XDECREF( old );
    }

    tmp_attr_source_3 = tmp_with_2__source;

    tmp_assign_source_220 = LOOKUP_SPECIAL( tmp_attr_source_3, const_str_plain___exit__ );
    if ( tmp_assign_source_220 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 335;
        goto try_finally_handler_185;
    }
    {
        PyObject *old = tmp_with_2__exit;
        tmp_with_2__exit = tmp_assign_source_220;
        Py_XDECREF( old );
    }

    tmp_attr_source_4 = tmp_with_2__source;

    tmp_called_name_47 = LOOKUP_SPECIAL( tmp_attr_source_4, const_str_plain___enter__ );
    if ( tmp_called_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 335;
        goto try_finally_handler_185;
    }
    frame_module->f_lineno = 335;
    tmp_assign_source_221 = CALL_FUNCTION_NO_ARGS( tmp_called_name_47 );
    Py_DECREF( tmp_called_name_47 );
    if ( tmp_assign_source_221 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 335;
        goto try_finally_handler_185;
    }
    {
        PyObject *old = tmp_with_2__enter;
        tmp_with_2__enter = tmp_assign_source_221;
        Py_XDECREF( old );
    }

    tmp_assign_source_222 = Py_True;
    {
        PyObject *old = tmp_with_2__indicator;
        tmp_with_2__indicator = tmp_assign_source_222;
        Py_INCREF( tmp_with_2__indicator );
        Py_XDECREF( old );
    }

    tmp_assign_source_223 = tmp_with_2__enter;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f, tmp_assign_source_223 );
    // Tried code
    // Tried block of try/except
    tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_pickle );

    if (unlikely( tmp_source_name_41 == NULL ))
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_pickle );
    }

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 158 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    tmp_called_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_dump );
    if ( tmp_called_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = PyList_New( 19 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 0, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 1, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defe );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1066 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 2, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 3, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 4, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 5, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 6, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 7, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 8, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 9, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 10, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 11, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 12, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_kills );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_kills );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1176 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 13, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 14, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 15, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 16, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1231 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 17, tmp_list_element_1 );
    tmp_list_element_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_list_element_1 == NULL ))
    {
        tmp_list_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 18, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_2 );
    tmp_kw_name_2 = PyDict_Copy( const_dict_1c77ad0e87dbf8feb3de0b9661406db1 );
    frame_module->f_lineno = 336;
    tmp_unused = CALL_FUNCTION( tmp_called_name_48, tmp_args_name_1, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_48 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 336;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( frame_module );
    }
    else if ( exception_tb->tb_frame != frame_module || exception_tb->tb_lineno != frame_module->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_module, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_23 = PyThreadState_GET()->exc_type;
    tmp_compare_right_23 = PyExc_BaseException;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_23, tmp_compare_right_23 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_finally_handler_186;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_48;
    }
    else
    {
        goto branch_no_48;
    }
    branch_yes_48:;
    tmp_assign_source_224 = Py_False;
    {
        PyObject *old = tmp_with_2__indicator;
        assert( old != NULL );
        tmp_with_2__indicator = tmp_assign_source_224;
        Py_INCREF( tmp_with_2__indicator );
        Py_DECREF( old );
    }

    tmp_called_name_49 = tmp_with_2__exit;

    tmp_args_element_name_29 = PyThreadState_GET()->exc_type;
    tmp_args_element_name_30 = PyThreadState_GET()->exc_value;
    tmp_args_element_name_31 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_87 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_49, tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31 );
    if ( tmp_cond_value_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_finally_handler_186;
    }
    tmp_cond_truth_87 = CHECK_IF_TRUE( tmp_cond_value_87 );
    if ( tmp_cond_truth_87 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_87 );


        goto try_finally_handler_186;
    }
    Py_DECREF( tmp_cond_value_87 );
    if (tmp_cond_truth_87 == 1)
    {
        goto branch_no_49;
    }
    else
    {
        goto branch_yes_49;
    }
    branch_yes_49:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (exception_tb && exception_tb->tb_frame == frame_module)     frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_186;
    branch_no_49:;
    goto branch_end_48;
    branch_no_48:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (exception_tb && exception_tb->tb_frame == frame_module)     frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_186;
    branch_end_48:;
    try_except_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_186:;
    exception_keeper_type_184 = exception_type;
    exception_keeper_value_184 = exception_value;
    exception_keeper_tb_184 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_64 = frame_module->f_lineno;
    tmp_compare_left_24 = tmp_with_2__indicator;

    tmp_compare_right_24 = Py_True;
    tmp_is_2 = ( tmp_compare_left_24 == tmp_compare_right_24 );
    if (tmp_is_2)
    {
        goto branch_yes_50;
    }
    else
    {
        goto branch_no_50;
    }
    branch_yes_50:;
    tmp_called_name_50 = tmp_with_2__exit;

    tmp_call_arg_element_21 = Py_None;
    tmp_call_arg_element_22 = Py_None;
    tmp_call_arg_element_23 = Py_None;
    frame_module->f_lineno = 336;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_50, tmp_call_arg_element_21, tmp_call_arg_element_22, tmp_call_arg_element_23 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 336;
        goto try_finally_handler_error_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_50:;
    frame_module->f_lineno = tmp_tried_lineno_64;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_184 != NULL )
    {
        exception_type = exception_keeper_type_184;
        exception_value = exception_keeper_value_184;
        exception_tb = exception_keeper_tb_184;

        goto try_finally_handler_185;
    }

    goto finally_end_184;
    try_finally_handler_error_2:;
    Py_XDECREF( exception_keeper_type_184 );exception_keeper_type_184 = NULL;
    Py_XDECREF( exception_keeper_value_184 );exception_keeper_value_184 = NULL;
    Py_XDECREF( exception_keeper_tb_184 );exception_keeper_tb_184 = NULL;
    goto try_finally_handler_185;
    finally_end_184:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_185:;
    exception_keeper_type_185 = exception_type;
    exception_keeper_value_185 = exception_value;
    exception_keeper_tb_185 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_65 = frame_module->f_lineno;
    Py_XDECREF( tmp_with_2__source );
    tmp_with_2__source = NULL;

    Py_XDECREF( tmp_with_2__enter );
    tmp_with_2__enter = NULL;

    Py_XDECREF( tmp_with_2__exit );
    tmp_with_2__exit = NULL;

    Py_XDECREF( tmp_with_2__indicator );
    tmp_with_2__indicator = NULL;

    frame_module->f_lineno = tmp_tried_lineno_65;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_185 != NULL )
    {
        exception_type = exception_keeper_type_185;
        exception_value = exception_keeper_value_185;
        exception_tb = exception_keeper_tb_185;

        goto try_finally_handler_179;
    }

    goto finally_end_185;
    finally_end_185:;
    tmp_source_name_42 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f );

    if (unlikely( tmp_source_name_42 == NULL ))
    {
        tmp_source_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f );
    }

    if ( tmp_source_name_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 337;
        goto try_finally_handler_179;
    }

    tmp_called_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_close );
    if ( tmp_called_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 337;
        goto try_finally_handler_179;
    }
    frame_module->f_lineno = 337;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_51 );
    Py_DECREF( tmp_called_name_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 337;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_55 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_55 == NULL ))
    {
        tmp_subscribed_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_55 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_55 = const_str_plain_cyan;
    tmp_left_name_76 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_55, tmp_subscript_name_55 );
    if ( tmp_left_name_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    tmp_right_name_75 = const_str_digest_bec317d58a8302e2aaf523e28f100710;
    tmp_left_name_75 = BINARY_OPERATION_ADD( tmp_left_name_76, tmp_right_name_75 );
    Py_DECREF( tmp_left_name_76 );
    if ( tmp_left_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    tmp_subscribed_name_56 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_56 == NULL ))
    {
        tmp_subscribed_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_56 == NULL )
    {
        Py_DECREF( tmp_left_name_75 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_56 = const_str_plain_off;
    tmp_right_name_76 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_56, tmp_subscript_name_56 );
    if ( tmp_right_name_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_75 );

        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    tmp_str_arg_32 = BINARY_OPERATION_ADD( tmp_left_name_75, tmp_right_name_76 );
    Py_DECREF( tmp_left_name_75 );
    Py_DECREF( tmp_right_name_76 );
    if ( tmp_str_arg_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_32 );
    Py_DECREF( tmp_str_arg_32 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 338;
        goto try_finally_handler_179;
    }
    goto branch_end_47;
    branch_no_47:;
    tmp_compare_left_25 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_25 == NULL ))
    {
        tmp_compare_left_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 339;
        goto try_finally_handler_179;
    }

    tmp_compare_right_25 = const_str_plain_load;
    tmp_cmp_Eq_19 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_25, tmp_compare_right_25 );
    if ( tmp_cmp_Eq_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 339;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_19 == 1)
    {
        goto branch_yes_51;
    }
    else
    {
        goto branch_no_51;
    }
    branch_yes_51:;
    // Tried code
    tmp_open_filename_3 = const_str_digest_1eb2227f3fa8b83a9787c24f3380e29d;
    tmp_open_mode_3 = const_str_plain_rb;
    tmp_assign_source_225 = BUILTIN_OPEN( tmp_open_filename_3, tmp_open_mode_3, NULL );
    if ( tmp_assign_source_225 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 340;
        goto try_finally_handler_187;
    }
    {
        PyObject *old = tmp_with_3__source;
        tmp_with_3__source = tmp_assign_source_225;
        Py_XDECREF( old );
    }

    tmp_attr_source_5 = tmp_with_3__source;

    tmp_assign_source_226 = LOOKUP_SPECIAL( tmp_attr_source_5, const_str_plain___exit__ );
    if ( tmp_assign_source_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 340;
        goto try_finally_handler_187;
    }
    {
        PyObject *old = tmp_with_3__exit;
        tmp_with_3__exit = tmp_assign_source_226;
        Py_XDECREF( old );
    }

    tmp_attr_source_6 = tmp_with_3__source;

    tmp_called_name_52 = LOOKUP_SPECIAL( tmp_attr_source_6, const_str_plain___enter__ );
    if ( tmp_called_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 340;
        goto try_finally_handler_187;
    }
    frame_module->f_lineno = 340;
    tmp_assign_source_227 = CALL_FUNCTION_NO_ARGS( tmp_called_name_52 );
    Py_DECREF( tmp_called_name_52 );
    if ( tmp_assign_source_227 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 340;
        goto try_finally_handler_187;
    }
    {
        PyObject *old = tmp_with_3__enter;
        tmp_with_3__enter = tmp_assign_source_227;
        Py_XDECREF( old );
    }

    tmp_assign_source_228 = Py_True;
    {
        PyObject *old = tmp_with_3__indicator;
        tmp_with_3__indicator = tmp_assign_source_228;
        Py_INCREF( tmp_with_3__indicator );
        Py_XDECREF( old );
    }

    tmp_assign_source_229 = tmp_with_3__enter;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f, tmp_assign_source_229 );
    // Tried code
    // Tried block of try/except
    // Tried code
    tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_pickle );

    if (unlikely( tmp_source_name_43 == NULL ))
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_pickle );
    }

    if ( tmp_source_name_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 158 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }

    tmp_called_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_load );
    if ( tmp_called_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    tmp_args_element_name_32 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f );

    if (unlikely( tmp_args_element_name_32 == NULL ))
    {
        tmp_args_element_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f );
    }

    if ( tmp_args_element_name_32 == NULL )
    {
        Py_DECREF( tmp_called_name_53 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }

    frame_module->f_lineno = 341;
    tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_53, tmp_args_element_name_32 );
    Py_DECREF( tmp_called_name_53 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    tmp_assign_source_230 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_230 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_230;
        Py_XDECREF( old );
    }

    tmp_unpack_20 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_231 = UNPACK_NEXT( tmp_unpack_20, 0 );
    if ( tmp_assign_source_231 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_231;
        Py_XDECREF( old );
    }

    tmp_unpack_21 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_232 = UNPACK_NEXT( tmp_unpack_21, 1 );
    if ( tmp_assign_source_232 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_232;
        Py_XDECREF( old );
    }

    tmp_unpack_22 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_233 = UNPACK_NEXT( tmp_unpack_22, 2 );
    if ( tmp_assign_source_233 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_3;
        tmp_tuple_unpack_2__element_3 = tmp_assign_source_233;
        Py_XDECREF( old );
    }

    tmp_unpack_23 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_234 = UNPACK_NEXT( tmp_unpack_23, 3 );
    if ( tmp_assign_source_234 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_4;
        tmp_tuple_unpack_2__element_4 = tmp_assign_source_234;
        Py_XDECREF( old );
    }

    tmp_unpack_24 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_235 = UNPACK_NEXT( tmp_unpack_24, 4 );
    if ( tmp_assign_source_235 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_5;
        tmp_tuple_unpack_2__element_5 = tmp_assign_source_235;
        Py_XDECREF( old );
    }

    tmp_unpack_25 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_236 = UNPACK_NEXT( tmp_unpack_25, 5 );
    if ( tmp_assign_source_236 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_6;
        tmp_tuple_unpack_2__element_6 = tmp_assign_source_236;
        Py_XDECREF( old );
    }

    tmp_unpack_26 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_237 = UNPACK_NEXT( tmp_unpack_26, 6 );
    if ( tmp_assign_source_237 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_7;
        tmp_tuple_unpack_2__element_7 = tmp_assign_source_237;
        Py_XDECREF( old );
    }

    tmp_unpack_27 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_238 = UNPACK_NEXT( tmp_unpack_27, 7 );
    if ( tmp_assign_source_238 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_8;
        tmp_tuple_unpack_2__element_8 = tmp_assign_source_238;
        Py_XDECREF( old );
    }

    tmp_unpack_28 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_239 = UNPACK_NEXT( tmp_unpack_28, 8 );
    if ( tmp_assign_source_239 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_9;
        tmp_tuple_unpack_2__element_9 = tmp_assign_source_239;
        Py_XDECREF( old );
    }

    tmp_unpack_29 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_240 = UNPACK_NEXT( tmp_unpack_29, 9 );
    if ( tmp_assign_source_240 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_10;
        tmp_tuple_unpack_2__element_10 = tmp_assign_source_240;
        Py_XDECREF( old );
    }

    tmp_unpack_30 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_241 = UNPACK_NEXT( tmp_unpack_30, 10 );
    if ( tmp_assign_source_241 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_11;
        tmp_tuple_unpack_2__element_11 = tmp_assign_source_241;
        Py_XDECREF( old );
    }

    tmp_unpack_31 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_242 = UNPACK_NEXT( tmp_unpack_31, 11 );
    if ( tmp_assign_source_242 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_12;
        tmp_tuple_unpack_2__element_12 = tmp_assign_source_242;
        Py_XDECREF( old );
    }

    tmp_unpack_32 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_243 = UNPACK_NEXT( tmp_unpack_32, 12 );
    if ( tmp_assign_source_243 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_13;
        tmp_tuple_unpack_2__element_13 = tmp_assign_source_243;
        Py_XDECREF( old );
    }

    tmp_unpack_33 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_244 = UNPACK_NEXT( tmp_unpack_33, 13 );
    if ( tmp_assign_source_244 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_14;
        tmp_tuple_unpack_2__element_14 = tmp_assign_source_244;
        Py_XDECREF( old );
    }

    tmp_unpack_34 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_245 = UNPACK_NEXT( tmp_unpack_34, 14 );
    if ( tmp_assign_source_245 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_15;
        tmp_tuple_unpack_2__element_15 = tmp_assign_source_245;
        Py_XDECREF( old );
    }

    tmp_unpack_35 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_246 = UNPACK_NEXT( tmp_unpack_35, 15 );
    if ( tmp_assign_source_246 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_16;
        tmp_tuple_unpack_2__element_16 = tmp_assign_source_246;
        Py_XDECREF( old );
    }

    tmp_unpack_36 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_247 = UNPACK_NEXT( tmp_unpack_36, 16 );
    if ( tmp_assign_source_247 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_17;
        tmp_tuple_unpack_2__element_17 = tmp_assign_source_247;
        Py_XDECREF( old );
    }

    tmp_unpack_37 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_248 = UNPACK_NEXT( tmp_unpack_37, 17 );
    if ( tmp_assign_source_248 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_18;
        tmp_tuple_unpack_2__element_18 = tmp_assign_source_248;
        Py_XDECREF( old );
    }

    tmp_unpack_38 = tmp_tuple_unpack_2__source_iter;

    tmp_assign_source_249 = UNPACK_NEXT( tmp_unpack_38, 18 );
    if ( tmp_assign_source_249 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        frame_module->f_lineno = 341;
        goto try_finally_handler_189;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_19;
        tmp_tuple_unpack_2__element_19 = tmp_assign_source_249;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_finally_handler_189;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 19)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_finally_handler_189;
    }
    tmp_assign_source_250 = tmp_tuple_unpack_2__element_1;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_250 );
    tmp_assign_source_251 = tmp_tuple_unpack_2__element_2;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_251 );
    tmp_assign_source_252 = tmp_tuple_unpack_2__element_3;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_252 );
    tmp_assign_source_253 = tmp_tuple_unpack_2__element_4;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_253 );
    tmp_assign_source_254 = tmp_tuple_unpack_2__element_5;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory, tmp_assign_source_254 );
    tmp_assign_source_255 = tmp_tuple_unpack_2__element_6;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells, tmp_assign_source_255 );
    tmp_assign_source_256 = tmp_tuple_unpack_2__element_7;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing, tmp_assign_source_256 );
    tmp_assign_source_257 = tmp_tuple_unpack_2__element_8;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_257 );
    tmp_assign_source_258 = tmp_tuple_unpack_2__element_9;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_258 );
    tmp_assign_source_259 = tmp_tuple_unpack_2__element_10;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_259 );
    tmp_assign_source_260 = tmp_tuple_unpack_2__element_11;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_260 );
    tmp_assign_source_261 = tmp_tuple_unpack_2__element_12;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_261 );
    tmp_assign_source_262 = tmp_tuple_unpack_2__element_13;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers, tmp_assign_source_262 );
    tmp_assign_source_263 = tmp_tuple_unpack_2__element_14;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_kills, tmp_assign_source_263 );
    tmp_assign_source_264 = tmp_tuple_unpack_2__element_15;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_264 );
    tmp_assign_source_265 = tmp_tuple_unpack_2__element_16;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor, tmp_assign_source_265 );
    tmp_assign_source_266 = tmp_tuple_unpack_2__element_17;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon, tmp_assign_source_266 );
    tmp_assign_source_267 = tmp_tuple_unpack_2__element_18;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_267 );
    tmp_assign_source_268 = tmp_tuple_unpack_2__element_19;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_268 );
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_189:;
    exception_keeper_type_186 = exception_type;
    exception_keeper_value_186 = exception_value;
    exception_keeper_tb_186 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_66 = frame_module->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_3 );
    tmp_tuple_unpack_2__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_4 );
    tmp_tuple_unpack_2__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_5 );
    tmp_tuple_unpack_2__element_5 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_6 );
    tmp_tuple_unpack_2__element_6 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_7 );
    tmp_tuple_unpack_2__element_7 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_8 );
    tmp_tuple_unpack_2__element_8 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_9 );
    tmp_tuple_unpack_2__element_9 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_10 );
    tmp_tuple_unpack_2__element_10 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_11 );
    tmp_tuple_unpack_2__element_11 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_12 );
    tmp_tuple_unpack_2__element_12 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_13 );
    tmp_tuple_unpack_2__element_13 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_14 );
    tmp_tuple_unpack_2__element_14 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_15 );
    tmp_tuple_unpack_2__element_15 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_16 );
    tmp_tuple_unpack_2__element_16 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_17 );
    tmp_tuple_unpack_2__element_17 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_18 );
    tmp_tuple_unpack_2__element_18 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_19 );
    tmp_tuple_unpack_2__element_19 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_66;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_186 != NULL )
    {
        exception_type = exception_keeper_type_186;
        exception_value = exception_keeper_value_186;
        exception_tb = exception_keeper_tb_186;

        goto try_except_handler_3;
    }

    goto finally_end_186;
    finally_end_186:;
    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( frame_module );
    }
    else if ( exception_tb->tb_frame != frame_module || exception_tb->tb_lineno != frame_module->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_module, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_26 = PyThreadState_GET()->exc_type;
    tmp_compare_right_26 = PyExc_BaseException;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_26, tmp_compare_right_26 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_finally_handler_188;
    }
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_yes_52;
    }
    else
    {
        goto branch_no_52;
    }
    branch_yes_52:;
    tmp_assign_source_269 = Py_False;
    {
        PyObject *old = tmp_with_3__indicator;
        assert( old != NULL );
        tmp_with_3__indicator = tmp_assign_source_269;
        Py_INCREF( tmp_with_3__indicator );
        Py_DECREF( old );
    }

    tmp_called_name_54 = tmp_with_3__exit;

    tmp_args_element_name_33 = PyThreadState_GET()->exc_type;
    tmp_args_element_name_34 = PyThreadState_GET()->exc_value;
    tmp_args_element_name_35 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_88 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_54, tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35 );
    if ( tmp_cond_value_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );



        goto try_finally_handler_188;
    }
    tmp_cond_truth_88 = CHECK_IF_TRUE( tmp_cond_value_88 );
    if ( tmp_cond_truth_88 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_88 );


        goto try_finally_handler_188;
    }
    Py_DECREF( tmp_cond_value_88 );
    if (tmp_cond_truth_88 == 1)
    {
        goto branch_no_53;
    }
    else
    {
        goto branch_yes_53;
    }
    branch_yes_53:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (exception_tb && exception_tb->tb_frame == frame_module)     frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_188;
    branch_no_53:;
    goto branch_end_52;
    branch_no_52:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (exception_tb && exception_tb->tb_frame == frame_module)     frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_188;
    branch_end_52:;
    try_except_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_188:;
    exception_keeper_type_187 = exception_type;
    exception_keeper_value_187 = exception_value;
    exception_keeper_tb_187 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_67 = frame_module->f_lineno;
    tmp_compare_left_27 = tmp_with_3__indicator;

    tmp_compare_right_27 = Py_True;
    tmp_is_3 = ( tmp_compare_left_27 == tmp_compare_right_27 );
    if (tmp_is_3)
    {
        goto branch_yes_54;
    }
    else
    {
        goto branch_no_54;
    }
    branch_yes_54:;
    tmp_called_name_55 = tmp_with_3__exit;

    tmp_call_arg_element_24 = Py_None;
    tmp_call_arg_element_25 = Py_None;
    tmp_call_arg_element_26 = Py_None;
    frame_module->f_lineno = 341;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_55, tmp_call_arg_element_24, tmp_call_arg_element_25, tmp_call_arg_element_26 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 341;
        goto try_finally_handler_error_3;
    }
    Py_DECREF( tmp_unused );
    branch_no_54:;
    frame_module->f_lineno = tmp_tried_lineno_67;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_187 != NULL )
    {
        exception_type = exception_keeper_type_187;
        exception_value = exception_keeper_value_187;
        exception_tb = exception_keeper_tb_187;

        goto try_finally_handler_187;
    }

    goto finally_end_187;
    try_finally_handler_error_3:;
    Py_XDECREF( exception_keeper_type_187 );exception_keeper_type_187 = NULL;
    Py_XDECREF( exception_keeper_value_187 );exception_keeper_value_187 = NULL;
    Py_XDECREF( exception_keeper_tb_187 );exception_keeper_tb_187 = NULL;
    goto try_finally_handler_187;
    finally_end_187:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_187:;
    exception_keeper_type_188 = exception_type;
    exception_keeper_value_188 = exception_value;
    exception_keeper_tb_188 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_68 = frame_module->f_lineno;
    Py_XDECREF( tmp_with_3__source );
    tmp_with_3__source = NULL;

    Py_XDECREF( tmp_with_3__enter );
    tmp_with_3__enter = NULL;

    Py_XDECREF( tmp_with_3__exit );
    tmp_with_3__exit = NULL;

    Py_XDECREF( tmp_with_3__indicator );
    tmp_with_3__indicator = NULL;

    frame_module->f_lineno = tmp_tried_lineno_68;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_188 != NULL )
    {
        exception_type = exception_keeper_type_188;
        exception_value = exception_keeper_value_188;
        exception_tb = exception_keeper_tb_188;

        goto try_finally_handler_179;
    }

    goto finally_end_188;
    finally_end_188:;
    tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_f );

    if (unlikely( tmp_source_name_44 == NULL ))
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f );
    }

    if ( tmp_source_name_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 342;
        goto try_finally_handler_179;
    }

    tmp_called_name_56 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_close );
    if ( tmp_called_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 342;
        goto try_finally_handler_179;
    }
    frame_module->f_lineno = 342;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_56 );
    Py_DECREF( tmp_called_name_56 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 342;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_45 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_45 == NULL ))
    {
        tmp_source_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 343;
        goto try_finally_handler_179;
    }

    tmp_called_name_57 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_system );
    if ( tmp_called_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 343;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_27 = const_str_plain_clear;
    frame_module->f_lineno = 343;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_57, tmp_call_arg_element_27 );
    Py_DECREF( tmp_called_name_57 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 343;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_subscribed_name_57 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_57 == NULL ))
    {
        tmp_subscribed_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_57 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_57 = const_str_plain_cyan;
    tmp_left_name_78 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_57, tmp_subscript_name_57 );
    if ( tmp_left_name_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    tmp_right_name_77 = const_str_digest_24915685862d2d9353b95d1b6fcb334a;
    tmp_left_name_77 = BINARY_OPERATION_ADD( tmp_left_name_78, tmp_right_name_77 );
    Py_DECREF( tmp_left_name_78 );
    if ( tmp_left_name_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    tmp_subscribed_name_58 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_58 == NULL ))
    {
        tmp_subscribed_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_58 == NULL )
    {
        Py_DECREF( tmp_left_name_77 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_58 = const_str_plain_off;
    tmp_right_name_78 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_58, tmp_subscript_name_58 );
    if ( tmp_right_name_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_77 );

        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    tmp_str_arg_33 = BINARY_OPERATION_ADD( tmp_left_name_77, tmp_right_name_78 );
    Py_DECREF( tmp_left_name_77 );
    Py_DECREF( tmp_right_name_78 );
    if ( tmp_str_arg_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_33 );
    Py_DECREF( tmp_str_arg_33 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 344;
        goto try_finally_handler_179;
    }
    tmp_str_arg_34 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_34 == NULL ))
    {
        tmp_str_arg_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 345;
        goto try_finally_handler_179;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_34 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 345;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 345;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 345;
        goto try_finally_handler_179;
    }
    goto branch_end_51;
    branch_no_51:;
    tmp_compare_left_28 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_28 == NULL ))
    {
        tmp_compare_left_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 346;
        goto try_finally_handler_179;
    }

    tmp_compare_right_28 = const_str_plain_quit;
    tmp_cmp_Eq_20 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_28, tmp_compare_right_28 );
    if ( tmp_cmp_Eq_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 346;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_20 == 1)
    {
        goto branch_yes_55;
    }
    else
    {
        goto branch_no_55;
    }
    branch_yes_55:;
    tmp_subscribed_name_59 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_59 == NULL ))
    {
        tmp_subscribed_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_59 = const_str_plain_blue;
    tmp_left_name_80 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_59, tmp_subscript_name_59 );
    if ( tmp_left_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    tmp_right_name_79 = const_str_digest_b908368bba0f9d565be5e24877586d55;
    tmp_left_name_79 = BINARY_OPERATION_ADD( tmp_left_name_80, tmp_right_name_79 );
    Py_DECREF( tmp_left_name_80 );
    if ( tmp_left_name_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    tmp_subscribed_name_60 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_60 == NULL ))
    {
        tmp_subscribed_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_60 == NULL )
    {
        Py_DECREF( tmp_left_name_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_60 = const_str_plain_off;
    tmp_right_name_80 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_60, tmp_subscript_name_60 );
    if ( tmp_right_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_79 );

        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    tmp_str_arg_35 = BINARY_OPERATION_ADD( tmp_left_name_79, tmp_right_name_80 );
    Py_DECREF( tmp_left_name_79 );
    Py_DECREF( tmp_right_name_80 );
    if ( tmp_str_arg_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_35 );
    Py_DECREF( tmp_str_arg_35 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 347;
        goto try_finally_handler_179;
    }
    tmp_called_name_58 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 348;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_28 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 348;
    tmp_assign_source_270 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_58, tmp_call_arg_element_28 );
    if ( tmp_assign_source_270 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 348;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_quit_response, tmp_assign_source_270 );
    tmp_compare_left_29 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_quit_response );

    if (unlikely( tmp_compare_left_29 == NULL ))
    {
        tmp_compare_left_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_quit_response );
    }

    if ( tmp_compare_left_29 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1324 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 349;
        goto try_finally_handler_179;
    }

    tmp_compare_right_29 = const_str_plain_yes;
    tmp_cmp_Eq_21 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_29, tmp_compare_right_29 );
    if ( tmp_cmp_Eq_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 349;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_21 == 1)
    {
        goto branch_yes_56;
    }
    else
    {
        goto branch_no_56;
    }
    branch_yes_56:;
    tmp_called_name_59 = LOOKUP_BUILTIN( const_str_plain_quit );
    if ( tmp_called_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 350;
        goto try_finally_handler_179;
    }
    frame_module->f_lineno = 350;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_59 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 350;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_56;
    branch_no_56:;
    tmp_assign_source_271 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skip, tmp_assign_source_271 );
    branch_end_56:;
    goto branch_end_55;
    branch_no_55:;
    tmp_compare_left_30 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_30 == NULL ))
    {
        tmp_compare_left_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 354;
        goto try_finally_handler_179;
    }

    tmp_compare_right_30 = const_str_plain_OP420;
    tmp_cmp_Eq_22 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_30, tmp_compare_right_30 );
    if ( tmp_cmp_Eq_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 354;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_22 == 1)
    {
        goto branch_yes_57;
    }
    else
    {
        goto branch_no_57;
    }
    branch_yes_57:;
    tmp_assign_source_272 = const_int_pos_7;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon, tmp_assign_source_272 );
    tmp_assign_source_273 = const_int_pos_7;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor, tmp_assign_source_273 );
    tmp_assign_source_274 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells, tmp_assign_source_274 );
    tmp_assign_source_275 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing, tmp_assign_source_275 );
    tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_source_name_46 == NULL ))
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_source_name_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 359;
        goto try_finally_handler_179;
    }

    tmp_called_name_60 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_append );
    if ( tmp_called_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 359;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_29 = const_str_plain_firebolt;
    frame_module->f_lineno = 359;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_60, tmp_call_arg_element_29 );
    Py_DECREF( tmp_called_name_60 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 359;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_source_name_47 == NULL ))
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_source_name_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 360;
        goto try_finally_handler_179;
    }

    tmp_called_name_61 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_append );
    if ( tmp_called_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 360;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_30 = const_str_plain_frost;
    frame_module->f_lineno = 360;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_61, tmp_call_arg_element_30 );
    Py_DECREF( tmp_called_name_61 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 360;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_source_name_48 == NULL ))
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_source_name_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 361;
        goto try_finally_handler_179;
    }

    tmp_called_name_62 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_append );
    if ( tmp_called_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 361;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_31 = const_str_plain_poison;
    frame_module->f_lineno = 361;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_62, tmp_call_arg_element_31 );
    Py_DECREF( tmp_called_name_62 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 361;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_source_name_49 == NULL ))
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_source_name_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 362;
        goto try_finally_handler_179;
    }

    tmp_called_name_63 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_append );
    if ( tmp_called_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 362;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_32 = const_str_digest_de49972fa23676d1d83ded073c6b3042;
    frame_module->f_lineno = 362;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_63, tmp_call_arg_element_32 );
    Py_DECREF( tmp_called_name_63 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 362;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_50 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_source_name_50 == NULL ))
    {
        tmp_source_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_source_name_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 363;
        goto try_finally_handler_179;
    }

    tmp_called_name_64 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_append );
    if ( tmp_called_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 363;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_33 = const_str_digest_c60ab00efa2cacc33283c89f980f8268;
    frame_module->f_lineno = 363;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_64, tmp_call_arg_element_33 );
    Py_DECREF( tmp_called_name_64 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 363;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_51 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_source_name_51 == NULL ))
    {
        tmp_source_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_source_name_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 364;
        goto try_finally_handler_179;
    }

    tmp_called_name_65 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_append );
    if ( tmp_called_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 364;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_34 = const_str_digest_2231bf4b15759c5a18ed9e626671dce9;
    frame_module->f_lineno = 364;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_65, tmp_call_arg_element_34 );
    Py_DECREF( tmp_called_name_65 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 364;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_source_name_52 == NULL ))
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_source_name_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 365;
        goto try_finally_handler_179;
    }

    tmp_called_name_66 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_append );
    if ( tmp_called_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 365;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_35 = const_str_digest_e846f99d2ba341a3d02b4f6876511a41;
    frame_module->f_lineno = 365;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_66, tmp_call_arg_element_35 );
    Py_DECREF( tmp_called_name_66 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 365;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_53 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_source_name_53 == NULL ))
    {
        tmp_source_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_source_name_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 366;
        goto try_finally_handler_179;
    }

    tmp_called_name_67 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_append );
    if ( tmp_called_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 366;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_36 = const_str_digest_f6ab6ba6ab0226399bff76da6e88858f;
    frame_module->f_lineno = 366;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_67, tmp_call_arg_element_36 );
    Py_DECREF( tmp_called_name_67 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 366;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_57;
    branch_no_57:;
    tmp_compare_left_31 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_31 == NULL ))
    {
        tmp_compare_left_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 368;
        goto try_finally_handler_179;
    }

    tmp_compare_right_31 = const_str_plain_etime;
    tmp_cmp_Eq_23 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_31, tmp_compare_right_31 );
    if ( tmp_cmp_Eq_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 368;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_23 == 1)
    {
        goto branch_yes_58;
    }
    else
    {
        goto branch_no_58;
    }
    branch_yes_58:;
    tmp_str_arg_36 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter );

    if (unlikely( tmp_str_arg_36 == NULL ))
    {
        tmp_str_arg_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter );
    }

    if ( tmp_str_arg_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1231 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 369;
        goto try_finally_handler_179;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_36 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 369;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 369;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 369;
        goto try_finally_handler_179;
    }
    tmp_str_arg_37 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_str_arg_37 == NULL ))
    {
        tmp_str_arg_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_str_arg_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 370;
        goto try_finally_handler_179;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_37 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 370;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 370;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 370;
        goto try_finally_handler_179;
    }
    goto branch_end_58;
    branch_no_58:;
    tmp_compare_left_32 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_32 == NULL ))
    {
        tmp_compare_left_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_32 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 371;
        goto try_finally_handler_179;
    }

    tmp_compare_right_32 = const_str_plain_spells;
    tmp_cmp_Eq_24 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_32, tmp_compare_right_32 );
    if ( tmp_cmp_Eq_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 371;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_24 == 1)
    {
        goto branch_yes_59;
    }
    else
    {
        goto branch_no_59;
    }
    branch_yes_59:;
    tmp_source_name_54 = const_str_newline;
    tmp_called_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_join );
    if ( tmp_called_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 372;
        goto try_finally_handler_179;
    }
    tmp_args_element_name_36 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_args_element_name_36 == NULL ))
    {
        tmp_args_element_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_args_element_name_36 == NULL )
    {
        Py_DECREF( tmp_called_name_68 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 372;
        goto try_finally_handler_179;
    }

    frame_module->f_lineno = 372;
    tmp_str_arg_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_68, tmp_args_element_name_36 );
    Py_DECREF( tmp_called_name_68 );
    if ( tmp_str_arg_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 372;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_38 );
    Py_DECREF( tmp_str_arg_38 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 372;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 372;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 372;
        goto try_finally_handler_179;
    }
    goto branch_end_59;
    branch_no_59:;
    tmp_compare_left_33 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_33 == NULL ))
    {
        tmp_compare_left_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_33 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 373;
        goto try_finally_handler_179;
    }

    tmp_compare_right_33 = const_str_plain_heal;
    tmp_cmp_Eq_25 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_33, tmp_compare_right_33 );
    if ( tmp_cmp_Eq_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 373;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_25 == 1)
    {
        goto branch_yes_60;
    }
    else
    {
        goto branch_no_60;
    }
    branch_yes_60:;
    tmp_left_name_81 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_left_name_81 == NULL ))
    {
        tmp_left_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_left_name_81 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }

    tmp_left_name_83 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_83 == NULL ))
    {
        tmp_left_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_83 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }

    tmp_right_name_82 = const_int_pos_2;
    tmp_left_name_82 = BINARY_OPERATION_DIV( tmp_left_name_83, tmp_right_name_82 );
    if ( tmp_left_name_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }
    tmp_source_name_55 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_55 == NULL ))
    {
        tmp_source_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_55 == NULL )
    {
        Py_DECREF( tmp_left_name_82 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }

    tmp_called_name_69 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_randint );
    if ( tmp_called_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_82 );

        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_37 = const_int_pos_1;
    tmp_call_arg_element_38 = const_int_pos_2;
    frame_module->f_lineno = 375;
    tmp_right_name_83 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_69, tmp_call_arg_element_37, tmp_call_arg_element_38 );
    Py_DECREF( tmp_called_name_69 );
    if ( tmp_right_name_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_82 );

        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }
    tmp_right_name_81 = BINARY_OPERATION_MUL( tmp_left_name_82, tmp_right_name_83 );
    Py_DECREF( tmp_left_name_82 );
    Py_DECREF( tmp_right_name_83 );
    if ( tmp_right_name_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }
    tmp_assign_source_276 = BINARY_OPERATION_ADD( tmp_left_name_81, tmp_right_name_81 );
    Py_DECREF( tmp_right_name_81 );
    if ( tmp_assign_source_276 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 375;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp_heal, tmp_assign_source_276 );
    tmp_left_name_84 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_left_name_84 == NULL ))
    {
        tmp_left_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_left_name_84 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }

    tmp_left_name_86 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_86 == NULL ))
    {
        tmp_left_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }

    tmp_right_name_85 = const_int_pos_4;
    tmp_left_name_85 = BINARY_OPERATION_DIV( tmp_left_name_86, tmp_right_name_85 );
    if ( tmp_left_name_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_56 == NULL )
    {
        Py_DECREF( tmp_left_name_85 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }

    tmp_called_name_70 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_randint );
    if ( tmp_called_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_85 );

        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_39 = const_int_pos_1;
    tmp_call_arg_element_40 = const_int_pos_2;
    frame_module->f_lineno = 376;
    tmp_right_name_86 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_70, tmp_call_arg_element_39, tmp_call_arg_element_40 );
    Py_DECREF( tmp_called_name_70 );
    if ( tmp_right_name_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_85 );

        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }
    tmp_right_name_84 = BINARY_OPERATION_MUL( tmp_left_name_85, tmp_right_name_86 );
    Py_DECREF( tmp_left_name_85 );
    Py_DECREF( tmp_right_name_86 );
    if ( tmp_right_name_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }
    tmp_assign_source_277 = BINARY_OPERATION_ADD( tmp_left_name_84, tmp_right_name_84 );
    Py_DECREF( tmp_right_name_84 );
    if ( tmp_assign_source_277 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 376;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana_heal, tmp_assign_source_277 );
    tmp_left_name_87 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy );

    if (unlikely( tmp_left_name_87 == NULL ))
    {
        tmp_left_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_energy );
    }

    if ( tmp_left_name_87 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 952 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }

    tmp_left_name_89 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_energy );

    if (unlikely( tmp_left_name_89 == NULL ))
    {
        tmp_left_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_energy );
    }

    if ( tmp_left_name_89 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1387 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }

    tmp_right_name_88 = const_int_pos_4;
    tmp_left_name_88 = BINARY_OPERATION_DIV( tmp_left_name_89, tmp_right_name_88 );
    if ( tmp_left_name_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }
    tmp_source_name_57 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_57 == NULL ))
    {
        tmp_source_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_57 == NULL )
    {
        Py_DECREF( tmp_left_name_88 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }

    tmp_called_name_71 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_randint );
    if ( tmp_called_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_88 );

        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_41 = const_int_pos_1;
    tmp_call_arg_element_42 = const_int_pos_2;
    frame_module->f_lineno = 377;
    tmp_right_name_89 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_71, tmp_call_arg_element_41, tmp_call_arg_element_42 );
    Py_DECREF( tmp_called_name_71 );
    if ( tmp_right_name_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_88 );

        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }
    tmp_right_name_87 = BINARY_OPERATION_MUL( tmp_left_name_88, tmp_right_name_89 );
    Py_DECREF( tmp_left_name_88 );
    Py_DECREF( tmp_right_name_89 );
    if ( tmp_right_name_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }
    tmp_assign_source_278 = BINARY_OPERATION_ADD( tmp_left_name_87, tmp_right_name_87 );
    Py_DECREF( tmp_right_name_87 );
    if ( tmp_assign_source_278 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 377;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_heal, tmp_assign_source_278 );
    tmp_left_name_90 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_left_name_90 == NULL ))
    {
        tmp_left_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_left_name_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 378;
        goto try_finally_handler_179;
    }

    tmp_right_name_90 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp_heal );

    if (unlikely( tmp_right_name_90 == NULL ))
    {
        tmp_right_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp_heal );
    }

    if ( tmp_right_name_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1419 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 378;
        goto try_finally_handler_179;
    }

    tmp_assign_source_279 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_90, tmp_right_name_90 );
    if ( tmp_assign_source_279 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 378;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_279 );
    tmp_left_name_91 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_left_name_91 == NULL ))
    {
        tmp_left_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_left_name_91 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 379;
        goto try_finally_handler_179;
    }

    tmp_right_name_91 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana_heal );

    if (unlikely( tmp_right_name_91 == NULL ))
    {
        tmp_right_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana_heal );
    }

    if ( tmp_right_name_91 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1448 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 379;
        goto try_finally_handler_179;
    }

    tmp_assign_source_280 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_91, tmp_right_name_91 );
    if ( tmp_assign_source_280 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 379;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_280 );
    tmp_left_name_92 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy );

    if (unlikely( tmp_left_name_92 == NULL ))
    {
        tmp_left_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_energy );
    }

    if ( tmp_left_name_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 952 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 380;
        goto try_finally_handler_179;
    }

    tmp_right_name_92 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_heal );

    if (unlikely( tmp_right_name_92 == NULL ))
    {
        tmp_right_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_heal );
    }

    if ( tmp_right_name_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1479 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 380;
        goto try_finally_handler_179;
    }

    tmp_assign_source_281 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_92, tmp_right_name_92 );
    if ( tmp_assign_source_281 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 380;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy, tmp_assign_source_281 );
    tmp_subscribed_name_61 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_61 == NULL ))
    {
        tmp_subscribed_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_61 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_61 = const_str_plain_darkblue;
    tmp_left_name_94 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_61, tmp_subscript_name_61 );
    if ( tmp_left_name_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    tmp_left_name_95 = const_str_digest_8ac0897fde4da29dbbc185274e3ed7e2;
    tmp_right_name_94 = PyTuple_New( 3 );
    tmp_tuple_element_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp_heal );

    if (unlikely( tmp_tuple_element_3 == NULL ))
    {
        tmp_tuple_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp_heal );
    }

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_left_name_94 );
        Py_DECREF( tmp_right_name_94 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1419 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_right_name_94, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana_heal );

    if (unlikely( tmp_tuple_element_3 == NULL ))
    {
        tmp_tuple_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana_heal );
    }

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_left_name_94 );
        Py_DECREF( tmp_right_name_94 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1448 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_right_name_94, 1, tmp_tuple_element_3 );
    tmp_tuple_element_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_heal );

    if (unlikely( tmp_tuple_element_3 == NULL ))
    {
        tmp_tuple_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_heal );
    }

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_left_name_94 );
        Py_DECREF( tmp_right_name_94 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1479 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_right_name_94, 2, tmp_tuple_element_3 );
    tmp_right_name_93 = BINARY_OPERATION_REMAINDER( tmp_left_name_95, tmp_right_name_94 );
    Py_DECREF( tmp_right_name_94 );
    if ( tmp_right_name_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_94 );

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    tmp_left_name_93 = BINARY_OPERATION_ADD( tmp_left_name_94, tmp_right_name_93 );
    Py_DECREF( tmp_left_name_94 );
    Py_DECREF( tmp_right_name_93 );
    if ( tmp_left_name_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    tmp_subscribed_name_62 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_62 == NULL ))
    {
        tmp_subscribed_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_62 == NULL )
    {
        Py_DECREF( tmp_left_name_93 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }

    tmp_subscript_name_62 = const_str_plain_off;
    tmp_right_name_95 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_62, tmp_subscript_name_62 );
    if ( tmp_right_name_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_93 );

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    tmp_str_arg_39 = BINARY_OPERATION_ADD( tmp_left_name_93, tmp_right_name_95 );
    Py_DECREF( tmp_left_name_93 );
    Py_DECREF( tmp_right_name_95 );
    if ( tmp_str_arg_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_39 );
    Py_DECREF( tmp_str_arg_39 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 381;
        goto try_finally_handler_179;
    }
    tmp_left_name_96 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_left_name_96 == NULL ))
    {
        tmp_left_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_left_name_96 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 382;
        goto try_finally_handler_179;
    }

    tmp_right_name_96 = const_int_pos_3;
    tmp_assign_source_282 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_96, tmp_right_name_96 );
    if ( tmp_assign_source_282 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 382;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_282 );
    goto branch_end_60;
    branch_no_60:;
    tmp_compare_left_34 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_34 == NULL ))
    {
        tmp_compare_left_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 383;
        goto try_finally_handler_179;
    }

    tmp_compare_right_34 = const_str_plain_time;
    tmp_cmp_Eq_26 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_34, tmp_compare_right_34 );
    if ( tmp_cmp_Eq_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 383;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_26 == 1)
    {
        goto branch_yes_61;
    }
    else
    {
        goto branch_no_61;
    }
    branch_yes_61:;
    tmp_assign_source_283 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skip, tmp_assign_source_283 );
    goto branch_end_61;
    branch_no_61:;
    tmp_compare_left_35 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_35 == NULL ))
    {
        tmp_compare_left_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 386;
        goto try_finally_handler_179;
    }

    tmp_compare_right_35 = const_str_plain_rtime;
    tmp_cmp_Eq_27 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_35, tmp_compare_right_35 );
    if ( tmp_cmp_Eq_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 386;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_27 == 1)
    {
        goto branch_yes_62;
    }
    else
    {
        goto branch_no_62;
    }
    branch_yes_62:;
    tmp_str_arg_40 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_str_arg_40 == NULL ))
    {
        tmp_str_arg_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_str_arg_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1511 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 387;
        goto try_finally_handler_179;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_40 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 387;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 387;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 387;
        goto try_finally_handler_179;
    }
    goto branch_end_62;
    branch_no_62:;
    tmp_compare_left_36 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_36 == NULL ))
    {
        tmp_compare_left_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto try_finally_handler_179;
    }

    tmp_compare_right_36 = const_str_plain_tp;
    tmp_cmp_Eq_28 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_36, tmp_compare_right_36 );
    if ( tmp_cmp_Eq_28 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 389;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_28 == 1)
    {
        goto branch_yes_63;
    }
    else
    {
        goto branch_no_63;
    }
    branch_yes_63:;
    tmp_called_name_72 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 390;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_43 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 390;
    tmp_int_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_72, tmp_call_arg_element_43 );
    if ( tmp_int_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 390;
        goto try_finally_handler_179;
    }
    tmp_assign_source_284 = PyNumber_Int( tmp_int_arg_1 );
    Py_DECREF( tmp_int_arg_1 );
    if ( tmp_assign_source_284 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 390;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_284 );
    tmp_called_name_73 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 391;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_44 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 391;
    tmp_int_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_73, tmp_call_arg_element_44 );
    if ( tmp_int_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 391;
        goto try_finally_handler_179;
    }
    tmp_assign_source_285 = PyNumber_Int( tmp_int_arg_2 );
    Py_DECREF( tmp_int_arg_2 );
    if ( tmp_assign_source_285 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 391;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_285 );
    tmp_called_name_74 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 392;
        goto try_finally_handler_179;
    }
    tmp_call_arg_element_45 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 392;
    tmp_int_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_74, tmp_call_arg_element_45 );
    if ( tmp_int_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 392;
        goto try_finally_handler_179;
    }
    tmp_assign_source_286 = PyNumber_Int( tmp_int_arg_3 );
    Py_DECREF( tmp_int_arg_3 );
    if ( tmp_assign_source_286 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 392;
        goto try_finally_handler_179;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_286 );
    goto branch_end_63;
    branch_no_63:;
    tmp_compare_left_37 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_37 == NULL ))
    {
        tmp_compare_left_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 393;
        goto try_finally_handler_179;
    }

    tmp_compare_right_37 = const_str_plain_info;
    tmp_cmp_Eq_29 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_37, tmp_compare_right_37 );
    if ( tmp_cmp_Eq_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 393;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_29 == 1)
    {
        goto branch_yes_64;
    }
    else
    {
        goto branch_no_64;
    }
    branch_yes_64:;
    tmp_left_name_97 = const_str_digest_f69472097cd305bb0b299dc1f44b7b33;
    tmp_right_name_97 = PyTuple_New( 4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_right_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_right_name_97, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_right_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_right_name_97, 1, tmp_tuple_element_4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defe );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_right_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1066 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_right_name_97, 2, tmp_tuple_element_4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_right_name_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_right_name_97, 3, tmp_tuple_element_4 );
    tmp_str_arg_41 = BINARY_OPERATION_REMAINDER( tmp_left_name_97, tmp_right_name_97 );
    Py_DECREF( tmp_right_name_97 );
    if ( tmp_str_arg_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_41 );
    Py_DECREF( tmp_str_arg_41 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 394;
        goto try_finally_handler_179;
    }
    goto branch_end_64;
    branch_no_64:;
    tmp_compare_left_38 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_38 == NULL ))
    {
        tmp_compare_left_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto try_finally_handler_179;
    }

    tmp_compare_right_38 = const_str_plain_credits;
    tmp_cmp_Eq_30 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_38, tmp_compare_right_38 );
    if ( tmp_cmp_Eq_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 395;
        goto try_finally_handler_179;
    }
    if (tmp_cmp_Eq_30 == 1)
    {
        goto branch_yes_65;
    }
    else
    {
        goto branch_no_65;
    }
    branch_yes_65:;
    tmp_left_name_98 = const_str_digest_d0766d79fde040ecbb62086cd2119ba3;
    tmp_right_name_98 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_current_version );

    if (unlikely( tmp_right_name_98 == NULL ))
    {
        tmp_right_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_current_version );
    }

    if ( tmp_right_name_98 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1537 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 396;
        goto try_finally_handler_179;
    }

    tmp_str_arg_42 = BINARY_OPERATION_REMAINDER( tmp_left_name_98, tmp_right_name_98 );
    if ( tmp_str_arg_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 396;
        goto try_finally_handler_179;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_42 );
    Py_DECREF( tmp_str_arg_42 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 396;
        goto try_finally_handler_179;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 396;
        goto try_finally_handler_179;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 396;
        goto try_finally_handler_179;
    }
    branch_no_65:;
    branch_end_64:;
    branch_end_63:;
    branch_end_62:;
    branch_end_61:;
    branch_end_60:;
    branch_end_59:;
    branch_end_58:;
    branch_end_57:;
    branch_end_55:;
    branch_end_51:;
    branch_end_47:;
    branch_end_46:;
    branch_end_45:;
    branch_end_44:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_179:;
    exception_keeper_type_189 = exception_type;
    exception_keeper_value_189 = exception_value;
    exception_keeper_tb_189 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_69 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_19__value_2 );
    tmp_and_19__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_69;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_189 != NULL )
    {
        exception_type = exception_keeper_type_189;
        exception_value = exception_keeper_value_189;
        exception_tb = exception_keeper_tb_189;

        goto frame_exception_exit_1;
    }

    goto finally_end_189;
    finally_end_189:;
    branch_end_43:;
    branch_end_39:;
    branch_end_38:;
    branch_end_37:;
    tmp_compare_left_39 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_39 == NULL ))
    {
        tmp_compare_left_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 397;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_39 = const_str_plain_help;
    tmp_cmp_Eq_31 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_39, tmp_compare_right_39 );
    if ( tmp_cmp_Eq_31 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 397;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_31 == 1)
    {
        goto branch_yes_66;
    }
    else
    {
        goto branch_no_66;
    }
    branch_yes_66:;
    tmp_subscribed_name_63 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_63 == NULL ))
    {
        tmp_subscribed_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_63 = const_str_plain_darkwhite;
    tmp_left_name_100 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_63, tmp_subscript_name_63 );
    if ( tmp_left_name_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    tmp_right_name_99 = const_str_digest_8024663910c63afc97bae69f7d735e89;
    tmp_left_name_99 = BINARY_OPERATION_ADD( tmp_left_name_100, tmp_right_name_99 );
    Py_DECREF( tmp_left_name_100 );
    if ( tmp_left_name_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_64 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_64 == NULL ))
    {
        tmp_subscribed_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_64 == NULL )
    {
        Py_DECREF( tmp_left_name_99 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_64 = const_str_plain_off;
    tmp_right_name_100 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_64, tmp_subscript_name_64 );
    if ( tmp_right_name_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_99 );

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_43 = BINARY_OPERATION_ADD( tmp_left_name_99, tmp_right_name_100 );
    Py_DECREF( tmp_left_name_99 );
    Py_DECREF( tmp_right_name_100 );
    if ( tmp_str_arg_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_43 );
    Py_DECREF( tmp_str_arg_43 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    branch_no_66:;
    // Tried code
    tmp_cond_value_89 = NULL;
    // Tried code
    tmp_compexpr_left_80 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_80 == NULL ))
    {
        tmp_compexpr_left_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 399;
        goto try_finally_handler_191;
    }

    tmp_compexpr_right_80 = const_int_0;
    tmp_assign_source_287 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_80, tmp_compexpr_right_80 );
    if ( tmp_assign_source_287 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_191;
    }
    {
        PyObject *old = tmp_and_20__value_2;
        tmp_and_20__value_2 = tmp_assign_source_287;
        Py_XDECREF( old );
    }

    tmp_cond_value_90 = tmp_and_20__value_2;

    tmp_cond_truth_90 = CHECK_IF_TRUE( tmp_cond_value_90 );
    if ( tmp_cond_truth_90 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_191;
    }
    if (tmp_cond_truth_90 == 1)
    {
        goto condexpr_true_62;
    }
    else
    {
        goto condexpr_false_62;
    }
    condexpr_true_62:;
    tmp_cond_value_89 = NULL;
    // Tried code
    tmp_cond_value_89 = NULL;
    // Tried code
    tmp_result = tmp_and_20__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_20__value_2 );
        tmp_and_20__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_89 = NULL;
    // Tried code
    tmp_compexpr_left_81 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_81 == NULL ))
    {
        tmp_compexpr_left_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_81 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 399;
        goto try_finally_handler_194;
    }

    tmp_compexpr_right_81 = const_int_0;
    tmp_assign_source_288 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_81, tmp_compexpr_right_81 );
    if ( tmp_assign_source_288 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_194;
    }
    {
        PyObject *old = tmp_and_20__value_1;
        tmp_and_20__value_1 = tmp_assign_source_288;
        Py_XDECREF( old );
    }

    tmp_cond_value_91 = tmp_and_20__value_1;

    tmp_cond_truth_91 = CHECK_IF_TRUE( tmp_cond_value_91 );
    if ( tmp_cond_truth_91 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_194;
    }
    if (tmp_cond_truth_91 == 1)
    {
        goto condexpr_true_63;
    }
    else
    {
        goto condexpr_false_63;
    }
    condexpr_true_63:;
    tmp_cond_value_89 = NULL;
    // Tried code
    tmp_result = tmp_and_20__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_20__value_1 );
        tmp_and_20__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_82 = const_str_plain_torch;
    tmp_compexpr_right_82 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_82 == NULL ))
    {
        tmp_compexpr_right_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 399;
        goto try_finally_handler_195;
    }

    tmp_cond_value_89 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_82, tmp_compexpr_right_82 );
    if ( tmp_cond_value_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_195;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_195:;
    exception_keeper_type_190 = exception_type;
    exception_keeper_value_190 = exception_value;
    exception_keeper_tb_190 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_190 != NULL )
    {
        exception_type = exception_keeper_type_190;
        exception_value = exception_keeper_value_190;
        exception_tb = exception_keeper_tb_190;

        goto try_finally_handler_194;
    }

    goto finally_end_190;
    finally_end_190:;
    goto condexpr_end_63;
    condexpr_false_63:;
    tmp_cond_value_89 = tmp_and_20__value_1;

    condexpr_end_63:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_194:;
    exception_keeper_type_191 = exception_type;
    exception_keeper_value_191 = exception_value;
    exception_keeper_tb_191 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_191 != NULL )
    {
        exception_type = exception_keeper_type_191;
        exception_value = exception_keeper_value_191;
        exception_tb = exception_keeper_tb_191;

        goto try_finally_handler_193;
    }

    goto finally_end_191;
    finally_end_191:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_193:;
    exception_keeper_type_192 = exception_type;
    exception_keeper_value_192 = exception_value;
    exception_keeper_tb_192 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_192 != NULL )
    {
        exception_type = exception_keeper_type_192;
        exception_value = exception_keeper_value_192;
        exception_tb = exception_keeper_tb_192;

        goto try_finally_handler_192;
    }

    goto finally_end_192;
    finally_end_192:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_192:;
    exception_keeper_type_193 = exception_type;
    exception_keeper_value_193 = exception_value;
    exception_keeper_tb_193 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_70 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_20__value_1 );
    tmp_and_20__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_70;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_193 != NULL )
    {
        exception_type = exception_keeper_type_193;
        exception_value = exception_keeper_value_193;
        exception_tb = exception_keeper_tb_193;

        goto try_finally_handler_191;
    }

    goto finally_end_193;
    finally_end_193:;
    goto condexpr_end_62;
    condexpr_false_62:;
    tmp_cond_value_89 = tmp_and_20__value_2;

    condexpr_end_62:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_191:;
    exception_keeper_type_194 = exception_type;
    exception_keeper_value_194 = exception_value;
    exception_keeper_tb_194 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_194 != NULL )
    {
        exception_type = exception_keeper_type_194;
        exception_value = exception_keeper_value_194;
        exception_tb = exception_keeper_tb_194;

        goto try_finally_handler_190;
    }

    goto finally_end_194;
    finally_end_194:;
    tmp_cond_truth_89 = CHECK_IF_TRUE( tmp_cond_value_89 );
    if ( tmp_cond_truth_89 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_190;
    }
    if (tmp_cond_truth_89 == 1)
    {
        goto branch_yes_67;
    }
    else
    {
        goto branch_no_67;
    }
    branch_yes_67:;
    tmp_assign_source_289 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_289 );
    tmp_assign_source_290 = const_str_digest_7ff684169b33027b804e663c6f5e81dd;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_290 );
    tmp_str_arg_44 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_44 == NULL ))
    {
        tmp_str_arg_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 402;
        goto try_finally_handler_190;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_44 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 402;
        goto try_finally_handler_190;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 402;
        goto try_finally_handler_190;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 402;
        goto try_finally_handler_190;
    }
    goto branch_end_67;
    branch_no_67:;
    // Tried code
    tmp_cond_value_92 = NULL;
    // Tried code
    tmp_compexpr_left_83 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_83 == NULL ))
    {
        tmp_compexpr_left_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_83 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 403;
        goto try_finally_handler_197;
    }

    tmp_compexpr_right_83 = const_int_0;
    tmp_assign_source_291 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_83, tmp_compexpr_right_83 );
    if ( tmp_assign_source_291 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 403;
        goto try_finally_handler_197;
    }
    {
        PyObject *old = tmp_and_21__value_2;
        tmp_and_21__value_2 = tmp_assign_source_291;
        Py_XDECREF( old );
    }

    tmp_cond_value_93 = tmp_and_21__value_2;

    tmp_cond_truth_93 = CHECK_IF_TRUE( tmp_cond_value_93 );
    if ( tmp_cond_truth_93 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 403;
        goto try_finally_handler_197;
    }
    if (tmp_cond_truth_93 == 1)
    {
        goto condexpr_true_64;
    }
    else
    {
        goto condexpr_false_64;
    }
    condexpr_true_64:;
    tmp_cond_value_92 = NULL;
    // Tried code
    tmp_cond_value_92 = NULL;
    // Tried code
    tmp_result = tmp_and_21__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_21__value_2 );
        tmp_and_21__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_92 = NULL;
    // Tried code
    tmp_compexpr_left_84 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_84 == NULL ))
    {
        tmp_compexpr_left_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_84 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 403;
        goto try_finally_handler_200;
    }

    tmp_compexpr_right_84 = const_int_0;
    tmp_assign_source_292 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_84, tmp_compexpr_right_84 );
    if ( tmp_assign_source_292 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 403;
        goto try_finally_handler_200;
    }
    {
        PyObject *old = tmp_and_21__value_1;
        tmp_and_21__value_1 = tmp_assign_source_292;
        Py_XDECREF( old );
    }

    tmp_cond_value_94 = tmp_and_21__value_1;

    tmp_cond_truth_94 = CHECK_IF_TRUE( tmp_cond_value_94 );
    if ( tmp_cond_truth_94 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 403;
        goto try_finally_handler_200;
    }
    if (tmp_cond_truth_94 == 1)
    {
        goto condexpr_true_65;
    }
    else
    {
        goto condexpr_false_65;
    }
    condexpr_true_65:;
    tmp_cond_value_92 = NULL;
    // Tried code
    tmp_result = tmp_and_21__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_21__value_1 );
        tmp_and_21__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_85 = const_str_plain_torch;
    tmp_compexpr_right_85 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_85 == NULL ))
    {
        tmp_compexpr_right_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_85 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 403;
        goto try_finally_handler_201;
    }

    tmp_cond_value_92 = SEQUENCE_CONTAINS( tmp_compexpr_left_85, tmp_compexpr_right_85 );
    if ( tmp_cond_value_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 403;
        goto try_finally_handler_201;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_201:;
    exception_keeper_type_195 = exception_type;
    exception_keeper_value_195 = exception_value;
    exception_keeper_tb_195 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_195 != NULL )
    {
        exception_type = exception_keeper_type_195;
        exception_value = exception_keeper_value_195;
        exception_tb = exception_keeper_tb_195;

        goto try_finally_handler_200;
    }

    goto finally_end_195;
    finally_end_195:;
    goto condexpr_end_65;
    condexpr_false_65:;
    tmp_cond_value_92 = tmp_and_21__value_1;

    condexpr_end_65:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_200:;
    exception_keeper_type_196 = exception_type;
    exception_keeper_value_196 = exception_value;
    exception_keeper_tb_196 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_196 != NULL )
    {
        exception_type = exception_keeper_type_196;
        exception_value = exception_keeper_value_196;
        exception_tb = exception_keeper_tb_196;

        goto try_finally_handler_199;
    }

    goto finally_end_196;
    finally_end_196:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_199:;
    exception_keeper_type_197 = exception_type;
    exception_keeper_value_197 = exception_value;
    exception_keeper_tb_197 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_197 != NULL )
    {
        exception_type = exception_keeper_type_197;
        exception_value = exception_keeper_value_197;
        exception_tb = exception_keeper_tb_197;

        goto try_finally_handler_198;
    }

    goto finally_end_197;
    finally_end_197:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_198:;
    exception_keeper_type_198 = exception_type;
    exception_keeper_value_198 = exception_value;
    exception_keeper_tb_198 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_71 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_21__value_1 );
    tmp_and_21__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_71;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_198 != NULL )
    {
        exception_type = exception_keeper_type_198;
        exception_value = exception_keeper_value_198;
        exception_tb = exception_keeper_tb_198;

        goto try_finally_handler_197;
    }

    goto finally_end_198;
    finally_end_198:;
    goto condexpr_end_64;
    condexpr_false_64:;
    tmp_cond_value_92 = tmp_and_21__value_2;

    condexpr_end_64:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_197:;
    exception_keeper_type_199 = exception_type;
    exception_keeper_value_199 = exception_value;
    exception_keeper_tb_199 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_199 != NULL )
    {
        exception_type = exception_keeper_type_199;
        exception_value = exception_keeper_value_199;
        exception_tb = exception_keeper_tb_199;

        goto try_finally_handler_196;
    }

    goto finally_end_199;
    finally_end_199:;
    tmp_cond_truth_92 = CHECK_IF_TRUE( tmp_cond_value_92 );
    if ( tmp_cond_truth_92 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 403;
        goto try_finally_handler_196;
    }
    if (tmp_cond_truth_92 == 1)
    {
        goto branch_yes_68;
    }
    else
    {
        goto branch_no_68;
    }
    branch_yes_68:;
    tmp_assign_source_293 = const_str_digest_bae0b19519db627cac836555726a5505;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_293 );
    tmp_str_arg_45 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_45 == NULL ))
    {
        tmp_str_arg_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 405;
        goto try_finally_handler_196;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_45 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 405;
        goto try_finally_handler_196;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 405;
        goto try_finally_handler_196;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 405;
        goto try_finally_handler_196;
    }
    goto branch_end_68;
    branch_no_68:;
    // Tried code
    tmp_cond_value_95 = NULL;
    // Tried code
    tmp_compexpr_left_86 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_86 == NULL ))
    {
        tmp_compexpr_left_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 406;
        goto try_finally_handler_203;
    }

    tmp_compexpr_right_86 = const_int_0;
    tmp_assign_source_294 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_86, tmp_compexpr_right_86 );
    if ( tmp_assign_source_294 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 406;
        goto try_finally_handler_203;
    }
    {
        PyObject *old = tmp_and_22__value_2;
        tmp_and_22__value_2 = tmp_assign_source_294;
        Py_XDECREF( old );
    }

    tmp_cond_value_96 = tmp_and_22__value_2;

    tmp_cond_truth_96 = CHECK_IF_TRUE( tmp_cond_value_96 );
    if ( tmp_cond_truth_96 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 406;
        goto try_finally_handler_203;
    }
    if (tmp_cond_truth_96 == 1)
    {
        goto condexpr_true_66;
    }
    else
    {
        goto condexpr_false_66;
    }
    condexpr_true_66:;
    tmp_cond_value_95 = NULL;
    // Tried code
    tmp_cond_value_95 = NULL;
    // Tried code
    tmp_result = tmp_and_22__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_22__value_2 );
        tmp_and_22__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_95 = NULL;
    // Tried code
    tmp_compexpr_left_87 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_87 == NULL ))
    {
        tmp_compexpr_left_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_87 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 406;
        goto try_finally_handler_206;
    }

    tmp_compexpr_right_87 = const_int_pos_1;
    tmp_assign_source_295 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_87, tmp_compexpr_right_87 );
    if ( tmp_assign_source_295 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 406;
        goto try_finally_handler_206;
    }
    {
        PyObject *old = tmp_and_22__value_1;
        tmp_and_22__value_1 = tmp_assign_source_295;
        Py_XDECREF( old );
    }

    tmp_cond_value_97 = tmp_and_22__value_1;

    tmp_cond_truth_97 = CHECK_IF_TRUE( tmp_cond_value_97 );
    if ( tmp_cond_truth_97 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 406;
        goto try_finally_handler_206;
    }
    if (tmp_cond_truth_97 == 1)
    {
        goto condexpr_true_67;
    }
    else
    {
        goto condexpr_false_67;
    }
    condexpr_true_67:;
    tmp_cond_value_95 = NULL;
    // Tried code
    tmp_result = tmp_and_22__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_22__value_1 );
        tmp_and_22__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_88 = const_str_plain_torch;
    tmp_compexpr_right_88 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_88 == NULL ))
    {
        tmp_compexpr_right_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 406;
        goto try_finally_handler_207;
    }

    tmp_cond_value_95 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_88, tmp_compexpr_right_88 );
    if ( tmp_cond_value_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 406;
        goto try_finally_handler_207;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_207:;
    exception_keeper_type_200 = exception_type;
    exception_keeper_value_200 = exception_value;
    exception_keeper_tb_200 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_200 != NULL )
    {
        exception_type = exception_keeper_type_200;
        exception_value = exception_keeper_value_200;
        exception_tb = exception_keeper_tb_200;

        goto try_finally_handler_206;
    }

    goto finally_end_200;
    finally_end_200:;
    goto condexpr_end_67;
    condexpr_false_67:;
    tmp_cond_value_95 = tmp_and_22__value_1;

    condexpr_end_67:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_206:;
    exception_keeper_type_201 = exception_type;
    exception_keeper_value_201 = exception_value;
    exception_keeper_tb_201 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_201 != NULL )
    {
        exception_type = exception_keeper_type_201;
        exception_value = exception_keeper_value_201;
        exception_tb = exception_keeper_tb_201;

        goto try_finally_handler_205;
    }

    goto finally_end_201;
    finally_end_201:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_205:;
    exception_keeper_type_202 = exception_type;
    exception_keeper_value_202 = exception_value;
    exception_keeper_tb_202 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_202 != NULL )
    {
        exception_type = exception_keeper_type_202;
        exception_value = exception_keeper_value_202;
        exception_tb = exception_keeper_tb_202;

        goto try_finally_handler_204;
    }

    goto finally_end_202;
    finally_end_202:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_204:;
    exception_keeper_type_203 = exception_type;
    exception_keeper_value_203 = exception_value;
    exception_keeper_tb_203 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_72 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_22__value_1 );
    tmp_and_22__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_72;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_203 != NULL )
    {
        exception_type = exception_keeper_type_203;
        exception_value = exception_keeper_value_203;
        exception_tb = exception_keeper_tb_203;

        goto try_finally_handler_203;
    }

    goto finally_end_203;
    finally_end_203:;
    goto condexpr_end_66;
    condexpr_false_66:;
    tmp_cond_value_95 = tmp_and_22__value_2;

    condexpr_end_66:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_203:;
    exception_keeper_type_204 = exception_type;
    exception_keeper_value_204 = exception_value;
    exception_keeper_tb_204 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_204 != NULL )
    {
        exception_type = exception_keeper_type_204;
        exception_value = exception_keeper_value_204;
        exception_tb = exception_keeper_tb_204;

        goto try_finally_handler_202;
    }

    goto finally_end_204;
    finally_end_204:;
    tmp_cond_truth_95 = CHECK_IF_TRUE( tmp_cond_value_95 );
    if ( tmp_cond_truth_95 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 406;
        goto try_finally_handler_202;
    }
    if (tmp_cond_truth_95 == 1)
    {
        goto branch_yes_69;
    }
    else
    {
        goto branch_no_69;
    }
    branch_yes_69:;
    tmp_assign_source_296 = const_str_digest_38ea401a5eb32a8a8fc348d5ed2f1242;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_296 );
    tmp_str_arg_46 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_46 == NULL ))
    {
        tmp_str_arg_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 408;
        goto try_finally_handler_202;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_46 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 408;
        goto try_finally_handler_202;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 408;
        goto try_finally_handler_202;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 408;
        goto try_finally_handler_202;
    }
    tmp_left_name_101 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_left_name_101 == NULL ))
    {
        tmp_left_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_left_name_101 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 409;
        goto try_finally_handler_202;
    }

    tmp_right_name_101 = const_int_pos_1;
    tmp_assign_source_297 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_101, tmp_right_name_101 );
    if ( tmp_assign_source_297 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 409;
        goto try_finally_handler_202;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_297 );
    goto branch_end_69;
    branch_no_69:;
    // Tried code
    tmp_cond_value_98 = NULL;
    // Tried code
    tmp_compexpr_left_89 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_89 == NULL ))
    {
        tmp_compexpr_left_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_89 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto try_finally_handler_209;
    }

    tmp_compexpr_right_89 = const_int_0;
    tmp_assign_source_298 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_89, tmp_compexpr_right_89 );
    if ( tmp_assign_source_298 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_209;
    }
    {
        PyObject *old = tmp_and_23__value_2;
        tmp_and_23__value_2 = tmp_assign_source_298;
        Py_XDECREF( old );
    }

    tmp_cond_value_99 = tmp_and_23__value_2;

    tmp_cond_truth_99 = CHECK_IF_TRUE( tmp_cond_value_99 );
    if ( tmp_cond_truth_99 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_209;
    }
    if (tmp_cond_truth_99 == 1)
    {
        goto condexpr_true_68;
    }
    else
    {
        goto condexpr_false_68;
    }
    condexpr_true_68:;
    tmp_cond_value_98 = NULL;
    // Tried code
    tmp_cond_value_98 = NULL;
    // Tried code
    tmp_result = tmp_and_23__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_23__value_2 );
        tmp_and_23__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_98 = NULL;
    // Tried code
    tmp_compexpr_left_90 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_90 == NULL ))
    {
        tmp_compexpr_left_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto try_finally_handler_212;
    }

    tmp_compexpr_right_90 = const_int_pos_1;
    tmp_assign_source_299 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_90, tmp_compexpr_right_90 );
    if ( tmp_assign_source_299 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_212;
    }
    {
        PyObject *old = tmp_and_23__value_1;
        tmp_and_23__value_1 = tmp_assign_source_299;
        Py_XDECREF( old );
    }

    tmp_cond_value_100 = tmp_and_23__value_1;

    tmp_cond_truth_100 = CHECK_IF_TRUE( tmp_cond_value_100 );
    if ( tmp_cond_truth_100 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_212;
    }
    if (tmp_cond_truth_100 == 1)
    {
        goto condexpr_true_69;
    }
    else
    {
        goto condexpr_false_69;
    }
    condexpr_true_69:;
    tmp_cond_value_98 = NULL;
    // Tried code
    tmp_result = tmp_and_23__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_23__value_1 );
        tmp_and_23__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_91 = const_str_plain_torch;
    tmp_compexpr_right_91 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_91 == NULL ))
    {
        tmp_compexpr_right_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_91 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto try_finally_handler_213;
    }

    tmp_cond_value_98 = SEQUENCE_CONTAINS( tmp_compexpr_left_91, tmp_compexpr_right_91 );
    if ( tmp_cond_value_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_213;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_213:;
    exception_keeper_type_205 = exception_type;
    exception_keeper_value_205 = exception_value;
    exception_keeper_tb_205 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_205 != NULL )
    {
        exception_type = exception_keeper_type_205;
        exception_value = exception_keeper_value_205;
        exception_tb = exception_keeper_tb_205;

        goto try_finally_handler_212;
    }

    goto finally_end_205;
    finally_end_205:;
    goto condexpr_end_69;
    condexpr_false_69:;
    tmp_cond_value_98 = tmp_and_23__value_1;

    condexpr_end_69:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_212:;
    exception_keeper_type_206 = exception_type;
    exception_keeper_value_206 = exception_value;
    exception_keeper_tb_206 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_206 != NULL )
    {
        exception_type = exception_keeper_type_206;
        exception_value = exception_keeper_value_206;
        exception_tb = exception_keeper_tb_206;

        goto try_finally_handler_211;
    }

    goto finally_end_206;
    finally_end_206:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_211:;
    exception_keeper_type_207 = exception_type;
    exception_keeper_value_207 = exception_value;
    exception_keeper_tb_207 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_207 != NULL )
    {
        exception_type = exception_keeper_type_207;
        exception_value = exception_keeper_value_207;
        exception_tb = exception_keeper_tb_207;

        goto try_finally_handler_210;
    }

    goto finally_end_207;
    finally_end_207:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_210:;
    exception_keeper_type_208 = exception_type;
    exception_keeper_value_208 = exception_value;
    exception_keeper_tb_208 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_73 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_23__value_1 );
    tmp_and_23__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_73;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_208 != NULL )
    {
        exception_type = exception_keeper_type_208;
        exception_value = exception_keeper_value_208;
        exception_tb = exception_keeper_tb_208;

        goto try_finally_handler_209;
    }

    goto finally_end_208;
    finally_end_208:;
    goto condexpr_end_68;
    condexpr_false_68:;
    tmp_cond_value_98 = tmp_and_23__value_2;

    condexpr_end_68:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_209:;
    exception_keeper_type_209 = exception_type;
    exception_keeper_value_209 = exception_value;
    exception_keeper_tb_209 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_209 != NULL )
    {
        exception_type = exception_keeper_type_209;
        exception_value = exception_keeper_value_209;
        exception_tb = exception_keeper_tb_209;

        goto try_finally_handler_208;
    }

    goto finally_end_209;
    finally_end_209:;
    tmp_cond_truth_98 = CHECK_IF_TRUE( tmp_cond_value_98 );
    if ( tmp_cond_truth_98 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_208;
    }
    if (tmp_cond_truth_98 == 1)
    {
        goto branch_yes_70;
    }
    else
    {
        goto branch_no_70;
    }
    branch_yes_70:;
    tmp_assign_source_300 = const_str_digest_d7576e429f04159f7c3327b1e65fe40e;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_300 );
    tmp_str_arg_47 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_47 == NULL ))
    {
        tmp_str_arg_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 412;
        goto try_finally_handler_208;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_47 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 412;
        goto try_finally_handler_208;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 412;
        goto try_finally_handler_208;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 412;
        goto try_finally_handler_208;
    }
    goto branch_end_70;
    branch_no_70:;
    // Tried code
    tmp_cond_value_101 = NULL;
    // Tried code
    tmp_compexpr_left_92 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_92 == NULL ))
    {
        tmp_compexpr_left_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 413;
        goto try_finally_handler_215;
    }

    tmp_compexpr_right_92 = const_int_pos_1;
    tmp_assign_source_301 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_92, tmp_compexpr_right_92 );
    if ( tmp_assign_source_301 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 413;
        goto try_finally_handler_215;
    }
    {
        PyObject *old = tmp_and_24__value_1;
        tmp_and_24__value_1 = tmp_assign_source_301;
        Py_XDECREF( old );
    }

    tmp_cond_value_102 = tmp_and_24__value_1;

    tmp_cond_truth_102 = CHECK_IF_TRUE( tmp_cond_value_102 );
    if ( tmp_cond_truth_102 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 413;
        goto try_finally_handler_215;
    }
    if (tmp_cond_truth_102 == 1)
    {
        goto condexpr_true_70;
    }
    else
    {
        goto condexpr_false_70;
    }
    condexpr_true_70:;
    tmp_cond_value_101 = NULL;
    // Tried code
    tmp_result = tmp_and_24__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_24__value_1 );
        tmp_and_24__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_93 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_93 == NULL ))
    {
        tmp_compexpr_left_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_93 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 413;
        goto try_finally_handler_216;
    }

    tmp_compexpr_right_93 = const_int_pos_1;
    tmp_cond_value_101 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_93, tmp_compexpr_right_93 );
    if ( tmp_cond_value_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 413;
        goto try_finally_handler_216;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_216:;
    exception_keeper_type_210 = exception_type;
    exception_keeper_value_210 = exception_value;
    exception_keeper_tb_210 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_210 != NULL )
    {
        exception_type = exception_keeper_type_210;
        exception_value = exception_keeper_value_210;
        exception_tb = exception_keeper_tb_210;

        goto try_finally_handler_215;
    }

    goto finally_end_210;
    finally_end_210:;
    goto condexpr_end_70;
    condexpr_false_70:;
    tmp_cond_value_101 = tmp_and_24__value_1;

    Py_INCREF( tmp_cond_value_101 );
    condexpr_end_70:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_215:;
    exception_keeper_type_211 = exception_type;
    exception_keeper_value_211 = exception_value;
    exception_keeper_tb_211 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_211 != NULL )
    {
        exception_type = exception_keeper_type_211;
        exception_value = exception_keeper_value_211;
        exception_tb = exception_keeper_tb_211;

        goto try_finally_handler_214;
    }

    goto finally_end_211;
    finally_end_211:;
    tmp_cond_truth_101 = CHECK_IF_TRUE( tmp_cond_value_101 );
    if ( tmp_cond_truth_101 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_101 );

        frame_module->f_lineno = 413;
        goto try_finally_handler_214;
    }
    Py_DECREF( tmp_cond_value_101 );
    if (tmp_cond_truth_101 == 1)
    {
        goto branch_yes_71;
    }
    else
    {
        goto branch_no_71;
    }
    branch_yes_71:;
    tmp_assign_source_302 = const_str_digest_0d6da078c3206431f17d8f388fd08eb6;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_302 );
    tmp_str_arg_48 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_48 == NULL ))
    {
        tmp_str_arg_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto try_finally_handler_214;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_48 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 415;
        goto try_finally_handler_214;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 415;
        goto try_finally_handler_214;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 415;
        goto try_finally_handler_214;
    }
    goto branch_end_71;
    branch_no_71:;
    // Tried code
    tmp_cond_value_103 = NULL;
    // Tried code
    tmp_compexpr_left_94 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_94 == NULL ))
    {
        tmp_compexpr_left_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_94 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 416;
        goto try_finally_handler_218;
    }

    tmp_compexpr_right_94 = const_int_pos_2;
    tmp_assign_source_303 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_94, tmp_compexpr_right_94 );
    if ( tmp_assign_source_303 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 416;
        goto try_finally_handler_218;
    }
    {
        PyObject *old = tmp_and_25__value_2;
        tmp_and_25__value_2 = tmp_assign_source_303;
        Py_XDECREF( old );
    }

    tmp_cond_value_104 = tmp_and_25__value_2;

    tmp_cond_truth_104 = CHECK_IF_TRUE( tmp_cond_value_104 );
    if ( tmp_cond_truth_104 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 416;
        goto try_finally_handler_218;
    }
    if (tmp_cond_truth_104 == 1)
    {
        goto condexpr_true_71;
    }
    else
    {
        goto condexpr_false_71;
    }
    condexpr_true_71:;
    tmp_cond_value_103 = NULL;
    // Tried code
    tmp_cond_value_103 = NULL;
    // Tried code
    tmp_result = tmp_and_25__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_25__value_2 );
        tmp_and_25__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_103 = NULL;
    // Tried code
    tmp_compexpr_left_95 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_95 == NULL ))
    {
        tmp_compexpr_left_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_95 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 416;
        goto try_finally_handler_221;
    }

    tmp_compexpr_right_95 = const_int_pos_1;
    tmp_assign_source_304 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_95, tmp_compexpr_right_95 );
    if ( tmp_assign_source_304 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 416;
        goto try_finally_handler_221;
    }
    {
        PyObject *old = tmp_and_25__value_1;
        tmp_and_25__value_1 = tmp_assign_source_304;
        Py_XDECREF( old );
    }

    tmp_cond_value_105 = tmp_and_25__value_1;

    tmp_cond_truth_105 = CHECK_IF_TRUE( tmp_cond_value_105 );
    if ( tmp_cond_truth_105 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 416;
        goto try_finally_handler_221;
    }
    if (tmp_cond_truth_105 == 1)
    {
        goto condexpr_true_72;
    }
    else
    {
        goto condexpr_false_72;
    }
    condexpr_true_72:;
    tmp_cond_value_103 = NULL;
    // Tried code
    tmp_result = tmp_and_25__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_25__value_1 );
        tmp_and_25__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_96 = const_str_plain_branch;
    tmp_compexpr_right_96 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_96 == NULL ))
    {
        tmp_compexpr_right_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_96 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 416;
        goto try_finally_handler_222;
    }

    tmp_cond_value_103 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_96, tmp_compexpr_right_96 );
    if ( tmp_cond_value_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 416;
        goto try_finally_handler_222;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_222:;
    exception_keeper_type_212 = exception_type;
    exception_keeper_value_212 = exception_value;
    exception_keeper_tb_212 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_212 != NULL )
    {
        exception_type = exception_keeper_type_212;
        exception_value = exception_keeper_value_212;
        exception_tb = exception_keeper_tb_212;

        goto try_finally_handler_221;
    }

    goto finally_end_212;
    finally_end_212:;
    goto condexpr_end_72;
    condexpr_false_72:;
    tmp_cond_value_103 = tmp_and_25__value_1;

    condexpr_end_72:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_221:;
    exception_keeper_type_213 = exception_type;
    exception_keeper_value_213 = exception_value;
    exception_keeper_tb_213 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_213 != NULL )
    {
        exception_type = exception_keeper_type_213;
        exception_value = exception_keeper_value_213;
        exception_tb = exception_keeper_tb_213;

        goto try_finally_handler_220;
    }

    goto finally_end_213;
    finally_end_213:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_220:;
    exception_keeper_type_214 = exception_type;
    exception_keeper_value_214 = exception_value;
    exception_keeper_tb_214 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_214 != NULL )
    {
        exception_type = exception_keeper_type_214;
        exception_value = exception_keeper_value_214;
        exception_tb = exception_keeper_tb_214;

        goto try_finally_handler_219;
    }

    goto finally_end_214;
    finally_end_214:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_219:;
    exception_keeper_type_215 = exception_type;
    exception_keeper_value_215 = exception_value;
    exception_keeper_tb_215 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_74 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_25__value_1 );
    tmp_and_25__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_74;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_215 != NULL )
    {
        exception_type = exception_keeper_type_215;
        exception_value = exception_keeper_value_215;
        exception_tb = exception_keeper_tb_215;

        goto try_finally_handler_218;
    }

    goto finally_end_215;
    finally_end_215:;
    goto condexpr_end_71;
    condexpr_false_71:;
    tmp_cond_value_103 = tmp_and_25__value_2;

    condexpr_end_71:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_218:;
    exception_keeper_type_216 = exception_type;
    exception_keeper_value_216 = exception_value;
    exception_keeper_tb_216 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_216 != NULL )
    {
        exception_type = exception_keeper_type_216;
        exception_value = exception_keeper_value_216;
        exception_tb = exception_keeper_tb_216;

        goto try_finally_handler_217;
    }

    goto finally_end_216;
    finally_end_216:;
    tmp_cond_truth_103 = CHECK_IF_TRUE( tmp_cond_value_103 );
    if ( tmp_cond_truth_103 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 416;
        goto try_finally_handler_217;
    }
    if (tmp_cond_truth_103 == 1)
    {
        goto branch_yes_72;
    }
    else
    {
        goto branch_no_72;
    }
    branch_yes_72:;
    tmp_assign_source_305 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_305 );
    tmp_assign_source_306 = const_str_digest_97f7a09b2f56c1a935e5d7c724878b07;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_306 );
    tmp_str_arg_49 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_49 == NULL ))
    {
        tmp_str_arg_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 419;
        goto try_finally_handler_217;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_49 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 419;
        goto try_finally_handler_217;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 419;
        goto try_finally_handler_217;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 419;
        goto try_finally_handler_217;
    }
    goto branch_end_72;
    branch_no_72:;
    // Tried code
    tmp_cond_value_106 = NULL;
    // Tried code
    tmp_compexpr_left_97 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_97 == NULL ))
    {
        tmp_compexpr_left_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_97 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 420;
        goto try_finally_handler_224;
    }

    tmp_compexpr_right_97 = const_int_pos_2;
    tmp_assign_source_307 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_97, tmp_compexpr_right_97 );
    if ( tmp_assign_source_307 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 420;
        goto try_finally_handler_224;
    }
    {
        PyObject *old = tmp_and_26__value_2;
        tmp_and_26__value_2 = tmp_assign_source_307;
        Py_XDECREF( old );
    }

    tmp_cond_value_107 = tmp_and_26__value_2;

    tmp_cond_truth_107 = CHECK_IF_TRUE( tmp_cond_value_107 );
    if ( tmp_cond_truth_107 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 420;
        goto try_finally_handler_224;
    }
    if (tmp_cond_truth_107 == 1)
    {
        goto condexpr_true_73;
    }
    else
    {
        goto condexpr_false_73;
    }
    condexpr_true_73:;
    tmp_cond_value_106 = NULL;
    // Tried code
    tmp_cond_value_106 = NULL;
    // Tried code
    tmp_result = tmp_and_26__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_26__value_2 );
        tmp_and_26__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_106 = NULL;
    // Tried code
    tmp_compexpr_left_98 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_98 == NULL ))
    {
        tmp_compexpr_left_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_98 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 420;
        goto try_finally_handler_227;
    }

    tmp_compexpr_right_98 = const_int_pos_1;
    tmp_assign_source_308 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_98, tmp_compexpr_right_98 );
    if ( tmp_assign_source_308 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 420;
        goto try_finally_handler_227;
    }
    {
        PyObject *old = tmp_and_26__value_1;
        tmp_and_26__value_1 = tmp_assign_source_308;
        Py_XDECREF( old );
    }

    tmp_cond_value_108 = tmp_and_26__value_1;

    tmp_cond_truth_108 = CHECK_IF_TRUE( tmp_cond_value_108 );
    if ( tmp_cond_truth_108 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 420;
        goto try_finally_handler_227;
    }
    if (tmp_cond_truth_108 == 1)
    {
        goto condexpr_true_74;
    }
    else
    {
        goto condexpr_false_74;
    }
    condexpr_true_74:;
    tmp_cond_value_106 = NULL;
    // Tried code
    tmp_result = tmp_and_26__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_26__value_1 );
        tmp_and_26__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_99 = const_str_plain_branch;
    tmp_compexpr_right_99 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_99 == NULL ))
    {
        tmp_compexpr_right_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_99 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 420;
        goto try_finally_handler_228;
    }

    tmp_cond_value_106 = SEQUENCE_CONTAINS( tmp_compexpr_left_99, tmp_compexpr_right_99 );
    if ( tmp_cond_value_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 420;
        goto try_finally_handler_228;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_228:;
    exception_keeper_type_217 = exception_type;
    exception_keeper_value_217 = exception_value;
    exception_keeper_tb_217 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_217 != NULL )
    {
        exception_type = exception_keeper_type_217;
        exception_value = exception_keeper_value_217;
        exception_tb = exception_keeper_tb_217;

        goto try_finally_handler_227;
    }

    goto finally_end_217;
    finally_end_217:;
    goto condexpr_end_74;
    condexpr_false_74:;
    tmp_cond_value_106 = tmp_and_26__value_1;

    condexpr_end_74:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_227:;
    exception_keeper_type_218 = exception_type;
    exception_keeper_value_218 = exception_value;
    exception_keeper_tb_218 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_218 != NULL )
    {
        exception_type = exception_keeper_type_218;
        exception_value = exception_keeper_value_218;
        exception_tb = exception_keeper_tb_218;

        goto try_finally_handler_226;
    }

    goto finally_end_218;
    finally_end_218:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_226:;
    exception_keeper_type_219 = exception_type;
    exception_keeper_value_219 = exception_value;
    exception_keeper_tb_219 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_219 != NULL )
    {
        exception_type = exception_keeper_type_219;
        exception_value = exception_keeper_value_219;
        exception_tb = exception_keeper_tb_219;

        goto try_finally_handler_225;
    }

    goto finally_end_219;
    finally_end_219:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_225:;
    exception_keeper_type_220 = exception_type;
    exception_keeper_value_220 = exception_value;
    exception_keeper_tb_220 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_75 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_26__value_1 );
    tmp_and_26__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_75;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_220 != NULL )
    {
        exception_type = exception_keeper_type_220;
        exception_value = exception_keeper_value_220;
        exception_tb = exception_keeper_tb_220;

        goto try_finally_handler_224;
    }

    goto finally_end_220;
    finally_end_220:;
    goto condexpr_end_73;
    condexpr_false_73:;
    tmp_cond_value_106 = tmp_and_26__value_2;

    condexpr_end_73:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_224:;
    exception_keeper_type_221 = exception_type;
    exception_keeper_value_221 = exception_value;
    exception_keeper_tb_221 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_221 != NULL )
    {
        exception_type = exception_keeper_type_221;
        exception_value = exception_keeper_value_221;
        exception_tb = exception_keeper_tb_221;

        goto try_finally_handler_223;
    }

    goto finally_end_221;
    finally_end_221:;
    tmp_cond_truth_106 = CHECK_IF_TRUE( tmp_cond_value_106 );
    if ( tmp_cond_truth_106 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 420;
        goto try_finally_handler_223;
    }
    if (tmp_cond_truth_106 == 1)
    {
        goto branch_yes_73;
    }
    else
    {
        goto branch_no_73;
    }
    branch_yes_73:;
    tmp_assign_source_309 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_309 );
    tmp_assign_source_310 = const_str_digest_0ee9b5114fc02a3eefa0605febcf7f56;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_310 );
    tmp_str_arg_50 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_50 == NULL ))
    {
        tmp_str_arg_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 423;
        goto try_finally_handler_223;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_50 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 423;
        goto try_finally_handler_223;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 423;
        goto try_finally_handler_223;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 423;
        goto try_finally_handler_223;
    }
    goto branch_end_73;
    branch_no_73:;
    // Tried code
    tmp_cond_value_109 = NULL;
    // Tried code
    tmp_compexpr_left_100 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_100 == NULL ))
    {
        tmp_compexpr_left_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_100 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 424;
        goto try_finally_handler_230;
    }

    tmp_compexpr_right_100 = const_int_pos_2;
    tmp_assign_source_311 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_100, tmp_compexpr_right_100 );
    if ( tmp_assign_source_311 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 424;
        goto try_finally_handler_230;
    }
    {
        PyObject *old = tmp_and_27__value_1;
        tmp_and_27__value_1 = tmp_assign_source_311;
        Py_XDECREF( old );
    }

    tmp_cond_value_110 = tmp_and_27__value_1;

    tmp_cond_truth_110 = CHECK_IF_TRUE( tmp_cond_value_110 );
    if ( tmp_cond_truth_110 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 424;
        goto try_finally_handler_230;
    }
    if (tmp_cond_truth_110 == 1)
    {
        goto condexpr_true_75;
    }
    else
    {
        goto condexpr_false_75;
    }
    condexpr_true_75:;
    tmp_cond_value_109 = NULL;
    // Tried code
    tmp_result = tmp_and_27__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_27__value_1 );
        tmp_and_27__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_101 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_101 == NULL ))
    {
        tmp_compexpr_left_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_101 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 424;
        goto try_finally_handler_231;
    }

    tmp_compexpr_right_101 = const_int_pos_2;
    tmp_cond_value_109 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_101, tmp_compexpr_right_101 );
    if ( tmp_cond_value_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 424;
        goto try_finally_handler_231;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_231:;
    exception_keeper_type_222 = exception_type;
    exception_keeper_value_222 = exception_value;
    exception_keeper_tb_222 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_222 != NULL )
    {
        exception_type = exception_keeper_type_222;
        exception_value = exception_keeper_value_222;
        exception_tb = exception_keeper_tb_222;

        goto try_finally_handler_230;
    }

    goto finally_end_222;
    finally_end_222:;
    goto condexpr_end_75;
    condexpr_false_75:;
    tmp_cond_value_109 = tmp_and_27__value_1;

    Py_INCREF( tmp_cond_value_109 );
    condexpr_end_75:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_230:;
    exception_keeper_type_223 = exception_type;
    exception_keeper_value_223 = exception_value;
    exception_keeper_tb_223 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_223 != NULL )
    {
        exception_type = exception_keeper_type_223;
        exception_value = exception_keeper_value_223;
        exception_tb = exception_keeper_tb_223;

        goto try_finally_handler_229;
    }

    goto finally_end_223;
    finally_end_223:;
    tmp_cond_truth_109 = CHECK_IF_TRUE( tmp_cond_value_109 );
    if ( tmp_cond_truth_109 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_109 );

        frame_module->f_lineno = 424;
        goto try_finally_handler_229;
    }
    Py_DECREF( tmp_cond_value_109 );
    if (tmp_cond_truth_109 == 1)
    {
        goto branch_yes_74;
    }
    else
    {
        goto branch_no_74;
    }
    branch_yes_74:;
    tmp_assign_source_312 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_312 );
    tmp_assign_source_313 = const_str_plain_wolf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_313 );
    tmp_assign_source_314 = const_str_digest_658d2924d3a7a7d78af9d5c4579f0d5a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_314 );
    tmp_str_arg_51 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_51 == NULL ))
    {
        tmp_str_arg_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 428;
        goto try_finally_handler_229;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_51 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 428;
        goto try_finally_handler_229;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 428;
        goto try_finally_handler_229;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 428;
        goto try_finally_handler_229;
    }
    goto branch_end_74;
    branch_no_74:;
    // Tried code
    tmp_cond_value_111 = NULL;
    // Tried code
    tmp_compexpr_left_102 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_102 == NULL ))
    {
        tmp_compexpr_left_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_102 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 429;
        goto try_finally_handler_233;
    }

    tmp_compexpr_right_102 = const_int_pos_2;
    tmp_assign_source_315 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_102, tmp_compexpr_right_102 );
    if ( tmp_assign_source_315 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 429;
        goto try_finally_handler_233;
    }
    {
        PyObject *old = tmp_and_28__value_1;
        tmp_and_28__value_1 = tmp_assign_source_315;
        Py_XDECREF( old );
    }

    tmp_cond_value_112 = tmp_and_28__value_1;

    tmp_cond_truth_112 = CHECK_IF_TRUE( tmp_cond_value_112 );
    if ( tmp_cond_truth_112 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 429;
        goto try_finally_handler_233;
    }
    if (tmp_cond_truth_112 == 1)
    {
        goto condexpr_true_76;
    }
    else
    {
        goto condexpr_false_76;
    }
    condexpr_true_76:;
    tmp_cond_value_111 = NULL;
    // Tried code
    tmp_result = tmp_and_28__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_28__value_1 );
        tmp_and_28__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_103 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_103 == NULL ))
    {
        tmp_compexpr_left_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_103 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 429;
        goto try_finally_handler_234;
    }

    tmp_compexpr_right_103 = const_int_pos_3;
    tmp_cond_value_111 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_103, tmp_compexpr_right_103 );
    if ( tmp_cond_value_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 429;
        goto try_finally_handler_234;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_234:;
    exception_keeper_type_224 = exception_type;
    exception_keeper_value_224 = exception_value;
    exception_keeper_tb_224 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_224 != NULL )
    {
        exception_type = exception_keeper_type_224;
        exception_value = exception_keeper_value_224;
        exception_tb = exception_keeper_tb_224;

        goto try_finally_handler_233;
    }

    goto finally_end_224;
    finally_end_224:;
    goto condexpr_end_76;
    condexpr_false_76:;
    tmp_cond_value_111 = tmp_and_28__value_1;

    Py_INCREF( tmp_cond_value_111 );
    condexpr_end_76:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_233:;
    exception_keeper_type_225 = exception_type;
    exception_keeper_value_225 = exception_value;
    exception_keeper_tb_225 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_225 != NULL )
    {
        exception_type = exception_keeper_type_225;
        exception_value = exception_keeper_value_225;
        exception_tb = exception_keeper_tb_225;

        goto try_finally_handler_232;
    }

    goto finally_end_225;
    finally_end_225:;
    tmp_cond_truth_111 = CHECK_IF_TRUE( tmp_cond_value_111 );
    if ( tmp_cond_truth_111 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_111 );

        frame_module->f_lineno = 429;
        goto try_finally_handler_232;
    }
    Py_DECREF( tmp_cond_value_111 );
    if (tmp_cond_truth_111 == 1)
    {
        goto branch_yes_75;
    }
    else
    {
        goto branch_no_75;
    }
    branch_yes_75:;
    tmp_assign_source_316 = const_str_digest_029559693a822d565ff011d4620e25f6;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_316 );
    tmp_assign_source_317 = const_str_plain_wolf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_317 );
    tmp_str_arg_52 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_52 == NULL ))
    {
        tmp_str_arg_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 432;
        goto try_finally_handler_232;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_52 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 432;
        goto try_finally_handler_232;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 432;
        goto try_finally_handler_232;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 432;
        goto try_finally_handler_232;
    }
    goto branch_end_75;
    branch_no_75:;
    // Tried code
    tmp_cond_value_113 = NULL;
    // Tried code
    tmp_compexpr_left_104 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_104 == NULL ))
    {
        tmp_compexpr_left_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_104 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 433;
        goto try_finally_handler_236;
    }

    tmp_compexpr_right_104 = const_int_pos_2;
    tmp_assign_source_318 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_104, tmp_compexpr_right_104 );
    if ( tmp_assign_source_318 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 433;
        goto try_finally_handler_236;
    }
    {
        PyObject *old = tmp_and_29__value_1;
        tmp_and_29__value_1 = tmp_assign_source_318;
        Py_XDECREF( old );
    }

    tmp_cond_value_114 = tmp_and_29__value_1;

    tmp_cond_truth_114 = CHECK_IF_TRUE( tmp_cond_value_114 );
    if ( tmp_cond_truth_114 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 433;
        goto try_finally_handler_236;
    }
    if (tmp_cond_truth_114 == 1)
    {
        goto condexpr_true_77;
    }
    else
    {
        goto condexpr_false_77;
    }
    condexpr_true_77:;
    tmp_cond_value_113 = NULL;
    // Tried code
    tmp_result = tmp_and_29__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_29__value_1 );
        tmp_and_29__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_105 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_105 == NULL ))
    {
        tmp_compexpr_left_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_105 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 433;
        goto try_finally_handler_237;
    }

    tmp_compexpr_right_105 = const_int_pos_4;
    tmp_cond_value_113 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_105, tmp_compexpr_right_105 );
    if ( tmp_cond_value_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 433;
        goto try_finally_handler_237;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_237:;
    exception_keeper_type_226 = exception_type;
    exception_keeper_value_226 = exception_value;
    exception_keeper_tb_226 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_226 != NULL )
    {
        exception_type = exception_keeper_type_226;
        exception_value = exception_keeper_value_226;
        exception_tb = exception_keeper_tb_226;

        goto try_finally_handler_236;
    }

    goto finally_end_226;
    finally_end_226:;
    goto condexpr_end_77;
    condexpr_false_77:;
    tmp_cond_value_113 = tmp_and_29__value_1;

    Py_INCREF( tmp_cond_value_113 );
    condexpr_end_77:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_236:;
    exception_keeper_type_227 = exception_type;
    exception_keeper_value_227 = exception_value;
    exception_keeper_tb_227 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_227 != NULL )
    {
        exception_type = exception_keeper_type_227;
        exception_value = exception_keeper_value_227;
        exception_tb = exception_keeper_tb_227;

        goto try_finally_handler_235;
    }

    goto finally_end_227;
    finally_end_227:;
    tmp_cond_truth_113 = CHECK_IF_TRUE( tmp_cond_value_113 );
    if ( tmp_cond_truth_113 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_113 );

        frame_module->f_lineno = 433;
        goto try_finally_handler_235;
    }
    Py_DECREF( tmp_cond_value_113 );
    if (tmp_cond_truth_113 == 1)
    {
        goto branch_yes_76;
    }
    else
    {
        goto branch_no_76;
    }
    branch_yes_76:;
    tmp_assign_source_319 = const_str_digest_c5845beb5f02d2e462e6849569c9b507;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_319 );
    tmp_assign_source_320 = const_str_plain_wolf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_320 );
    tmp_str_arg_53 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_53 == NULL ))
    {
        tmp_str_arg_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 436;
        goto try_finally_handler_235;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_53 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 436;
        goto try_finally_handler_235;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 436;
        goto try_finally_handler_235;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 436;
        goto try_finally_handler_235;
    }
    goto branch_end_76;
    branch_no_76:;
    // Tried code
    tmp_cond_value_115 = NULL;
    // Tried code
    tmp_compexpr_left_106 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_106 == NULL ))
    {
        tmp_compexpr_left_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_106 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 437;
        goto try_finally_handler_239;
    }

    tmp_compexpr_right_106 = const_int_pos_2;
    tmp_assign_source_321 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_106, tmp_compexpr_right_106 );
    if ( tmp_assign_source_321 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 437;
        goto try_finally_handler_239;
    }
    {
        PyObject *old = tmp_and_30__value_1;
        tmp_and_30__value_1 = tmp_assign_source_321;
        Py_XDECREF( old );
    }

    tmp_cond_value_116 = tmp_and_30__value_1;

    tmp_cond_truth_116 = CHECK_IF_TRUE( tmp_cond_value_116 );
    if ( tmp_cond_truth_116 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 437;
        goto try_finally_handler_239;
    }
    if (tmp_cond_truth_116 == 1)
    {
        goto condexpr_true_78;
    }
    else
    {
        goto condexpr_false_78;
    }
    condexpr_true_78:;
    tmp_cond_value_115 = NULL;
    // Tried code
    tmp_result = tmp_and_30__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_30__value_1 );
        tmp_and_30__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_107 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_107 == NULL ))
    {
        tmp_compexpr_left_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_107 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 437;
        goto try_finally_handler_240;
    }

    tmp_compexpr_right_107 = const_int_pos_5;
    tmp_cond_value_115 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_107, tmp_compexpr_right_107 );
    if ( tmp_cond_value_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 437;
        goto try_finally_handler_240;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_240:;
    exception_keeper_type_228 = exception_type;
    exception_keeper_value_228 = exception_value;
    exception_keeper_tb_228 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_228 != NULL )
    {
        exception_type = exception_keeper_type_228;
        exception_value = exception_keeper_value_228;
        exception_tb = exception_keeper_tb_228;

        goto try_finally_handler_239;
    }

    goto finally_end_228;
    finally_end_228:;
    goto condexpr_end_78;
    condexpr_false_78:;
    tmp_cond_value_115 = tmp_and_30__value_1;

    Py_INCREF( tmp_cond_value_115 );
    condexpr_end_78:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_239:;
    exception_keeper_type_229 = exception_type;
    exception_keeper_value_229 = exception_value;
    exception_keeper_tb_229 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_229 != NULL )
    {
        exception_type = exception_keeper_type_229;
        exception_value = exception_keeper_value_229;
        exception_tb = exception_keeper_tb_229;

        goto try_finally_handler_238;
    }

    goto finally_end_229;
    finally_end_229:;
    tmp_cond_truth_115 = CHECK_IF_TRUE( tmp_cond_value_115 );
    if ( tmp_cond_truth_115 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_115 );

        frame_module->f_lineno = 437;
        goto try_finally_handler_238;
    }
    Py_DECREF( tmp_cond_value_115 );
    if (tmp_cond_truth_115 == 1)
    {
        goto branch_yes_77;
    }
    else
    {
        goto branch_no_77;
    }
    branch_yes_77:;
    tmp_assign_source_322 = const_str_digest_39caad57a5328ef8469d72fb0a3dce49;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_322 );
    tmp_assign_source_323 = const_str_plain_wolf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_323 );
    tmp_str_arg_54 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_54 == NULL ))
    {
        tmp_str_arg_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_54 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 440;
        goto try_finally_handler_238;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_54 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 440;
        goto try_finally_handler_238;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 440;
        goto try_finally_handler_238;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 440;
        goto try_finally_handler_238;
    }
    goto branch_end_77;
    branch_no_77:;
    // Tried code
    tmp_cond_value_117 = NULL;
    // Tried code
    tmp_compexpr_left_108 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_108 == NULL ))
    {
        tmp_compexpr_left_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_108 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 442;
        goto try_finally_handler_242;
    }

    tmp_compexpr_right_108 = const_int_pos_3;
    tmp_assign_source_324 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_108, tmp_compexpr_right_108 );
    if ( tmp_assign_source_324 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 442;
        goto try_finally_handler_242;
    }
    {
        PyObject *old = tmp_and_31__value_1;
        tmp_and_31__value_1 = tmp_assign_source_324;
        Py_XDECREF( old );
    }

    tmp_cond_value_118 = tmp_and_31__value_1;

    tmp_cond_truth_118 = CHECK_IF_TRUE( tmp_cond_value_118 );
    if ( tmp_cond_truth_118 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 442;
        goto try_finally_handler_242;
    }
    if (tmp_cond_truth_118 == 1)
    {
        goto condexpr_true_79;
    }
    else
    {
        goto condexpr_false_79;
    }
    condexpr_true_79:;
    tmp_cond_value_117 = NULL;
    // Tried code
    tmp_result = tmp_and_31__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_31__value_1 );
        tmp_and_31__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_109 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_109 == NULL ))
    {
        tmp_compexpr_left_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_109 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 442;
        goto try_finally_handler_243;
    }

    tmp_compexpr_right_109 = const_int_pos_1;
    tmp_cond_value_117 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_109, tmp_compexpr_right_109 );
    if ( tmp_cond_value_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 442;
        goto try_finally_handler_243;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_243:;
    exception_keeper_type_230 = exception_type;
    exception_keeper_value_230 = exception_value;
    exception_keeper_tb_230 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_230 != NULL )
    {
        exception_type = exception_keeper_type_230;
        exception_value = exception_keeper_value_230;
        exception_tb = exception_keeper_tb_230;

        goto try_finally_handler_242;
    }

    goto finally_end_230;
    finally_end_230:;
    goto condexpr_end_79;
    condexpr_false_79:;
    tmp_cond_value_117 = tmp_and_31__value_1;

    Py_INCREF( tmp_cond_value_117 );
    condexpr_end_79:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_242:;
    exception_keeper_type_231 = exception_type;
    exception_keeper_value_231 = exception_value;
    exception_keeper_tb_231 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_231 != NULL )
    {
        exception_type = exception_keeper_type_231;
        exception_value = exception_keeper_value_231;
        exception_tb = exception_keeper_tb_231;

        goto try_finally_handler_241;
    }

    goto finally_end_231;
    finally_end_231:;
    tmp_cond_truth_117 = CHECK_IF_TRUE( tmp_cond_value_117 );
    if ( tmp_cond_truth_117 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_117 );

        frame_module->f_lineno = 442;
        goto try_finally_handler_241;
    }
    Py_DECREF( tmp_cond_value_117 );
    if (tmp_cond_truth_117 == 1)
    {
        goto branch_yes_78;
    }
    else
    {
        goto branch_no_78;
    }
    branch_yes_78:;
    tmp_assign_source_325 = const_str_digest_e582571519f6cff1e30f74d31c952c9a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_325 );
    tmp_str_arg_55 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_55 == NULL ))
    {
        tmp_str_arg_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_55 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 444;
        goto try_finally_handler_241;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_55 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 444;
        goto try_finally_handler_241;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 444;
        goto try_finally_handler_241;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 444;
        goto try_finally_handler_241;
    }
    goto branch_end_78;
    branch_no_78:;
    // Tried code
    tmp_cond_value_119 = NULL;
    // Tried code
    tmp_compexpr_left_110 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_110 == NULL ))
    {
        tmp_compexpr_left_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_110 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 445;
        goto try_finally_handler_245;
    }

    tmp_compexpr_right_110 = const_int_pos_3;
    tmp_assign_source_326 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_110, tmp_compexpr_right_110 );
    if ( tmp_assign_source_326 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 445;
        goto try_finally_handler_245;
    }
    {
        PyObject *old = tmp_and_32__value_1;
        tmp_and_32__value_1 = tmp_assign_source_326;
        Py_XDECREF( old );
    }

    tmp_cond_value_120 = tmp_and_32__value_1;

    tmp_cond_truth_120 = CHECK_IF_TRUE( tmp_cond_value_120 );
    if ( tmp_cond_truth_120 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 445;
        goto try_finally_handler_245;
    }
    if (tmp_cond_truth_120 == 1)
    {
        goto condexpr_true_80;
    }
    else
    {
        goto condexpr_false_80;
    }
    condexpr_true_80:;
    tmp_cond_value_119 = NULL;
    // Tried code
    tmp_result = tmp_and_32__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_32__value_1 );
        tmp_and_32__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_111 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_111 == NULL ))
    {
        tmp_compexpr_left_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_111 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 445;
        goto try_finally_handler_246;
    }

    tmp_compexpr_right_111 = const_int_pos_2;
    tmp_cond_value_119 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_111, tmp_compexpr_right_111 );
    if ( tmp_cond_value_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 445;
        goto try_finally_handler_246;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_246:;
    exception_keeper_type_232 = exception_type;
    exception_keeper_value_232 = exception_value;
    exception_keeper_tb_232 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_232 != NULL )
    {
        exception_type = exception_keeper_type_232;
        exception_value = exception_keeper_value_232;
        exception_tb = exception_keeper_tb_232;

        goto try_finally_handler_245;
    }

    goto finally_end_232;
    finally_end_232:;
    goto condexpr_end_80;
    condexpr_false_80:;
    tmp_cond_value_119 = tmp_and_32__value_1;

    Py_INCREF( tmp_cond_value_119 );
    condexpr_end_80:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_245:;
    exception_keeper_type_233 = exception_type;
    exception_keeper_value_233 = exception_value;
    exception_keeper_tb_233 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_233 != NULL )
    {
        exception_type = exception_keeper_type_233;
        exception_value = exception_keeper_value_233;
        exception_tb = exception_keeper_tb_233;

        goto try_finally_handler_244;
    }

    goto finally_end_233;
    finally_end_233:;
    tmp_cond_truth_119 = CHECK_IF_TRUE( tmp_cond_value_119 );
    if ( tmp_cond_truth_119 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_119 );

        frame_module->f_lineno = 445;
        goto try_finally_handler_244;
    }
    Py_DECREF( tmp_cond_value_119 );
    if (tmp_cond_truth_119 == 1)
    {
        goto branch_yes_79;
    }
    else
    {
        goto branch_no_79;
    }
    branch_yes_79:;
    tmp_assign_source_327 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_327 );
    tmp_assign_source_328 = const_str_digest_2c47311a43adbe6cffcde0d775213faf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_328 );
    tmp_str_arg_56 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_56 == NULL ))
    {
        tmp_str_arg_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_56 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 448;
        goto try_finally_handler_244;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_56 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 448;
        goto try_finally_handler_244;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 448;
        goto try_finally_handler_244;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 448;
        goto try_finally_handler_244;
    }
    goto branch_end_79;
    branch_no_79:;
    // Tried code
    tmp_cond_value_121 = NULL;
    // Tried code
    tmp_compexpr_left_112 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_112 == NULL ))
    {
        tmp_compexpr_left_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_112 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 449;
        goto try_finally_handler_248;
    }

    tmp_compexpr_right_112 = const_int_pos_3;
    tmp_assign_source_329 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_112, tmp_compexpr_right_112 );
    if ( tmp_assign_source_329 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 449;
        goto try_finally_handler_248;
    }
    {
        PyObject *old = tmp_and_33__value_1;
        tmp_and_33__value_1 = tmp_assign_source_329;
        Py_XDECREF( old );
    }

    tmp_cond_value_122 = tmp_and_33__value_1;

    tmp_cond_truth_122 = CHECK_IF_TRUE( tmp_cond_value_122 );
    if ( tmp_cond_truth_122 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 449;
        goto try_finally_handler_248;
    }
    if (tmp_cond_truth_122 == 1)
    {
        goto condexpr_true_81;
    }
    else
    {
        goto condexpr_false_81;
    }
    condexpr_true_81:;
    tmp_cond_value_121 = NULL;
    // Tried code
    tmp_result = tmp_and_33__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_33__value_1 );
        tmp_and_33__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_113 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_113 == NULL ))
    {
        tmp_compexpr_left_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_113 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 449;
        goto try_finally_handler_249;
    }

    tmp_compexpr_right_113 = const_int_pos_3;
    tmp_cond_value_121 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_113, tmp_compexpr_right_113 );
    if ( tmp_cond_value_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 449;
        goto try_finally_handler_249;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_249:;
    exception_keeper_type_234 = exception_type;
    exception_keeper_value_234 = exception_value;
    exception_keeper_tb_234 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_234 != NULL )
    {
        exception_type = exception_keeper_type_234;
        exception_value = exception_keeper_value_234;
        exception_tb = exception_keeper_tb_234;

        goto try_finally_handler_248;
    }

    goto finally_end_234;
    finally_end_234:;
    goto condexpr_end_81;
    condexpr_false_81:;
    tmp_cond_value_121 = tmp_and_33__value_1;

    Py_INCREF( tmp_cond_value_121 );
    condexpr_end_81:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_248:;
    exception_keeper_type_235 = exception_type;
    exception_keeper_value_235 = exception_value;
    exception_keeper_tb_235 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_235 != NULL )
    {
        exception_type = exception_keeper_type_235;
        exception_value = exception_keeper_value_235;
        exception_tb = exception_keeper_tb_235;

        goto try_finally_handler_247;
    }

    goto finally_end_235;
    finally_end_235:;
    tmp_cond_truth_121 = CHECK_IF_TRUE( tmp_cond_value_121 );
    if ( tmp_cond_truth_121 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_121 );

        frame_module->f_lineno = 449;
        goto try_finally_handler_247;
    }
    Py_DECREF( tmp_cond_value_121 );
    if (tmp_cond_truth_121 == 1)
    {
        goto branch_yes_80;
    }
    else
    {
        goto branch_no_80;
    }
    branch_yes_80:;
    tmp_assign_source_330 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_330 );
    tmp_assign_source_331 = const_str_digest_795d0e465cbfbbd5ceb9b80bea3956ab;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_331 );
    goto branch_end_80;
    branch_no_80:;
    // Tried code
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_compexpr_left_114 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_114 == NULL ))
    {
        tmp_compexpr_left_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_114 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 453;
        goto try_finally_handler_251;
    }

    tmp_compexpr_right_114 = const_int_pos_2;
    tmp_assign_source_332 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_114, tmp_compexpr_right_114 );
    if ( tmp_assign_source_332 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_251;
    }
    {
        PyObject *old = tmp_and_34__value_3;
        tmp_and_34__value_3 = tmp_assign_source_332;
        Py_XDECREF( old );
    }

    tmp_cond_value_124 = tmp_and_34__value_3;

    tmp_cond_truth_124 = CHECK_IF_TRUE( tmp_cond_value_124 );
    if ( tmp_cond_truth_124 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_251;
    }
    if (tmp_cond_truth_124 == 1)
    {
        goto condexpr_true_82;
    }
    else
    {
        goto condexpr_false_82;
    }
    condexpr_true_82:;
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_result = tmp_and_34__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_34__value_3 );
        tmp_and_34__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_compexpr_left_115 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_115 == NULL ))
    {
        tmp_compexpr_left_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_115 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 453;
        goto try_finally_handler_254;
    }

    tmp_compexpr_right_115 = const_int_pos_6;
    tmp_assign_source_333 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_115, tmp_compexpr_right_115 );
    if ( tmp_assign_source_333 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_254;
    }
    {
        PyObject *old = tmp_and_34__value_2;
        tmp_and_34__value_2 = tmp_assign_source_333;
        Py_XDECREF( old );
    }

    tmp_cond_value_125 = tmp_and_34__value_2;

    tmp_cond_truth_125 = CHECK_IF_TRUE( tmp_cond_value_125 );
    if ( tmp_cond_truth_125 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_254;
    }
    if (tmp_cond_truth_125 == 1)
    {
        goto condexpr_true_83;
    }
    else
    {
        goto condexpr_false_83;
    }
    condexpr_true_83:;
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_result = tmp_and_34__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_34__value_2 );
        tmp_and_34__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_compexpr_left_116 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_116 == NULL ))
    {
        tmp_compexpr_left_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_116 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 453;
        goto try_finally_handler_257;
    }

    tmp_compexpr_right_116 = const_int_0;
    tmp_assign_source_334 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_116, tmp_compexpr_right_116 );
    if ( tmp_assign_source_334 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_257;
    }
    {
        PyObject *old = tmp_and_34__value_1;
        tmp_and_34__value_1 = tmp_assign_source_334;
        Py_XDECREF( old );
    }

    tmp_cond_value_126 = tmp_and_34__value_1;

    tmp_cond_truth_126 = CHECK_IF_TRUE( tmp_cond_value_126 );
    if ( tmp_cond_truth_126 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_257;
    }
    if (tmp_cond_truth_126 == 1)
    {
        goto condexpr_true_84;
    }
    else
    {
        goto condexpr_false_84;
    }
    condexpr_true_84:;
    tmp_cond_value_123 = NULL;
    // Tried code
    tmp_result = tmp_and_34__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_34__value_1 );
        tmp_and_34__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_117 = const_str_plain_letter;
    tmp_compexpr_right_117 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_117 == NULL ))
    {
        tmp_compexpr_right_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_117 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 453;
        goto try_finally_handler_258;
    }

    tmp_cond_value_123 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_117, tmp_compexpr_right_117 );
    if ( tmp_cond_value_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_258;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_258:;
    exception_keeper_type_236 = exception_type;
    exception_keeper_value_236 = exception_value;
    exception_keeper_tb_236 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_236 != NULL )
    {
        exception_type = exception_keeper_type_236;
        exception_value = exception_keeper_value_236;
        exception_tb = exception_keeper_tb_236;

        goto try_finally_handler_257;
    }

    goto finally_end_236;
    finally_end_236:;
    goto condexpr_end_84;
    condexpr_false_84:;
    tmp_cond_value_123 = tmp_and_34__value_1;

    condexpr_end_84:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_257:;
    exception_keeper_type_237 = exception_type;
    exception_keeper_value_237 = exception_value;
    exception_keeper_tb_237 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_237 != NULL )
    {
        exception_type = exception_keeper_type_237;
        exception_value = exception_keeper_value_237;
        exception_tb = exception_keeper_tb_237;

        goto try_finally_handler_256;
    }

    goto finally_end_237;
    finally_end_237:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_256:;
    exception_keeper_type_238 = exception_type;
    exception_keeper_value_238 = exception_value;
    exception_keeper_tb_238 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_238 != NULL )
    {
        exception_type = exception_keeper_type_238;
        exception_value = exception_keeper_value_238;
        exception_tb = exception_keeper_tb_238;

        goto try_finally_handler_255;
    }

    goto finally_end_238;
    finally_end_238:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_255:;
    exception_keeper_type_239 = exception_type;
    exception_keeper_value_239 = exception_value;
    exception_keeper_tb_239 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_76 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_34__value_1 );
    tmp_and_34__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_76;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_239 != NULL )
    {
        exception_type = exception_keeper_type_239;
        exception_value = exception_keeper_value_239;
        exception_tb = exception_keeper_tb_239;

        goto try_finally_handler_254;
    }

    goto finally_end_239;
    finally_end_239:;
    goto condexpr_end_83;
    condexpr_false_83:;
    tmp_cond_value_123 = tmp_and_34__value_2;

    condexpr_end_83:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_254:;
    exception_keeper_type_240 = exception_type;
    exception_keeper_value_240 = exception_value;
    exception_keeper_tb_240 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_240 != NULL )
    {
        exception_type = exception_keeper_type_240;
        exception_value = exception_keeper_value_240;
        exception_tb = exception_keeper_tb_240;

        goto try_finally_handler_253;
    }

    goto finally_end_240;
    finally_end_240:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_253:;
    exception_keeper_type_241 = exception_type;
    exception_keeper_value_241 = exception_value;
    exception_keeper_tb_241 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_241 != NULL )
    {
        exception_type = exception_keeper_type_241;
        exception_value = exception_keeper_value_241;
        exception_tb = exception_keeper_tb_241;

        goto try_finally_handler_252;
    }

    goto finally_end_241;
    finally_end_241:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_252:;
    exception_keeper_type_242 = exception_type;
    exception_keeper_value_242 = exception_value;
    exception_keeper_tb_242 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_77 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_34__value_2 );
    tmp_and_34__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_77;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_242 != NULL )
    {
        exception_type = exception_keeper_type_242;
        exception_value = exception_keeper_value_242;
        exception_tb = exception_keeper_tb_242;

        goto try_finally_handler_251;
    }

    goto finally_end_242;
    finally_end_242:;
    goto condexpr_end_82;
    condexpr_false_82:;
    tmp_cond_value_123 = tmp_and_34__value_3;

    condexpr_end_82:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_251:;
    exception_keeper_type_243 = exception_type;
    exception_keeper_value_243 = exception_value;
    exception_keeper_tb_243 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_243 != NULL )
    {
        exception_type = exception_keeper_type_243;
        exception_value = exception_keeper_value_243;
        exception_tb = exception_keeper_tb_243;

        goto try_finally_handler_250;
    }

    goto finally_end_243;
    finally_end_243:;
    tmp_cond_truth_123 = CHECK_IF_TRUE( tmp_cond_value_123 );
    if ( tmp_cond_truth_123 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 453;
        goto try_finally_handler_250;
    }
    if (tmp_cond_truth_123 == 1)
    {
        goto branch_yes_81;
    }
    else
    {
        goto branch_no_81;
    }
    branch_yes_81:;
    tmp_assign_source_335 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_335 );
    tmp_assign_source_336 = const_str_digest_fb572985bd006ae9245ba81b212a8195;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_336 );
    tmp_str_arg_57 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_57 == NULL ))
    {
        tmp_str_arg_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_57 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 456;
        goto try_finally_handler_250;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_57 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 456;
        goto try_finally_handler_250;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 456;
        goto try_finally_handler_250;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 456;
        goto try_finally_handler_250;
    }
    goto branch_end_81;
    branch_no_81:;
    // Tried code
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_compexpr_left_118 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_118 == NULL ))
    {
        tmp_compexpr_left_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_118 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto try_finally_handler_260;
    }

    tmp_compexpr_right_118 = const_int_pos_2;
    tmp_assign_source_337 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_118, tmp_compexpr_right_118 );
    if ( tmp_assign_source_337 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_260;
    }
    {
        PyObject *old = tmp_and_35__value_3;
        tmp_and_35__value_3 = tmp_assign_source_337;
        Py_XDECREF( old );
    }

    tmp_cond_value_128 = tmp_and_35__value_3;

    tmp_cond_truth_128 = CHECK_IF_TRUE( tmp_cond_value_128 );
    if ( tmp_cond_truth_128 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_260;
    }
    if (tmp_cond_truth_128 == 1)
    {
        goto condexpr_true_85;
    }
    else
    {
        goto condexpr_false_85;
    }
    condexpr_true_85:;
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_result = tmp_and_35__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_35__value_3 );
        tmp_and_35__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_compexpr_left_119 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_119 == NULL ))
    {
        tmp_compexpr_left_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_119 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto try_finally_handler_263;
    }

    tmp_compexpr_right_119 = const_int_pos_6;
    tmp_assign_source_338 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_119, tmp_compexpr_right_119 );
    if ( tmp_assign_source_338 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_263;
    }
    {
        PyObject *old = tmp_and_35__value_2;
        tmp_and_35__value_2 = tmp_assign_source_338;
        Py_XDECREF( old );
    }

    tmp_cond_value_129 = tmp_and_35__value_2;

    tmp_cond_truth_129 = CHECK_IF_TRUE( tmp_cond_value_129 );
    if ( tmp_cond_truth_129 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_263;
    }
    if (tmp_cond_truth_129 == 1)
    {
        goto condexpr_true_86;
    }
    else
    {
        goto condexpr_false_86;
    }
    condexpr_true_86:;
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_result = tmp_and_35__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_35__value_2 );
        tmp_and_35__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_compexpr_left_120 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_120 == NULL ))
    {
        tmp_compexpr_left_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_120 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto try_finally_handler_266;
    }

    tmp_compexpr_right_120 = const_int_0;
    tmp_assign_source_339 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_120, tmp_compexpr_right_120 );
    if ( tmp_assign_source_339 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_266;
    }
    {
        PyObject *old = tmp_and_35__value_1;
        tmp_and_35__value_1 = tmp_assign_source_339;
        Py_XDECREF( old );
    }

    tmp_cond_value_130 = tmp_and_35__value_1;

    tmp_cond_truth_130 = CHECK_IF_TRUE( tmp_cond_value_130 );
    if ( tmp_cond_truth_130 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_266;
    }
    if (tmp_cond_truth_130 == 1)
    {
        goto condexpr_true_87;
    }
    else
    {
        goto condexpr_false_87;
    }
    condexpr_true_87:;
    tmp_cond_value_127 = NULL;
    // Tried code
    tmp_result = tmp_and_35__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_35__value_1 );
        tmp_and_35__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_121 = const_str_plain_letter;
    tmp_compexpr_right_121 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_121 == NULL ))
    {
        tmp_compexpr_right_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_121 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto try_finally_handler_267;
    }

    tmp_cond_value_127 = SEQUENCE_CONTAINS( tmp_compexpr_left_121, tmp_compexpr_right_121 );
    if ( tmp_cond_value_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_267;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_267:;
    exception_keeper_type_244 = exception_type;
    exception_keeper_value_244 = exception_value;
    exception_keeper_tb_244 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_244 != NULL )
    {
        exception_type = exception_keeper_type_244;
        exception_value = exception_keeper_value_244;
        exception_tb = exception_keeper_tb_244;

        goto try_finally_handler_266;
    }

    goto finally_end_244;
    finally_end_244:;
    goto condexpr_end_87;
    condexpr_false_87:;
    tmp_cond_value_127 = tmp_and_35__value_1;

    condexpr_end_87:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_266:;
    exception_keeper_type_245 = exception_type;
    exception_keeper_value_245 = exception_value;
    exception_keeper_tb_245 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_245 != NULL )
    {
        exception_type = exception_keeper_type_245;
        exception_value = exception_keeper_value_245;
        exception_tb = exception_keeper_tb_245;

        goto try_finally_handler_265;
    }

    goto finally_end_245;
    finally_end_245:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_265:;
    exception_keeper_type_246 = exception_type;
    exception_keeper_value_246 = exception_value;
    exception_keeper_tb_246 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_246 != NULL )
    {
        exception_type = exception_keeper_type_246;
        exception_value = exception_keeper_value_246;
        exception_tb = exception_keeper_tb_246;

        goto try_finally_handler_264;
    }

    goto finally_end_246;
    finally_end_246:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_264:;
    exception_keeper_type_247 = exception_type;
    exception_keeper_value_247 = exception_value;
    exception_keeper_tb_247 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_78 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_35__value_1 );
    tmp_and_35__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_78;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_247 != NULL )
    {
        exception_type = exception_keeper_type_247;
        exception_value = exception_keeper_value_247;
        exception_tb = exception_keeper_tb_247;

        goto try_finally_handler_263;
    }

    goto finally_end_247;
    finally_end_247:;
    goto condexpr_end_86;
    condexpr_false_86:;
    tmp_cond_value_127 = tmp_and_35__value_2;

    condexpr_end_86:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_263:;
    exception_keeper_type_248 = exception_type;
    exception_keeper_value_248 = exception_value;
    exception_keeper_tb_248 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_248 != NULL )
    {
        exception_type = exception_keeper_type_248;
        exception_value = exception_keeper_value_248;
        exception_tb = exception_keeper_tb_248;

        goto try_finally_handler_262;
    }

    goto finally_end_248;
    finally_end_248:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_262:;
    exception_keeper_type_249 = exception_type;
    exception_keeper_value_249 = exception_value;
    exception_keeper_tb_249 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_249 != NULL )
    {
        exception_type = exception_keeper_type_249;
        exception_value = exception_keeper_value_249;
        exception_tb = exception_keeper_tb_249;

        goto try_finally_handler_261;
    }

    goto finally_end_249;
    finally_end_249:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_261:;
    exception_keeper_type_250 = exception_type;
    exception_keeper_value_250 = exception_value;
    exception_keeper_tb_250 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_79 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_35__value_2 );
    tmp_and_35__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_79;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_250 != NULL )
    {
        exception_type = exception_keeper_type_250;
        exception_value = exception_keeper_value_250;
        exception_tb = exception_keeper_tb_250;

        goto try_finally_handler_260;
    }

    goto finally_end_250;
    finally_end_250:;
    goto condexpr_end_85;
    condexpr_false_85:;
    tmp_cond_value_127 = tmp_and_35__value_3;

    condexpr_end_85:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_260:;
    exception_keeper_type_251 = exception_type;
    exception_keeper_value_251 = exception_value;
    exception_keeper_tb_251 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_251 != NULL )
    {
        exception_type = exception_keeper_type_251;
        exception_value = exception_keeper_value_251;
        exception_tb = exception_keeper_tb_251;

        goto try_finally_handler_259;
    }

    goto finally_end_251;
    finally_end_251:;
    tmp_cond_truth_127 = CHECK_IF_TRUE( tmp_cond_value_127 );
    if ( tmp_cond_truth_127 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 457;
        goto try_finally_handler_259;
    }
    if (tmp_cond_truth_127 == 1)
    {
        goto branch_yes_82;
    }
    else
    {
        goto branch_no_82;
    }
    branch_yes_82:;
    tmp_assign_source_340 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_340 );
    tmp_assign_source_341 = const_str_digest_bc144dfab83d3e4c8793fb69ca76af38;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_341 );
    tmp_assign_source_342 = const_str_plain_wolf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_342 );
    tmp_str_arg_58 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_58 == NULL ))
    {
        tmp_str_arg_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 461;
        goto try_finally_handler_259;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_58 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 461;
        goto try_finally_handler_259;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 461;
        goto try_finally_handler_259;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 461;
        goto try_finally_handler_259;
    }
    goto branch_end_82;
    branch_no_82:;
    // Tried code
    tmp_cond_value_131 = NULL;
    // Tried code
    tmp_compexpr_left_122 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_122 == NULL ))
    {
        tmp_compexpr_left_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_122 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 462;
        goto try_finally_handler_269;
    }

    tmp_compexpr_right_122 = const_int_pos_2;
    tmp_assign_source_343 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_122, tmp_compexpr_right_122 );
    if ( tmp_assign_source_343 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 462;
        goto try_finally_handler_269;
    }
    {
        PyObject *old = tmp_and_36__value_2;
        tmp_and_36__value_2 = tmp_assign_source_343;
        Py_XDECREF( old );
    }

    tmp_cond_value_132 = tmp_and_36__value_2;

    tmp_cond_truth_132 = CHECK_IF_TRUE( tmp_cond_value_132 );
    if ( tmp_cond_truth_132 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 462;
        goto try_finally_handler_269;
    }
    if (tmp_cond_truth_132 == 1)
    {
        goto condexpr_true_88;
    }
    else
    {
        goto condexpr_false_88;
    }
    condexpr_true_88:;
    tmp_cond_value_131 = NULL;
    // Tried code
    tmp_cond_value_131 = NULL;
    // Tried code
    tmp_result = tmp_and_36__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_36__value_2 );
        tmp_and_36__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_131 = NULL;
    // Tried code
    tmp_compexpr_left_123 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_123 == NULL ))
    {
        tmp_compexpr_left_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_123 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 462;
        goto try_finally_handler_272;
    }

    tmp_compexpr_right_123 = const_int_pos_7;
    tmp_assign_source_344 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_123, tmp_compexpr_right_123 );
    if ( tmp_assign_source_344 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 462;
        goto try_finally_handler_272;
    }
    {
        PyObject *old = tmp_and_36__value_1;
        tmp_and_36__value_1 = tmp_assign_source_344;
        Py_XDECREF( old );
    }

    tmp_cond_value_133 = tmp_and_36__value_1;

    tmp_cond_truth_133 = CHECK_IF_TRUE( tmp_cond_value_133 );
    if ( tmp_cond_truth_133 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 462;
        goto try_finally_handler_272;
    }
    if (tmp_cond_truth_133 == 1)
    {
        goto condexpr_true_89;
    }
    else
    {
        goto condexpr_false_89;
    }
    condexpr_true_89:;
    tmp_cond_value_131 = NULL;
    // Tried code
    tmp_result = tmp_and_36__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_36__value_1 );
        tmp_and_36__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_124 = const_str_plain_lights;
    tmp_compexpr_right_124 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_124 == NULL ))
    {
        tmp_compexpr_right_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_124 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 462;
        goto try_finally_handler_273;
    }

    tmp_cond_value_131 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_124, tmp_compexpr_right_124 );
    if ( tmp_cond_value_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 462;
        goto try_finally_handler_273;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_273:;
    exception_keeper_type_252 = exception_type;
    exception_keeper_value_252 = exception_value;
    exception_keeper_tb_252 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_252 != NULL )
    {
        exception_type = exception_keeper_type_252;
        exception_value = exception_keeper_value_252;
        exception_tb = exception_keeper_tb_252;

        goto try_finally_handler_272;
    }

    goto finally_end_252;
    finally_end_252:;
    goto condexpr_end_89;
    condexpr_false_89:;
    tmp_cond_value_131 = tmp_and_36__value_1;

    condexpr_end_89:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_272:;
    exception_keeper_type_253 = exception_type;
    exception_keeper_value_253 = exception_value;
    exception_keeper_tb_253 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_253 != NULL )
    {
        exception_type = exception_keeper_type_253;
        exception_value = exception_keeper_value_253;
        exception_tb = exception_keeper_tb_253;

        goto try_finally_handler_271;
    }

    goto finally_end_253;
    finally_end_253:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_271:;
    exception_keeper_type_254 = exception_type;
    exception_keeper_value_254 = exception_value;
    exception_keeper_tb_254 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_254 != NULL )
    {
        exception_type = exception_keeper_type_254;
        exception_value = exception_keeper_value_254;
        exception_tb = exception_keeper_tb_254;

        goto try_finally_handler_270;
    }

    goto finally_end_254;
    finally_end_254:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_270:;
    exception_keeper_type_255 = exception_type;
    exception_keeper_value_255 = exception_value;
    exception_keeper_tb_255 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_80 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_36__value_1 );
    tmp_and_36__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_80;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_255 != NULL )
    {
        exception_type = exception_keeper_type_255;
        exception_value = exception_keeper_value_255;
        exception_tb = exception_keeper_tb_255;

        goto try_finally_handler_269;
    }

    goto finally_end_255;
    finally_end_255:;
    goto condexpr_end_88;
    condexpr_false_88:;
    tmp_cond_value_131 = tmp_and_36__value_2;

    condexpr_end_88:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_269:;
    exception_keeper_type_256 = exception_type;
    exception_keeper_value_256 = exception_value;
    exception_keeper_tb_256 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_256 != NULL )
    {
        exception_type = exception_keeper_type_256;
        exception_value = exception_keeper_value_256;
        exception_tb = exception_keeper_tb_256;

        goto try_finally_handler_268;
    }

    goto finally_end_256;
    finally_end_256:;
    tmp_cond_truth_131 = CHECK_IF_TRUE( tmp_cond_value_131 );
    if ( tmp_cond_truth_131 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 462;
        goto try_finally_handler_268;
    }
    if (tmp_cond_truth_131 == 1)
    {
        goto branch_yes_83;
    }
    else
    {
        goto branch_no_83;
    }
    branch_yes_83:;
    tmp_assign_source_345 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_345 );
    tmp_assign_source_346 = const_str_digest_b55296abcb94c286fae041b0eb84944a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_346 );
    tmp_str_arg_59 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_59 == NULL ))
    {
        tmp_str_arg_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 465;
        goto try_finally_handler_268;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_59 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 465;
        goto try_finally_handler_268;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 465;
        goto try_finally_handler_268;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 465;
        goto try_finally_handler_268;
    }
    goto branch_end_83;
    branch_no_83:;
    // Tried code
    tmp_cond_value_134 = NULL;
    // Tried code
    tmp_compexpr_left_125 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_125 == NULL ))
    {
        tmp_compexpr_left_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_125 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 466;
        goto try_finally_handler_275;
    }

    tmp_compexpr_right_125 = const_int_pos_2;
    tmp_assign_source_347 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_125, tmp_compexpr_right_125 );
    if ( tmp_assign_source_347 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 466;
        goto try_finally_handler_275;
    }
    {
        PyObject *old = tmp_and_37__value_2;
        tmp_and_37__value_2 = tmp_assign_source_347;
        Py_XDECREF( old );
    }

    tmp_cond_value_135 = tmp_and_37__value_2;

    tmp_cond_truth_135 = CHECK_IF_TRUE( tmp_cond_value_135 );
    if ( tmp_cond_truth_135 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 466;
        goto try_finally_handler_275;
    }
    if (tmp_cond_truth_135 == 1)
    {
        goto condexpr_true_90;
    }
    else
    {
        goto condexpr_false_90;
    }
    condexpr_true_90:;
    tmp_cond_value_134 = NULL;
    // Tried code
    tmp_cond_value_134 = NULL;
    // Tried code
    tmp_result = tmp_and_37__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_37__value_2 );
        tmp_and_37__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_134 = NULL;
    // Tried code
    tmp_compexpr_left_126 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_126 == NULL ))
    {
        tmp_compexpr_left_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_126 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 466;
        goto try_finally_handler_278;
    }

    tmp_compexpr_right_126 = const_int_pos_7;
    tmp_assign_source_348 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_126, tmp_compexpr_right_126 );
    if ( tmp_assign_source_348 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 466;
        goto try_finally_handler_278;
    }
    {
        PyObject *old = tmp_and_37__value_1;
        tmp_and_37__value_1 = tmp_assign_source_348;
        Py_XDECREF( old );
    }

    tmp_cond_value_136 = tmp_and_37__value_1;

    tmp_cond_truth_136 = CHECK_IF_TRUE( tmp_cond_value_136 );
    if ( tmp_cond_truth_136 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 466;
        goto try_finally_handler_278;
    }
    if (tmp_cond_truth_136 == 1)
    {
        goto condexpr_true_91;
    }
    else
    {
        goto condexpr_false_91;
    }
    condexpr_true_91:;
    tmp_cond_value_134 = NULL;
    // Tried code
    tmp_result = tmp_and_37__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_37__value_1 );
        tmp_and_37__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_127 = const_str_plain_lights;
    tmp_compexpr_right_127 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_127 == NULL ))
    {
        tmp_compexpr_right_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_127 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 466;
        goto try_finally_handler_279;
    }

    tmp_cond_value_134 = SEQUENCE_CONTAINS( tmp_compexpr_left_127, tmp_compexpr_right_127 );
    if ( tmp_cond_value_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 466;
        goto try_finally_handler_279;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_279:;
    exception_keeper_type_257 = exception_type;
    exception_keeper_value_257 = exception_value;
    exception_keeper_tb_257 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_257 != NULL )
    {
        exception_type = exception_keeper_type_257;
        exception_value = exception_keeper_value_257;
        exception_tb = exception_keeper_tb_257;

        goto try_finally_handler_278;
    }

    goto finally_end_257;
    finally_end_257:;
    goto condexpr_end_91;
    condexpr_false_91:;
    tmp_cond_value_134 = tmp_and_37__value_1;

    condexpr_end_91:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_278:;
    exception_keeper_type_258 = exception_type;
    exception_keeper_value_258 = exception_value;
    exception_keeper_tb_258 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_258 != NULL )
    {
        exception_type = exception_keeper_type_258;
        exception_value = exception_keeper_value_258;
        exception_tb = exception_keeper_tb_258;

        goto try_finally_handler_277;
    }

    goto finally_end_258;
    finally_end_258:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_277:;
    exception_keeper_type_259 = exception_type;
    exception_keeper_value_259 = exception_value;
    exception_keeper_tb_259 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_259 != NULL )
    {
        exception_type = exception_keeper_type_259;
        exception_value = exception_keeper_value_259;
        exception_tb = exception_keeper_tb_259;

        goto try_finally_handler_276;
    }

    goto finally_end_259;
    finally_end_259:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_276:;
    exception_keeper_type_260 = exception_type;
    exception_keeper_value_260 = exception_value;
    exception_keeper_tb_260 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_81 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_37__value_1 );
    tmp_and_37__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_81;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_260 != NULL )
    {
        exception_type = exception_keeper_type_260;
        exception_value = exception_keeper_value_260;
        exception_tb = exception_keeper_tb_260;

        goto try_finally_handler_275;
    }

    goto finally_end_260;
    finally_end_260:;
    goto condexpr_end_90;
    condexpr_false_90:;
    tmp_cond_value_134 = tmp_and_37__value_2;

    condexpr_end_90:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_275:;
    exception_keeper_type_261 = exception_type;
    exception_keeper_value_261 = exception_value;
    exception_keeper_tb_261 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_261 != NULL )
    {
        exception_type = exception_keeper_type_261;
        exception_value = exception_keeper_value_261;
        exception_tb = exception_keeper_tb_261;

        goto try_finally_handler_274;
    }

    goto finally_end_261;
    finally_end_261:;
    tmp_cond_truth_134 = CHECK_IF_TRUE( tmp_cond_value_134 );
    if ( tmp_cond_truth_134 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 466;
        goto try_finally_handler_274;
    }
    if (tmp_cond_truth_134 == 1)
    {
        goto branch_yes_84;
    }
    else
    {
        goto branch_no_84;
    }
    branch_yes_84:;
    tmp_assign_source_349 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_349 );
    tmp_assign_source_350 = const_str_digest_4c096ee9ad66010b63f08a39d1d33567;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_350 );
    tmp_str_arg_60 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_60 == NULL ))
    {
        tmp_str_arg_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 469;
        goto try_finally_handler_274;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_60 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 469;
        goto try_finally_handler_274;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 469;
        goto try_finally_handler_274;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 469;
        goto try_finally_handler_274;
    }
    goto branch_end_84;
    branch_no_84:;
    // Tried code
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_compexpr_left_128 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_128 == NULL ))
    {
        tmp_compexpr_left_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_128 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 470;
        goto try_finally_handler_281;
    }

    tmp_compexpr_right_128 = const_int_pos_3;
    tmp_assign_source_351 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_128, tmp_compexpr_right_128 );
    if ( tmp_assign_source_351 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_281;
    }
    {
        PyObject *old = tmp_and_38__value_3;
        tmp_and_38__value_3 = tmp_assign_source_351;
        Py_XDECREF( old );
    }

    tmp_cond_value_138 = tmp_and_38__value_3;

    tmp_cond_truth_138 = CHECK_IF_TRUE( tmp_cond_value_138 );
    if ( tmp_cond_truth_138 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_281;
    }
    if (tmp_cond_truth_138 == 1)
    {
        goto condexpr_true_92;
    }
    else
    {
        goto condexpr_false_92;
    }
    condexpr_true_92:;
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_result = tmp_and_38__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_38__value_3 );
        tmp_and_38__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_compexpr_left_129 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_129 == NULL ))
    {
        tmp_compexpr_left_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_129 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 470;
        goto try_finally_handler_284;
    }

    tmp_compexpr_right_129 = const_int_pos_7;
    tmp_assign_source_352 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_129, tmp_compexpr_right_129 );
    if ( tmp_assign_source_352 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_284;
    }
    {
        PyObject *old = tmp_and_38__value_2;
        tmp_and_38__value_2 = tmp_assign_source_352;
        Py_XDECREF( old );
    }

    tmp_cond_value_139 = tmp_and_38__value_2;

    tmp_cond_truth_139 = CHECK_IF_TRUE( tmp_cond_value_139 );
    if ( tmp_cond_truth_139 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_284;
    }
    if (tmp_cond_truth_139 == 1)
    {
        goto condexpr_true_93;
    }
    else
    {
        goto condexpr_false_93;
    }
    condexpr_true_93:;
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_result = tmp_and_38__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_38__value_2 );
        tmp_and_38__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_compexpr_left_130 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_130 == NULL ))
    {
        tmp_compexpr_left_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_130 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 470;
        goto try_finally_handler_287;
    }

    tmp_compexpr_right_130 = const_int_0;
    tmp_assign_source_353 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_130, tmp_compexpr_right_130 );
    if ( tmp_assign_source_353 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_287;
    }
    {
        PyObject *old = tmp_and_38__value_1;
        tmp_and_38__value_1 = tmp_assign_source_353;
        Py_XDECREF( old );
    }

    tmp_cond_value_140 = tmp_and_38__value_1;

    tmp_cond_truth_140 = CHECK_IF_TRUE( tmp_cond_value_140 );
    if ( tmp_cond_truth_140 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_287;
    }
    if (tmp_cond_truth_140 == 1)
    {
        goto condexpr_true_94;
    }
    else
    {
        goto condexpr_false_94;
    }
    condexpr_true_94:;
    tmp_cond_value_137 = NULL;
    // Tried code
    tmp_result = tmp_and_38__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_38__value_1 );
        tmp_and_38__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_131 = const_str_plain_lights;
    tmp_compexpr_right_131 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_131 == NULL ))
    {
        tmp_compexpr_right_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_131 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 470;
        goto try_finally_handler_288;
    }

    tmp_cond_value_137 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_131, tmp_compexpr_right_131 );
    if ( tmp_cond_value_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_288;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_288:;
    exception_keeper_type_262 = exception_type;
    exception_keeper_value_262 = exception_value;
    exception_keeper_tb_262 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_262 != NULL )
    {
        exception_type = exception_keeper_type_262;
        exception_value = exception_keeper_value_262;
        exception_tb = exception_keeper_tb_262;

        goto try_finally_handler_287;
    }

    goto finally_end_262;
    finally_end_262:;
    goto condexpr_end_94;
    condexpr_false_94:;
    tmp_cond_value_137 = tmp_and_38__value_1;

    condexpr_end_94:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_287:;
    exception_keeper_type_263 = exception_type;
    exception_keeper_value_263 = exception_value;
    exception_keeper_tb_263 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_263 != NULL )
    {
        exception_type = exception_keeper_type_263;
        exception_value = exception_keeper_value_263;
        exception_tb = exception_keeper_tb_263;

        goto try_finally_handler_286;
    }

    goto finally_end_263;
    finally_end_263:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_286:;
    exception_keeper_type_264 = exception_type;
    exception_keeper_value_264 = exception_value;
    exception_keeper_tb_264 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_264 != NULL )
    {
        exception_type = exception_keeper_type_264;
        exception_value = exception_keeper_value_264;
        exception_tb = exception_keeper_tb_264;

        goto try_finally_handler_285;
    }

    goto finally_end_264;
    finally_end_264:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_285:;
    exception_keeper_type_265 = exception_type;
    exception_keeper_value_265 = exception_value;
    exception_keeper_tb_265 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_82 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_38__value_1 );
    tmp_and_38__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_82;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_265 != NULL )
    {
        exception_type = exception_keeper_type_265;
        exception_value = exception_keeper_value_265;
        exception_tb = exception_keeper_tb_265;

        goto try_finally_handler_284;
    }

    goto finally_end_265;
    finally_end_265:;
    goto condexpr_end_93;
    condexpr_false_93:;
    tmp_cond_value_137 = tmp_and_38__value_2;

    condexpr_end_93:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_284:;
    exception_keeper_type_266 = exception_type;
    exception_keeper_value_266 = exception_value;
    exception_keeper_tb_266 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_266 != NULL )
    {
        exception_type = exception_keeper_type_266;
        exception_value = exception_keeper_value_266;
        exception_tb = exception_keeper_tb_266;

        goto try_finally_handler_283;
    }

    goto finally_end_266;
    finally_end_266:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_283:;
    exception_keeper_type_267 = exception_type;
    exception_keeper_value_267 = exception_value;
    exception_keeper_tb_267 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_267 != NULL )
    {
        exception_type = exception_keeper_type_267;
        exception_value = exception_keeper_value_267;
        exception_tb = exception_keeper_tb_267;

        goto try_finally_handler_282;
    }

    goto finally_end_267;
    finally_end_267:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_282:;
    exception_keeper_type_268 = exception_type;
    exception_keeper_value_268 = exception_value;
    exception_keeper_tb_268 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_83 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_38__value_2 );
    tmp_and_38__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_83;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_268 != NULL )
    {
        exception_type = exception_keeper_type_268;
        exception_value = exception_keeper_value_268;
        exception_tb = exception_keeper_tb_268;

        goto try_finally_handler_281;
    }

    goto finally_end_268;
    finally_end_268:;
    goto condexpr_end_92;
    condexpr_false_92:;
    tmp_cond_value_137 = tmp_and_38__value_3;

    condexpr_end_92:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_281:;
    exception_keeper_type_269 = exception_type;
    exception_keeper_value_269 = exception_value;
    exception_keeper_tb_269 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_269 != NULL )
    {
        exception_type = exception_keeper_type_269;
        exception_value = exception_keeper_value_269;
        exception_tb = exception_keeper_tb_269;

        goto try_finally_handler_280;
    }

    goto finally_end_269;
    finally_end_269:;
    tmp_cond_truth_137 = CHECK_IF_TRUE( tmp_cond_value_137 );
    if ( tmp_cond_truth_137 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 470;
        goto try_finally_handler_280;
    }
    if (tmp_cond_truth_137 == 1)
    {
        goto branch_yes_85;
    }
    else
    {
        goto branch_no_85;
    }
    branch_yes_85:;
    tmp_assign_source_354 = const_str_digest_a2b3dc252592de0399801fc84eaab4bb;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_354 );
    tmp_str_arg_61 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_61 == NULL ))
    {
        tmp_str_arg_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_61 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 472;
        goto try_finally_handler_280;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_61 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 472;
        goto try_finally_handler_280;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 472;
        goto try_finally_handler_280;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 472;
        goto try_finally_handler_280;
    }
    goto branch_end_85;
    branch_no_85:;
    // Tried code
    tmp_cond_value_141 = NULL;
    // Tried code
    tmp_compexpr_left_132 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_132 == NULL ))
    {
        tmp_compexpr_left_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_132 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 473;
        goto try_finally_handler_290;
    }

    tmp_compexpr_right_132 = const_int_pos_2;
    tmp_assign_source_355 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_132, tmp_compexpr_right_132 );
    if ( tmp_assign_source_355 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 473;
        goto try_finally_handler_290;
    }
    {
        PyObject *old = tmp_and_39__value_2;
        tmp_and_39__value_2 = tmp_assign_source_355;
        Py_XDECREF( old );
    }

    tmp_cond_value_142 = tmp_and_39__value_2;

    tmp_cond_truth_142 = CHECK_IF_TRUE( tmp_cond_value_142 );
    if ( tmp_cond_truth_142 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 473;
        goto try_finally_handler_290;
    }
    if (tmp_cond_truth_142 == 1)
    {
        goto condexpr_true_95;
    }
    else
    {
        goto condexpr_false_95;
    }
    condexpr_true_95:;
    tmp_cond_value_141 = NULL;
    // Tried code
    tmp_cond_value_141 = NULL;
    // Tried code
    tmp_result = tmp_and_39__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_39__value_2 );
        tmp_and_39__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_141 = NULL;
    // Tried code
    tmp_compexpr_left_133 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_133 == NULL ))
    {
        tmp_compexpr_left_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_133 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 473;
        goto try_finally_handler_293;
    }

    tmp_compexpr_right_133 = const_int_pos_8;
    tmp_assign_source_356 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_133, tmp_compexpr_right_133 );
    if ( tmp_assign_source_356 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 473;
        goto try_finally_handler_293;
    }
    {
        PyObject *old = tmp_and_39__value_1;
        tmp_and_39__value_1 = tmp_assign_source_356;
        Py_XDECREF( old );
    }

    tmp_cond_value_143 = tmp_and_39__value_1;

    tmp_cond_truth_143 = CHECK_IF_TRUE( tmp_cond_value_143 );
    if ( tmp_cond_truth_143 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 473;
        goto try_finally_handler_293;
    }
    if (tmp_cond_truth_143 == 1)
    {
        goto condexpr_true_96;
    }
    else
    {
        goto condexpr_false_96;
    }
    condexpr_true_96:;
    tmp_cond_value_141 = NULL;
    // Tried code
    tmp_result = tmp_and_39__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_39__value_1 );
        tmp_and_39__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_134 = const_str_plain_lights;
    tmp_compexpr_right_134 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_134 == NULL ))
    {
        tmp_compexpr_right_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_134 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 473;
        goto try_finally_handler_294;
    }

    tmp_cond_value_141 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_134, tmp_compexpr_right_134 );
    if ( tmp_cond_value_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 473;
        goto try_finally_handler_294;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_294:;
    exception_keeper_type_270 = exception_type;
    exception_keeper_value_270 = exception_value;
    exception_keeper_tb_270 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_270 != NULL )
    {
        exception_type = exception_keeper_type_270;
        exception_value = exception_keeper_value_270;
        exception_tb = exception_keeper_tb_270;

        goto try_finally_handler_293;
    }

    goto finally_end_270;
    finally_end_270:;
    goto condexpr_end_96;
    condexpr_false_96:;
    tmp_cond_value_141 = tmp_and_39__value_1;

    condexpr_end_96:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_293:;
    exception_keeper_type_271 = exception_type;
    exception_keeper_value_271 = exception_value;
    exception_keeper_tb_271 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_271 != NULL )
    {
        exception_type = exception_keeper_type_271;
        exception_value = exception_keeper_value_271;
        exception_tb = exception_keeper_tb_271;

        goto try_finally_handler_292;
    }

    goto finally_end_271;
    finally_end_271:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_292:;
    exception_keeper_type_272 = exception_type;
    exception_keeper_value_272 = exception_value;
    exception_keeper_tb_272 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_272 != NULL )
    {
        exception_type = exception_keeper_type_272;
        exception_value = exception_keeper_value_272;
        exception_tb = exception_keeper_tb_272;

        goto try_finally_handler_291;
    }

    goto finally_end_272;
    finally_end_272:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_291:;
    exception_keeper_type_273 = exception_type;
    exception_keeper_value_273 = exception_value;
    exception_keeper_tb_273 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_84 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_39__value_1 );
    tmp_and_39__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_84;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_273 != NULL )
    {
        exception_type = exception_keeper_type_273;
        exception_value = exception_keeper_value_273;
        exception_tb = exception_keeper_tb_273;

        goto try_finally_handler_290;
    }

    goto finally_end_273;
    finally_end_273:;
    goto condexpr_end_95;
    condexpr_false_95:;
    tmp_cond_value_141 = tmp_and_39__value_2;

    condexpr_end_95:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_290:;
    exception_keeper_type_274 = exception_type;
    exception_keeper_value_274 = exception_value;
    exception_keeper_tb_274 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_274 != NULL )
    {
        exception_type = exception_keeper_type_274;
        exception_value = exception_keeper_value_274;
        exception_tb = exception_keeper_tb_274;

        goto try_finally_handler_289;
    }

    goto finally_end_274;
    finally_end_274:;
    tmp_cond_truth_141 = CHECK_IF_TRUE( tmp_cond_value_141 );
    if ( tmp_cond_truth_141 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 473;
        goto try_finally_handler_289;
    }
    if (tmp_cond_truth_141 == 1)
    {
        goto branch_yes_86;
    }
    else
    {
        goto branch_no_86;
    }
    branch_yes_86:;
    tmp_assign_source_357 = const_str_digest_89df3938dd396e8d79433cd7d4ee6a5a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_357 );
    tmp_str_arg_62 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_62 == NULL ))
    {
        tmp_str_arg_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 475;
        goto try_finally_handler_289;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_62 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 475;
        goto try_finally_handler_289;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 475;
        goto try_finally_handler_289;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 475;
        goto try_finally_handler_289;
    }
    goto branch_end_86;
    branch_no_86:;
    // Tried code
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_compexpr_left_135 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_135 == NULL ))
    {
        tmp_compexpr_left_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_135 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 476;
        goto try_finally_handler_296;
    }

    tmp_compexpr_right_135 = const_int_pos_2;
    tmp_assign_source_358 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_135, tmp_compexpr_right_135 );
    if ( tmp_assign_source_358 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_296;
    }
    {
        PyObject *old = tmp_and_40__value_3;
        tmp_and_40__value_3 = tmp_assign_source_358;
        Py_XDECREF( old );
    }

    tmp_cond_value_145 = tmp_and_40__value_3;

    tmp_cond_truth_145 = CHECK_IF_TRUE( tmp_cond_value_145 );
    if ( tmp_cond_truth_145 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_296;
    }
    if (tmp_cond_truth_145 == 1)
    {
        goto condexpr_true_97;
    }
    else
    {
        goto condexpr_false_97;
    }
    condexpr_true_97:;
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_result = tmp_and_40__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_40__value_3 );
        tmp_and_40__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_compexpr_left_136 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_136 == NULL ))
    {
        tmp_compexpr_left_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_136 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 476;
        goto try_finally_handler_299;
    }

    tmp_compexpr_right_136 = const_int_pos_8;
    tmp_assign_source_359 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_136, tmp_compexpr_right_136 );
    if ( tmp_assign_source_359 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_299;
    }
    {
        PyObject *old = tmp_and_40__value_2;
        tmp_and_40__value_2 = tmp_assign_source_359;
        Py_XDECREF( old );
    }

    tmp_cond_value_146 = tmp_and_40__value_2;

    tmp_cond_truth_146 = CHECK_IF_TRUE( tmp_cond_value_146 );
    if ( tmp_cond_truth_146 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_299;
    }
    if (tmp_cond_truth_146 == 1)
    {
        goto condexpr_true_98;
    }
    else
    {
        goto condexpr_false_98;
    }
    condexpr_true_98:;
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_result = tmp_and_40__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_40__value_2 );
        tmp_and_40__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_compexpr_left_137 = const_str_plain_lights;
    tmp_compexpr_right_137 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_137 == NULL ))
    {
        tmp_compexpr_right_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_137 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 476;
        goto try_finally_handler_302;
    }

    tmp_assign_source_360 = SEQUENCE_CONTAINS( tmp_compexpr_left_137, tmp_compexpr_right_137 );
    if ( tmp_assign_source_360 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_302;
    }
    {
        PyObject *old = tmp_and_40__value_1;
        tmp_and_40__value_1 = tmp_assign_source_360;
        Py_INCREF( tmp_and_40__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_147 = tmp_and_40__value_1;

    tmp_cond_truth_147 = CHECK_IF_TRUE( tmp_cond_value_147 );
    if ( tmp_cond_truth_147 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_302;
    }
    if (tmp_cond_truth_147 == 1)
    {
        goto condexpr_true_99;
    }
    else
    {
        goto condexpr_false_99;
    }
    condexpr_true_99:;
    tmp_cond_value_144 = NULL;
    // Tried code
    tmp_result = tmp_and_40__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_40__value_1 );
        tmp_and_40__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_138 = const_str_plain_trapdoor;
    tmp_compexpr_right_138 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_138 == NULL ))
    {
        tmp_compexpr_right_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_138 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 476;
        goto try_finally_handler_303;
    }

    tmp_cond_value_144 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_138, tmp_compexpr_right_138 );
    if ( tmp_cond_value_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_303;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_303:;
    exception_keeper_type_275 = exception_type;
    exception_keeper_value_275 = exception_value;
    exception_keeper_tb_275 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_275 != NULL )
    {
        exception_type = exception_keeper_type_275;
        exception_value = exception_keeper_value_275;
        exception_tb = exception_keeper_tb_275;

        goto try_finally_handler_302;
    }

    goto finally_end_275;
    finally_end_275:;
    goto condexpr_end_99;
    condexpr_false_99:;
    tmp_cond_value_144 = tmp_and_40__value_1;

    condexpr_end_99:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_302:;
    exception_keeper_type_276 = exception_type;
    exception_keeper_value_276 = exception_value;
    exception_keeper_tb_276 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_276 != NULL )
    {
        exception_type = exception_keeper_type_276;
        exception_value = exception_keeper_value_276;
        exception_tb = exception_keeper_tb_276;

        goto try_finally_handler_301;
    }

    goto finally_end_276;
    finally_end_276:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_301:;
    exception_keeper_type_277 = exception_type;
    exception_keeper_value_277 = exception_value;
    exception_keeper_tb_277 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_277 != NULL )
    {
        exception_type = exception_keeper_type_277;
        exception_value = exception_keeper_value_277;
        exception_tb = exception_keeper_tb_277;

        goto try_finally_handler_300;
    }

    goto finally_end_277;
    finally_end_277:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_300:;
    exception_keeper_type_278 = exception_type;
    exception_keeper_value_278 = exception_value;
    exception_keeper_tb_278 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_85 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_40__value_1 );
    tmp_and_40__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_85;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_278 != NULL )
    {
        exception_type = exception_keeper_type_278;
        exception_value = exception_keeper_value_278;
        exception_tb = exception_keeper_tb_278;

        goto try_finally_handler_299;
    }

    goto finally_end_278;
    finally_end_278:;
    goto condexpr_end_98;
    condexpr_false_98:;
    tmp_cond_value_144 = tmp_and_40__value_2;

    condexpr_end_98:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_299:;
    exception_keeper_type_279 = exception_type;
    exception_keeper_value_279 = exception_value;
    exception_keeper_tb_279 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_279 != NULL )
    {
        exception_type = exception_keeper_type_279;
        exception_value = exception_keeper_value_279;
        exception_tb = exception_keeper_tb_279;

        goto try_finally_handler_298;
    }

    goto finally_end_279;
    finally_end_279:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_298:;
    exception_keeper_type_280 = exception_type;
    exception_keeper_value_280 = exception_value;
    exception_keeper_tb_280 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_280 != NULL )
    {
        exception_type = exception_keeper_type_280;
        exception_value = exception_keeper_value_280;
        exception_tb = exception_keeper_tb_280;

        goto try_finally_handler_297;
    }

    goto finally_end_280;
    finally_end_280:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_297:;
    exception_keeper_type_281 = exception_type;
    exception_keeper_value_281 = exception_value;
    exception_keeper_tb_281 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_86 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_40__value_2 );
    tmp_and_40__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_86;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_281 != NULL )
    {
        exception_type = exception_keeper_type_281;
        exception_value = exception_keeper_value_281;
        exception_tb = exception_keeper_tb_281;

        goto try_finally_handler_296;
    }

    goto finally_end_281;
    finally_end_281:;
    goto condexpr_end_97;
    condexpr_false_97:;
    tmp_cond_value_144 = tmp_and_40__value_3;

    condexpr_end_97:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_296:;
    exception_keeper_type_282 = exception_type;
    exception_keeper_value_282 = exception_value;
    exception_keeper_tb_282 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_282 != NULL )
    {
        exception_type = exception_keeper_type_282;
        exception_value = exception_keeper_value_282;
        exception_tb = exception_keeper_tb_282;

        goto try_finally_handler_295;
    }

    goto finally_end_282;
    finally_end_282:;
    tmp_cond_truth_144 = CHECK_IF_TRUE( tmp_cond_value_144 );
    if ( tmp_cond_truth_144 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 476;
        goto try_finally_handler_295;
    }
    if (tmp_cond_truth_144 == 1)
    {
        goto branch_yes_87;
    }
    else
    {
        goto branch_no_87;
    }
    branch_yes_87:;
    tmp_assign_source_361 = const_str_digest_3bf82b805dc7c1c40adbbeb52912278d;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_361 );
    tmp_str_arg_63 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_63 == NULL ))
    {
        tmp_str_arg_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 478;
        goto try_finally_handler_295;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_63 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 478;
        goto try_finally_handler_295;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 478;
        goto try_finally_handler_295;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 478;
        goto try_finally_handler_295;
    }
    goto branch_end_87;
    branch_no_87:;
    // Tried code
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_compexpr_left_139 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_139 == NULL ))
    {
        tmp_compexpr_left_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_139 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 479;
        goto try_finally_handler_305;
    }

    tmp_compexpr_right_139 = const_int_pos_2;
    tmp_assign_source_362 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_139, tmp_compexpr_right_139 );
    if ( tmp_assign_source_362 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_305;
    }
    {
        PyObject *old = tmp_and_41__value_4;
        tmp_and_41__value_4 = tmp_assign_source_362;
        Py_XDECREF( old );
    }

    tmp_cond_value_149 = tmp_and_41__value_4;

    tmp_cond_truth_149 = CHECK_IF_TRUE( tmp_cond_value_149 );
    if ( tmp_cond_truth_149 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_305;
    }
    if (tmp_cond_truth_149 == 1)
    {
        goto condexpr_true_100;
    }
    else
    {
        goto condexpr_false_100;
    }
    condexpr_true_100:;
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_result = tmp_and_41__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_41__value_4 );
        tmp_and_41__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_compexpr_left_140 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_140 == NULL ))
    {
        tmp_compexpr_left_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_140 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 479;
        goto try_finally_handler_308;
    }

    tmp_compexpr_right_140 = const_int_pos_8;
    tmp_assign_source_363 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_140, tmp_compexpr_right_140 );
    if ( tmp_assign_source_363 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_308;
    }
    {
        PyObject *old = tmp_and_41__value_3;
        tmp_and_41__value_3 = tmp_assign_source_363;
        Py_XDECREF( old );
    }

    tmp_cond_value_150 = tmp_and_41__value_3;

    tmp_cond_truth_150 = CHECK_IF_TRUE( tmp_cond_value_150 );
    if ( tmp_cond_truth_150 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_308;
    }
    if (tmp_cond_truth_150 == 1)
    {
        goto condexpr_true_101;
    }
    else
    {
        goto condexpr_false_101;
    }
    condexpr_true_101:;
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_result = tmp_and_41__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_41__value_3 );
        tmp_and_41__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_compexpr_left_141 = const_str_plain_lights;
    tmp_compexpr_right_141 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_141 == NULL ))
    {
        tmp_compexpr_right_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_141 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 479;
        goto try_finally_handler_311;
    }

    tmp_assign_source_364 = SEQUENCE_CONTAINS( tmp_compexpr_left_141, tmp_compexpr_right_141 );
    if ( tmp_assign_source_364 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_311;
    }
    {
        PyObject *old = tmp_and_41__value_2;
        tmp_and_41__value_2 = tmp_assign_source_364;
        Py_INCREF( tmp_and_41__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_151 = tmp_and_41__value_2;

    tmp_cond_truth_151 = CHECK_IF_TRUE( tmp_cond_value_151 );
    if ( tmp_cond_truth_151 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_311;
    }
    if (tmp_cond_truth_151 == 1)
    {
        goto condexpr_true_102;
    }
    else
    {
        goto condexpr_false_102;
    }
    condexpr_true_102:;
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_result = tmp_and_41__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_41__value_2 );
        tmp_and_41__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_compexpr_left_142 = const_str_plain_trapdoor;
    tmp_compexpr_right_142 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_142 == NULL ))
    {
        tmp_compexpr_right_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_142 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 479;
        goto try_finally_handler_314;
    }

    tmp_assign_source_365 = SEQUENCE_CONTAINS( tmp_compexpr_left_142, tmp_compexpr_right_142 );
    if ( tmp_assign_source_365 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_314;
    }
    {
        PyObject *old = tmp_and_41__value_1;
        tmp_and_41__value_1 = tmp_assign_source_365;
        Py_INCREF( tmp_and_41__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_152 = tmp_and_41__value_1;

    tmp_cond_truth_152 = CHECK_IF_TRUE( tmp_cond_value_152 );
    if ( tmp_cond_truth_152 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_314;
    }
    if (tmp_cond_truth_152 == 1)
    {
        goto condexpr_true_103;
    }
    else
    {
        goto condexpr_false_103;
    }
    condexpr_true_103:;
    tmp_cond_value_148 = NULL;
    // Tried code
    tmp_result = tmp_and_41__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_41__value_1 );
        tmp_and_41__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_143 = const_str_plain_key;
    tmp_compexpr_right_143 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_143 == NULL ))
    {
        tmp_compexpr_right_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_143 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 479;
        goto try_finally_handler_315;
    }

    tmp_cond_value_148 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_143, tmp_compexpr_right_143 );
    if ( tmp_cond_value_148 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_315;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_315:;
    exception_keeper_type_283 = exception_type;
    exception_keeper_value_283 = exception_value;
    exception_keeper_tb_283 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_283 != NULL )
    {
        exception_type = exception_keeper_type_283;
        exception_value = exception_keeper_value_283;
        exception_tb = exception_keeper_tb_283;

        goto try_finally_handler_314;
    }

    goto finally_end_283;
    finally_end_283:;
    goto condexpr_end_103;
    condexpr_false_103:;
    tmp_cond_value_148 = tmp_and_41__value_1;

    condexpr_end_103:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_314:;
    exception_keeper_type_284 = exception_type;
    exception_keeper_value_284 = exception_value;
    exception_keeper_tb_284 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_284 != NULL )
    {
        exception_type = exception_keeper_type_284;
        exception_value = exception_keeper_value_284;
        exception_tb = exception_keeper_tb_284;

        goto try_finally_handler_313;
    }

    goto finally_end_284;
    finally_end_284:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_313:;
    exception_keeper_type_285 = exception_type;
    exception_keeper_value_285 = exception_value;
    exception_keeper_tb_285 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_285 != NULL )
    {
        exception_type = exception_keeper_type_285;
        exception_value = exception_keeper_value_285;
        exception_tb = exception_keeper_tb_285;

        goto try_finally_handler_312;
    }

    goto finally_end_285;
    finally_end_285:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_312:;
    exception_keeper_type_286 = exception_type;
    exception_keeper_value_286 = exception_value;
    exception_keeper_tb_286 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_87 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_41__value_1 );
    tmp_and_41__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_87;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_286 != NULL )
    {
        exception_type = exception_keeper_type_286;
        exception_value = exception_keeper_value_286;
        exception_tb = exception_keeper_tb_286;

        goto try_finally_handler_311;
    }

    goto finally_end_286;
    finally_end_286:;
    goto condexpr_end_102;
    condexpr_false_102:;
    tmp_cond_value_148 = tmp_and_41__value_2;

    condexpr_end_102:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_311:;
    exception_keeper_type_287 = exception_type;
    exception_keeper_value_287 = exception_value;
    exception_keeper_tb_287 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_287 != NULL )
    {
        exception_type = exception_keeper_type_287;
        exception_value = exception_keeper_value_287;
        exception_tb = exception_keeper_tb_287;

        goto try_finally_handler_310;
    }

    goto finally_end_287;
    finally_end_287:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_310:;
    exception_keeper_type_288 = exception_type;
    exception_keeper_value_288 = exception_value;
    exception_keeper_tb_288 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_288 != NULL )
    {
        exception_type = exception_keeper_type_288;
        exception_value = exception_keeper_value_288;
        exception_tb = exception_keeper_tb_288;

        goto try_finally_handler_309;
    }

    goto finally_end_288;
    finally_end_288:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_309:;
    exception_keeper_type_289 = exception_type;
    exception_keeper_value_289 = exception_value;
    exception_keeper_tb_289 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_88 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_41__value_2 );
    tmp_and_41__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_88;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_289 != NULL )
    {
        exception_type = exception_keeper_type_289;
        exception_value = exception_keeper_value_289;
        exception_tb = exception_keeper_tb_289;

        goto try_finally_handler_308;
    }

    goto finally_end_289;
    finally_end_289:;
    goto condexpr_end_101;
    condexpr_false_101:;
    tmp_cond_value_148 = tmp_and_41__value_3;

    condexpr_end_101:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_308:;
    exception_keeper_type_290 = exception_type;
    exception_keeper_value_290 = exception_value;
    exception_keeper_tb_290 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_290 != NULL )
    {
        exception_type = exception_keeper_type_290;
        exception_value = exception_keeper_value_290;
        exception_tb = exception_keeper_tb_290;

        goto try_finally_handler_307;
    }

    goto finally_end_290;
    finally_end_290:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_307:;
    exception_keeper_type_291 = exception_type;
    exception_keeper_value_291 = exception_value;
    exception_keeper_tb_291 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_291 != NULL )
    {
        exception_type = exception_keeper_type_291;
        exception_value = exception_keeper_value_291;
        exception_tb = exception_keeper_tb_291;

        goto try_finally_handler_306;
    }

    goto finally_end_291;
    finally_end_291:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_306:;
    exception_keeper_type_292 = exception_type;
    exception_keeper_value_292 = exception_value;
    exception_keeper_tb_292 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_89 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_41__value_3 );
    tmp_and_41__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_89;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_292 != NULL )
    {
        exception_type = exception_keeper_type_292;
        exception_value = exception_keeper_value_292;
        exception_tb = exception_keeper_tb_292;

        goto try_finally_handler_305;
    }

    goto finally_end_292;
    finally_end_292:;
    goto condexpr_end_100;
    condexpr_false_100:;
    tmp_cond_value_148 = tmp_and_41__value_4;

    condexpr_end_100:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_305:;
    exception_keeper_type_293 = exception_type;
    exception_keeper_value_293 = exception_value;
    exception_keeper_tb_293 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_293 != NULL )
    {
        exception_type = exception_keeper_type_293;
        exception_value = exception_keeper_value_293;
        exception_tb = exception_keeper_tb_293;

        goto try_finally_handler_304;
    }

    goto finally_end_293;
    finally_end_293:;
    tmp_cond_truth_148 = CHECK_IF_TRUE( tmp_cond_value_148 );
    if ( tmp_cond_truth_148 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 479;
        goto try_finally_handler_304;
    }
    if (tmp_cond_truth_148 == 1)
    {
        goto branch_yes_88;
    }
    else
    {
        goto branch_no_88;
    }
    branch_yes_88:;
    tmp_assign_source_366 = const_str_digest_46f8790febeafa3b21127987978678e8;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_366 );
    tmp_str_arg_64 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_64 == NULL ))
    {
        tmp_str_arg_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_64 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 481;
        goto try_finally_handler_304;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_64 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 481;
        goto try_finally_handler_304;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 481;
        goto try_finally_handler_304;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 481;
        goto try_finally_handler_304;
    }
    goto branch_end_88;
    branch_no_88:;
    // Tried code
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_compexpr_left_144 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_144 == NULL ))
    {
        tmp_compexpr_left_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_144 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 482;
        goto try_finally_handler_317;
    }

    tmp_compexpr_right_144 = const_int_pos_2;
    tmp_assign_source_367 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_144, tmp_compexpr_right_144 );
    if ( tmp_assign_source_367 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_317;
    }
    {
        PyObject *old = tmp_and_42__value_4;
        tmp_and_42__value_4 = tmp_assign_source_367;
        Py_XDECREF( old );
    }

    tmp_cond_value_154 = tmp_and_42__value_4;

    tmp_cond_truth_154 = CHECK_IF_TRUE( tmp_cond_value_154 );
    if ( tmp_cond_truth_154 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_317;
    }
    if (tmp_cond_truth_154 == 1)
    {
        goto condexpr_true_104;
    }
    else
    {
        goto condexpr_false_104;
    }
    condexpr_true_104:;
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_result = tmp_and_42__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_42__value_4 );
        tmp_and_42__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_compexpr_left_145 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_145 == NULL ))
    {
        tmp_compexpr_left_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_145 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 482;
        goto try_finally_handler_320;
    }

    tmp_compexpr_right_145 = const_int_pos_8;
    tmp_assign_source_368 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_145, tmp_compexpr_right_145 );
    if ( tmp_assign_source_368 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_320;
    }
    {
        PyObject *old = tmp_and_42__value_3;
        tmp_and_42__value_3 = tmp_assign_source_368;
        Py_XDECREF( old );
    }

    tmp_cond_value_155 = tmp_and_42__value_3;

    tmp_cond_truth_155 = CHECK_IF_TRUE( tmp_cond_value_155 );
    if ( tmp_cond_truth_155 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_320;
    }
    if (tmp_cond_truth_155 == 1)
    {
        goto condexpr_true_105;
    }
    else
    {
        goto condexpr_false_105;
    }
    condexpr_true_105:;
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_result = tmp_and_42__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_42__value_3 );
        tmp_and_42__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_compexpr_left_146 = const_str_plain_lights;
    tmp_compexpr_right_146 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_146 == NULL ))
    {
        tmp_compexpr_right_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_146 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 482;
        goto try_finally_handler_323;
    }

    tmp_assign_source_369 = SEQUENCE_CONTAINS( tmp_compexpr_left_146, tmp_compexpr_right_146 );
    if ( tmp_assign_source_369 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_323;
    }
    {
        PyObject *old = tmp_and_42__value_2;
        tmp_and_42__value_2 = tmp_assign_source_369;
        Py_INCREF( tmp_and_42__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_156 = tmp_and_42__value_2;

    tmp_cond_truth_156 = CHECK_IF_TRUE( tmp_cond_value_156 );
    if ( tmp_cond_truth_156 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_323;
    }
    if (tmp_cond_truth_156 == 1)
    {
        goto condexpr_true_106;
    }
    else
    {
        goto condexpr_false_106;
    }
    condexpr_true_106:;
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_result = tmp_and_42__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_42__value_2 );
        tmp_and_42__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_compexpr_left_147 = const_str_plain_trapdoor;
    tmp_compexpr_right_147 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_147 == NULL ))
    {
        tmp_compexpr_right_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_147 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 482;
        goto try_finally_handler_326;
    }

    tmp_assign_source_370 = SEQUENCE_CONTAINS( tmp_compexpr_left_147, tmp_compexpr_right_147 );
    if ( tmp_assign_source_370 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_326;
    }
    {
        PyObject *old = tmp_and_42__value_1;
        tmp_and_42__value_1 = tmp_assign_source_370;
        Py_INCREF( tmp_and_42__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_157 = tmp_and_42__value_1;

    tmp_cond_truth_157 = CHECK_IF_TRUE( tmp_cond_value_157 );
    if ( tmp_cond_truth_157 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_326;
    }
    if (tmp_cond_truth_157 == 1)
    {
        goto condexpr_true_107;
    }
    else
    {
        goto condexpr_false_107;
    }
    condexpr_true_107:;
    tmp_cond_value_153 = NULL;
    // Tried code
    tmp_result = tmp_and_42__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_42__value_1 );
        tmp_and_42__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_148 = const_str_plain_key;
    tmp_compexpr_right_148 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_148 == NULL ))
    {
        tmp_compexpr_right_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_148 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 482;
        goto try_finally_handler_327;
    }

    tmp_cond_value_153 = SEQUENCE_CONTAINS( tmp_compexpr_left_148, tmp_compexpr_right_148 );
    if ( tmp_cond_value_153 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_327;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_327:;
    exception_keeper_type_294 = exception_type;
    exception_keeper_value_294 = exception_value;
    exception_keeper_tb_294 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_294 != NULL )
    {
        exception_type = exception_keeper_type_294;
        exception_value = exception_keeper_value_294;
        exception_tb = exception_keeper_tb_294;

        goto try_finally_handler_326;
    }

    goto finally_end_294;
    finally_end_294:;
    goto condexpr_end_107;
    condexpr_false_107:;
    tmp_cond_value_153 = tmp_and_42__value_1;

    condexpr_end_107:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_326:;
    exception_keeper_type_295 = exception_type;
    exception_keeper_value_295 = exception_value;
    exception_keeper_tb_295 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_295 != NULL )
    {
        exception_type = exception_keeper_type_295;
        exception_value = exception_keeper_value_295;
        exception_tb = exception_keeper_tb_295;

        goto try_finally_handler_325;
    }

    goto finally_end_295;
    finally_end_295:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_325:;
    exception_keeper_type_296 = exception_type;
    exception_keeper_value_296 = exception_value;
    exception_keeper_tb_296 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_296 != NULL )
    {
        exception_type = exception_keeper_type_296;
        exception_value = exception_keeper_value_296;
        exception_tb = exception_keeper_tb_296;

        goto try_finally_handler_324;
    }

    goto finally_end_296;
    finally_end_296:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_324:;
    exception_keeper_type_297 = exception_type;
    exception_keeper_value_297 = exception_value;
    exception_keeper_tb_297 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_90 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_42__value_1 );
    tmp_and_42__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_90;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_297 != NULL )
    {
        exception_type = exception_keeper_type_297;
        exception_value = exception_keeper_value_297;
        exception_tb = exception_keeper_tb_297;

        goto try_finally_handler_323;
    }

    goto finally_end_297;
    finally_end_297:;
    goto condexpr_end_106;
    condexpr_false_106:;
    tmp_cond_value_153 = tmp_and_42__value_2;

    condexpr_end_106:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_323:;
    exception_keeper_type_298 = exception_type;
    exception_keeper_value_298 = exception_value;
    exception_keeper_tb_298 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_298 != NULL )
    {
        exception_type = exception_keeper_type_298;
        exception_value = exception_keeper_value_298;
        exception_tb = exception_keeper_tb_298;

        goto try_finally_handler_322;
    }

    goto finally_end_298;
    finally_end_298:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_322:;
    exception_keeper_type_299 = exception_type;
    exception_keeper_value_299 = exception_value;
    exception_keeper_tb_299 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_299 != NULL )
    {
        exception_type = exception_keeper_type_299;
        exception_value = exception_keeper_value_299;
        exception_tb = exception_keeper_tb_299;

        goto try_finally_handler_321;
    }

    goto finally_end_299;
    finally_end_299:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_321:;
    exception_keeper_type_300 = exception_type;
    exception_keeper_value_300 = exception_value;
    exception_keeper_tb_300 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_91 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_42__value_2 );
    tmp_and_42__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_91;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_300 != NULL )
    {
        exception_type = exception_keeper_type_300;
        exception_value = exception_keeper_value_300;
        exception_tb = exception_keeper_tb_300;

        goto try_finally_handler_320;
    }

    goto finally_end_300;
    finally_end_300:;
    goto condexpr_end_105;
    condexpr_false_105:;
    tmp_cond_value_153 = tmp_and_42__value_3;

    condexpr_end_105:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_320:;
    exception_keeper_type_301 = exception_type;
    exception_keeper_value_301 = exception_value;
    exception_keeper_tb_301 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_301 != NULL )
    {
        exception_type = exception_keeper_type_301;
        exception_value = exception_keeper_value_301;
        exception_tb = exception_keeper_tb_301;

        goto try_finally_handler_319;
    }

    goto finally_end_301;
    finally_end_301:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_319:;
    exception_keeper_type_302 = exception_type;
    exception_keeper_value_302 = exception_value;
    exception_keeper_tb_302 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_302 != NULL )
    {
        exception_type = exception_keeper_type_302;
        exception_value = exception_keeper_value_302;
        exception_tb = exception_keeper_tb_302;

        goto try_finally_handler_318;
    }

    goto finally_end_302;
    finally_end_302:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_318:;
    exception_keeper_type_303 = exception_type;
    exception_keeper_value_303 = exception_value;
    exception_keeper_tb_303 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_92 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_42__value_3 );
    tmp_and_42__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_92;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_303 != NULL )
    {
        exception_type = exception_keeper_type_303;
        exception_value = exception_keeper_value_303;
        exception_tb = exception_keeper_tb_303;

        goto try_finally_handler_317;
    }

    goto finally_end_303;
    finally_end_303:;
    goto condexpr_end_104;
    condexpr_false_104:;
    tmp_cond_value_153 = tmp_and_42__value_4;

    condexpr_end_104:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_317:;
    exception_keeper_type_304 = exception_type;
    exception_keeper_value_304 = exception_value;
    exception_keeper_tb_304 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_304 != NULL )
    {
        exception_type = exception_keeper_type_304;
        exception_value = exception_keeper_value_304;
        exception_tb = exception_keeper_tb_304;

        goto try_finally_handler_316;
    }

    goto finally_end_304;
    finally_end_304:;
    tmp_cond_truth_153 = CHECK_IF_TRUE( tmp_cond_value_153 );
    if ( tmp_cond_truth_153 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 482;
        goto try_finally_handler_316;
    }
    if (tmp_cond_truth_153 == 1)
    {
        goto branch_yes_89;
    }
    else
    {
        goto branch_no_89;
    }
    branch_yes_89:;
    tmp_assign_source_371 = const_str_digest_31639e1d43574f9d676664dc7d072b4f;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_371 );
    tmp_str_arg_65 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_65 == NULL ))
    {
        tmp_str_arg_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 484;
        goto try_finally_handler_316;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_65 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 484;
        goto try_finally_handler_316;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 484;
        goto try_finally_handler_316;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 484;
        goto try_finally_handler_316;
    }
    goto branch_end_89;
    branch_no_89:;
    // Tried code
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_compexpr_left_149 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_149 == NULL ))
    {
        tmp_compexpr_left_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_149 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 486;
        goto try_finally_handler_329;
    }

    tmp_compexpr_right_149 = const_int_pos_3;
    tmp_assign_source_372 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_149, tmp_compexpr_right_149 );
    if ( tmp_assign_source_372 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_329;
    }
    {
        PyObject *old = tmp_and_43__value_3;
        tmp_and_43__value_3 = tmp_assign_source_372;
        Py_XDECREF( old );
    }

    tmp_cond_value_159 = tmp_and_43__value_3;

    tmp_cond_truth_159 = CHECK_IF_TRUE( tmp_cond_value_159 );
    if ( tmp_cond_truth_159 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_329;
    }
    if (tmp_cond_truth_159 == 1)
    {
        goto condexpr_true_108;
    }
    else
    {
        goto condexpr_false_108;
    }
    condexpr_true_108:;
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_result = tmp_and_43__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_43__value_3 );
        tmp_and_43__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_compexpr_left_150 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_150 == NULL ))
    {
        tmp_compexpr_left_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_150 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 486;
        goto try_finally_handler_332;
    }

    tmp_compexpr_right_150 = const_int_pos_7;
    tmp_assign_source_373 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_150, tmp_compexpr_right_150 );
    if ( tmp_assign_source_373 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_332;
    }
    {
        PyObject *old = tmp_and_43__value_2;
        tmp_and_43__value_2 = tmp_assign_source_373;
        Py_XDECREF( old );
    }

    tmp_cond_value_160 = tmp_and_43__value_2;

    tmp_cond_truth_160 = CHECK_IF_TRUE( tmp_cond_value_160 );
    if ( tmp_cond_truth_160 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_332;
    }
    if (tmp_cond_truth_160 == 1)
    {
        goto condexpr_true_109;
    }
    else
    {
        goto condexpr_false_109;
    }
    condexpr_true_109:;
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_result = tmp_and_43__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_43__value_2 );
        tmp_and_43__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_compexpr_left_151 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_151 == NULL ))
    {
        tmp_compexpr_left_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_151 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 486;
        goto try_finally_handler_335;
    }

    tmp_compexpr_right_151 = const_int_pos_1;
    tmp_assign_source_374 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_151, tmp_compexpr_right_151 );
    if ( tmp_assign_source_374 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_335;
    }
    {
        PyObject *old = tmp_and_43__value_1;
        tmp_and_43__value_1 = tmp_assign_source_374;
        Py_XDECREF( old );
    }

    tmp_cond_value_161 = tmp_and_43__value_1;

    tmp_cond_truth_161 = CHECK_IF_TRUE( tmp_cond_value_161 );
    if ( tmp_cond_truth_161 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_335;
    }
    if (tmp_cond_truth_161 == 1)
    {
        goto condexpr_true_110;
    }
    else
    {
        goto condexpr_false_110;
    }
    condexpr_true_110:;
    tmp_cond_value_158 = NULL;
    // Tried code
    tmp_result = tmp_and_43__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_43__value_1 );
        tmp_and_43__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_152 = const_str_plain_lights;
    tmp_compexpr_right_152 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_152 == NULL ))
    {
        tmp_compexpr_right_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_152 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 486;
        goto try_finally_handler_336;
    }

    tmp_cond_value_158 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_152, tmp_compexpr_right_152 );
    if ( tmp_cond_value_158 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_336;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_336:;
    exception_keeper_type_305 = exception_type;
    exception_keeper_value_305 = exception_value;
    exception_keeper_tb_305 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_305 != NULL )
    {
        exception_type = exception_keeper_type_305;
        exception_value = exception_keeper_value_305;
        exception_tb = exception_keeper_tb_305;

        goto try_finally_handler_335;
    }

    goto finally_end_305;
    finally_end_305:;
    goto condexpr_end_110;
    condexpr_false_110:;
    tmp_cond_value_158 = tmp_and_43__value_1;

    condexpr_end_110:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_335:;
    exception_keeper_type_306 = exception_type;
    exception_keeper_value_306 = exception_value;
    exception_keeper_tb_306 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_306 != NULL )
    {
        exception_type = exception_keeper_type_306;
        exception_value = exception_keeper_value_306;
        exception_tb = exception_keeper_tb_306;

        goto try_finally_handler_334;
    }

    goto finally_end_306;
    finally_end_306:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_334:;
    exception_keeper_type_307 = exception_type;
    exception_keeper_value_307 = exception_value;
    exception_keeper_tb_307 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_307 != NULL )
    {
        exception_type = exception_keeper_type_307;
        exception_value = exception_keeper_value_307;
        exception_tb = exception_keeper_tb_307;

        goto try_finally_handler_333;
    }

    goto finally_end_307;
    finally_end_307:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_333:;
    exception_keeper_type_308 = exception_type;
    exception_keeper_value_308 = exception_value;
    exception_keeper_tb_308 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_93 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_43__value_1 );
    tmp_and_43__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_93;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_308 != NULL )
    {
        exception_type = exception_keeper_type_308;
        exception_value = exception_keeper_value_308;
        exception_tb = exception_keeper_tb_308;

        goto try_finally_handler_332;
    }

    goto finally_end_308;
    finally_end_308:;
    goto condexpr_end_109;
    condexpr_false_109:;
    tmp_cond_value_158 = tmp_and_43__value_2;

    condexpr_end_109:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_332:;
    exception_keeper_type_309 = exception_type;
    exception_keeper_value_309 = exception_value;
    exception_keeper_tb_309 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_309 != NULL )
    {
        exception_type = exception_keeper_type_309;
        exception_value = exception_keeper_value_309;
        exception_tb = exception_keeper_tb_309;

        goto try_finally_handler_331;
    }

    goto finally_end_309;
    finally_end_309:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_331:;
    exception_keeper_type_310 = exception_type;
    exception_keeper_value_310 = exception_value;
    exception_keeper_tb_310 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_310 != NULL )
    {
        exception_type = exception_keeper_type_310;
        exception_value = exception_keeper_value_310;
        exception_tb = exception_keeper_tb_310;

        goto try_finally_handler_330;
    }

    goto finally_end_310;
    finally_end_310:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_330:;
    exception_keeper_type_311 = exception_type;
    exception_keeper_value_311 = exception_value;
    exception_keeper_tb_311 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_94 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_43__value_2 );
    tmp_and_43__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_94;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_311 != NULL )
    {
        exception_type = exception_keeper_type_311;
        exception_value = exception_keeper_value_311;
        exception_tb = exception_keeper_tb_311;

        goto try_finally_handler_329;
    }

    goto finally_end_311;
    finally_end_311:;
    goto condexpr_end_108;
    condexpr_false_108:;
    tmp_cond_value_158 = tmp_and_43__value_3;

    condexpr_end_108:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_329:;
    exception_keeper_type_312 = exception_type;
    exception_keeper_value_312 = exception_value;
    exception_keeper_tb_312 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_312 != NULL )
    {
        exception_type = exception_keeper_type_312;
        exception_value = exception_keeper_value_312;
        exception_tb = exception_keeper_tb_312;

        goto try_finally_handler_328;
    }

    goto finally_end_312;
    finally_end_312:;
    tmp_cond_truth_158 = CHECK_IF_TRUE( tmp_cond_value_158 );
    if ( tmp_cond_truth_158 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 486;
        goto try_finally_handler_328;
    }
    if (tmp_cond_truth_158 == 1)
    {
        goto branch_yes_90;
    }
    else
    {
        goto branch_no_90;
    }
    branch_yes_90:;
    tmp_assign_source_375 = const_str_digest_b1ddb54a8ba10be0b092f3fedf1472ca;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_375 );
    tmp_str_arg_66 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_66 == NULL ))
    {
        tmp_str_arg_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_66 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 488;
        goto try_finally_handler_328;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_66 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 488;
        goto try_finally_handler_328;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 488;
        goto try_finally_handler_328;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 488;
        goto try_finally_handler_328;
    }
    tmp_left_name_102 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_left_name_102 == NULL ))
    {
        tmp_left_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_left_name_102 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 489;
        goto try_finally_handler_328;
    }

    tmp_right_name_102 = const_int_pos_1;
    tmp_assign_source_376 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_102, tmp_right_name_102 );
    if ( tmp_assign_source_376 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 489;
        goto try_finally_handler_328;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_376 );
    goto branch_end_90;
    branch_no_90:;
    // Tried code
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_compexpr_left_153 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_153 == NULL ))
    {
        tmp_compexpr_left_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_153 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 490;
        goto try_finally_handler_338;
    }

    tmp_compexpr_right_153 = const_int_pos_3;
    tmp_assign_source_377 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_153, tmp_compexpr_right_153 );
    if ( tmp_assign_source_377 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_338;
    }
    {
        PyObject *old = tmp_and_44__value_3;
        tmp_and_44__value_3 = tmp_assign_source_377;
        Py_XDECREF( old );
    }

    tmp_cond_value_163 = tmp_and_44__value_3;

    tmp_cond_truth_163 = CHECK_IF_TRUE( tmp_cond_value_163 );
    if ( tmp_cond_truth_163 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_338;
    }
    if (tmp_cond_truth_163 == 1)
    {
        goto condexpr_true_111;
    }
    else
    {
        goto condexpr_false_111;
    }
    condexpr_true_111:;
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_result = tmp_and_44__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_44__value_3 );
        tmp_and_44__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_compexpr_left_154 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_154 == NULL ))
    {
        tmp_compexpr_left_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_154 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 490;
        goto try_finally_handler_341;
    }

    tmp_compexpr_right_154 = const_int_pos_7;
    tmp_assign_source_378 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_154, tmp_compexpr_right_154 );
    if ( tmp_assign_source_378 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_341;
    }
    {
        PyObject *old = tmp_and_44__value_2;
        tmp_and_44__value_2 = tmp_assign_source_378;
        Py_XDECREF( old );
    }

    tmp_cond_value_164 = tmp_and_44__value_2;

    tmp_cond_truth_164 = CHECK_IF_TRUE( tmp_cond_value_164 );
    if ( tmp_cond_truth_164 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_341;
    }
    if (tmp_cond_truth_164 == 1)
    {
        goto condexpr_true_112;
    }
    else
    {
        goto condexpr_false_112;
    }
    condexpr_true_112:;
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_result = tmp_and_44__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_44__value_2 );
        tmp_and_44__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_compexpr_left_155 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_155 == NULL ))
    {
        tmp_compexpr_left_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_155 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 490;
        goto try_finally_handler_344;
    }

    tmp_compexpr_right_155 = const_int_0;
    tmp_assign_source_379 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_155, tmp_compexpr_right_155 );
    if ( tmp_assign_source_379 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_344;
    }
    {
        PyObject *old = tmp_and_44__value_1;
        tmp_and_44__value_1 = tmp_assign_source_379;
        Py_XDECREF( old );
    }

    tmp_cond_value_165 = tmp_and_44__value_1;

    tmp_cond_truth_165 = CHECK_IF_TRUE( tmp_cond_value_165 );
    if ( tmp_cond_truth_165 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_344;
    }
    if (tmp_cond_truth_165 == 1)
    {
        goto condexpr_true_113;
    }
    else
    {
        goto condexpr_false_113;
    }
    condexpr_true_113:;
    tmp_cond_value_162 = NULL;
    // Tried code
    tmp_result = tmp_and_44__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_44__value_1 );
        tmp_and_44__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_156 = const_str_plain_lights;
    tmp_compexpr_right_156 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_156 == NULL ))
    {
        tmp_compexpr_right_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_156 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 490;
        goto try_finally_handler_345;
    }

    tmp_cond_value_162 = SEQUENCE_CONTAINS( tmp_compexpr_left_156, tmp_compexpr_right_156 );
    if ( tmp_cond_value_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_345;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_345:;
    exception_keeper_type_313 = exception_type;
    exception_keeper_value_313 = exception_value;
    exception_keeper_tb_313 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_313 != NULL )
    {
        exception_type = exception_keeper_type_313;
        exception_value = exception_keeper_value_313;
        exception_tb = exception_keeper_tb_313;

        goto try_finally_handler_344;
    }

    goto finally_end_313;
    finally_end_313:;
    goto condexpr_end_113;
    condexpr_false_113:;
    tmp_cond_value_162 = tmp_and_44__value_1;

    condexpr_end_113:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_344:;
    exception_keeper_type_314 = exception_type;
    exception_keeper_value_314 = exception_value;
    exception_keeper_tb_314 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_314 != NULL )
    {
        exception_type = exception_keeper_type_314;
        exception_value = exception_keeper_value_314;
        exception_tb = exception_keeper_tb_314;

        goto try_finally_handler_343;
    }

    goto finally_end_314;
    finally_end_314:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_343:;
    exception_keeper_type_315 = exception_type;
    exception_keeper_value_315 = exception_value;
    exception_keeper_tb_315 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_315 != NULL )
    {
        exception_type = exception_keeper_type_315;
        exception_value = exception_keeper_value_315;
        exception_tb = exception_keeper_tb_315;

        goto try_finally_handler_342;
    }

    goto finally_end_315;
    finally_end_315:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_342:;
    exception_keeper_type_316 = exception_type;
    exception_keeper_value_316 = exception_value;
    exception_keeper_tb_316 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_95 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_44__value_1 );
    tmp_and_44__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_95;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_316 != NULL )
    {
        exception_type = exception_keeper_type_316;
        exception_value = exception_keeper_value_316;
        exception_tb = exception_keeper_tb_316;

        goto try_finally_handler_341;
    }

    goto finally_end_316;
    finally_end_316:;
    goto condexpr_end_112;
    condexpr_false_112:;
    tmp_cond_value_162 = tmp_and_44__value_2;

    condexpr_end_112:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_341:;
    exception_keeper_type_317 = exception_type;
    exception_keeper_value_317 = exception_value;
    exception_keeper_tb_317 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_317 != NULL )
    {
        exception_type = exception_keeper_type_317;
        exception_value = exception_keeper_value_317;
        exception_tb = exception_keeper_tb_317;

        goto try_finally_handler_340;
    }

    goto finally_end_317;
    finally_end_317:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_340:;
    exception_keeper_type_318 = exception_type;
    exception_keeper_value_318 = exception_value;
    exception_keeper_tb_318 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_318 != NULL )
    {
        exception_type = exception_keeper_type_318;
        exception_value = exception_keeper_value_318;
        exception_tb = exception_keeper_tb_318;

        goto try_finally_handler_339;
    }

    goto finally_end_318;
    finally_end_318:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_339:;
    exception_keeper_type_319 = exception_type;
    exception_keeper_value_319 = exception_value;
    exception_keeper_tb_319 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_96 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_44__value_2 );
    tmp_and_44__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_96;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_319 != NULL )
    {
        exception_type = exception_keeper_type_319;
        exception_value = exception_keeper_value_319;
        exception_tb = exception_keeper_tb_319;

        goto try_finally_handler_338;
    }

    goto finally_end_319;
    finally_end_319:;
    goto condexpr_end_111;
    condexpr_false_111:;
    tmp_cond_value_162 = tmp_and_44__value_3;

    condexpr_end_111:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_338:;
    exception_keeper_type_320 = exception_type;
    exception_keeper_value_320 = exception_value;
    exception_keeper_tb_320 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_320 != NULL )
    {
        exception_type = exception_keeper_type_320;
        exception_value = exception_keeper_value_320;
        exception_tb = exception_keeper_tb_320;

        goto try_finally_handler_337;
    }

    goto finally_end_320;
    finally_end_320:;
    tmp_cond_truth_162 = CHECK_IF_TRUE( tmp_cond_value_162 );
    if ( tmp_cond_truth_162 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 490;
        goto try_finally_handler_337;
    }
    if (tmp_cond_truth_162 == 1)
    {
        goto branch_yes_91;
    }
    else
    {
        goto branch_no_91;
    }
    branch_yes_91:;
    tmp_assign_source_380 = const_str_digest_87b1dbdcfb040bba7697e03b308d9dbe;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_380 );
    tmp_str_arg_67 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_67 == NULL ))
    {
        tmp_str_arg_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_67 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 492;
        goto try_finally_handler_337;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_67 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 492;
        goto try_finally_handler_337;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 492;
        goto try_finally_handler_337;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 492;
        goto try_finally_handler_337;
    }
    goto branch_end_91;
    branch_no_91:;
    // Tried code
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_compexpr_left_157 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_157 == NULL ))
    {
        tmp_compexpr_left_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_157 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 494;
        goto try_finally_handler_347;
    }

    tmp_compexpr_right_157 = const_int_pos_3;
    tmp_assign_source_381 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_157, tmp_compexpr_right_157 );
    if ( tmp_assign_source_381 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_347;
    }
    {
        PyObject *old = tmp_and_45__value_5;
        tmp_and_45__value_5 = tmp_assign_source_381;
        Py_XDECREF( old );
    }

    tmp_cond_value_167 = tmp_and_45__value_5;

    tmp_cond_truth_167 = CHECK_IF_TRUE( tmp_cond_value_167 );
    if ( tmp_cond_truth_167 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_347;
    }
    if (tmp_cond_truth_167 == 1)
    {
        goto condexpr_true_114;
    }
    else
    {
        goto condexpr_false_114;
    }
    condexpr_true_114:;
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_result = tmp_and_45__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_45__value_5 );
        tmp_and_45__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_compexpr_left_158 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_158 == NULL ))
    {
        tmp_compexpr_left_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_158 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 494;
        goto try_finally_handler_350;
    }

    tmp_compexpr_right_158 = const_int_pos_7;
    tmp_assign_source_382 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_158, tmp_compexpr_right_158 );
    if ( tmp_assign_source_382 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_350;
    }
    {
        PyObject *old = tmp_and_45__value_4;
        tmp_and_45__value_4 = tmp_assign_source_382;
        Py_XDECREF( old );
    }

    tmp_cond_value_168 = tmp_and_45__value_4;

    tmp_cond_truth_168 = CHECK_IF_TRUE( tmp_cond_value_168 );
    if ( tmp_cond_truth_168 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_350;
    }
    if (tmp_cond_truth_168 == 1)
    {
        goto condexpr_true_115;
    }
    else
    {
        goto condexpr_false_115;
    }
    condexpr_true_115:;
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_result = tmp_and_45__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_45__value_4 );
        tmp_and_45__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_compexpr_left_159 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_159 == NULL ))
    {
        tmp_compexpr_left_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_159 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 494;
        goto try_finally_handler_353;
    }

    tmp_compexpr_right_159 = const_int_pos_1;
    tmp_assign_source_383 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_159, tmp_compexpr_right_159 );
    if ( tmp_assign_source_383 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_353;
    }
    {
        PyObject *old = tmp_and_45__value_3;
        tmp_and_45__value_3 = tmp_assign_source_383;
        Py_XDECREF( old );
    }

    tmp_cond_value_169 = tmp_and_45__value_3;

    tmp_cond_truth_169 = CHECK_IF_TRUE( tmp_cond_value_169 );
    if ( tmp_cond_truth_169 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_353;
    }
    if (tmp_cond_truth_169 == 1)
    {
        goto condexpr_true_116;
    }
    else
    {
        goto condexpr_false_116;
    }
    condexpr_true_116:;
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_result = tmp_and_45__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_45__value_3 );
        tmp_and_45__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_compexpr_left_160 = const_str_plain_lights;
    tmp_compexpr_right_160 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_160 == NULL ))
    {
        tmp_compexpr_right_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_160 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 494;
        goto try_finally_handler_356;
    }

    tmp_assign_source_384 = SEQUENCE_CONTAINS( tmp_compexpr_left_160, tmp_compexpr_right_160 );
    if ( tmp_assign_source_384 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_356;
    }
    {
        PyObject *old = tmp_and_45__value_2;
        tmp_and_45__value_2 = tmp_assign_source_384;
        Py_INCREF( tmp_and_45__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_170 = tmp_and_45__value_2;

    tmp_cond_truth_170 = CHECK_IF_TRUE( tmp_cond_value_170 );
    if ( tmp_cond_truth_170 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_356;
    }
    if (tmp_cond_truth_170 == 1)
    {
        goto condexpr_true_117;
    }
    else
    {
        goto condexpr_false_117;
    }
    condexpr_true_117:;
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_result = tmp_and_45__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_45__value_2 );
        tmp_and_45__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_compexpr_left_161 = const_str_plain_lamp;
    tmp_compexpr_right_161 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_161 == NULL ))
    {
        tmp_compexpr_right_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_161 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 494;
        goto try_finally_handler_359;
    }

    tmp_assign_source_385 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_161, tmp_compexpr_right_161 );
    if ( tmp_assign_source_385 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_359;
    }
    {
        PyObject *old = tmp_and_45__value_1;
        tmp_and_45__value_1 = tmp_assign_source_385;
        Py_INCREF( tmp_and_45__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_171 = tmp_and_45__value_1;

    tmp_cond_truth_171 = CHECK_IF_TRUE( tmp_cond_value_171 );
    if ( tmp_cond_truth_171 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_359;
    }
    if (tmp_cond_truth_171 == 1)
    {
        goto condexpr_true_118;
    }
    else
    {
        goto condexpr_false_118;
    }
    condexpr_true_118:;
    tmp_cond_value_166 = NULL;
    // Tried code
    tmp_result = tmp_and_45__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_45__value_1 );
        tmp_and_45__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_162 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compexpr_left_162 == NULL ))
    {
        tmp_compexpr_left_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compexpr_left_162 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 494;
        goto try_finally_handler_360;
    }

    tmp_compexpr_right_162 = const_int_pos_2;
    tmp_cond_value_166 = RICH_COMPARE_LT( tmp_compexpr_left_162, tmp_compexpr_right_162 );
    if ( tmp_cond_value_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 494;
        goto try_finally_handler_360;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_360:;
    exception_keeper_type_321 = exception_type;
    exception_keeper_value_321 = exception_value;
    exception_keeper_tb_321 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_321 != NULL )
    {
        exception_type = exception_keeper_type_321;
        exception_value = exception_keeper_value_321;
        exception_tb = exception_keeper_tb_321;

        goto try_finally_handler_359;
    }

    goto finally_end_321;
    finally_end_321:;
    goto condexpr_end_118;
    condexpr_false_118:;
    tmp_cond_value_166 = tmp_and_45__value_1;

    Py_INCREF( tmp_cond_value_166 );
    condexpr_end_118:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_359:;
    exception_keeper_type_322 = exception_type;
    exception_keeper_value_322 = exception_value;
    exception_keeper_tb_322 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_322 != NULL )
    {
        exception_type = exception_keeper_type_322;
        exception_value = exception_keeper_value_322;
        exception_tb = exception_keeper_tb_322;

        goto try_finally_handler_358;
    }

    goto finally_end_322;
    finally_end_322:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_358:;
    exception_keeper_type_323 = exception_type;
    exception_keeper_value_323 = exception_value;
    exception_keeper_tb_323 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_323 != NULL )
    {
        exception_type = exception_keeper_type_323;
        exception_value = exception_keeper_value_323;
        exception_tb = exception_keeper_tb_323;

        goto try_finally_handler_357;
    }

    goto finally_end_323;
    finally_end_323:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_357:;
    exception_keeper_type_324 = exception_type;
    exception_keeper_value_324 = exception_value;
    exception_keeper_tb_324 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_97 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_45__value_1 );
    tmp_and_45__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_97;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_324 != NULL )
    {
        exception_type = exception_keeper_type_324;
        exception_value = exception_keeper_value_324;
        exception_tb = exception_keeper_tb_324;

        goto try_finally_handler_356;
    }

    goto finally_end_324;
    finally_end_324:;
    goto condexpr_end_117;
    condexpr_false_117:;
    tmp_cond_value_166 = tmp_and_45__value_2;

    Py_INCREF( tmp_cond_value_166 );
    condexpr_end_117:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_356:;
    exception_keeper_type_325 = exception_type;
    exception_keeper_value_325 = exception_value;
    exception_keeper_tb_325 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_325 != NULL )
    {
        exception_type = exception_keeper_type_325;
        exception_value = exception_keeper_value_325;
        exception_tb = exception_keeper_tb_325;

        goto try_finally_handler_355;
    }

    goto finally_end_325;
    finally_end_325:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_355:;
    exception_keeper_type_326 = exception_type;
    exception_keeper_value_326 = exception_value;
    exception_keeper_tb_326 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_326 != NULL )
    {
        exception_type = exception_keeper_type_326;
        exception_value = exception_keeper_value_326;
        exception_tb = exception_keeper_tb_326;

        goto try_finally_handler_354;
    }

    goto finally_end_326;
    finally_end_326:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_354:;
    exception_keeper_type_327 = exception_type;
    exception_keeper_value_327 = exception_value;
    exception_keeper_tb_327 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_98 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_45__value_2 );
    tmp_and_45__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_98;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_327 != NULL )
    {
        exception_type = exception_keeper_type_327;
        exception_value = exception_keeper_value_327;
        exception_tb = exception_keeper_tb_327;

        goto try_finally_handler_353;
    }

    goto finally_end_327;
    finally_end_327:;
    goto condexpr_end_116;
    condexpr_false_116:;
    tmp_cond_value_166 = tmp_and_45__value_3;

    Py_INCREF( tmp_cond_value_166 );
    condexpr_end_116:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_353:;
    exception_keeper_type_328 = exception_type;
    exception_keeper_value_328 = exception_value;
    exception_keeper_tb_328 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_328 != NULL )
    {
        exception_type = exception_keeper_type_328;
        exception_value = exception_keeper_value_328;
        exception_tb = exception_keeper_tb_328;

        goto try_finally_handler_352;
    }

    goto finally_end_328;
    finally_end_328:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_352:;
    exception_keeper_type_329 = exception_type;
    exception_keeper_value_329 = exception_value;
    exception_keeper_tb_329 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_329 != NULL )
    {
        exception_type = exception_keeper_type_329;
        exception_value = exception_keeper_value_329;
        exception_tb = exception_keeper_tb_329;

        goto try_finally_handler_351;
    }

    goto finally_end_329;
    finally_end_329:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_351:;
    exception_keeper_type_330 = exception_type;
    exception_keeper_value_330 = exception_value;
    exception_keeper_tb_330 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_99 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_45__value_3 );
    tmp_and_45__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_99;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_330 != NULL )
    {
        exception_type = exception_keeper_type_330;
        exception_value = exception_keeper_value_330;
        exception_tb = exception_keeper_tb_330;

        goto try_finally_handler_350;
    }

    goto finally_end_330;
    finally_end_330:;
    goto condexpr_end_115;
    condexpr_false_115:;
    tmp_cond_value_166 = tmp_and_45__value_4;

    Py_INCREF( tmp_cond_value_166 );
    condexpr_end_115:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_350:;
    exception_keeper_type_331 = exception_type;
    exception_keeper_value_331 = exception_value;
    exception_keeper_tb_331 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_331 != NULL )
    {
        exception_type = exception_keeper_type_331;
        exception_value = exception_keeper_value_331;
        exception_tb = exception_keeper_tb_331;

        goto try_finally_handler_349;
    }

    goto finally_end_331;
    finally_end_331:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_349:;
    exception_keeper_type_332 = exception_type;
    exception_keeper_value_332 = exception_value;
    exception_keeper_tb_332 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_332 != NULL )
    {
        exception_type = exception_keeper_type_332;
        exception_value = exception_keeper_value_332;
        exception_tb = exception_keeper_tb_332;

        goto try_finally_handler_348;
    }

    goto finally_end_332;
    finally_end_332:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_348:;
    exception_keeper_type_333 = exception_type;
    exception_keeper_value_333 = exception_value;
    exception_keeper_tb_333 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_100 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_45__value_4 );
    tmp_and_45__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_100;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_333 != NULL )
    {
        exception_type = exception_keeper_type_333;
        exception_value = exception_keeper_value_333;
        exception_tb = exception_keeper_tb_333;

        goto try_finally_handler_347;
    }

    goto finally_end_333;
    finally_end_333:;
    goto condexpr_end_114;
    condexpr_false_114:;
    tmp_cond_value_166 = tmp_and_45__value_5;

    Py_INCREF( tmp_cond_value_166 );
    condexpr_end_114:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_347:;
    exception_keeper_type_334 = exception_type;
    exception_keeper_value_334 = exception_value;
    exception_keeper_tb_334 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_334 != NULL )
    {
        exception_type = exception_keeper_type_334;
        exception_value = exception_keeper_value_334;
        exception_tb = exception_keeper_tb_334;

        goto try_finally_handler_346;
    }

    goto finally_end_334;
    finally_end_334:;
    tmp_cond_truth_166 = CHECK_IF_TRUE( tmp_cond_value_166 );
    if ( tmp_cond_truth_166 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_166 );

        frame_module->f_lineno = 494;
        goto try_finally_handler_346;
    }
    Py_DECREF( tmp_cond_value_166 );
    if (tmp_cond_truth_166 == 1)
    {
        goto branch_yes_92;
    }
    else
    {
        goto branch_no_92;
    }
    branch_yes_92:;
    tmp_assign_source_386 = const_str_digest_c2a4e4b96471b6c26edcad95fe2ac0f2;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_386 );
    tmp_str_arg_68 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_68 == NULL ))
    {
        tmp_str_arg_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 496;
        goto try_finally_handler_346;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_68 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 496;
        goto try_finally_handler_346;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 496;
        goto try_finally_handler_346;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 496;
        goto try_finally_handler_346;
    }
    goto branch_end_92;
    branch_no_92:;
    // Tried code
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_compexpr_left_163 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_163 == NULL ))
    {
        tmp_compexpr_left_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_163 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 498;
        goto try_finally_handler_362;
    }

    tmp_compexpr_right_163 = const_int_pos_3;
    tmp_assign_source_387 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_163, tmp_compexpr_right_163 );
    if ( tmp_assign_source_387 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_362;
    }
    {
        PyObject *old = tmp_and_46__value_5;
        tmp_and_46__value_5 = tmp_assign_source_387;
        Py_XDECREF( old );
    }

    tmp_cond_value_173 = tmp_and_46__value_5;

    tmp_cond_truth_173 = CHECK_IF_TRUE( tmp_cond_value_173 );
    if ( tmp_cond_truth_173 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_362;
    }
    if (tmp_cond_truth_173 == 1)
    {
        goto condexpr_true_119;
    }
    else
    {
        goto condexpr_false_119;
    }
    condexpr_true_119:;
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_result = tmp_and_46__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_46__value_5 );
        tmp_and_46__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_compexpr_left_164 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_164 == NULL ))
    {
        tmp_compexpr_left_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_164 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 498;
        goto try_finally_handler_365;
    }

    tmp_compexpr_right_164 = const_int_pos_7;
    tmp_assign_source_388 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_164, tmp_compexpr_right_164 );
    if ( tmp_assign_source_388 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_365;
    }
    {
        PyObject *old = tmp_and_46__value_4;
        tmp_and_46__value_4 = tmp_assign_source_388;
        Py_XDECREF( old );
    }

    tmp_cond_value_174 = tmp_and_46__value_4;

    tmp_cond_truth_174 = CHECK_IF_TRUE( tmp_cond_value_174 );
    if ( tmp_cond_truth_174 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_365;
    }
    if (tmp_cond_truth_174 == 1)
    {
        goto condexpr_true_120;
    }
    else
    {
        goto condexpr_false_120;
    }
    condexpr_true_120:;
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_result = tmp_and_46__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_46__value_4 );
        tmp_and_46__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_compexpr_left_165 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_165 == NULL ))
    {
        tmp_compexpr_left_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_165 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 498;
        goto try_finally_handler_368;
    }

    tmp_compexpr_right_165 = const_int_pos_1;
    tmp_assign_source_389 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_165, tmp_compexpr_right_165 );
    if ( tmp_assign_source_389 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_368;
    }
    {
        PyObject *old = tmp_and_46__value_3;
        tmp_and_46__value_3 = tmp_assign_source_389;
        Py_XDECREF( old );
    }

    tmp_cond_value_175 = tmp_and_46__value_3;

    tmp_cond_truth_175 = CHECK_IF_TRUE( tmp_cond_value_175 );
    if ( tmp_cond_truth_175 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_368;
    }
    if (tmp_cond_truth_175 == 1)
    {
        goto condexpr_true_121;
    }
    else
    {
        goto condexpr_false_121;
    }
    condexpr_true_121:;
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_result = tmp_and_46__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_46__value_3 );
        tmp_and_46__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_compexpr_left_166 = const_str_plain_lamp;
    tmp_compexpr_right_166 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_166 == NULL ))
    {
        tmp_compexpr_right_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_166 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 498;
        goto try_finally_handler_371;
    }

    tmp_assign_source_390 = SEQUENCE_CONTAINS( tmp_compexpr_left_166, tmp_compexpr_right_166 );
    if ( tmp_assign_source_390 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_371;
    }
    {
        PyObject *old = tmp_and_46__value_2;
        tmp_and_46__value_2 = tmp_assign_source_390;
        Py_INCREF( tmp_and_46__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_176 = tmp_and_46__value_2;

    tmp_cond_truth_176 = CHECK_IF_TRUE( tmp_cond_value_176 );
    if ( tmp_cond_truth_176 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_371;
    }
    if (tmp_cond_truth_176 == 1)
    {
        goto condexpr_true_122;
    }
    else
    {
        goto condexpr_false_122;
    }
    condexpr_true_122:;
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_result = tmp_and_46__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_46__value_2 );
        tmp_and_46__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_compexpr_left_167 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_167 == NULL ))
    {
        tmp_compexpr_left_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_167 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 498;
        goto try_finally_handler_374;
    }

    tmp_compexpr_right_167 = const_int_pos_1;
    tmp_assign_source_391 = RICH_COMPARE_LT( tmp_compexpr_left_167, tmp_compexpr_right_167 );
    if ( tmp_assign_source_391 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_374;
    }
    {
        PyObject *old = tmp_and_46__value_1;
        tmp_and_46__value_1 = tmp_assign_source_391;
        Py_XDECREF( old );
    }

    tmp_cond_value_177 = tmp_and_46__value_1;

    tmp_cond_truth_177 = CHECK_IF_TRUE( tmp_cond_value_177 );
    if ( tmp_cond_truth_177 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_374;
    }
    if (tmp_cond_truth_177 == 1)
    {
        goto condexpr_true_123;
    }
    else
    {
        goto condexpr_false_123;
    }
    condexpr_true_123:;
    tmp_cond_value_172 = NULL;
    // Tried code
    tmp_result = tmp_and_46__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_46__value_1 );
        tmp_and_46__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_168 = const_str_plain_dagger;
    tmp_compexpr_right_168 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_168 == NULL ))
    {
        tmp_compexpr_right_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_168 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 498;
        goto try_finally_handler_375;
    }

    tmp_cond_value_172 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_168, tmp_compexpr_right_168 );
    if ( tmp_cond_value_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_375;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_375:;
    exception_keeper_type_335 = exception_type;
    exception_keeper_value_335 = exception_value;
    exception_keeper_tb_335 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_335 != NULL )
    {
        exception_type = exception_keeper_type_335;
        exception_value = exception_keeper_value_335;
        exception_tb = exception_keeper_tb_335;

        goto try_finally_handler_374;
    }

    goto finally_end_335;
    finally_end_335:;
    goto condexpr_end_123;
    condexpr_false_123:;
    tmp_cond_value_172 = tmp_and_46__value_1;

    condexpr_end_123:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_374:;
    exception_keeper_type_336 = exception_type;
    exception_keeper_value_336 = exception_value;
    exception_keeper_tb_336 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_336 != NULL )
    {
        exception_type = exception_keeper_type_336;
        exception_value = exception_keeper_value_336;
        exception_tb = exception_keeper_tb_336;

        goto try_finally_handler_373;
    }

    goto finally_end_336;
    finally_end_336:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_373:;
    exception_keeper_type_337 = exception_type;
    exception_keeper_value_337 = exception_value;
    exception_keeper_tb_337 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_337 != NULL )
    {
        exception_type = exception_keeper_type_337;
        exception_value = exception_keeper_value_337;
        exception_tb = exception_keeper_tb_337;

        goto try_finally_handler_372;
    }

    goto finally_end_337;
    finally_end_337:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_372:;
    exception_keeper_type_338 = exception_type;
    exception_keeper_value_338 = exception_value;
    exception_keeper_tb_338 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_101 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_46__value_1 );
    tmp_and_46__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_101;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_338 != NULL )
    {
        exception_type = exception_keeper_type_338;
        exception_value = exception_keeper_value_338;
        exception_tb = exception_keeper_tb_338;

        goto try_finally_handler_371;
    }

    goto finally_end_338;
    finally_end_338:;
    goto condexpr_end_122;
    condexpr_false_122:;
    tmp_cond_value_172 = tmp_and_46__value_2;

    condexpr_end_122:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_371:;
    exception_keeper_type_339 = exception_type;
    exception_keeper_value_339 = exception_value;
    exception_keeper_tb_339 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_339 != NULL )
    {
        exception_type = exception_keeper_type_339;
        exception_value = exception_keeper_value_339;
        exception_tb = exception_keeper_tb_339;

        goto try_finally_handler_370;
    }

    goto finally_end_339;
    finally_end_339:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_370:;
    exception_keeper_type_340 = exception_type;
    exception_keeper_value_340 = exception_value;
    exception_keeper_tb_340 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_340 != NULL )
    {
        exception_type = exception_keeper_type_340;
        exception_value = exception_keeper_value_340;
        exception_tb = exception_keeper_tb_340;

        goto try_finally_handler_369;
    }

    goto finally_end_340;
    finally_end_340:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_369:;
    exception_keeper_type_341 = exception_type;
    exception_keeper_value_341 = exception_value;
    exception_keeper_tb_341 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_102 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_46__value_2 );
    tmp_and_46__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_102;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_341 != NULL )
    {
        exception_type = exception_keeper_type_341;
        exception_value = exception_keeper_value_341;
        exception_tb = exception_keeper_tb_341;

        goto try_finally_handler_368;
    }

    goto finally_end_341;
    finally_end_341:;
    goto condexpr_end_121;
    condexpr_false_121:;
    tmp_cond_value_172 = tmp_and_46__value_3;

    condexpr_end_121:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_368:;
    exception_keeper_type_342 = exception_type;
    exception_keeper_value_342 = exception_value;
    exception_keeper_tb_342 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_342 != NULL )
    {
        exception_type = exception_keeper_type_342;
        exception_value = exception_keeper_value_342;
        exception_tb = exception_keeper_tb_342;

        goto try_finally_handler_367;
    }

    goto finally_end_342;
    finally_end_342:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_367:;
    exception_keeper_type_343 = exception_type;
    exception_keeper_value_343 = exception_value;
    exception_keeper_tb_343 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_343 != NULL )
    {
        exception_type = exception_keeper_type_343;
        exception_value = exception_keeper_value_343;
        exception_tb = exception_keeper_tb_343;

        goto try_finally_handler_366;
    }

    goto finally_end_343;
    finally_end_343:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_366:;
    exception_keeper_type_344 = exception_type;
    exception_keeper_value_344 = exception_value;
    exception_keeper_tb_344 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_103 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_46__value_3 );
    tmp_and_46__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_103;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_344 != NULL )
    {
        exception_type = exception_keeper_type_344;
        exception_value = exception_keeper_value_344;
        exception_tb = exception_keeper_tb_344;

        goto try_finally_handler_365;
    }

    goto finally_end_344;
    finally_end_344:;
    goto condexpr_end_120;
    condexpr_false_120:;
    tmp_cond_value_172 = tmp_and_46__value_4;

    condexpr_end_120:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_365:;
    exception_keeper_type_345 = exception_type;
    exception_keeper_value_345 = exception_value;
    exception_keeper_tb_345 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_345 != NULL )
    {
        exception_type = exception_keeper_type_345;
        exception_value = exception_keeper_value_345;
        exception_tb = exception_keeper_tb_345;

        goto try_finally_handler_364;
    }

    goto finally_end_345;
    finally_end_345:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_364:;
    exception_keeper_type_346 = exception_type;
    exception_keeper_value_346 = exception_value;
    exception_keeper_tb_346 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_346 != NULL )
    {
        exception_type = exception_keeper_type_346;
        exception_value = exception_keeper_value_346;
        exception_tb = exception_keeper_tb_346;

        goto try_finally_handler_363;
    }

    goto finally_end_346;
    finally_end_346:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_363:;
    exception_keeper_type_347 = exception_type;
    exception_keeper_value_347 = exception_value;
    exception_keeper_tb_347 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_104 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_46__value_4 );
    tmp_and_46__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_104;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_347 != NULL )
    {
        exception_type = exception_keeper_type_347;
        exception_value = exception_keeper_value_347;
        exception_tb = exception_keeper_tb_347;

        goto try_finally_handler_362;
    }

    goto finally_end_347;
    finally_end_347:;
    goto condexpr_end_119;
    condexpr_false_119:;
    tmp_cond_value_172 = tmp_and_46__value_5;

    condexpr_end_119:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_362:;
    exception_keeper_type_348 = exception_type;
    exception_keeper_value_348 = exception_value;
    exception_keeper_tb_348 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_348 != NULL )
    {
        exception_type = exception_keeper_type_348;
        exception_value = exception_keeper_value_348;
        exception_tb = exception_keeper_tb_348;

        goto try_finally_handler_361;
    }

    goto finally_end_348;
    finally_end_348:;
    tmp_cond_truth_172 = CHECK_IF_TRUE( tmp_cond_value_172 );
    if ( tmp_cond_truth_172 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 498;
        goto try_finally_handler_361;
    }
    if (tmp_cond_truth_172 == 1)
    {
        goto branch_yes_93;
    }
    else
    {
        goto branch_no_93;
    }
    branch_yes_93:;
    tmp_assign_source_392 = const_str_digest_08900fa20268a04b86a9210fbde28373;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_392 );
    tmp_str_arg_69 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_69 == NULL ))
    {
        tmp_str_arg_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 500;
        goto try_finally_handler_361;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_69 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 500;
        goto try_finally_handler_361;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 500;
        goto try_finally_handler_361;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 500;
        goto try_finally_handler_361;
    }
    goto branch_end_93;
    branch_no_93:;
    // Tried code
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_compexpr_left_169 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_169 == NULL ))
    {
        tmp_compexpr_left_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_169 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto try_finally_handler_377;
    }

    tmp_compexpr_right_169 = const_int_pos_3;
    tmp_assign_source_393 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_169, tmp_compexpr_right_169 );
    if ( tmp_assign_source_393 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_377;
    }
    {
        PyObject *old = tmp_and_47__value_5;
        tmp_and_47__value_5 = tmp_assign_source_393;
        Py_XDECREF( old );
    }

    tmp_cond_value_179 = tmp_and_47__value_5;

    tmp_cond_truth_179 = CHECK_IF_TRUE( tmp_cond_value_179 );
    if ( tmp_cond_truth_179 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_377;
    }
    if (tmp_cond_truth_179 == 1)
    {
        goto condexpr_true_124;
    }
    else
    {
        goto condexpr_false_124;
    }
    condexpr_true_124:;
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_result = tmp_and_47__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_47__value_5 );
        tmp_and_47__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_compexpr_left_170 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_170 == NULL ))
    {
        tmp_compexpr_left_170 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_170 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto try_finally_handler_380;
    }

    tmp_compexpr_right_170 = const_int_pos_7;
    tmp_assign_source_394 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_170, tmp_compexpr_right_170 );
    if ( tmp_assign_source_394 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_380;
    }
    {
        PyObject *old = tmp_and_47__value_4;
        tmp_and_47__value_4 = tmp_assign_source_394;
        Py_XDECREF( old );
    }

    tmp_cond_value_180 = tmp_and_47__value_4;

    tmp_cond_truth_180 = CHECK_IF_TRUE( tmp_cond_value_180 );
    if ( tmp_cond_truth_180 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_380;
    }
    if (tmp_cond_truth_180 == 1)
    {
        goto condexpr_true_125;
    }
    else
    {
        goto condexpr_false_125;
    }
    condexpr_true_125:;
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_result = tmp_and_47__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_47__value_4 );
        tmp_and_47__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_compexpr_left_171 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_171 == NULL ))
    {
        tmp_compexpr_left_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_171 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto try_finally_handler_383;
    }

    tmp_compexpr_right_171 = const_int_pos_1;
    tmp_assign_source_395 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_171, tmp_compexpr_right_171 );
    if ( tmp_assign_source_395 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_383;
    }
    {
        PyObject *old = tmp_and_47__value_3;
        tmp_and_47__value_3 = tmp_assign_source_395;
        Py_XDECREF( old );
    }

    tmp_cond_value_181 = tmp_and_47__value_3;

    tmp_cond_truth_181 = CHECK_IF_TRUE( tmp_cond_value_181 );
    if ( tmp_cond_truth_181 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_383;
    }
    if (tmp_cond_truth_181 == 1)
    {
        goto condexpr_true_126;
    }
    else
    {
        goto condexpr_false_126;
    }
    condexpr_true_126:;
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_result = tmp_and_47__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_47__value_3 );
        tmp_and_47__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_compexpr_left_172 = const_str_plain_lamp;
    tmp_compexpr_right_172 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_172 == NULL ))
    {
        tmp_compexpr_right_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_172 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto try_finally_handler_386;
    }

    tmp_assign_source_396 = SEQUENCE_CONTAINS( tmp_compexpr_left_172, tmp_compexpr_right_172 );
    if ( tmp_assign_source_396 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_386;
    }
    {
        PyObject *old = tmp_and_47__value_2;
        tmp_and_47__value_2 = tmp_assign_source_396;
        Py_INCREF( tmp_and_47__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_182 = tmp_and_47__value_2;

    tmp_cond_truth_182 = CHECK_IF_TRUE( tmp_cond_value_182 );
    if ( tmp_cond_truth_182 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_386;
    }
    if (tmp_cond_truth_182 == 1)
    {
        goto condexpr_true_127;
    }
    else
    {
        goto condexpr_false_127;
    }
    condexpr_true_127:;
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_result = tmp_and_47__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_47__value_2 );
        tmp_and_47__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_compexpr_left_173 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_173 == NULL ))
    {
        tmp_compexpr_left_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_173 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto try_finally_handler_389;
    }

    tmp_compexpr_right_173 = const_int_pos_1;
    tmp_assign_source_397 = RICH_COMPARE_GE( tmp_compexpr_left_173, tmp_compexpr_right_173 );
    if ( tmp_assign_source_397 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_389;
    }
    {
        PyObject *old = tmp_and_47__value_1;
        tmp_and_47__value_1 = tmp_assign_source_397;
        Py_XDECREF( old );
    }

    tmp_cond_value_183 = tmp_and_47__value_1;

    tmp_cond_truth_183 = CHECK_IF_TRUE( tmp_cond_value_183 );
    if ( tmp_cond_truth_183 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_389;
    }
    if (tmp_cond_truth_183 == 1)
    {
        goto condexpr_true_128;
    }
    else
    {
        goto condexpr_false_128;
    }
    condexpr_true_128:;
    tmp_cond_value_178 = NULL;
    // Tried code
    tmp_result = tmp_and_47__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_47__value_1 );
        tmp_and_47__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_174 = const_str_plain_dagger;
    tmp_compexpr_right_174 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_174 == NULL ))
    {
        tmp_compexpr_right_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_174 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto try_finally_handler_390;
    }

    tmp_cond_value_178 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_174, tmp_compexpr_right_174 );
    if ( tmp_cond_value_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_390;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_390:;
    exception_keeper_type_349 = exception_type;
    exception_keeper_value_349 = exception_value;
    exception_keeper_tb_349 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_349 != NULL )
    {
        exception_type = exception_keeper_type_349;
        exception_value = exception_keeper_value_349;
        exception_tb = exception_keeper_tb_349;

        goto try_finally_handler_389;
    }

    goto finally_end_349;
    finally_end_349:;
    goto condexpr_end_128;
    condexpr_false_128:;
    tmp_cond_value_178 = tmp_and_47__value_1;

    condexpr_end_128:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_389:;
    exception_keeper_type_350 = exception_type;
    exception_keeper_value_350 = exception_value;
    exception_keeper_tb_350 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_350 != NULL )
    {
        exception_type = exception_keeper_type_350;
        exception_value = exception_keeper_value_350;
        exception_tb = exception_keeper_tb_350;

        goto try_finally_handler_388;
    }

    goto finally_end_350;
    finally_end_350:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_388:;
    exception_keeper_type_351 = exception_type;
    exception_keeper_value_351 = exception_value;
    exception_keeper_tb_351 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_351 != NULL )
    {
        exception_type = exception_keeper_type_351;
        exception_value = exception_keeper_value_351;
        exception_tb = exception_keeper_tb_351;

        goto try_finally_handler_387;
    }

    goto finally_end_351;
    finally_end_351:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_387:;
    exception_keeper_type_352 = exception_type;
    exception_keeper_value_352 = exception_value;
    exception_keeper_tb_352 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_105 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_47__value_1 );
    tmp_and_47__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_105;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_352 != NULL )
    {
        exception_type = exception_keeper_type_352;
        exception_value = exception_keeper_value_352;
        exception_tb = exception_keeper_tb_352;

        goto try_finally_handler_386;
    }

    goto finally_end_352;
    finally_end_352:;
    goto condexpr_end_127;
    condexpr_false_127:;
    tmp_cond_value_178 = tmp_and_47__value_2;

    condexpr_end_127:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_386:;
    exception_keeper_type_353 = exception_type;
    exception_keeper_value_353 = exception_value;
    exception_keeper_tb_353 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_353 != NULL )
    {
        exception_type = exception_keeper_type_353;
        exception_value = exception_keeper_value_353;
        exception_tb = exception_keeper_tb_353;

        goto try_finally_handler_385;
    }

    goto finally_end_353;
    finally_end_353:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_385:;
    exception_keeper_type_354 = exception_type;
    exception_keeper_value_354 = exception_value;
    exception_keeper_tb_354 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_354 != NULL )
    {
        exception_type = exception_keeper_type_354;
        exception_value = exception_keeper_value_354;
        exception_tb = exception_keeper_tb_354;

        goto try_finally_handler_384;
    }

    goto finally_end_354;
    finally_end_354:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_384:;
    exception_keeper_type_355 = exception_type;
    exception_keeper_value_355 = exception_value;
    exception_keeper_tb_355 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_106 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_47__value_2 );
    tmp_and_47__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_106;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_355 != NULL )
    {
        exception_type = exception_keeper_type_355;
        exception_value = exception_keeper_value_355;
        exception_tb = exception_keeper_tb_355;

        goto try_finally_handler_383;
    }

    goto finally_end_355;
    finally_end_355:;
    goto condexpr_end_126;
    condexpr_false_126:;
    tmp_cond_value_178 = tmp_and_47__value_3;

    condexpr_end_126:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_383:;
    exception_keeper_type_356 = exception_type;
    exception_keeper_value_356 = exception_value;
    exception_keeper_tb_356 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_356 != NULL )
    {
        exception_type = exception_keeper_type_356;
        exception_value = exception_keeper_value_356;
        exception_tb = exception_keeper_tb_356;

        goto try_finally_handler_382;
    }

    goto finally_end_356;
    finally_end_356:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_382:;
    exception_keeper_type_357 = exception_type;
    exception_keeper_value_357 = exception_value;
    exception_keeper_tb_357 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_357 != NULL )
    {
        exception_type = exception_keeper_type_357;
        exception_value = exception_keeper_value_357;
        exception_tb = exception_keeper_tb_357;

        goto try_finally_handler_381;
    }

    goto finally_end_357;
    finally_end_357:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_381:;
    exception_keeper_type_358 = exception_type;
    exception_keeper_value_358 = exception_value;
    exception_keeper_tb_358 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_107 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_47__value_3 );
    tmp_and_47__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_107;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_358 != NULL )
    {
        exception_type = exception_keeper_type_358;
        exception_value = exception_keeper_value_358;
        exception_tb = exception_keeper_tb_358;

        goto try_finally_handler_380;
    }

    goto finally_end_358;
    finally_end_358:;
    goto condexpr_end_125;
    condexpr_false_125:;
    tmp_cond_value_178 = tmp_and_47__value_4;

    condexpr_end_125:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_380:;
    exception_keeper_type_359 = exception_type;
    exception_keeper_value_359 = exception_value;
    exception_keeper_tb_359 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_359 != NULL )
    {
        exception_type = exception_keeper_type_359;
        exception_value = exception_keeper_value_359;
        exception_tb = exception_keeper_tb_359;

        goto try_finally_handler_379;
    }

    goto finally_end_359;
    finally_end_359:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_379:;
    exception_keeper_type_360 = exception_type;
    exception_keeper_value_360 = exception_value;
    exception_keeper_tb_360 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_360 != NULL )
    {
        exception_type = exception_keeper_type_360;
        exception_value = exception_keeper_value_360;
        exception_tb = exception_keeper_tb_360;

        goto try_finally_handler_378;
    }

    goto finally_end_360;
    finally_end_360:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_378:;
    exception_keeper_type_361 = exception_type;
    exception_keeper_value_361 = exception_value;
    exception_keeper_tb_361 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_108 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_47__value_4 );
    tmp_and_47__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_108;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_361 != NULL )
    {
        exception_type = exception_keeper_type_361;
        exception_value = exception_keeper_value_361;
        exception_tb = exception_keeper_tb_361;

        goto try_finally_handler_377;
    }

    goto finally_end_361;
    finally_end_361:;
    goto condexpr_end_124;
    condexpr_false_124:;
    tmp_cond_value_178 = tmp_and_47__value_5;

    condexpr_end_124:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_377:;
    exception_keeper_type_362 = exception_type;
    exception_keeper_value_362 = exception_value;
    exception_keeper_tb_362 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_362 != NULL )
    {
        exception_type = exception_keeper_type_362;
        exception_value = exception_keeper_value_362;
        exception_tb = exception_keeper_tb_362;

        goto try_finally_handler_376;
    }

    goto finally_end_362;
    finally_end_362:;
    tmp_cond_truth_178 = CHECK_IF_TRUE( tmp_cond_value_178 );
    if ( tmp_cond_truth_178 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 502;
        goto try_finally_handler_376;
    }
    if (tmp_cond_truth_178 == 1)
    {
        goto branch_yes_94;
    }
    else
    {
        goto branch_no_94;
    }
    branch_yes_94:;
    tmp_assign_source_398 = const_str_digest_0e14ad738fb42204ec4744717ac7ce1b;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_398 );
    tmp_str_arg_70 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_70 == NULL ))
    {
        tmp_str_arg_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_70 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 504;
        goto try_finally_handler_376;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_70 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 504;
        goto try_finally_handler_376;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 504;
        goto try_finally_handler_376;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 504;
        goto try_finally_handler_376;
    }
    goto branch_end_94;
    branch_no_94:;
    // Tried code
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_compexpr_left_175 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_175 == NULL ))
    {
        tmp_compexpr_left_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_175 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto try_finally_handler_392;
    }

    tmp_compexpr_right_175 = const_int_pos_3;
    tmp_assign_source_399 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_175, tmp_compexpr_right_175 );
    if ( tmp_assign_source_399 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_392;
    }
    {
        PyObject *old = tmp_and_48__value_5;
        tmp_and_48__value_5 = tmp_assign_source_399;
        Py_XDECREF( old );
    }

    tmp_cond_value_185 = tmp_and_48__value_5;

    tmp_cond_truth_185 = CHECK_IF_TRUE( tmp_cond_value_185 );
    if ( tmp_cond_truth_185 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_392;
    }
    if (tmp_cond_truth_185 == 1)
    {
        goto condexpr_true_129;
    }
    else
    {
        goto condexpr_false_129;
    }
    condexpr_true_129:;
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_result = tmp_and_48__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_48__value_5 );
        tmp_and_48__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_compexpr_left_176 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_176 == NULL ))
    {
        tmp_compexpr_left_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_176 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto try_finally_handler_395;
    }

    tmp_compexpr_right_176 = const_int_pos_7;
    tmp_assign_source_400 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_176, tmp_compexpr_right_176 );
    if ( tmp_assign_source_400 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_395;
    }
    {
        PyObject *old = tmp_and_48__value_4;
        tmp_and_48__value_4 = tmp_assign_source_400;
        Py_XDECREF( old );
    }

    tmp_cond_value_186 = tmp_and_48__value_4;

    tmp_cond_truth_186 = CHECK_IF_TRUE( tmp_cond_value_186 );
    if ( tmp_cond_truth_186 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_395;
    }
    if (tmp_cond_truth_186 == 1)
    {
        goto condexpr_true_130;
    }
    else
    {
        goto condexpr_false_130;
    }
    condexpr_true_130:;
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_result = tmp_and_48__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_48__value_4 );
        tmp_and_48__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_compexpr_left_177 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_177 == NULL ))
    {
        tmp_compexpr_left_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_177 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto try_finally_handler_398;
    }

    tmp_compexpr_right_177 = const_int_pos_1;
    tmp_assign_source_401 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_177, tmp_compexpr_right_177 );
    if ( tmp_assign_source_401 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_398;
    }
    {
        PyObject *old = tmp_and_48__value_3;
        tmp_and_48__value_3 = tmp_assign_source_401;
        Py_XDECREF( old );
    }

    tmp_cond_value_187 = tmp_and_48__value_3;

    tmp_cond_truth_187 = CHECK_IF_TRUE( tmp_cond_value_187 );
    if ( tmp_cond_truth_187 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_398;
    }
    if (tmp_cond_truth_187 == 1)
    {
        goto condexpr_true_131;
    }
    else
    {
        goto condexpr_false_131;
    }
    condexpr_true_131:;
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_result = tmp_and_48__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_48__value_3 );
        tmp_and_48__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_compexpr_left_178 = const_str_plain_lamp;
    tmp_compexpr_right_178 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_178 == NULL ))
    {
        tmp_compexpr_right_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_178 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto try_finally_handler_401;
    }

    tmp_assign_source_402 = SEQUENCE_CONTAINS( tmp_compexpr_left_178, tmp_compexpr_right_178 );
    if ( tmp_assign_source_402 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_401;
    }
    {
        PyObject *old = tmp_and_48__value_2;
        tmp_and_48__value_2 = tmp_assign_source_402;
        Py_INCREF( tmp_and_48__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_188 = tmp_and_48__value_2;

    tmp_cond_truth_188 = CHECK_IF_TRUE( tmp_cond_value_188 );
    if ( tmp_cond_truth_188 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_401;
    }
    if (tmp_cond_truth_188 == 1)
    {
        goto condexpr_true_132;
    }
    else
    {
        goto condexpr_false_132;
    }
    condexpr_true_132:;
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_result = tmp_and_48__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_48__value_2 );
        tmp_and_48__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_compexpr_left_179 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_179 == NULL ))
    {
        tmp_compexpr_left_179 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_179 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto try_finally_handler_404;
    }

    tmp_compexpr_right_179 = const_int_pos_1;
    tmp_assign_source_403 = RICH_COMPARE_LT( tmp_compexpr_left_179, tmp_compexpr_right_179 );
    if ( tmp_assign_source_403 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_404;
    }
    {
        PyObject *old = tmp_and_48__value_1;
        tmp_and_48__value_1 = tmp_assign_source_403;
        Py_XDECREF( old );
    }

    tmp_cond_value_189 = tmp_and_48__value_1;

    tmp_cond_truth_189 = CHECK_IF_TRUE( tmp_cond_value_189 );
    if ( tmp_cond_truth_189 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_404;
    }
    if (tmp_cond_truth_189 == 1)
    {
        goto condexpr_true_133;
    }
    else
    {
        goto condexpr_false_133;
    }
    condexpr_true_133:;
    tmp_cond_value_184 = NULL;
    // Tried code
    tmp_result = tmp_and_48__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_48__value_1 );
        tmp_and_48__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_180 = const_str_plain_dagger;
    tmp_compexpr_right_180 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_180 == NULL ))
    {
        tmp_compexpr_right_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_180 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto try_finally_handler_405;
    }

    tmp_cond_value_184 = SEQUENCE_CONTAINS( tmp_compexpr_left_180, tmp_compexpr_right_180 );
    if ( tmp_cond_value_184 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_405;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_405:;
    exception_keeper_type_363 = exception_type;
    exception_keeper_value_363 = exception_value;
    exception_keeper_tb_363 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_363 != NULL )
    {
        exception_type = exception_keeper_type_363;
        exception_value = exception_keeper_value_363;
        exception_tb = exception_keeper_tb_363;

        goto try_finally_handler_404;
    }

    goto finally_end_363;
    finally_end_363:;
    goto condexpr_end_133;
    condexpr_false_133:;
    tmp_cond_value_184 = tmp_and_48__value_1;

    condexpr_end_133:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_404:;
    exception_keeper_type_364 = exception_type;
    exception_keeper_value_364 = exception_value;
    exception_keeper_tb_364 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_364 != NULL )
    {
        exception_type = exception_keeper_type_364;
        exception_value = exception_keeper_value_364;
        exception_tb = exception_keeper_tb_364;

        goto try_finally_handler_403;
    }

    goto finally_end_364;
    finally_end_364:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_403:;
    exception_keeper_type_365 = exception_type;
    exception_keeper_value_365 = exception_value;
    exception_keeper_tb_365 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_365 != NULL )
    {
        exception_type = exception_keeper_type_365;
        exception_value = exception_keeper_value_365;
        exception_tb = exception_keeper_tb_365;

        goto try_finally_handler_402;
    }

    goto finally_end_365;
    finally_end_365:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_402:;
    exception_keeper_type_366 = exception_type;
    exception_keeper_value_366 = exception_value;
    exception_keeper_tb_366 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_109 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_48__value_1 );
    tmp_and_48__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_109;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_366 != NULL )
    {
        exception_type = exception_keeper_type_366;
        exception_value = exception_keeper_value_366;
        exception_tb = exception_keeper_tb_366;

        goto try_finally_handler_401;
    }

    goto finally_end_366;
    finally_end_366:;
    goto condexpr_end_132;
    condexpr_false_132:;
    tmp_cond_value_184 = tmp_and_48__value_2;

    condexpr_end_132:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_401:;
    exception_keeper_type_367 = exception_type;
    exception_keeper_value_367 = exception_value;
    exception_keeper_tb_367 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_367 != NULL )
    {
        exception_type = exception_keeper_type_367;
        exception_value = exception_keeper_value_367;
        exception_tb = exception_keeper_tb_367;

        goto try_finally_handler_400;
    }

    goto finally_end_367;
    finally_end_367:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_400:;
    exception_keeper_type_368 = exception_type;
    exception_keeper_value_368 = exception_value;
    exception_keeper_tb_368 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_368 != NULL )
    {
        exception_type = exception_keeper_type_368;
        exception_value = exception_keeper_value_368;
        exception_tb = exception_keeper_tb_368;

        goto try_finally_handler_399;
    }

    goto finally_end_368;
    finally_end_368:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_399:;
    exception_keeper_type_369 = exception_type;
    exception_keeper_value_369 = exception_value;
    exception_keeper_tb_369 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_110 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_48__value_2 );
    tmp_and_48__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_110;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_369 != NULL )
    {
        exception_type = exception_keeper_type_369;
        exception_value = exception_keeper_value_369;
        exception_tb = exception_keeper_tb_369;

        goto try_finally_handler_398;
    }

    goto finally_end_369;
    finally_end_369:;
    goto condexpr_end_131;
    condexpr_false_131:;
    tmp_cond_value_184 = tmp_and_48__value_3;

    condexpr_end_131:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_398:;
    exception_keeper_type_370 = exception_type;
    exception_keeper_value_370 = exception_value;
    exception_keeper_tb_370 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_370 != NULL )
    {
        exception_type = exception_keeper_type_370;
        exception_value = exception_keeper_value_370;
        exception_tb = exception_keeper_tb_370;

        goto try_finally_handler_397;
    }

    goto finally_end_370;
    finally_end_370:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_397:;
    exception_keeper_type_371 = exception_type;
    exception_keeper_value_371 = exception_value;
    exception_keeper_tb_371 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_371 != NULL )
    {
        exception_type = exception_keeper_type_371;
        exception_value = exception_keeper_value_371;
        exception_tb = exception_keeper_tb_371;

        goto try_finally_handler_396;
    }

    goto finally_end_371;
    finally_end_371:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_396:;
    exception_keeper_type_372 = exception_type;
    exception_keeper_value_372 = exception_value;
    exception_keeper_tb_372 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_111 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_48__value_3 );
    tmp_and_48__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_111;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_372 != NULL )
    {
        exception_type = exception_keeper_type_372;
        exception_value = exception_keeper_value_372;
        exception_tb = exception_keeper_tb_372;

        goto try_finally_handler_395;
    }

    goto finally_end_372;
    finally_end_372:;
    goto condexpr_end_130;
    condexpr_false_130:;
    tmp_cond_value_184 = tmp_and_48__value_4;

    condexpr_end_130:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_395:;
    exception_keeper_type_373 = exception_type;
    exception_keeper_value_373 = exception_value;
    exception_keeper_tb_373 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_373 != NULL )
    {
        exception_type = exception_keeper_type_373;
        exception_value = exception_keeper_value_373;
        exception_tb = exception_keeper_tb_373;

        goto try_finally_handler_394;
    }

    goto finally_end_373;
    finally_end_373:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_394:;
    exception_keeper_type_374 = exception_type;
    exception_keeper_value_374 = exception_value;
    exception_keeper_tb_374 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_374 != NULL )
    {
        exception_type = exception_keeper_type_374;
        exception_value = exception_keeper_value_374;
        exception_tb = exception_keeper_tb_374;

        goto try_finally_handler_393;
    }

    goto finally_end_374;
    finally_end_374:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_393:;
    exception_keeper_type_375 = exception_type;
    exception_keeper_value_375 = exception_value;
    exception_keeper_tb_375 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_112 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_48__value_4 );
    tmp_and_48__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_112;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_375 != NULL )
    {
        exception_type = exception_keeper_type_375;
        exception_value = exception_keeper_value_375;
        exception_tb = exception_keeper_tb_375;

        goto try_finally_handler_392;
    }

    goto finally_end_375;
    finally_end_375:;
    goto condexpr_end_129;
    condexpr_false_129:;
    tmp_cond_value_184 = tmp_and_48__value_5;

    condexpr_end_129:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_392:;
    exception_keeper_type_376 = exception_type;
    exception_keeper_value_376 = exception_value;
    exception_keeper_tb_376 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_376 != NULL )
    {
        exception_type = exception_keeper_type_376;
        exception_value = exception_keeper_value_376;
        exception_tb = exception_keeper_tb_376;

        goto try_finally_handler_391;
    }

    goto finally_end_376;
    finally_end_376:;
    tmp_cond_truth_184 = CHECK_IF_TRUE( tmp_cond_value_184 );
    if ( tmp_cond_truth_184 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 506;
        goto try_finally_handler_391;
    }
    if (tmp_cond_truth_184 == 1)
    {
        goto branch_yes_95;
    }
    else
    {
        goto branch_no_95;
    }
    branch_yes_95:;
    tmp_assign_source_404 = const_str_digest_3f7624f11f47efe211e7ff29c925040f;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_404 );
    tmp_str_arg_71 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_71 == NULL ))
    {
        tmp_str_arg_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_71 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 508;
        goto try_finally_handler_391;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_71 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 508;
        goto try_finally_handler_391;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 508;
        goto try_finally_handler_391;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 508;
        goto try_finally_handler_391;
    }
    goto branch_end_95;
    branch_no_95:;
    // Tried code
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_compexpr_left_181 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_181 == NULL ))
    {
        tmp_compexpr_left_181 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_181 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto try_finally_handler_407;
    }

    tmp_compexpr_right_181 = const_int_pos_3;
    tmp_assign_source_405 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_181, tmp_compexpr_right_181 );
    if ( tmp_assign_source_405 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_407;
    }
    {
        PyObject *old = tmp_and_49__value_5;
        tmp_and_49__value_5 = tmp_assign_source_405;
        Py_XDECREF( old );
    }

    tmp_cond_value_191 = tmp_and_49__value_5;

    tmp_cond_truth_191 = CHECK_IF_TRUE( tmp_cond_value_191 );
    if ( tmp_cond_truth_191 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_407;
    }
    if (tmp_cond_truth_191 == 1)
    {
        goto condexpr_true_134;
    }
    else
    {
        goto condexpr_false_134;
    }
    condexpr_true_134:;
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_result = tmp_and_49__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_49__value_5 );
        tmp_and_49__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_compexpr_left_182 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_182 == NULL ))
    {
        tmp_compexpr_left_182 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_182 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto try_finally_handler_410;
    }

    tmp_compexpr_right_182 = const_int_pos_7;
    tmp_assign_source_406 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_182, tmp_compexpr_right_182 );
    if ( tmp_assign_source_406 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_410;
    }
    {
        PyObject *old = tmp_and_49__value_4;
        tmp_and_49__value_4 = tmp_assign_source_406;
        Py_XDECREF( old );
    }

    tmp_cond_value_192 = tmp_and_49__value_4;

    tmp_cond_truth_192 = CHECK_IF_TRUE( tmp_cond_value_192 );
    if ( tmp_cond_truth_192 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_410;
    }
    if (tmp_cond_truth_192 == 1)
    {
        goto condexpr_true_135;
    }
    else
    {
        goto condexpr_false_135;
    }
    condexpr_true_135:;
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_result = tmp_and_49__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_49__value_4 );
        tmp_and_49__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_compexpr_left_183 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_183 == NULL ))
    {
        tmp_compexpr_left_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_183 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto try_finally_handler_413;
    }

    tmp_compexpr_right_183 = const_int_pos_1;
    tmp_assign_source_407 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_183, tmp_compexpr_right_183 );
    if ( tmp_assign_source_407 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_413;
    }
    {
        PyObject *old = tmp_and_49__value_3;
        tmp_and_49__value_3 = tmp_assign_source_407;
        Py_XDECREF( old );
    }

    tmp_cond_value_193 = tmp_and_49__value_3;

    tmp_cond_truth_193 = CHECK_IF_TRUE( tmp_cond_value_193 );
    if ( tmp_cond_truth_193 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_413;
    }
    if (tmp_cond_truth_193 == 1)
    {
        goto condexpr_true_136;
    }
    else
    {
        goto condexpr_false_136;
    }
    condexpr_true_136:;
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_result = tmp_and_49__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_49__value_3 );
        tmp_and_49__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_compexpr_left_184 = const_str_plain_lamp;
    tmp_compexpr_right_184 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_184 == NULL ))
    {
        tmp_compexpr_right_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_184 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto try_finally_handler_416;
    }

    tmp_assign_source_408 = SEQUENCE_CONTAINS( tmp_compexpr_left_184, tmp_compexpr_right_184 );
    if ( tmp_assign_source_408 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_416;
    }
    {
        PyObject *old = tmp_and_49__value_2;
        tmp_and_49__value_2 = tmp_assign_source_408;
        Py_INCREF( tmp_and_49__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_194 = tmp_and_49__value_2;

    tmp_cond_truth_194 = CHECK_IF_TRUE( tmp_cond_value_194 );
    if ( tmp_cond_truth_194 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_416;
    }
    if (tmp_cond_truth_194 == 1)
    {
        goto condexpr_true_137;
    }
    else
    {
        goto condexpr_false_137;
    }
    condexpr_true_137:;
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_result = tmp_and_49__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_49__value_2 );
        tmp_and_49__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_compexpr_left_185 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_185 == NULL ))
    {
        tmp_compexpr_left_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_185 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto try_finally_handler_419;
    }

    tmp_compexpr_right_185 = const_int_pos_1;
    tmp_assign_source_409 = RICH_COMPARE_GE( tmp_compexpr_left_185, tmp_compexpr_right_185 );
    if ( tmp_assign_source_409 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_419;
    }
    {
        PyObject *old = tmp_and_49__value_1;
        tmp_and_49__value_1 = tmp_assign_source_409;
        Py_XDECREF( old );
    }

    tmp_cond_value_195 = tmp_and_49__value_1;

    tmp_cond_truth_195 = CHECK_IF_TRUE( tmp_cond_value_195 );
    if ( tmp_cond_truth_195 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_419;
    }
    if (tmp_cond_truth_195 == 1)
    {
        goto condexpr_true_138;
    }
    else
    {
        goto condexpr_false_138;
    }
    condexpr_true_138:;
    tmp_cond_value_190 = NULL;
    // Tried code
    tmp_result = tmp_and_49__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_49__value_1 );
        tmp_and_49__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_186 = const_str_plain_dagger;
    tmp_compexpr_right_186 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_186 == NULL ))
    {
        tmp_compexpr_right_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_186 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto try_finally_handler_420;
    }

    tmp_cond_value_190 = SEQUENCE_CONTAINS( tmp_compexpr_left_186, tmp_compexpr_right_186 );
    if ( tmp_cond_value_190 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_420;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_420:;
    exception_keeper_type_377 = exception_type;
    exception_keeper_value_377 = exception_value;
    exception_keeper_tb_377 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_377 != NULL )
    {
        exception_type = exception_keeper_type_377;
        exception_value = exception_keeper_value_377;
        exception_tb = exception_keeper_tb_377;

        goto try_finally_handler_419;
    }

    goto finally_end_377;
    finally_end_377:;
    goto condexpr_end_138;
    condexpr_false_138:;
    tmp_cond_value_190 = tmp_and_49__value_1;

    condexpr_end_138:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_419:;
    exception_keeper_type_378 = exception_type;
    exception_keeper_value_378 = exception_value;
    exception_keeper_tb_378 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_378 != NULL )
    {
        exception_type = exception_keeper_type_378;
        exception_value = exception_keeper_value_378;
        exception_tb = exception_keeper_tb_378;

        goto try_finally_handler_418;
    }

    goto finally_end_378;
    finally_end_378:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_418:;
    exception_keeper_type_379 = exception_type;
    exception_keeper_value_379 = exception_value;
    exception_keeper_tb_379 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_379 != NULL )
    {
        exception_type = exception_keeper_type_379;
        exception_value = exception_keeper_value_379;
        exception_tb = exception_keeper_tb_379;

        goto try_finally_handler_417;
    }

    goto finally_end_379;
    finally_end_379:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_417:;
    exception_keeper_type_380 = exception_type;
    exception_keeper_value_380 = exception_value;
    exception_keeper_tb_380 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_113 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_49__value_1 );
    tmp_and_49__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_113;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_380 != NULL )
    {
        exception_type = exception_keeper_type_380;
        exception_value = exception_keeper_value_380;
        exception_tb = exception_keeper_tb_380;

        goto try_finally_handler_416;
    }

    goto finally_end_380;
    finally_end_380:;
    goto condexpr_end_137;
    condexpr_false_137:;
    tmp_cond_value_190 = tmp_and_49__value_2;

    condexpr_end_137:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_416:;
    exception_keeper_type_381 = exception_type;
    exception_keeper_value_381 = exception_value;
    exception_keeper_tb_381 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_381 != NULL )
    {
        exception_type = exception_keeper_type_381;
        exception_value = exception_keeper_value_381;
        exception_tb = exception_keeper_tb_381;

        goto try_finally_handler_415;
    }

    goto finally_end_381;
    finally_end_381:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_415:;
    exception_keeper_type_382 = exception_type;
    exception_keeper_value_382 = exception_value;
    exception_keeper_tb_382 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_382 != NULL )
    {
        exception_type = exception_keeper_type_382;
        exception_value = exception_keeper_value_382;
        exception_tb = exception_keeper_tb_382;

        goto try_finally_handler_414;
    }

    goto finally_end_382;
    finally_end_382:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_414:;
    exception_keeper_type_383 = exception_type;
    exception_keeper_value_383 = exception_value;
    exception_keeper_tb_383 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_114 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_49__value_2 );
    tmp_and_49__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_114;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_383 != NULL )
    {
        exception_type = exception_keeper_type_383;
        exception_value = exception_keeper_value_383;
        exception_tb = exception_keeper_tb_383;

        goto try_finally_handler_413;
    }

    goto finally_end_383;
    finally_end_383:;
    goto condexpr_end_136;
    condexpr_false_136:;
    tmp_cond_value_190 = tmp_and_49__value_3;

    condexpr_end_136:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_413:;
    exception_keeper_type_384 = exception_type;
    exception_keeper_value_384 = exception_value;
    exception_keeper_tb_384 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_384 != NULL )
    {
        exception_type = exception_keeper_type_384;
        exception_value = exception_keeper_value_384;
        exception_tb = exception_keeper_tb_384;

        goto try_finally_handler_412;
    }

    goto finally_end_384;
    finally_end_384:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_412:;
    exception_keeper_type_385 = exception_type;
    exception_keeper_value_385 = exception_value;
    exception_keeper_tb_385 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_385 != NULL )
    {
        exception_type = exception_keeper_type_385;
        exception_value = exception_keeper_value_385;
        exception_tb = exception_keeper_tb_385;

        goto try_finally_handler_411;
    }

    goto finally_end_385;
    finally_end_385:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_411:;
    exception_keeper_type_386 = exception_type;
    exception_keeper_value_386 = exception_value;
    exception_keeper_tb_386 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_115 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_49__value_3 );
    tmp_and_49__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_115;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_386 != NULL )
    {
        exception_type = exception_keeper_type_386;
        exception_value = exception_keeper_value_386;
        exception_tb = exception_keeper_tb_386;

        goto try_finally_handler_410;
    }

    goto finally_end_386;
    finally_end_386:;
    goto condexpr_end_135;
    condexpr_false_135:;
    tmp_cond_value_190 = tmp_and_49__value_4;

    condexpr_end_135:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_410:;
    exception_keeper_type_387 = exception_type;
    exception_keeper_value_387 = exception_value;
    exception_keeper_tb_387 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_387 != NULL )
    {
        exception_type = exception_keeper_type_387;
        exception_value = exception_keeper_value_387;
        exception_tb = exception_keeper_tb_387;

        goto try_finally_handler_409;
    }

    goto finally_end_387;
    finally_end_387:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_409:;
    exception_keeper_type_388 = exception_type;
    exception_keeper_value_388 = exception_value;
    exception_keeper_tb_388 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_388 != NULL )
    {
        exception_type = exception_keeper_type_388;
        exception_value = exception_keeper_value_388;
        exception_tb = exception_keeper_tb_388;

        goto try_finally_handler_408;
    }

    goto finally_end_388;
    finally_end_388:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_408:;
    exception_keeper_type_389 = exception_type;
    exception_keeper_value_389 = exception_value;
    exception_keeper_tb_389 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_116 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_49__value_4 );
    tmp_and_49__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_116;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_389 != NULL )
    {
        exception_type = exception_keeper_type_389;
        exception_value = exception_keeper_value_389;
        exception_tb = exception_keeper_tb_389;

        goto try_finally_handler_407;
    }

    goto finally_end_389;
    finally_end_389:;
    goto condexpr_end_134;
    condexpr_false_134:;
    tmp_cond_value_190 = tmp_and_49__value_5;

    condexpr_end_134:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_407:;
    exception_keeper_type_390 = exception_type;
    exception_keeper_value_390 = exception_value;
    exception_keeper_tb_390 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_390 != NULL )
    {
        exception_type = exception_keeper_type_390;
        exception_value = exception_keeper_value_390;
        exception_tb = exception_keeper_tb_390;

        goto try_finally_handler_406;
    }

    goto finally_end_390;
    finally_end_390:;
    tmp_cond_truth_190 = CHECK_IF_TRUE( tmp_cond_value_190 );
    if ( tmp_cond_truth_190 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 510;
        goto try_finally_handler_406;
    }
    if (tmp_cond_truth_190 == 1)
    {
        goto branch_yes_96;
    }
    else
    {
        goto branch_no_96;
    }
    branch_yes_96:;
    tmp_assign_source_410 = const_str_digest_143f99a78ff20b0e9116a6ea5ed17c6a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_410 );
    tmp_str_arg_72 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_72 == NULL ))
    {
        tmp_str_arg_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_72 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 512;
        goto try_finally_handler_406;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_72 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 512;
        goto try_finally_handler_406;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 512;
        goto try_finally_handler_406;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 512;
        goto try_finally_handler_406;
    }
    goto branch_end_96;
    branch_no_96:;
    // Tried code
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_compexpr_left_187 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_187 == NULL ))
    {
        tmp_compexpr_left_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_187 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 514;
        goto try_finally_handler_422;
    }

    tmp_compexpr_right_187 = const_int_pos_3;
    tmp_assign_source_411 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_187, tmp_compexpr_right_187 );
    if ( tmp_assign_source_411 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_422;
    }
    {
        PyObject *old = tmp_and_50__value_5;
        tmp_and_50__value_5 = tmp_assign_source_411;
        Py_XDECREF( old );
    }

    tmp_cond_value_197 = tmp_and_50__value_5;

    tmp_cond_truth_197 = CHECK_IF_TRUE( tmp_cond_value_197 );
    if ( tmp_cond_truth_197 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_422;
    }
    if (tmp_cond_truth_197 == 1)
    {
        goto condexpr_true_139;
    }
    else
    {
        goto condexpr_false_139;
    }
    condexpr_true_139:;
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_result = tmp_and_50__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_50__value_5 );
        tmp_and_50__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_compexpr_left_188 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_188 == NULL ))
    {
        tmp_compexpr_left_188 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_188 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 514;
        goto try_finally_handler_425;
    }

    tmp_compexpr_right_188 = const_int_pos_7;
    tmp_assign_source_412 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_188, tmp_compexpr_right_188 );
    if ( tmp_assign_source_412 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_425;
    }
    {
        PyObject *old = tmp_and_50__value_4;
        tmp_and_50__value_4 = tmp_assign_source_412;
        Py_XDECREF( old );
    }

    tmp_cond_value_198 = tmp_and_50__value_4;

    tmp_cond_truth_198 = CHECK_IF_TRUE( tmp_cond_value_198 );
    if ( tmp_cond_truth_198 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_425;
    }
    if (tmp_cond_truth_198 == 1)
    {
        goto condexpr_true_140;
    }
    else
    {
        goto condexpr_false_140;
    }
    condexpr_true_140:;
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_result = tmp_and_50__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_50__value_4 );
        tmp_and_50__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_compexpr_left_189 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_189 == NULL ))
    {
        tmp_compexpr_left_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_189 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 514;
        goto try_finally_handler_428;
    }

    tmp_compexpr_right_189 = const_int_pos_1;
    tmp_assign_source_413 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_189, tmp_compexpr_right_189 );
    if ( tmp_assign_source_413 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_428;
    }
    {
        PyObject *old = tmp_and_50__value_3;
        tmp_and_50__value_3 = tmp_assign_source_413;
        Py_XDECREF( old );
    }

    tmp_cond_value_199 = tmp_and_50__value_3;

    tmp_cond_truth_199 = CHECK_IF_TRUE( tmp_cond_value_199 );
    if ( tmp_cond_truth_199 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_428;
    }
    if (tmp_cond_truth_199 == 1)
    {
        goto condexpr_true_141;
    }
    else
    {
        goto condexpr_false_141;
    }
    condexpr_true_141:;
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_result = tmp_and_50__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_50__value_3 );
        tmp_and_50__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_compexpr_left_190 = const_str_plain_lamp;
    tmp_compexpr_right_190 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_190 == NULL ))
    {
        tmp_compexpr_right_190 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_190 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 514;
        goto try_finally_handler_431;
    }

    tmp_assign_source_414 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_190, tmp_compexpr_right_190 );
    if ( tmp_assign_source_414 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_431;
    }
    {
        PyObject *old = tmp_and_50__value_2;
        tmp_and_50__value_2 = tmp_assign_source_414;
        Py_INCREF( tmp_and_50__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_200 = tmp_and_50__value_2;

    tmp_cond_truth_200 = CHECK_IF_TRUE( tmp_cond_value_200 );
    if ( tmp_cond_truth_200 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_431;
    }
    if (tmp_cond_truth_200 == 1)
    {
        goto condexpr_true_142;
    }
    else
    {
        goto condexpr_false_142;
    }
    condexpr_true_142:;
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_result = tmp_and_50__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_50__value_2 );
        tmp_and_50__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_compexpr_left_191 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_191 == NULL ))
    {
        tmp_compexpr_left_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_191 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 514;
        goto try_finally_handler_434;
    }

    tmp_compexpr_right_191 = const_int_pos_1;
    tmp_assign_source_415 = RICH_COMPARE_GE( tmp_compexpr_left_191, tmp_compexpr_right_191 );
    if ( tmp_assign_source_415 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_434;
    }
    {
        PyObject *old = tmp_and_50__value_1;
        tmp_and_50__value_1 = tmp_assign_source_415;
        Py_XDECREF( old );
    }

    tmp_cond_value_201 = tmp_and_50__value_1;

    tmp_cond_truth_201 = CHECK_IF_TRUE( tmp_cond_value_201 );
    if ( tmp_cond_truth_201 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_434;
    }
    if (tmp_cond_truth_201 == 1)
    {
        goto condexpr_true_143;
    }
    else
    {
        goto condexpr_false_143;
    }
    condexpr_true_143:;
    tmp_cond_value_196 = NULL;
    // Tried code
    tmp_result = tmp_and_50__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_50__value_1 );
        tmp_and_50__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_192 = const_str_plain_dagger;
    tmp_compexpr_right_192 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_192 == NULL ))
    {
        tmp_compexpr_right_192 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_192 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 514;
        goto try_finally_handler_435;
    }

    tmp_cond_value_196 = SEQUENCE_CONTAINS( tmp_compexpr_left_192, tmp_compexpr_right_192 );
    if ( tmp_cond_value_196 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_435;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_435:;
    exception_keeper_type_391 = exception_type;
    exception_keeper_value_391 = exception_value;
    exception_keeper_tb_391 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_391 != NULL )
    {
        exception_type = exception_keeper_type_391;
        exception_value = exception_keeper_value_391;
        exception_tb = exception_keeper_tb_391;

        goto try_finally_handler_434;
    }

    goto finally_end_391;
    finally_end_391:;
    goto condexpr_end_143;
    condexpr_false_143:;
    tmp_cond_value_196 = tmp_and_50__value_1;

    condexpr_end_143:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_434:;
    exception_keeper_type_392 = exception_type;
    exception_keeper_value_392 = exception_value;
    exception_keeper_tb_392 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_392 != NULL )
    {
        exception_type = exception_keeper_type_392;
        exception_value = exception_keeper_value_392;
        exception_tb = exception_keeper_tb_392;

        goto try_finally_handler_433;
    }

    goto finally_end_392;
    finally_end_392:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_433:;
    exception_keeper_type_393 = exception_type;
    exception_keeper_value_393 = exception_value;
    exception_keeper_tb_393 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_393 != NULL )
    {
        exception_type = exception_keeper_type_393;
        exception_value = exception_keeper_value_393;
        exception_tb = exception_keeper_tb_393;

        goto try_finally_handler_432;
    }

    goto finally_end_393;
    finally_end_393:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_432:;
    exception_keeper_type_394 = exception_type;
    exception_keeper_value_394 = exception_value;
    exception_keeper_tb_394 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_117 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_50__value_1 );
    tmp_and_50__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_117;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_394 != NULL )
    {
        exception_type = exception_keeper_type_394;
        exception_value = exception_keeper_value_394;
        exception_tb = exception_keeper_tb_394;

        goto try_finally_handler_431;
    }

    goto finally_end_394;
    finally_end_394:;
    goto condexpr_end_142;
    condexpr_false_142:;
    tmp_cond_value_196 = tmp_and_50__value_2;

    condexpr_end_142:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_431:;
    exception_keeper_type_395 = exception_type;
    exception_keeper_value_395 = exception_value;
    exception_keeper_tb_395 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_395 != NULL )
    {
        exception_type = exception_keeper_type_395;
        exception_value = exception_keeper_value_395;
        exception_tb = exception_keeper_tb_395;

        goto try_finally_handler_430;
    }

    goto finally_end_395;
    finally_end_395:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_430:;
    exception_keeper_type_396 = exception_type;
    exception_keeper_value_396 = exception_value;
    exception_keeper_tb_396 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_396 != NULL )
    {
        exception_type = exception_keeper_type_396;
        exception_value = exception_keeper_value_396;
        exception_tb = exception_keeper_tb_396;

        goto try_finally_handler_429;
    }

    goto finally_end_396;
    finally_end_396:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_429:;
    exception_keeper_type_397 = exception_type;
    exception_keeper_value_397 = exception_value;
    exception_keeper_tb_397 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_118 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_50__value_2 );
    tmp_and_50__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_118;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_397 != NULL )
    {
        exception_type = exception_keeper_type_397;
        exception_value = exception_keeper_value_397;
        exception_tb = exception_keeper_tb_397;

        goto try_finally_handler_428;
    }

    goto finally_end_397;
    finally_end_397:;
    goto condexpr_end_141;
    condexpr_false_141:;
    tmp_cond_value_196 = tmp_and_50__value_3;

    condexpr_end_141:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_428:;
    exception_keeper_type_398 = exception_type;
    exception_keeper_value_398 = exception_value;
    exception_keeper_tb_398 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_398 != NULL )
    {
        exception_type = exception_keeper_type_398;
        exception_value = exception_keeper_value_398;
        exception_tb = exception_keeper_tb_398;

        goto try_finally_handler_427;
    }

    goto finally_end_398;
    finally_end_398:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_427:;
    exception_keeper_type_399 = exception_type;
    exception_keeper_value_399 = exception_value;
    exception_keeper_tb_399 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_399 != NULL )
    {
        exception_type = exception_keeper_type_399;
        exception_value = exception_keeper_value_399;
        exception_tb = exception_keeper_tb_399;

        goto try_finally_handler_426;
    }

    goto finally_end_399;
    finally_end_399:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_426:;
    exception_keeper_type_400 = exception_type;
    exception_keeper_value_400 = exception_value;
    exception_keeper_tb_400 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_119 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_50__value_3 );
    tmp_and_50__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_119;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_400 != NULL )
    {
        exception_type = exception_keeper_type_400;
        exception_value = exception_keeper_value_400;
        exception_tb = exception_keeper_tb_400;

        goto try_finally_handler_425;
    }

    goto finally_end_400;
    finally_end_400:;
    goto condexpr_end_140;
    condexpr_false_140:;
    tmp_cond_value_196 = tmp_and_50__value_4;

    condexpr_end_140:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_425:;
    exception_keeper_type_401 = exception_type;
    exception_keeper_value_401 = exception_value;
    exception_keeper_tb_401 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_401 != NULL )
    {
        exception_type = exception_keeper_type_401;
        exception_value = exception_keeper_value_401;
        exception_tb = exception_keeper_tb_401;

        goto try_finally_handler_424;
    }

    goto finally_end_401;
    finally_end_401:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_424:;
    exception_keeper_type_402 = exception_type;
    exception_keeper_value_402 = exception_value;
    exception_keeper_tb_402 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_402 != NULL )
    {
        exception_type = exception_keeper_type_402;
        exception_value = exception_keeper_value_402;
        exception_tb = exception_keeper_tb_402;

        goto try_finally_handler_423;
    }

    goto finally_end_402;
    finally_end_402:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_423:;
    exception_keeper_type_403 = exception_type;
    exception_keeper_value_403 = exception_value;
    exception_keeper_tb_403 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_120 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_50__value_4 );
    tmp_and_50__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_120;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_403 != NULL )
    {
        exception_type = exception_keeper_type_403;
        exception_value = exception_keeper_value_403;
        exception_tb = exception_keeper_tb_403;

        goto try_finally_handler_422;
    }

    goto finally_end_403;
    finally_end_403:;
    goto condexpr_end_139;
    condexpr_false_139:;
    tmp_cond_value_196 = tmp_and_50__value_5;

    condexpr_end_139:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_422:;
    exception_keeper_type_404 = exception_type;
    exception_keeper_value_404 = exception_value;
    exception_keeper_tb_404 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_404 != NULL )
    {
        exception_type = exception_keeper_type_404;
        exception_value = exception_keeper_value_404;
        exception_tb = exception_keeper_tb_404;

        goto try_finally_handler_421;
    }

    goto finally_end_404;
    finally_end_404:;
    tmp_cond_truth_196 = CHECK_IF_TRUE( tmp_cond_value_196 );
    if ( tmp_cond_truth_196 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 514;
        goto try_finally_handler_421;
    }
    if (tmp_cond_truth_196 == 1)
    {
        goto branch_yes_97;
    }
    else
    {
        goto branch_no_97;
    }
    branch_yes_97:;
    tmp_assign_source_416 = const_str_digest_2d8bd3b253e7988d6e76800f17916591;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_416 );
    tmp_str_arg_73 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_73 == NULL ))
    {
        tmp_str_arg_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_73 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 516;
        goto try_finally_handler_421;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_73 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 516;
        goto try_finally_handler_421;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 516;
        goto try_finally_handler_421;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 516;
        goto try_finally_handler_421;
    }
    goto branch_end_97;
    branch_no_97:;
    // Tried code
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_compexpr_left_193 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_193 == NULL ))
    {
        tmp_compexpr_left_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_193 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 518;
        goto try_finally_handler_437;
    }

    tmp_compexpr_right_193 = const_int_pos_3;
    tmp_assign_source_417 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_193, tmp_compexpr_right_193 );
    if ( tmp_assign_source_417 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_437;
    }
    {
        PyObject *old = tmp_and_51__value_5;
        tmp_and_51__value_5 = tmp_assign_source_417;
        Py_XDECREF( old );
    }

    tmp_cond_value_203 = tmp_and_51__value_5;

    tmp_cond_truth_203 = CHECK_IF_TRUE( tmp_cond_value_203 );
    if ( tmp_cond_truth_203 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_437;
    }
    if (tmp_cond_truth_203 == 1)
    {
        goto condexpr_true_144;
    }
    else
    {
        goto condexpr_false_144;
    }
    condexpr_true_144:;
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_result = tmp_and_51__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_51__value_5 );
        tmp_and_51__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_compexpr_left_194 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_194 == NULL ))
    {
        tmp_compexpr_left_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_194 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 518;
        goto try_finally_handler_440;
    }

    tmp_compexpr_right_194 = const_int_pos_7;
    tmp_assign_source_418 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_194, tmp_compexpr_right_194 );
    if ( tmp_assign_source_418 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_440;
    }
    {
        PyObject *old = tmp_and_51__value_4;
        tmp_and_51__value_4 = tmp_assign_source_418;
        Py_XDECREF( old );
    }

    tmp_cond_value_204 = tmp_and_51__value_4;

    tmp_cond_truth_204 = CHECK_IF_TRUE( tmp_cond_value_204 );
    if ( tmp_cond_truth_204 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_440;
    }
    if (tmp_cond_truth_204 == 1)
    {
        goto condexpr_true_145;
    }
    else
    {
        goto condexpr_false_145;
    }
    condexpr_true_145:;
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_result = tmp_and_51__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_51__value_4 );
        tmp_and_51__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_compexpr_left_195 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_195 == NULL ))
    {
        tmp_compexpr_left_195 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_195 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 518;
        goto try_finally_handler_443;
    }

    tmp_compexpr_right_195 = const_int_pos_1;
    tmp_assign_source_419 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_195, tmp_compexpr_right_195 );
    if ( tmp_assign_source_419 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_443;
    }
    {
        PyObject *old = tmp_and_51__value_3;
        tmp_and_51__value_3 = tmp_assign_source_419;
        Py_XDECREF( old );
    }

    tmp_cond_value_205 = tmp_and_51__value_3;

    tmp_cond_truth_205 = CHECK_IF_TRUE( tmp_cond_value_205 );
    if ( tmp_cond_truth_205 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_443;
    }
    if (tmp_cond_truth_205 == 1)
    {
        goto condexpr_true_146;
    }
    else
    {
        goto condexpr_false_146;
    }
    condexpr_true_146:;
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_result = tmp_and_51__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_51__value_3 );
        tmp_and_51__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_compexpr_left_196 = const_str_plain_dagger;
    tmp_compexpr_right_196 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_196 == NULL ))
    {
        tmp_compexpr_right_196 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_196 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 518;
        goto try_finally_handler_446;
    }

    tmp_assign_source_420 = SEQUENCE_CONTAINS( tmp_compexpr_left_196, tmp_compexpr_right_196 );
    if ( tmp_assign_source_420 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_446;
    }
    {
        PyObject *old = tmp_and_51__value_2;
        tmp_and_51__value_2 = tmp_assign_source_420;
        Py_INCREF( tmp_and_51__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_206 = tmp_and_51__value_2;

    tmp_cond_truth_206 = CHECK_IF_TRUE( tmp_cond_value_206 );
    if ( tmp_cond_truth_206 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_446;
    }
    if (tmp_cond_truth_206 == 1)
    {
        goto condexpr_true_147;
    }
    else
    {
        goto condexpr_false_147;
    }
    condexpr_true_147:;
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_result = tmp_and_51__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_51__value_2 );
        tmp_and_51__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_compexpr_left_197 = const_str_plain_lamp;
    tmp_compexpr_right_197 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_197 == NULL ))
    {
        tmp_compexpr_right_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_197 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 518;
        goto try_finally_handler_449;
    }

    tmp_assign_source_421 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_197, tmp_compexpr_right_197 );
    if ( tmp_assign_source_421 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_449;
    }
    {
        PyObject *old = tmp_and_51__value_1;
        tmp_and_51__value_1 = tmp_assign_source_421;
        Py_INCREF( tmp_and_51__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_207 = tmp_and_51__value_1;

    tmp_cond_truth_207 = CHECK_IF_TRUE( tmp_cond_value_207 );
    if ( tmp_cond_truth_207 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_449;
    }
    if (tmp_cond_truth_207 == 1)
    {
        goto condexpr_true_148;
    }
    else
    {
        goto condexpr_false_148;
    }
    condexpr_true_148:;
    tmp_cond_value_202 = NULL;
    // Tried code
    tmp_result = tmp_and_51__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_51__value_1 );
        tmp_and_51__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_198 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_198 == NULL ))
    {
        tmp_compexpr_left_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_198 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 518;
        goto try_finally_handler_450;
    }

    tmp_compexpr_right_198 = const_int_pos_1;
    tmp_cond_value_202 = RICH_COMPARE_GE( tmp_compexpr_left_198, tmp_compexpr_right_198 );
    if ( tmp_cond_value_202 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 518;
        goto try_finally_handler_450;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_450:;
    exception_keeper_type_405 = exception_type;
    exception_keeper_value_405 = exception_value;
    exception_keeper_tb_405 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_405 != NULL )
    {
        exception_type = exception_keeper_type_405;
        exception_value = exception_keeper_value_405;
        exception_tb = exception_keeper_tb_405;

        goto try_finally_handler_449;
    }

    goto finally_end_405;
    finally_end_405:;
    goto condexpr_end_148;
    condexpr_false_148:;
    tmp_cond_value_202 = tmp_and_51__value_1;

    Py_INCREF( tmp_cond_value_202 );
    condexpr_end_148:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_449:;
    exception_keeper_type_406 = exception_type;
    exception_keeper_value_406 = exception_value;
    exception_keeper_tb_406 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_406 != NULL )
    {
        exception_type = exception_keeper_type_406;
        exception_value = exception_keeper_value_406;
        exception_tb = exception_keeper_tb_406;

        goto try_finally_handler_448;
    }

    goto finally_end_406;
    finally_end_406:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_448:;
    exception_keeper_type_407 = exception_type;
    exception_keeper_value_407 = exception_value;
    exception_keeper_tb_407 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_407 != NULL )
    {
        exception_type = exception_keeper_type_407;
        exception_value = exception_keeper_value_407;
        exception_tb = exception_keeper_tb_407;

        goto try_finally_handler_447;
    }

    goto finally_end_407;
    finally_end_407:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_447:;
    exception_keeper_type_408 = exception_type;
    exception_keeper_value_408 = exception_value;
    exception_keeper_tb_408 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_121 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_51__value_1 );
    tmp_and_51__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_121;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_408 != NULL )
    {
        exception_type = exception_keeper_type_408;
        exception_value = exception_keeper_value_408;
        exception_tb = exception_keeper_tb_408;

        goto try_finally_handler_446;
    }

    goto finally_end_408;
    finally_end_408:;
    goto condexpr_end_147;
    condexpr_false_147:;
    tmp_cond_value_202 = tmp_and_51__value_2;

    Py_INCREF( tmp_cond_value_202 );
    condexpr_end_147:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_446:;
    exception_keeper_type_409 = exception_type;
    exception_keeper_value_409 = exception_value;
    exception_keeper_tb_409 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_409 != NULL )
    {
        exception_type = exception_keeper_type_409;
        exception_value = exception_keeper_value_409;
        exception_tb = exception_keeper_tb_409;

        goto try_finally_handler_445;
    }

    goto finally_end_409;
    finally_end_409:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_445:;
    exception_keeper_type_410 = exception_type;
    exception_keeper_value_410 = exception_value;
    exception_keeper_tb_410 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_410 != NULL )
    {
        exception_type = exception_keeper_type_410;
        exception_value = exception_keeper_value_410;
        exception_tb = exception_keeper_tb_410;

        goto try_finally_handler_444;
    }

    goto finally_end_410;
    finally_end_410:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_444:;
    exception_keeper_type_411 = exception_type;
    exception_keeper_value_411 = exception_value;
    exception_keeper_tb_411 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_122 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_51__value_2 );
    tmp_and_51__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_122;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_411 != NULL )
    {
        exception_type = exception_keeper_type_411;
        exception_value = exception_keeper_value_411;
        exception_tb = exception_keeper_tb_411;

        goto try_finally_handler_443;
    }

    goto finally_end_411;
    finally_end_411:;
    goto condexpr_end_146;
    condexpr_false_146:;
    tmp_cond_value_202 = tmp_and_51__value_3;

    Py_INCREF( tmp_cond_value_202 );
    condexpr_end_146:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_443:;
    exception_keeper_type_412 = exception_type;
    exception_keeper_value_412 = exception_value;
    exception_keeper_tb_412 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_412 != NULL )
    {
        exception_type = exception_keeper_type_412;
        exception_value = exception_keeper_value_412;
        exception_tb = exception_keeper_tb_412;

        goto try_finally_handler_442;
    }

    goto finally_end_412;
    finally_end_412:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_442:;
    exception_keeper_type_413 = exception_type;
    exception_keeper_value_413 = exception_value;
    exception_keeper_tb_413 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_413 != NULL )
    {
        exception_type = exception_keeper_type_413;
        exception_value = exception_keeper_value_413;
        exception_tb = exception_keeper_tb_413;

        goto try_finally_handler_441;
    }

    goto finally_end_413;
    finally_end_413:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_441:;
    exception_keeper_type_414 = exception_type;
    exception_keeper_value_414 = exception_value;
    exception_keeper_tb_414 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_123 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_51__value_3 );
    tmp_and_51__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_123;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_414 != NULL )
    {
        exception_type = exception_keeper_type_414;
        exception_value = exception_keeper_value_414;
        exception_tb = exception_keeper_tb_414;

        goto try_finally_handler_440;
    }

    goto finally_end_414;
    finally_end_414:;
    goto condexpr_end_145;
    condexpr_false_145:;
    tmp_cond_value_202 = tmp_and_51__value_4;

    Py_INCREF( tmp_cond_value_202 );
    condexpr_end_145:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_440:;
    exception_keeper_type_415 = exception_type;
    exception_keeper_value_415 = exception_value;
    exception_keeper_tb_415 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_415 != NULL )
    {
        exception_type = exception_keeper_type_415;
        exception_value = exception_keeper_value_415;
        exception_tb = exception_keeper_tb_415;

        goto try_finally_handler_439;
    }

    goto finally_end_415;
    finally_end_415:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_439:;
    exception_keeper_type_416 = exception_type;
    exception_keeper_value_416 = exception_value;
    exception_keeper_tb_416 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_416 != NULL )
    {
        exception_type = exception_keeper_type_416;
        exception_value = exception_keeper_value_416;
        exception_tb = exception_keeper_tb_416;

        goto try_finally_handler_438;
    }

    goto finally_end_416;
    finally_end_416:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_438:;
    exception_keeper_type_417 = exception_type;
    exception_keeper_value_417 = exception_value;
    exception_keeper_tb_417 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_124 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_51__value_4 );
    tmp_and_51__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_124;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_417 != NULL )
    {
        exception_type = exception_keeper_type_417;
        exception_value = exception_keeper_value_417;
        exception_tb = exception_keeper_tb_417;

        goto try_finally_handler_437;
    }

    goto finally_end_417;
    finally_end_417:;
    goto condexpr_end_144;
    condexpr_false_144:;
    tmp_cond_value_202 = tmp_and_51__value_5;

    Py_INCREF( tmp_cond_value_202 );
    condexpr_end_144:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_437:;
    exception_keeper_type_418 = exception_type;
    exception_keeper_value_418 = exception_value;
    exception_keeper_tb_418 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_418 != NULL )
    {
        exception_type = exception_keeper_type_418;
        exception_value = exception_keeper_value_418;
        exception_tb = exception_keeper_tb_418;

        goto try_finally_handler_436;
    }

    goto finally_end_418;
    finally_end_418:;
    tmp_cond_truth_202 = CHECK_IF_TRUE( tmp_cond_value_202 );
    if ( tmp_cond_truth_202 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_202 );

        frame_module->f_lineno = 518;
        goto try_finally_handler_436;
    }
    Py_DECREF( tmp_cond_value_202 );
    if (tmp_cond_truth_202 == 1)
    {
        goto branch_yes_98;
    }
    else
    {
        goto branch_no_98;
    }
    branch_yes_98:;
    tmp_assign_source_422 = const_str_digest_fc820c1996ad8ff8ecbbd7e7dcbb041e;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_422 );
    tmp_str_arg_74 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_74 == NULL ))
    {
        tmp_str_arg_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_74 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 520;
        goto try_finally_handler_436;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_74 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 520;
        goto try_finally_handler_436;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 520;
        goto try_finally_handler_436;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 520;
        goto try_finally_handler_436;
    }
    goto branch_end_98;
    branch_no_98:;
    // Tried code
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_compexpr_left_199 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_199 == NULL ))
    {
        tmp_compexpr_left_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_199 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 522;
        goto try_finally_handler_452;
    }

    tmp_compexpr_right_199 = const_int_pos_3;
    tmp_assign_source_423 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_199, tmp_compexpr_right_199 );
    if ( tmp_assign_source_423 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_452;
    }
    {
        PyObject *old = tmp_and_52__value_5;
        tmp_and_52__value_5 = tmp_assign_source_423;
        Py_XDECREF( old );
    }

    tmp_cond_value_209 = tmp_and_52__value_5;

    tmp_cond_truth_209 = CHECK_IF_TRUE( tmp_cond_value_209 );
    if ( tmp_cond_truth_209 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_452;
    }
    if (tmp_cond_truth_209 == 1)
    {
        goto condexpr_true_149;
    }
    else
    {
        goto condexpr_false_149;
    }
    condexpr_true_149:;
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_result = tmp_and_52__value_5 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_52__value_5 );
        tmp_and_52__value_5 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_compexpr_left_200 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_200 == NULL ))
    {
        tmp_compexpr_left_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_200 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 522;
        goto try_finally_handler_455;
    }

    tmp_compexpr_right_200 = const_int_pos_7;
    tmp_assign_source_424 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_200, tmp_compexpr_right_200 );
    if ( tmp_assign_source_424 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_455;
    }
    {
        PyObject *old = tmp_and_52__value_4;
        tmp_and_52__value_4 = tmp_assign_source_424;
        Py_XDECREF( old );
    }

    tmp_cond_value_210 = tmp_and_52__value_4;

    tmp_cond_truth_210 = CHECK_IF_TRUE( tmp_cond_value_210 );
    if ( tmp_cond_truth_210 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_455;
    }
    if (tmp_cond_truth_210 == 1)
    {
        goto condexpr_true_150;
    }
    else
    {
        goto condexpr_false_150;
    }
    condexpr_true_150:;
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_result = tmp_and_52__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_52__value_4 );
        tmp_and_52__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_compexpr_left_201 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_201 == NULL ))
    {
        tmp_compexpr_left_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_201 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 522;
        goto try_finally_handler_458;
    }

    tmp_compexpr_right_201 = const_int_pos_1;
    tmp_assign_source_425 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_201, tmp_compexpr_right_201 );
    if ( tmp_assign_source_425 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_458;
    }
    {
        PyObject *old = tmp_and_52__value_3;
        tmp_and_52__value_3 = tmp_assign_source_425;
        Py_XDECREF( old );
    }

    tmp_cond_value_211 = tmp_and_52__value_3;

    tmp_cond_truth_211 = CHECK_IF_TRUE( tmp_cond_value_211 );
    if ( tmp_cond_truth_211 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_458;
    }
    if (tmp_cond_truth_211 == 1)
    {
        goto condexpr_true_151;
    }
    else
    {
        goto condexpr_false_151;
    }
    condexpr_true_151:;
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_result = tmp_and_52__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_52__value_3 );
        tmp_and_52__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_compexpr_left_202 = const_str_plain_dagger;
    tmp_compexpr_right_202 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_202 == NULL ))
    {
        tmp_compexpr_right_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_202 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 522;
        goto try_finally_handler_461;
    }

    tmp_assign_source_426 = SEQUENCE_CONTAINS( tmp_compexpr_left_202, tmp_compexpr_right_202 );
    if ( tmp_assign_source_426 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_461;
    }
    {
        PyObject *old = tmp_and_52__value_2;
        tmp_and_52__value_2 = tmp_assign_source_426;
        Py_INCREF( tmp_and_52__value_2 );
        Py_XDECREF( old );
    }

    tmp_cond_value_212 = tmp_and_52__value_2;

    tmp_cond_truth_212 = CHECK_IF_TRUE( tmp_cond_value_212 );
    if ( tmp_cond_truth_212 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_461;
    }
    if (tmp_cond_truth_212 == 1)
    {
        goto condexpr_true_152;
    }
    else
    {
        goto condexpr_false_152;
    }
    condexpr_true_152:;
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_result = tmp_and_52__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_52__value_2 );
        tmp_and_52__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_compexpr_left_203 = const_str_plain_lamp;
    tmp_compexpr_right_203 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_203 == NULL ))
    {
        tmp_compexpr_right_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_203 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 522;
        goto try_finally_handler_464;
    }

    tmp_assign_source_427 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_203, tmp_compexpr_right_203 );
    if ( tmp_assign_source_427 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_464;
    }
    {
        PyObject *old = tmp_and_52__value_1;
        tmp_and_52__value_1 = tmp_assign_source_427;
        Py_INCREF( tmp_and_52__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_213 = tmp_and_52__value_1;

    tmp_cond_truth_213 = CHECK_IF_TRUE( tmp_cond_value_213 );
    if ( tmp_cond_truth_213 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_464;
    }
    if (tmp_cond_truth_213 == 1)
    {
        goto condexpr_true_153;
    }
    else
    {
        goto condexpr_false_153;
    }
    condexpr_true_153:;
    tmp_cond_value_208 = NULL;
    // Tried code
    tmp_result = tmp_and_52__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_52__value_1 );
        tmp_and_52__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_204 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_204 == NULL ))
    {
        tmp_compexpr_left_204 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_204 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 522;
        goto try_finally_handler_465;
    }

    tmp_compexpr_right_204 = const_int_pos_1;
    tmp_cond_value_208 = RICH_COMPARE_NE( tmp_compexpr_left_204, tmp_compexpr_right_204 );
    if ( tmp_cond_value_208 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 522;
        goto try_finally_handler_465;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_465:;
    exception_keeper_type_419 = exception_type;
    exception_keeper_value_419 = exception_value;
    exception_keeper_tb_419 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_419 != NULL )
    {
        exception_type = exception_keeper_type_419;
        exception_value = exception_keeper_value_419;
        exception_tb = exception_keeper_tb_419;

        goto try_finally_handler_464;
    }

    goto finally_end_419;
    finally_end_419:;
    goto condexpr_end_153;
    condexpr_false_153:;
    tmp_cond_value_208 = tmp_and_52__value_1;

    Py_INCREF( tmp_cond_value_208 );
    condexpr_end_153:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_464:;
    exception_keeper_type_420 = exception_type;
    exception_keeper_value_420 = exception_value;
    exception_keeper_tb_420 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_420 != NULL )
    {
        exception_type = exception_keeper_type_420;
        exception_value = exception_keeper_value_420;
        exception_tb = exception_keeper_tb_420;

        goto try_finally_handler_463;
    }

    goto finally_end_420;
    finally_end_420:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_463:;
    exception_keeper_type_421 = exception_type;
    exception_keeper_value_421 = exception_value;
    exception_keeper_tb_421 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_421 != NULL )
    {
        exception_type = exception_keeper_type_421;
        exception_value = exception_keeper_value_421;
        exception_tb = exception_keeper_tb_421;

        goto try_finally_handler_462;
    }

    goto finally_end_421;
    finally_end_421:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_462:;
    exception_keeper_type_422 = exception_type;
    exception_keeper_value_422 = exception_value;
    exception_keeper_tb_422 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_125 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_52__value_1 );
    tmp_and_52__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_125;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_422 != NULL )
    {
        exception_type = exception_keeper_type_422;
        exception_value = exception_keeper_value_422;
        exception_tb = exception_keeper_tb_422;

        goto try_finally_handler_461;
    }

    goto finally_end_422;
    finally_end_422:;
    goto condexpr_end_152;
    condexpr_false_152:;
    tmp_cond_value_208 = tmp_and_52__value_2;

    Py_INCREF( tmp_cond_value_208 );
    condexpr_end_152:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_461:;
    exception_keeper_type_423 = exception_type;
    exception_keeper_value_423 = exception_value;
    exception_keeper_tb_423 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_423 != NULL )
    {
        exception_type = exception_keeper_type_423;
        exception_value = exception_keeper_value_423;
        exception_tb = exception_keeper_tb_423;

        goto try_finally_handler_460;
    }

    goto finally_end_423;
    finally_end_423:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_460:;
    exception_keeper_type_424 = exception_type;
    exception_keeper_value_424 = exception_value;
    exception_keeper_tb_424 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_424 != NULL )
    {
        exception_type = exception_keeper_type_424;
        exception_value = exception_keeper_value_424;
        exception_tb = exception_keeper_tb_424;

        goto try_finally_handler_459;
    }

    goto finally_end_424;
    finally_end_424:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_459:;
    exception_keeper_type_425 = exception_type;
    exception_keeper_value_425 = exception_value;
    exception_keeper_tb_425 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_126 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_52__value_2 );
    tmp_and_52__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_126;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_425 != NULL )
    {
        exception_type = exception_keeper_type_425;
        exception_value = exception_keeper_value_425;
        exception_tb = exception_keeper_tb_425;

        goto try_finally_handler_458;
    }

    goto finally_end_425;
    finally_end_425:;
    goto condexpr_end_151;
    condexpr_false_151:;
    tmp_cond_value_208 = tmp_and_52__value_3;

    Py_INCREF( tmp_cond_value_208 );
    condexpr_end_151:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_458:;
    exception_keeper_type_426 = exception_type;
    exception_keeper_value_426 = exception_value;
    exception_keeper_tb_426 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_426 != NULL )
    {
        exception_type = exception_keeper_type_426;
        exception_value = exception_keeper_value_426;
        exception_tb = exception_keeper_tb_426;

        goto try_finally_handler_457;
    }

    goto finally_end_426;
    finally_end_426:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_457:;
    exception_keeper_type_427 = exception_type;
    exception_keeper_value_427 = exception_value;
    exception_keeper_tb_427 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_427 != NULL )
    {
        exception_type = exception_keeper_type_427;
        exception_value = exception_keeper_value_427;
        exception_tb = exception_keeper_tb_427;

        goto try_finally_handler_456;
    }

    goto finally_end_427;
    finally_end_427:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_456:;
    exception_keeper_type_428 = exception_type;
    exception_keeper_value_428 = exception_value;
    exception_keeper_tb_428 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_127 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_52__value_3 );
    tmp_and_52__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_127;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_428 != NULL )
    {
        exception_type = exception_keeper_type_428;
        exception_value = exception_keeper_value_428;
        exception_tb = exception_keeper_tb_428;

        goto try_finally_handler_455;
    }

    goto finally_end_428;
    finally_end_428:;
    goto condexpr_end_150;
    condexpr_false_150:;
    tmp_cond_value_208 = tmp_and_52__value_4;

    Py_INCREF( tmp_cond_value_208 );
    condexpr_end_150:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_455:;
    exception_keeper_type_429 = exception_type;
    exception_keeper_value_429 = exception_value;
    exception_keeper_tb_429 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_429 != NULL )
    {
        exception_type = exception_keeper_type_429;
        exception_value = exception_keeper_value_429;
        exception_tb = exception_keeper_tb_429;

        goto try_finally_handler_454;
    }

    goto finally_end_429;
    finally_end_429:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_454:;
    exception_keeper_type_430 = exception_type;
    exception_keeper_value_430 = exception_value;
    exception_keeper_tb_430 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_430 != NULL )
    {
        exception_type = exception_keeper_type_430;
        exception_value = exception_keeper_value_430;
        exception_tb = exception_keeper_tb_430;

        goto try_finally_handler_453;
    }

    goto finally_end_430;
    finally_end_430:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_453:;
    exception_keeper_type_431 = exception_type;
    exception_keeper_value_431 = exception_value;
    exception_keeper_tb_431 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_128 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_52__value_4 );
    tmp_and_52__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_128;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_431 != NULL )
    {
        exception_type = exception_keeper_type_431;
        exception_value = exception_keeper_value_431;
        exception_tb = exception_keeper_tb_431;

        goto try_finally_handler_452;
    }

    goto finally_end_431;
    finally_end_431:;
    goto condexpr_end_149;
    condexpr_false_149:;
    tmp_cond_value_208 = tmp_and_52__value_5;

    Py_INCREF( tmp_cond_value_208 );
    condexpr_end_149:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_452:;
    exception_keeper_type_432 = exception_type;
    exception_keeper_value_432 = exception_value;
    exception_keeper_tb_432 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_432 != NULL )
    {
        exception_type = exception_keeper_type_432;
        exception_value = exception_keeper_value_432;
        exception_tb = exception_keeper_tb_432;

        goto try_finally_handler_451;
    }

    goto finally_end_432;
    finally_end_432:;
    tmp_cond_truth_208 = CHECK_IF_TRUE( tmp_cond_value_208 );
    if ( tmp_cond_truth_208 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_208 );

        frame_module->f_lineno = 522;
        goto try_finally_handler_451;
    }
    Py_DECREF( tmp_cond_value_208 );
    if (tmp_cond_truth_208 == 1)
    {
        goto branch_yes_99;
    }
    else
    {
        goto branch_no_99;
    }
    branch_yes_99:;
    tmp_assign_source_428 = const_str_digest_7ce2d95bc1a754e5d3ecbd3aeb8047c3;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_428 );
    tmp_str_arg_75 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_75 == NULL ))
    {
        tmp_str_arg_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_75 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 524;
        goto try_finally_handler_451;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_75 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 524;
        goto try_finally_handler_451;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 524;
        goto try_finally_handler_451;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 524;
        goto try_finally_handler_451;
    }
    goto branch_end_99;
    branch_no_99:;
    // Tried code
    tmp_cond_value_214 = NULL;
    // Tried code
    tmp_compexpr_left_205 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_205 == NULL ))
    {
        tmp_compexpr_left_205 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_205 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto try_finally_handler_467;
    }

    tmp_compexpr_right_205 = const_int_pos_3;
    tmp_assign_source_429 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_205, tmp_compexpr_right_205 );
    if ( tmp_assign_source_429 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 526;
        goto try_finally_handler_467;
    }
    {
        PyObject *old = tmp_and_53__value_2;
        tmp_and_53__value_2 = tmp_assign_source_429;
        Py_XDECREF( old );
    }

    tmp_cond_value_215 = tmp_and_53__value_2;

    tmp_cond_truth_215 = CHECK_IF_TRUE( tmp_cond_value_215 );
    if ( tmp_cond_truth_215 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 526;
        goto try_finally_handler_467;
    }
    if (tmp_cond_truth_215 == 1)
    {
        goto condexpr_true_154;
    }
    else
    {
        goto condexpr_false_154;
    }
    condexpr_true_154:;
    tmp_cond_value_214 = NULL;
    // Tried code
    tmp_cond_value_214 = NULL;
    // Tried code
    tmp_result = tmp_and_53__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_53__value_2 );
        tmp_and_53__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_214 = NULL;
    // Tried code
    tmp_compexpr_left_206 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_206 == NULL ))
    {
        tmp_compexpr_left_206 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_206 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto try_finally_handler_470;
    }

    tmp_compexpr_right_206 = const_int_pos_8;
    tmp_assign_source_430 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_206, tmp_compexpr_right_206 );
    if ( tmp_assign_source_430 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 526;
        goto try_finally_handler_470;
    }
    {
        PyObject *old = tmp_and_53__value_1;
        tmp_and_53__value_1 = tmp_assign_source_430;
        Py_XDECREF( old );
    }

    tmp_cond_value_216 = tmp_and_53__value_1;

    tmp_cond_truth_216 = CHECK_IF_TRUE( tmp_cond_value_216 );
    if ( tmp_cond_truth_216 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 526;
        goto try_finally_handler_470;
    }
    if (tmp_cond_truth_216 == 1)
    {
        goto condexpr_true_155;
    }
    else
    {
        goto condexpr_false_155;
    }
    condexpr_true_155:;
    tmp_cond_value_214 = NULL;
    // Tried code
    tmp_result = tmp_and_53__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_53__value_1 );
        tmp_and_53__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_207 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_207 == NULL ))
    {
        tmp_compexpr_left_207 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_207 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto try_finally_handler_471;
    }

    tmp_compexpr_right_207 = const_int_pos_1;
    tmp_cond_value_214 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_207, tmp_compexpr_right_207 );
    if ( tmp_cond_value_214 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 526;
        goto try_finally_handler_471;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_471:;
    exception_keeper_type_433 = exception_type;
    exception_keeper_value_433 = exception_value;
    exception_keeper_tb_433 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_433 != NULL )
    {
        exception_type = exception_keeper_type_433;
        exception_value = exception_keeper_value_433;
        exception_tb = exception_keeper_tb_433;

        goto try_finally_handler_470;
    }

    goto finally_end_433;
    finally_end_433:;
    goto condexpr_end_155;
    condexpr_false_155:;
    tmp_cond_value_214 = tmp_and_53__value_1;

    Py_INCREF( tmp_cond_value_214 );
    condexpr_end_155:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_470:;
    exception_keeper_type_434 = exception_type;
    exception_keeper_value_434 = exception_value;
    exception_keeper_tb_434 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_434 != NULL )
    {
        exception_type = exception_keeper_type_434;
        exception_value = exception_keeper_value_434;
        exception_tb = exception_keeper_tb_434;

        goto try_finally_handler_469;
    }

    goto finally_end_434;
    finally_end_434:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_469:;
    exception_keeper_type_435 = exception_type;
    exception_keeper_value_435 = exception_value;
    exception_keeper_tb_435 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_435 != NULL )
    {
        exception_type = exception_keeper_type_435;
        exception_value = exception_keeper_value_435;
        exception_tb = exception_keeper_tb_435;

        goto try_finally_handler_468;
    }

    goto finally_end_435;
    finally_end_435:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_468:;
    exception_keeper_type_436 = exception_type;
    exception_keeper_value_436 = exception_value;
    exception_keeper_tb_436 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_129 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_53__value_1 );
    tmp_and_53__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_129;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_436 != NULL )
    {
        exception_type = exception_keeper_type_436;
        exception_value = exception_keeper_value_436;
        exception_tb = exception_keeper_tb_436;

        goto try_finally_handler_467;
    }

    goto finally_end_436;
    finally_end_436:;
    goto condexpr_end_154;
    condexpr_false_154:;
    tmp_cond_value_214 = tmp_and_53__value_2;

    Py_INCREF( tmp_cond_value_214 );
    condexpr_end_154:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_467:;
    exception_keeper_type_437 = exception_type;
    exception_keeper_value_437 = exception_value;
    exception_keeper_tb_437 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_437 != NULL )
    {
        exception_type = exception_keeper_type_437;
        exception_value = exception_keeper_value_437;
        exception_tb = exception_keeper_tb_437;

        goto try_finally_handler_466;
    }

    goto finally_end_437;
    finally_end_437:;
    tmp_cond_truth_214 = CHECK_IF_TRUE( tmp_cond_value_214 );
    if ( tmp_cond_truth_214 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_214 );

        frame_module->f_lineno = 526;
        goto try_finally_handler_466;
    }
    Py_DECREF( tmp_cond_value_214 );
    if (tmp_cond_truth_214 == 1)
    {
        goto branch_yes_100;
    }
    else
    {
        goto branch_no_100;
    }
    branch_yes_100:;
    tmp_assign_source_431 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_431 );
    tmp_assign_source_432 = const_str_plain_orc;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_432 );
    tmp_assign_source_433 = const_str_digest_5ab7311e3fedb0241f427406629d8c02;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_433 );
    tmp_str_arg_76 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_76 == NULL ))
    {
        tmp_str_arg_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_76 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 530;
        goto try_finally_handler_466;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_76 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 530;
        goto try_finally_handler_466;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 530;
        goto try_finally_handler_466;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 530;
        goto try_finally_handler_466;
    }
    goto branch_end_100;
    branch_no_100:;
    // Tried code
    tmp_cond_value_217 = NULL;
    // Tried code
    tmp_compexpr_left_208 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_208 == NULL ))
    {
        tmp_compexpr_left_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_208 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 531;
        goto try_finally_handler_473;
    }

    tmp_compexpr_right_208 = const_int_pos_3;
    tmp_assign_source_434 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_208, tmp_compexpr_right_208 );
    if ( tmp_assign_source_434 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 531;
        goto try_finally_handler_473;
    }
    {
        PyObject *old = tmp_and_54__value_2;
        tmp_and_54__value_2 = tmp_assign_source_434;
        Py_XDECREF( old );
    }

    tmp_cond_value_218 = tmp_and_54__value_2;

    tmp_cond_truth_218 = CHECK_IF_TRUE( tmp_cond_value_218 );
    if ( tmp_cond_truth_218 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 531;
        goto try_finally_handler_473;
    }
    if (tmp_cond_truth_218 == 1)
    {
        goto condexpr_true_156;
    }
    else
    {
        goto condexpr_false_156;
    }
    condexpr_true_156:;
    tmp_cond_value_217 = NULL;
    // Tried code
    tmp_cond_value_217 = NULL;
    // Tried code
    tmp_result = tmp_and_54__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_54__value_2 );
        tmp_and_54__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_217 = NULL;
    // Tried code
    tmp_compexpr_left_209 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_209 == NULL ))
    {
        tmp_compexpr_left_209 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_209 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 531;
        goto try_finally_handler_476;
    }

    tmp_compexpr_right_209 = const_int_pos_9;
    tmp_assign_source_435 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_209, tmp_compexpr_right_209 );
    if ( tmp_assign_source_435 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 531;
        goto try_finally_handler_476;
    }
    {
        PyObject *old = tmp_and_54__value_1;
        tmp_and_54__value_1 = tmp_assign_source_435;
        Py_XDECREF( old );
    }

    tmp_cond_value_219 = tmp_and_54__value_1;

    tmp_cond_truth_219 = CHECK_IF_TRUE( tmp_cond_value_219 );
    if ( tmp_cond_truth_219 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 531;
        goto try_finally_handler_476;
    }
    if (tmp_cond_truth_219 == 1)
    {
        goto condexpr_true_157;
    }
    else
    {
        goto condexpr_false_157;
    }
    condexpr_true_157:;
    tmp_cond_value_217 = NULL;
    // Tried code
    tmp_result = tmp_and_54__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_54__value_1 );
        tmp_and_54__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_210 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_210 == NULL ))
    {
        tmp_compexpr_left_210 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_210 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 531;
        goto try_finally_handler_477;
    }

    tmp_compexpr_right_210 = const_int_pos_1;
    tmp_cond_value_217 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_210, tmp_compexpr_right_210 );
    if ( tmp_cond_value_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 531;
        goto try_finally_handler_477;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_477:;
    exception_keeper_type_438 = exception_type;
    exception_keeper_value_438 = exception_value;
    exception_keeper_tb_438 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_438 != NULL )
    {
        exception_type = exception_keeper_type_438;
        exception_value = exception_keeper_value_438;
        exception_tb = exception_keeper_tb_438;

        goto try_finally_handler_476;
    }

    goto finally_end_438;
    finally_end_438:;
    goto condexpr_end_157;
    condexpr_false_157:;
    tmp_cond_value_217 = tmp_and_54__value_1;

    Py_INCREF( tmp_cond_value_217 );
    condexpr_end_157:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_476:;
    exception_keeper_type_439 = exception_type;
    exception_keeper_value_439 = exception_value;
    exception_keeper_tb_439 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_439 != NULL )
    {
        exception_type = exception_keeper_type_439;
        exception_value = exception_keeper_value_439;
        exception_tb = exception_keeper_tb_439;

        goto try_finally_handler_475;
    }

    goto finally_end_439;
    finally_end_439:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_475:;
    exception_keeper_type_440 = exception_type;
    exception_keeper_value_440 = exception_value;
    exception_keeper_tb_440 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_440 != NULL )
    {
        exception_type = exception_keeper_type_440;
        exception_value = exception_keeper_value_440;
        exception_tb = exception_keeper_tb_440;

        goto try_finally_handler_474;
    }

    goto finally_end_440;
    finally_end_440:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_474:;
    exception_keeper_type_441 = exception_type;
    exception_keeper_value_441 = exception_value;
    exception_keeper_tb_441 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_130 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_54__value_1 );
    tmp_and_54__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_130;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_441 != NULL )
    {
        exception_type = exception_keeper_type_441;
        exception_value = exception_keeper_value_441;
        exception_tb = exception_keeper_tb_441;

        goto try_finally_handler_473;
    }

    goto finally_end_441;
    finally_end_441:;
    goto condexpr_end_156;
    condexpr_false_156:;
    tmp_cond_value_217 = tmp_and_54__value_2;

    Py_INCREF( tmp_cond_value_217 );
    condexpr_end_156:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_473:;
    exception_keeper_type_442 = exception_type;
    exception_keeper_value_442 = exception_value;
    exception_keeper_tb_442 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_442 != NULL )
    {
        exception_type = exception_keeper_type_442;
        exception_value = exception_keeper_value_442;
        exception_tb = exception_keeper_tb_442;

        goto try_finally_handler_472;
    }

    goto finally_end_442;
    finally_end_442:;
    tmp_cond_truth_217 = CHECK_IF_TRUE( tmp_cond_value_217 );
    if ( tmp_cond_truth_217 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_217 );

        frame_module->f_lineno = 531;
        goto try_finally_handler_472;
    }
    Py_DECREF( tmp_cond_value_217 );
    if (tmp_cond_truth_217 == 1)
    {
        goto branch_yes_101;
    }
    else
    {
        goto branch_no_101;
    }
    branch_yes_101:;
    tmp_assign_source_436 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter, tmp_assign_source_436 );
    tmp_assign_source_437 = const_str_plain_orc;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_437 );
    tmp_print_value = const_str_digest_25447430f1360671f6c807b926beda66;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 534;
        goto try_finally_handler_472;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 534;
        goto try_finally_handler_472;
    }
    goto branch_end_101;
    branch_no_101:;
    // Tried code
    tmp_cond_value_220 = NULL;
    // Tried code
    tmp_compexpr_left_211 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_211 == NULL ))
    {
        tmp_compexpr_left_211 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_211 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto try_finally_handler_479;
    }

    tmp_compexpr_right_211 = const_int_pos_2;
    tmp_assign_source_438 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_211, tmp_compexpr_right_211 );
    if ( tmp_assign_source_438 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 535;
        goto try_finally_handler_479;
    }
    {
        PyObject *old = tmp_and_55__value_2;
        tmp_and_55__value_2 = tmp_assign_source_438;
        Py_XDECREF( old );
    }

    tmp_cond_value_221 = tmp_and_55__value_2;

    tmp_cond_truth_221 = CHECK_IF_TRUE( tmp_cond_value_221 );
    if ( tmp_cond_truth_221 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 535;
        goto try_finally_handler_479;
    }
    if (tmp_cond_truth_221 == 1)
    {
        goto condexpr_true_158;
    }
    else
    {
        goto condexpr_false_158;
    }
    condexpr_true_158:;
    tmp_cond_value_220 = NULL;
    // Tried code
    tmp_cond_value_220 = NULL;
    // Tried code
    tmp_result = tmp_and_55__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_55__value_2 );
        tmp_and_55__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_220 = NULL;
    // Tried code
    tmp_compexpr_left_212 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_212 == NULL ))
    {
        tmp_compexpr_left_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_212 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto try_finally_handler_482;
    }

    tmp_compexpr_right_212 = const_int_pos_9;
    tmp_assign_source_439 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_212, tmp_compexpr_right_212 );
    if ( tmp_assign_source_439 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 535;
        goto try_finally_handler_482;
    }
    {
        PyObject *old = tmp_and_55__value_1;
        tmp_and_55__value_1 = tmp_assign_source_439;
        Py_XDECREF( old );
    }

    tmp_cond_value_222 = tmp_and_55__value_1;

    tmp_cond_truth_222 = CHECK_IF_TRUE( tmp_cond_value_222 );
    if ( tmp_cond_truth_222 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 535;
        goto try_finally_handler_482;
    }
    if (tmp_cond_truth_222 == 1)
    {
        goto condexpr_true_159;
    }
    else
    {
        goto condexpr_false_159;
    }
    condexpr_true_159:;
    tmp_cond_value_220 = NULL;
    // Tried code
    tmp_result = tmp_and_55__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_55__value_1 );
        tmp_and_55__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_213 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_213 == NULL ))
    {
        tmp_compexpr_left_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_213 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto try_finally_handler_483;
    }

    tmp_compexpr_right_213 = const_int_pos_1;
    tmp_cond_value_220 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_213, tmp_compexpr_right_213 );
    if ( tmp_cond_value_220 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 535;
        goto try_finally_handler_483;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_483:;
    exception_keeper_type_443 = exception_type;
    exception_keeper_value_443 = exception_value;
    exception_keeper_tb_443 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_443 != NULL )
    {
        exception_type = exception_keeper_type_443;
        exception_value = exception_keeper_value_443;
        exception_tb = exception_keeper_tb_443;

        goto try_finally_handler_482;
    }

    goto finally_end_443;
    finally_end_443:;
    goto condexpr_end_159;
    condexpr_false_159:;
    tmp_cond_value_220 = tmp_and_55__value_1;

    Py_INCREF( tmp_cond_value_220 );
    condexpr_end_159:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_482:;
    exception_keeper_type_444 = exception_type;
    exception_keeper_value_444 = exception_value;
    exception_keeper_tb_444 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_444 != NULL )
    {
        exception_type = exception_keeper_type_444;
        exception_value = exception_keeper_value_444;
        exception_tb = exception_keeper_tb_444;

        goto try_finally_handler_481;
    }

    goto finally_end_444;
    finally_end_444:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_481:;
    exception_keeper_type_445 = exception_type;
    exception_keeper_value_445 = exception_value;
    exception_keeper_tb_445 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_445 != NULL )
    {
        exception_type = exception_keeper_type_445;
        exception_value = exception_keeper_value_445;
        exception_tb = exception_keeper_tb_445;

        goto try_finally_handler_480;
    }

    goto finally_end_445;
    finally_end_445:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_480:;
    exception_keeper_type_446 = exception_type;
    exception_keeper_value_446 = exception_value;
    exception_keeper_tb_446 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_131 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_55__value_1 );
    tmp_and_55__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_131;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_446 != NULL )
    {
        exception_type = exception_keeper_type_446;
        exception_value = exception_keeper_value_446;
        exception_tb = exception_keeper_tb_446;

        goto try_finally_handler_479;
    }

    goto finally_end_446;
    finally_end_446:;
    goto condexpr_end_158;
    condexpr_false_158:;
    tmp_cond_value_220 = tmp_and_55__value_2;

    Py_INCREF( tmp_cond_value_220 );
    condexpr_end_158:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_479:;
    exception_keeper_type_447 = exception_type;
    exception_keeper_value_447 = exception_value;
    exception_keeper_tb_447 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_447 != NULL )
    {
        exception_type = exception_keeper_type_447;
        exception_value = exception_keeper_value_447;
        exception_tb = exception_keeper_tb_447;

        goto try_finally_handler_478;
    }

    goto finally_end_447;
    finally_end_447:;
    tmp_cond_truth_220 = CHECK_IF_TRUE( tmp_cond_value_220 );
    if ( tmp_cond_truth_220 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_220 );

        frame_module->f_lineno = 535;
        goto try_finally_handler_478;
    }
    Py_DECREF( tmp_cond_value_220 );
    if (tmp_cond_truth_220 == 1)
    {
        goto branch_yes_102;
    }
    else
    {
        goto branch_no_102;
    }
    branch_yes_102:;
    tmp_assign_source_440 = const_str_digest_c83a5828dec37a98ca7fba33102808f8;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_440 );
    tmp_str_arg_77 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_77 == NULL ))
    {
        tmp_str_arg_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_77 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 537;
        goto try_finally_handler_478;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_77 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 537;
        goto try_finally_handler_478;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 537;
        goto try_finally_handler_478;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 537;
        goto try_finally_handler_478;
    }
    goto branch_end_102;
    branch_no_102:;
    // Tried code
    tmp_cond_value_223 = NULL;
    // Tried code
    tmp_compexpr_left_214 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_214 == NULL ))
    {
        tmp_compexpr_left_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_214 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 538;
        goto try_finally_handler_485;
    }

    tmp_compexpr_right_214 = const_int_pos_2;
    tmp_assign_source_441 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_214, tmp_compexpr_right_214 );
    if ( tmp_assign_source_441 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 538;
        goto try_finally_handler_485;
    }
    {
        PyObject *old = tmp_and_56__value_2;
        tmp_and_56__value_2 = tmp_assign_source_441;
        Py_XDECREF( old );
    }

    tmp_cond_value_224 = tmp_and_56__value_2;

    tmp_cond_truth_224 = CHECK_IF_TRUE( tmp_cond_value_224 );
    if ( tmp_cond_truth_224 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 538;
        goto try_finally_handler_485;
    }
    if (tmp_cond_truth_224 == 1)
    {
        goto condexpr_true_160;
    }
    else
    {
        goto condexpr_false_160;
    }
    condexpr_true_160:;
    tmp_cond_value_223 = NULL;
    // Tried code
    tmp_cond_value_223 = NULL;
    // Tried code
    tmp_result = tmp_and_56__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_56__value_2 );
        tmp_and_56__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_223 = NULL;
    // Tried code
    tmp_compexpr_left_215 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_215 == NULL ))
    {
        tmp_compexpr_left_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_215 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 538;
        goto try_finally_handler_488;
    }

    tmp_compexpr_right_215 = const_int_pos_9;
    tmp_assign_source_442 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_215, tmp_compexpr_right_215 );
    if ( tmp_assign_source_442 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 538;
        goto try_finally_handler_488;
    }
    {
        PyObject *old = tmp_and_56__value_1;
        tmp_and_56__value_1 = tmp_assign_source_442;
        Py_XDECREF( old );
    }

    tmp_cond_value_225 = tmp_and_56__value_1;

    tmp_cond_truth_225 = CHECK_IF_TRUE( tmp_cond_value_225 );
    if ( tmp_cond_truth_225 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 538;
        goto try_finally_handler_488;
    }
    if (tmp_cond_truth_225 == 1)
    {
        goto condexpr_true_161;
    }
    else
    {
        goto condexpr_false_161;
    }
    condexpr_true_161:;
    tmp_cond_value_223 = NULL;
    // Tried code
    tmp_result = tmp_and_56__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_56__value_1 );
        tmp_and_56__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_216 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_216 == NULL ))
    {
        tmp_compexpr_left_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_216 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 538;
        goto try_finally_handler_489;
    }

    tmp_compexpr_right_216 = const_int_pos_1;
    tmp_cond_value_223 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_216, tmp_compexpr_right_216 );
    if ( tmp_cond_value_223 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 538;
        goto try_finally_handler_489;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_489:;
    exception_keeper_type_448 = exception_type;
    exception_keeper_value_448 = exception_value;
    exception_keeper_tb_448 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_448 != NULL )
    {
        exception_type = exception_keeper_type_448;
        exception_value = exception_keeper_value_448;
        exception_tb = exception_keeper_tb_448;

        goto try_finally_handler_488;
    }

    goto finally_end_448;
    finally_end_448:;
    goto condexpr_end_161;
    condexpr_false_161:;
    tmp_cond_value_223 = tmp_and_56__value_1;

    Py_INCREF( tmp_cond_value_223 );
    condexpr_end_161:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_488:;
    exception_keeper_type_449 = exception_type;
    exception_keeper_value_449 = exception_value;
    exception_keeper_tb_449 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_449 != NULL )
    {
        exception_type = exception_keeper_type_449;
        exception_value = exception_keeper_value_449;
        exception_tb = exception_keeper_tb_449;

        goto try_finally_handler_487;
    }

    goto finally_end_449;
    finally_end_449:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_487:;
    exception_keeper_type_450 = exception_type;
    exception_keeper_value_450 = exception_value;
    exception_keeper_tb_450 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_450 != NULL )
    {
        exception_type = exception_keeper_type_450;
        exception_value = exception_keeper_value_450;
        exception_tb = exception_keeper_tb_450;

        goto try_finally_handler_486;
    }

    goto finally_end_450;
    finally_end_450:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_486:;
    exception_keeper_type_451 = exception_type;
    exception_keeper_value_451 = exception_value;
    exception_keeper_tb_451 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_132 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_56__value_1 );
    tmp_and_56__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_132;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_451 != NULL )
    {
        exception_type = exception_keeper_type_451;
        exception_value = exception_keeper_value_451;
        exception_tb = exception_keeper_tb_451;

        goto try_finally_handler_485;
    }

    goto finally_end_451;
    finally_end_451:;
    goto condexpr_end_160;
    condexpr_false_160:;
    tmp_cond_value_223 = tmp_and_56__value_2;

    Py_INCREF( tmp_cond_value_223 );
    condexpr_end_160:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_485:;
    exception_keeper_type_452 = exception_type;
    exception_keeper_value_452 = exception_value;
    exception_keeper_tb_452 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_452 != NULL )
    {
        exception_type = exception_keeper_type_452;
        exception_value = exception_keeper_value_452;
        exception_tb = exception_keeper_tb_452;

        goto try_finally_handler_484;
    }

    goto finally_end_452;
    finally_end_452:;
    tmp_cond_truth_223 = CHECK_IF_TRUE( tmp_cond_value_223 );
    if ( tmp_cond_truth_223 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_223 );

        frame_module->f_lineno = 538;
        goto try_finally_handler_484;
    }
    Py_DECREF( tmp_cond_value_223 );
    if (tmp_cond_truth_223 == 1)
    {
        goto branch_yes_103;
    }
    else
    {
        goto branch_no_103;
    }
    branch_yes_103:;
    tmp_assign_source_443 = const_str_digest_3ebb04855581999c4f963b7eae827b1e;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_443 );
    tmp_str_arg_78 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_78 == NULL ))
    {
        tmp_str_arg_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 540;
        goto try_finally_handler_484;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_78 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 540;
        goto try_finally_handler_484;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 540;
        goto try_finally_handler_484;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 540;
        goto try_finally_handler_484;
    }
    goto branch_end_103;
    branch_no_103:;
    // Tried code
    tmp_cond_value_226 = NULL;
    // Tried code
    tmp_compexpr_left_217 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_217 == NULL ))
    {
        tmp_compexpr_left_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_217 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 541;
        goto try_finally_handler_491;
    }

    tmp_compexpr_right_217 = const_int_pos_1;
    tmp_assign_source_444 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_217, tmp_compexpr_right_217 );
    if ( tmp_assign_source_444 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 541;
        goto try_finally_handler_491;
    }
    {
        PyObject *old = tmp_and_57__value_2;
        tmp_and_57__value_2 = tmp_assign_source_444;
        Py_XDECREF( old );
    }

    tmp_cond_value_227 = tmp_and_57__value_2;

    tmp_cond_truth_227 = CHECK_IF_TRUE( tmp_cond_value_227 );
    if ( tmp_cond_truth_227 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 541;
        goto try_finally_handler_491;
    }
    if (tmp_cond_truth_227 == 1)
    {
        goto condexpr_true_162;
    }
    else
    {
        goto condexpr_false_162;
    }
    condexpr_true_162:;
    tmp_cond_value_226 = NULL;
    // Tried code
    tmp_cond_value_226 = NULL;
    // Tried code
    tmp_result = tmp_and_57__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_57__value_2 );
        tmp_and_57__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_226 = NULL;
    // Tried code
    tmp_compexpr_left_218 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_218 == NULL ))
    {
        tmp_compexpr_left_218 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_218 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 541;
        goto try_finally_handler_494;
    }

    tmp_compexpr_right_218 = const_int_pos_9;
    tmp_assign_source_445 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_218, tmp_compexpr_right_218 );
    if ( tmp_assign_source_445 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 541;
        goto try_finally_handler_494;
    }
    {
        PyObject *old = tmp_and_57__value_1;
        tmp_and_57__value_1 = tmp_assign_source_445;
        Py_XDECREF( old );
    }

    tmp_cond_value_228 = tmp_and_57__value_1;

    tmp_cond_truth_228 = CHECK_IF_TRUE( tmp_cond_value_228 );
    if ( tmp_cond_truth_228 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 541;
        goto try_finally_handler_494;
    }
    if (tmp_cond_truth_228 == 1)
    {
        goto condexpr_true_163;
    }
    else
    {
        goto condexpr_false_163;
    }
    condexpr_true_163:;
    tmp_cond_value_226 = NULL;
    // Tried code
    tmp_result = tmp_and_57__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_57__value_1 );
        tmp_and_57__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_219 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_219 == NULL ))
    {
        tmp_compexpr_left_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_219 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 541;
        goto try_finally_handler_495;
    }

    tmp_compexpr_right_219 = const_int_pos_1;
    tmp_cond_value_226 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_219, tmp_compexpr_right_219 );
    if ( tmp_cond_value_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 541;
        goto try_finally_handler_495;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_495:;
    exception_keeper_type_453 = exception_type;
    exception_keeper_value_453 = exception_value;
    exception_keeper_tb_453 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_453 != NULL )
    {
        exception_type = exception_keeper_type_453;
        exception_value = exception_keeper_value_453;
        exception_tb = exception_keeper_tb_453;

        goto try_finally_handler_494;
    }

    goto finally_end_453;
    finally_end_453:;
    goto condexpr_end_163;
    condexpr_false_163:;
    tmp_cond_value_226 = tmp_and_57__value_1;

    Py_INCREF( tmp_cond_value_226 );
    condexpr_end_163:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_494:;
    exception_keeper_type_454 = exception_type;
    exception_keeper_value_454 = exception_value;
    exception_keeper_tb_454 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_454 != NULL )
    {
        exception_type = exception_keeper_type_454;
        exception_value = exception_keeper_value_454;
        exception_tb = exception_keeper_tb_454;

        goto try_finally_handler_493;
    }

    goto finally_end_454;
    finally_end_454:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_493:;
    exception_keeper_type_455 = exception_type;
    exception_keeper_value_455 = exception_value;
    exception_keeper_tb_455 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_455 != NULL )
    {
        exception_type = exception_keeper_type_455;
        exception_value = exception_keeper_value_455;
        exception_tb = exception_keeper_tb_455;

        goto try_finally_handler_492;
    }

    goto finally_end_455;
    finally_end_455:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_492:;
    exception_keeper_type_456 = exception_type;
    exception_keeper_value_456 = exception_value;
    exception_keeper_tb_456 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_133 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_57__value_1 );
    tmp_and_57__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_133;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_456 != NULL )
    {
        exception_type = exception_keeper_type_456;
        exception_value = exception_keeper_value_456;
        exception_tb = exception_keeper_tb_456;

        goto try_finally_handler_491;
    }

    goto finally_end_456;
    finally_end_456:;
    goto condexpr_end_162;
    condexpr_false_162:;
    tmp_cond_value_226 = tmp_and_57__value_2;

    Py_INCREF( tmp_cond_value_226 );
    condexpr_end_162:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_491:;
    exception_keeper_type_457 = exception_type;
    exception_keeper_value_457 = exception_value;
    exception_keeper_tb_457 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_457 != NULL )
    {
        exception_type = exception_keeper_type_457;
        exception_value = exception_keeper_value_457;
        exception_tb = exception_keeper_tb_457;

        goto try_finally_handler_490;
    }

    goto finally_end_457;
    finally_end_457:;
    tmp_cond_truth_226 = CHECK_IF_TRUE( tmp_cond_value_226 );
    if ( tmp_cond_truth_226 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_226 );

        frame_module->f_lineno = 541;
        goto try_finally_handler_490;
    }
    Py_DECREF( tmp_cond_value_226 );
    if (tmp_cond_truth_226 == 1)
    {
        goto branch_yes_104;
    }
    else
    {
        goto branch_no_104;
    }
    branch_yes_104:;
    tmp_assign_source_446 = const_str_digest_17e9bb059879b244ae16b8f3e8c379e1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_446 );
    tmp_str_arg_79 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_79 == NULL ))
    {
        tmp_str_arg_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_79 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 543;
        goto try_finally_handler_490;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_79 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 543;
        goto try_finally_handler_490;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 543;
        goto try_finally_handler_490;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 543;
        goto try_finally_handler_490;
    }
    goto branch_end_104;
    branch_no_104:;
    // Tried code
    tmp_cond_value_229 = NULL;
    // Tried code
    tmp_compexpr_left_220 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_220 == NULL ))
    {
        tmp_compexpr_left_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_220 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 544;
        goto try_finally_handler_497;
    }

    tmp_compexpr_right_220 = const_int_pos_1;
    tmp_assign_source_447 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_220, tmp_compexpr_right_220 );
    if ( tmp_assign_source_447 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 544;
        goto try_finally_handler_497;
    }
    {
        PyObject *old = tmp_and_58__value_2;
        tmp_and_58__value_2 = tmp_assign_source_447;
        Py_XDECREF( old );
    }

    tmp_cond_value_230 = tmp_and_58__value_2;

    tmp_cond_truth_230 = CHECK_IF_TRUE( tmp_cond_value_230 );
    if ( tmp_cond_truth_230 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 544;
        goto try_finally_handler_497;
    }
    if (tmp_cond_truth_230 == 1)
    {
        goto condexpr_true_164;
    }
    else
    {
        goto condexpr_false_164;
    }
    condexpr_true_164:;
    tmp_cond_value_229 = NULL;
    // Tried code
    tmp_cond_value_229 = NULL;
    // Tried code
    tmp_result = tmp_and_58__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_58__value_2 );
        tmp_and_58__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_229 = NULL;
    // Tried code
    tmp_compexpr_left_221 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_221 == NULL ))
    {
        tmp_compexpr_left_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_221 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 544;
        goto try_finally_handler_500;
    }

    tmp_compexpr_right_221 = const_int_pos_10;
    tmp_assign_source_448 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_221, tmp_compexpr_right_221 );
    if ( tmp_assign_source_448 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 544;
        goto try_finally_handler_500;
    }
    {
        PyObject *old = tmp_and_58__value_1;
        tmp_and_58__value_1 = tmp_assign_source_448;
        Py_XDECREF( old );
    }

    tmp_cond_value_231 = tmp_and_58__value_1;

    tmp_cond_truth_231 = CHECK_IF_TRUE( tmp_cond_value_231 );
    if ( tmp_cond_truth_231 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 544;
        goto try_finally_handler_500;
    }
    if (tmp_cond_truth_231 == 1)
    {
        goto condexpr_true_165;
    }
    else
    {
        goto condexpr_false_165;
    }
    condexpr_true_165:;
    tmp_cond_value_229 = NULL;
    // Tried code
    tmp_result = tmp_and_58__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_58__value_1 );
        tmp_and_58__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_222 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_222 == NULL ))
    {
        tmp_compexpr_left_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_222 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 544;
        goto try_finally_handler_501;
    }

    tmp_compexpr_right_222 = const_int_pos_1;
    tmp_cond_value_229 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_222, tmp_compexpr_right_222 );
    if ( tmp_cond_value_229 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 544;
        goto try_finally_handler_501;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_501:;
    exception_keeper_type_458 = exception_type;
    exception_keeper_value_458 = exception_value;
    exception_keeper_tb_458 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_458 != NULL )
    {
        exception_type = exception_keeper_type_458;
        exception_value = exception_keeper_value_458;
        exception_tb = exception_keeper_tb_458;

        goto try_finally_handler_500;
    }

    goto finally_end_458;
    finally_end_458:;
    goto condexpr_end_165;
    condexpr_false_165:;
    tmp_cond_value_229 = tmp_and_58__value_1;

    Py_INCREF( tmp_cond_value_229 );
    condexpr_end_165:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_500:;
    exception_keeper_type_459 = exception_type;
    exception_keeper_value_459 = exception_value;
    exception_keeper_tb_459 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_459 != NULL )
    {
        exception_type = exception_keeper_type_459;
        exception_value = exception_keeper_value_459;
        exception_tb = exception_keeper_tb_459;

        goto try_finally_handler_499;
    }

    goto finally_end_459;
    finally_end_459:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_499:;
    exception_keeper_type_460 = exception_type;
    exception_keeper_value_460 = exception_value;
    exception_keeper_tb_460 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_460 != NULL )
    {
        exception_type = exception_keeper_type_460;
        exception_value = exception_keeper_value_460;
        exception_tb = exception_keeper_tb_460;

        goto try_finally_handler_498;
    }

    goto finally_end_460;
    finally_end_460:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_498:;
    exception_keeper_type_461 = exception_type;
    exception_keeper_value_461 = exception_value;
    exception_keeper_tb_461 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_134 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_58__value_1 );
    tmp_and_58__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_134;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_461 != NULL )
    {
        exception_type = exception_keeper_type_461;
        exception_value = exception_keeper_value_461;
        exception_tb = exception_keeper_tb_461;

        goto try_finally_handler_497;
    }

    goto finally_end_461;
    finally_end_461:;
    goto condexpr_end_164;
    condexpr_false_164:;
    tmp_cond_value_229 = tmp_and_58__value_2;

    Py_INCREF( tmp_cond_value_229 );
    condexpr_end_164:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_497:;
    exception_keeper_type_462 = exception_type;
    exception_keeper_value_462 = exception_value;
    exception_keeper_tb_462 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_462 != NULL )
    {
        exception_type = exception_keeper_type_462;
        exception_value = exception_keeper_value_462;
        exception_tb = exception_keeper_tb_462;

        goto try_finally_handler_496;
    }

    goto finally_end_462;
    finally_end_462:;
    tmp_cond_truth_229 = CHECK_IF_TRUE( tmp_cond_value_229 );
    if ( tmp_cond_truth_229 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_229 );

        frame_module->f_lineno = 544;
        goto try_finally_handler_496;
    }
    Py_DECREF( tmp_cond_value_229 );
    if (tmp_cond_truth_229 == 1)
    {
        goto branch_yes_105;
    }
    else
    {
        goto branch_no_105;
    }
    branch_yes_105:;
    tmp_assign_source_449 = const_str_digest_d8cdc61543fa8acd374025fd576dadb1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_449 );
    tmp_str_arg_80 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_80 == NULL ))
    {
        tmp_str_arg_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 546;
        goto try_finally_handler_496;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_80 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 546;
        goto try_finally_handler_496;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 546;
        goto try_finally_handler_496;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 546;
        goto try_finally_handler_496;
    }
    goto branch_end_105;
    branch_no_105:;
    // Tried code
    tmp_cond_value_232 = NULL;
    // Tried code
    tmp_compexpr_left_223 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_223 == NULL ))
    {
        tmp_compexpr_left_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_223 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 547;
        goto try_finally_handler_503;
    }

    tmp_compexpr_right_223 = const_int_0;
    tmp_assign_source_450 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_223, tmp_compexpr_right_223 );
    if ( tmp_assign_source_450 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 547;
        goto try_finally_handler_503;
    }
    {
        PyObject *old = tmp_and_59__value_2;
        tmp_and_59__value_2 = tmp_assign_source_450;
        Py_XDECREF( old );
    }

    tmp_cond_value_233 = tmp_and_59__value_2;

    tmp_cond_truth_233 = CHECK_IF_TRUE( tmp_cond_value_233 );
    if ( tmp_cond_truth_233 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 547;
        goto try_finally_handler_503;
    }
    if (tmp_cond_truth_233 == 1)
    {
        goto condexpr_true_166;
    }
    else
    {
        goto condexpr_false_166;
    }
    condexpr_true_166:;
    tmp_cond_value_232 = NULL;
    // Tried code
    tmp_cond_value_232 = NULL;
    // Tried code
    tmp_result = tmp_and_59__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_59__value_2 );
        tmp_and_59__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_232 = NULL;
    // Tried code
    tmp_compexpr_left_224 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_224 == NULL ))
    {
        tmp_compexpr_left_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_224 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 547;
        goto try_finally_handler_506;
    }

    tmp_compexpr_right_224 = const_int_pos_10;
    tmp_assign_source_451 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_224, tmp_compexpr_right_224 );
    if ( tmp_assign_source_451 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 547;
        goto try_finally_handler_506;
    }
    {
        PyObject *old = tmp_and_59__value_1;
        tmp_and_59__value_1 = tmp_assign_source_451;
        Py_XDECREF( old );
    }

    tmp_cond_value_234 = tmp_and_59__value_1;

    tmp_cond_truth_234 = CHECK_IF_TRUE( tmp_cond_value_234 );
    if ( tmp_cond_truth_234 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 547;
        goto try_finally_handler_506;
    }
    if (tmp_cond_truth_234 == 1)
    {
        goto condexpr_true_167;
    }
    else
    {
        goto condexpr_false_167;
    }
    condexpr_true_167:;
    tmp_cond_value_232 = NULL;
    // Tried code
    tmp_result = tmp_and_59__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_59__value_1 );
        tmp_and_59__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_225 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_225 == NULL ))
    {
        tmp_compexpr_left_225 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_225 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 547;
        goto try_finally_handler_507;
    }

    tmp_compexpr_right_225 = const_int_pos_1;
    tmp_cond_value_232 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_225, tmp_compexpr_right_225 );
    if ( tmp_cond_value_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 547;
        goto try_finally_handler_507;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_507:;
    exception_keeper_type_463 = exception_type;
    exception_keeper_value_463 = exception_value;
    exception_keeper_tb_463 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_463 != NULL )
    {
        exception_type = exception_keeper_type_463;
        exception_value = exception_keeper_value_463;
        exception_tb = exception_keeper_tb_463;

        goto try_finally_handler_506;
    }

    goto finally_end_463;
    finally_end_463:;
    goto condexpr_end_167;
    condexpr_false_167:;
    tmp_cond_value_232 = tmp_and_59__value_1;

    Py_INCREF( tmp_cond_value_232 );
    condexpr_end_167:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_506:;
    exception_keeper_type_464 = exception_type;
    exception_keeper_value_464 = exception_value;
    exception_keeper_tb_464 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_464 != NULL )
    {
        exception_type = exception_keeper_type_464;
        exception_value = exception_keeper_value_464;
        exception_tb = exception_keeper_tb_464;

        goto try_finally_handler_505;
    }

    goto finally_end_464;
    finally_end_464:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_505:;
    exception_keeper_type_465 = exception_type;
    exception_keeper_value_465 = exception_value;
    exception_keeper_tb_465 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_465 != NULL )
    {
        exception_type = exception_keeper_type_465;
        exception_value = exception_keeper_value_465;
        exception_tb = exception_keeper_tb_465;

        goto try_finally_handler_504;
    }

    goto finally_end_465;
    finally_end_465:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_504:;
    exception_keeper_type_466 = exception_type;
    exception_keeper_value_466 = exception_value;
    exception_keeper_tb_466 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_135 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_59__value_1 );
    tmp_and_59__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_135;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_466 != NULL )
    {
        exception_type = exception_keeper_type_466;
        exception_value = exception_keeper_value_466;
        exception_tb = exception_keeper_tb_466;

        goto try_finally_handler_503;
    }

    goto finally_end_466;
    finally_end_466:;
    goto condexpr_end_166;
    condexpr_false_166:;
    tmp_cond_value_232 = tmp_and_59__value_2;

    Py_INCREF( tmp_cond_value_232 );
    condexpr_end_166:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_503:;
    exception_keeper_type_467 = exception_type;
    exception_keeper_value_467 = exception_value;
    exception_keeper_tb_467 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_467 != NULL )
    {
        exception_type = exception_keeper_type_467;
        exception_value = exception_keeper_value_467;
        exception_tb = exception_keeper_tb_467;

        goto try_finally_handler_502;
    }

    goto finally_end_467;
    finally_end_467:;
    tmp_cond_truth_232 = CHECK_IF_TRUE( tmp_cond_value_232 );
    if ( tmp_cond_truth_232 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_232 );

        frame_module->f_lineno = 547;
        goto try_finally_handler_502;
    }
    Py_DECREF( tmp_cond_value_232 );
    if (tmp_cond_truth_232 == 1)
    {
        goto branch_yes_106;
    }
    else
    {
        goto branch_no_106;
    }
    branch_yes_106:;
    tmp_assign_source_452 = const_str_digest_9fd9a21dd960ba0b1f2aca23a995d91b;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_452 );
    tmp_str_arg_81 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_81 == NULL ))
    {
        tmp_str_arg_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_81 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 549;
        goto try_finally_handler_502;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_81 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 549;
        goto try_finally_handler_502;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 549;
        goto try_finally_handler_502;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 549;
        goto try_finally_handler_502;
    }
    goto branch_end_106;
    branch_no_106:;
    // Tried code
    tmp_cond_value_235 = NULL;
    // Tried code
    tmp_compexpr_left_226 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_226 == NULL ))
    {
        tmp_compexpr_left_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_226 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 550;
        goto try_finally_handler_509;
    }

    tmp_compexpr_right_226 = const_int_neg_1;
    tmp_assign_source_453 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_226, tmp_compexpr_right_226 );
    if ( tmp_assign_source_453 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 550;
        goto try_finally_handler_509;
    }
    {
        PyObject *old = tmp_and_60__value_2;
        tmp_and_60__value_2 = tmp_assign_source_453;
        Py_XDECREF( old );
    }

    tmp_cond_value_236 = tmp_and_60__value_2;

    tmp_cond_truth_236 = CHECK_IF_TRUE( tmp_cond_value_236 );
    if ( tmp_cond_truth_236 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 550;
        goto try_finally_handler_509;
    }
    if (tmp_cond_truth_236 == 1)
    {
        goto condexpr_true_168;
    }
    else
    {
        goto condexpr_false_168;
    }
    condexpr_true_168:;
    tmp_cond_value_235 = NULL;
    // Tried code
    tmp_cond_value_235 = NULL;
    // Tried code
    tmp_result = tmp_and_60__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_60__value_2 );
        tmp_and_60__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_235 = NULL;
    // Tried code
    tmp_compexpr_left_227 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_227 == NULL ))
    {
        tmp_compexpr_left_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_227 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 550;
        goto try_finally_handler_512;
    }

    tmp_compexpr_right_227 = const_int_pos_10;
    tmp_assign_source_454 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_227, tmp_compexpr_right_227 );
    if ( tmp_assign_source_454 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 550;
        goto try_finally_handler_512;
    }
    {
        PyObject *old = tmp_and_60__value_1;
        tmp_and_60__value_1 = tmp_assign_source_454;
        Py_XDECREF( old );
    }

    tmp_cond_value_237 = tmp_and_60__value_1;

    tmp_cond_truth_237 = CHECK_IF_TRUE( tmp_cond_value_237 );
    if ( tmp_cond_truth_237 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 550;
        goto try_finally_handler_512;
    }
    if (tmp_cond_truth_237 == 1)
    {
        goto condexpr_true_169;
    }
    else
    {
        goto condexpr_false_169;
    }
    condexpr_true_169:;
    tmp_cond_value_235 = NULL;
    // Tried code
    tmp_result = tmp_and_60__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_60__value_1 );
        tmp_and_60__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_228 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_228 == NULL ))
    {
        tmp_compexpr_left_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_228 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 550;
        goto try_finally_handler_513;
    }

    tmp_compexpr_right_228 = const_int_pos_1;
    tmp_cond_value_235 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_228, tmp_compexpr_right_228 );
    if ( tmp_cond_value_235 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 550;
        goto try_finally_handler_513;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_513:;
    exception_keeper_type_468 = exception_type;
    exception_keeper_value_468 = exception_value;
    exception_keeper_tb_468 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_468 != NULL )
    {
        exception_type = exception_keeper_type_468;
        exception_value = exception_keeper_value_468;
        exception_tb = exception_keeper_tb_468;

        goto try_finally_handler_512;
    }

    goto finally_end_468;
    finally_end_468:;
    goto condexpr_end_169;
    condexpr_false_169:;
    tmp_cond_value_235 = tmp_and_60__value_1;

    Py_INCREF( tmp_cond_value_235 );
    condexpr_end_169:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_512:;
    exception_keeper_type_469 = exception_type;
    exception_keeper_value_469 = exception_value;
    exception_keeper_tb_469 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_469 != NULL )
    {
        exception_type = exception_keeper_type_469;
        exception_value = exception_keeper_value_469;
        exception_tb = exception_keeper_tb_469;

        goto try_finally_handler_511;
    }

    goto finally_end_469;
    finally_end_469:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_511:;
    exception_keeper_type_470 = exception_type;
    exception_keeper_value_470 = exception_value;
    exception_keeper_tb_470 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_470 != NULL )
    {
        exception_type = exception_keeper_type_470;
        exception_value = exception_keeper_value_470;
        exception_tb = exception_keeper_tb_470;

        goto try_finally_handler_510;
    }

    goto finally_end_470;
    finally_end_470:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_510:;
    exception_keeper_type_471 = exception_type;
    exception_keeper_value_471 = exception_value;
    exception_keeper_tb_471 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_136 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_60__value_1 );
    tmp_and_60__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_136;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_471 != NULL )
    {
        exception_type = exception_keeper_type_471;
        exception_value = exception_keeper_value_471;
        exception_tb = exception_keeper_tb_471;

        goto try_finally_handler_509;
    }

    goto finally_end_471;
    finally_end_471:;
    goto condexpr_end_168;
    condexpr_false_168:;
    tmp_cond_value_235 = tmp_and_60__value_2;

    Py_INCREF( tmp_cond_value_235 );
    condexpr_end_168:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_509:;
    exception_keeper_type_472 = exception_type;
    exception_keeper_value_472 = exception_value;
    exception_keeper_tb_472 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_472 != NULL )
    {
        exception_type = exception_keeper_type_472;
        exception_value = exception_keeper_value_472;
        exception_tb = exception_keeper_tb_472;

        goto try_finally_handler_508;
    }

    goto finally_end_472;
    finally_end_472:;
    tmp_cond_truth_235 = CHECK_IF_TRUE( tmp_cond_value_235 );
    if ( tmp_cond_truth_235 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_235 );

        frame_module->f_lineno = 550;
        goto try_finally_handler_508;
    }
    Py_DECREF( tmp_cond_value_235 );
    if (tmp_cond_truth_235 == 1)
    {
        goto branch_yes_107;
    }
    else
    {
        goto branch_no_107;
    }
    branch_yes_107:;
    tmp_assign_source_455 = const_str_plain_wraith;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_455 );
    tmp_assign_source_456 = const_str_digest_afae697a5d82a0e076fc9f07a4a73b5e;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_456 );
    tmp_str_arg_82 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_82 == NULL ))
    {
        tmp_str_arg_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 553;
        goto try_finally_handler_508;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_82 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 553;
        goto try_finally_handler_508;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 553;
        goto try_finally_handler_508;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 553;
        goto try_finally_handler_508;
    }
    goto branch_end_107;
    branch_no_107:;
    // Tried code
    tmp_cond_value_238 = NULL;
    // Tried code
    tmp_compexpr_left_229 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_229 == NULL ))
    {
        tmp_compexpr_left_229 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_229 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 554;
        goto try_finally_handler_515;
    }

    tmp_compexpr_right_229 = const_int_neg_1;
    tmp_assign_source_457 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_229, tmp_compexpr_right_229 );
    if ( tmp_assign_source_457 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 554;
        goto try_finally_handler_515;
    }
    {
        PyObject *old = tmp_and_61__value_2;
        tmp_and_61__value_2 = tmp_assign_source_457;
        Py_XDECREF( old );
    }

    tmp_cond_value_239 = tmp_and_61__value_2;

    tmp_cond_truth_239 = CHECK_IF_TRUE( tmp_cond_value_239 );
    if ( tmp_cond_truth_239 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 554;
        goto try_finally_handler_515;
    }
    if (tmp_cond_truth_239 == 1)
    {
        goto condexpr_true_170;
    }
    else
    {
        goto condexpr_false_170;
    }
    condexpr_true_170:;
    tmp_cond_value_238 = NULL;
    // Tried code
    tmp_cond_value_238 = NULL;
    // Tried code
    tmp_result = tmp_and_61__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_61__value_2 );
        tmp_and_61__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_238 = NULL;
    // Tried code
    tmp_compexpr_left_230 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_230 == NULL ))
    {
        tmp_compexpr_left_230 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_230 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 554;
        goto try_finally_handler_518;
    }

    tmp_compexpr_right_230 = const_int_pos_11;
    tmp_assign_source_458 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_230, tmp_compexpr_right_230 );
    if ( tmp_assign_source_458 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 554;
        goto try_finally_handler_518;
    }
    {
        PyObject *old = tmp_and_61__value_1;
        tmp_and_61__value_1 = tmp_assign_source_458;
        Py_XDECREF( old );
    }

    tmp_cond_value_240 = tmp_and_61__value_1;

    tmp_cond_truth_240 = CHECK_IF_TRUE( tmp_cond_value_240 );
    if ( tmp_cond_truth_240 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 554;
        goto try_finally_handler_518;
    }
    if (tmp_cond_truth_240 == 1)
    {
        goto condexpr_true_171;
    }
    else
    {
        goto condexpr_false_171;
    }
    condexpr_true_171:;
    tmp_cond_value_238 = NULL;
    // Tried code
    tmp_result = tmp_and_61__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_61__value_1 );
        tmp_and_61__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_231 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_231 == NULL ))
    {
        tmp_compexpr_left_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_231 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 554;
        goto try_finally_handler_519;
    }

    tmp_compexpr_right_231 = const_int_pos_1;
    tmp_cond_value_238 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_231, tmp_compexpr_right_231 );
    if ( tmp_cond_value_238 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 554;
        goto try_finally_handler_519;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_519:;
    exception_keeper_type_473 = exception_type;
    exception_keeper_value_473 = exception_value;
    exception_keeper_tb_473 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_473 != NULL )
    {
        exception_type = exception_keeper_type_473;
        exception_value = exception_keeper_value_473;
        exception_tb = exception_keeper_tb_473;

        goto try_finally_handler_518;
    }

    goto finally_end_473;
    finally_end_473:;
    goto condexpr_end_171;
    condexpr_false_171:;
    tmp_cond_value_238 = tmp_and_61__value_1;

    Py_INCREF( tmp_cond_value_238 );
    condexpr_end_171:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_518:;
    exception_keeper_type_474 = exception_type;
    exception_keeper_value_474 = exception_value;
    exception_keeper_tb_474 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_474 != NULL )
    {
        exception_type = exception_keeper_type_474;
        exception_value = exception_keeper_value_474;
        exception_tb = exception_keeper_tb_474;

        goto try_finally_handler_517;
    }

    goto finally_end_474;
    finally_end_474:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_517:;
    exception_keeper_type_475 = exception_type;
    exception_keeper_value_475 = exception_value;
    exception_keeper_tb_475 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_475 != NULL )
    {
        exception_type = exception_keeper_type_475;
        exception_value = exception_keeper_value_475;
        exception_tb = exception_keeper_tb_475;

        goto try_finally_handler_516;
    }

    goto finally_end_475;
    finally_end_475:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_516:;
    exception_keeper_type_476 = exception_type;
    exception_keeper_value_476 = exception_value;
    exception_keeper_tb_476 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_137 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_61__value_1 );
    tmp_and_61__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_137;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_476 != NULL )
    {
        exception_type = exception_keeper_type_476;
        exception_value = exception_keeper_value_476;
        exception_tb = exception_keeper_tb_476;

        goto try_finally_handler_515;
    }

    goto finally_end_476;
    finally_end_476:;
    goto condexpr_end_170;
    condexpr_false_170:;
    tmp_cond_value_238 = tmp_and_61__value_2;

    Py_INCREF( tmp_cond_value_238 );
    condexpr_end_170:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_515:;
    exception_keeper_type_477 = exception_type;
    exception_keeper_value_477 = exception_value;
    exception_keeper_tb_477 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_477 != NULL )
    {
        exception_type = exception_keeper_type_477;
        exception_value = exception_keeper_value_477;
        exception_tb = exception_keeper_tb_477;

        goto try_finally_handler_514;
    }

    goto finally_end_477;
    finally_end_477:;
    tmp_cond_truth_238 = CHECK_IF_TRUE( tmp_cond_value_238 );
    if ( tmp_cond_truth_238 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_238 );

        frame_module->f_lineno = 554;
        goto try_finally_handler_514;
    }
    Py_DECREF( tmp_cond_value_238 );
    if (tmp_cond_truth_238 == 1)
    {
        goto branch_yes_108;
    }
    else
    {
        goto branch_no_108;
    }
    branch_yes_108:;
    tmp_assign_source_459 = const_str_digest_bed0ede80131a5da82c059dd8bc58b9c;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_459 );
    tmp_str_arg_83 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_83 == NULL ))
    {
        tmp_str_arg_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_83 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 556;
        goto try_finally_handler_514;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_83 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 556;
        goto try_finally_handler_514;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 556;
        goto try_finally_handler_514;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 556;
        goto try_finally_handler_514;
    }
    goto branch_end_108;
    branch_no_108:;
    // Tried code
    tmp_cond_value_241 = NULL;
    // Tried code
    tmp_compexpr_left_232 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_232 == NULL ))
    {
        tmp_compexpr_left_232 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_232 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 557;
        goto try_finally_handler_521;
    }

    tmp_compexpr_right_232 = const_int_neg_1;
    tmp_assign_source_460 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_232, tmp_compexpr_right_232 );
    if ( tmp_assign_source_460 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 557;
        goto try_finally_handler_521;
    }
    {
        PyObject *old = tmp_and_62__value_2;
        tmp_and_62__value_2 = tmp_assign_source_460;
        Py_XDECREF( old );
    }

    tmp_cond_value_242 = tmp_and_62__value_2;

    tmp_cond_truth_242 = CHECK_IF_TRUE( tmp_cond_value_242 );
    if ( tmp_cond_truth_242 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 557;
        goto try_finally_handler_521;
    }
    if (tmp_cond_truth_242 == 1)
    {
        goto condexpr_true_172;
    }
    else
    {
        goto condexpr_false_172;
    }
    condexpr_true_172:;
    tmp_cond_value_241 = NULL;
    // Tried code
    tmp_cond_value_241 = NULL;
    // Tried code
    tmp_result = tmp_and_62__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_62__value_2 );
        tmp_and_62__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_241 = NULL;
    // Tried code
    tmp_compexpr_left_233 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_233 == NULL ))
    {
        tmp_compexpr_left_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_233 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 557;
        goto try_finally_handler_524;
    }

    tmp_compexpr_right_233 = const_int_pos_12;
    tmp_assign_source_461 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_233, tmp_compexpr_right_233 );
    if ( tmp_assign_source_461 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 557;
        goto try_finally_handler_524;
    }
    {
        PyObject *old = tmp_and_62__value_1;
        tmp_and_62__value_1 = tmp_assign_source_461;
        Py_XDECREF( old );
    }

    tmp_cond_value_243 = tmp_and_62__value_1;

    tmp_cond_truth_243 = CHECK_IF_TRUE( tmp_cond_value_243 );
    if ( tmp_cond_truth_243 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 557;
        goto try_finally_handler_524;
    }
    if (tmp_cond_truth_243 == 1)
    {
        goto condexpr_true_173;
    }
    else
    {
        goto condexpr_false_173;
    }
    condexpr_true_173:;
    tmp_cond_value_241 = NULL;
    // Tried code
    tmp_result = tmp_and_62__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_62__value_1 );
        tmp_and_62__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_234 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_234 == NULL ))
    {
        tmp_compexpr_left_234 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_234 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 557;
        goto try_finally_handler_525;
    }

    tmp_compexpr_right_234 = const_int_pos_1;
    tmp_cond_value_241 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_234, tmp_compexpr_right_234 );
    if ( tmp_cond_value_241 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 557;
        goto try_finally_handler_525;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_525:;
    exception_keeper_type_478 = exception_type;
    exception_keeper_value_478 = exception_value;
    exception_keeper_tb_478 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_478 != NULL )
    {
        exception_type = exception_keeper_type_478;
        exception_value = exception_keeper_value_478;
        exception_tb = exception_keeper_tb_478;

        goto try_finally_handler_524;
    }

    goto finally_end_478;
    finally_end_478:;
    goto condexpr_end_173;
    condexpr_false_173:;
    tmp_cond_value_241 = tmp_and_62__value_1;

    Py_INCREF( tmp_cond_value_241 );
    condexpr_end_173:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_524:;
    exception_keeper_type_479 = exception_type;
    exception_keeper_value_479 = exception_value;
    exception_keeper_tb_479 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_479 != NULL )
    {
        exception_type = exception_keeper_type_479;
        exception_value = exception_keeper_value_479;
        exception_tb = exception_keeper_tb_479;

        goto try_finally_handler_523;
    }

    goto finally_end_479;
    finally_end_479:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_523:;
    exception_keeper_type_480 = exception_type;
    exception_keeper_value_480 = exception_value;
    exception_keeper_tb_480 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_480 != NULL )
    {
        exception_type = exception_keeper_type_480;
        exception_value = exception_keeper_value_480;
        exception_tb = exception_keeper_tb_480;

        goto try_finally_handler_522;
    }

    goto finally_end_480;
    finally_end_480:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_522:;
    exception_keeper_type_481 = exception_type;
    exception_keeper_value_481 = exception_value;
    exception_keeper_tb_481 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_138 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_62__value_1 );
    tmp_and_62__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_138;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_481 != NULL )
    {
        exception_type = exception_keeper_type_481;
        exception_value = exception_keeper_value_481;
        exception_tb = exception_keeper_tb_481;

        goto try_finally_handler_521;
    }

    goto finally_end_481;
    finally_end_481:;
    goto condexpr_end_172;
    condexpr_false_172:;
    tmp_cond_value_241 = tmp_and_62__value_2;

    Py_INCREF( tmp_cond_value_241 );
    condexpr_end_172:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_521:;
    exception_keeper_type_482 = exception_type;
    exception_keeper_value_482 = exception_value;
    exception_keeper_tb_482 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_482 != NULL )
    {
        exception_type = exception_keeper_type_482;
        exception_value = exception_keeper_value_482;
        exception_tb = exception_keeper_tb_482;

        goto try_finally_handler_520;
    }

    goto finally_end_482;
    finally_end_482:;
    tmp_cond_truth_241 = CHECK_IF_TRUE( tmp_cond_value_241 );
    if ( tmp_cond_truth_241 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_241 );

        frame_module->f_lineno = 557;
        goto try_finally_handler_520;
    }
    Py_DECREF( tmp_cond_value_241 );
    if (tmp_cond_truth_241 == 1)
    {
        goto branch_yes_109;
    }
    else
    {
        goto branch_no_109;
    }
    branch_yes_109:;
    tmp_assign_source_462 = const_str_digest_270b71f14c98172f853f4ae088b4d7ed;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_462 );
    tmp_str_arg_84 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_84 == NULL ))
    {
        tmp_str_arg_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_84 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 559;
        goto try_finally_handler_520;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_84 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 559;
        goto try_finally_handler_520;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 559;
        goto try_finally_handler_520;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 559;
        goto try_finally_handler_520;
    }
    goto branch_end_109;
    branch_no_109:;
    // Tried code
    tmp_cond_value_244 = NULL;
    // Tried code
    tmp_compexpr_left_235 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_235 == NULL ))
    {
        tmp_compexpr_left_235 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_235 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 560;
        goto try_finally_handler_527;
    }

    tmp_compexpr_right_235 = const_int_neg_1;
    tmp_assign_source_463 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_235, tmp_compexpr_right_235 );
    if ( tmp_assign_source_463 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 560;
        goto try_finally_handler_527;
    }
    {
        PyObject *old = tmp_and_63__value_2;
        tmp_and_63__value_2 = tmp_assign_source_463;
        Py_XDECREF( old );
    }

    tmp_cond_value_245 = tmp_and_63__value_2;

    tmp_cond_truth_245 = CHECK_IF_TRUE( tmp_cond_value_245 );
    if ( tmp_cond_truth_245 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 560;
        goto try_finally_handler_527;
    }
    if (tmp_cond_truth_245 == 1)
    {
        goto condexpr_true_174;
    }
    else
    {
        goto condexpr_false_174;
    }
    condexpr_true_174:;
    tmp_cond_value_244 = NULL;
    // Tried code
    tmp_cond_value_244 = NULL;
    // Tried code
    tmp_result = tmp_and_63__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_63__value_2 );
        tmp_and_63__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_244 = NULL;
    // Tried code
    tmp_compexpr_left_236 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_236 == NULL ))
    {
        tmp_compexpr_left_236 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_236 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 560;
        goto try_finally_handler_530;
    }

    tmp_compexpr_right_236 = const_int_pos_13;
    tmp_assign_source_464 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_236, tmp_compexpr_right_236 );
    if ( tmp_assign_source_464 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 560;
        goto try_finally_handler_530;
    }
    {
        PyObject *old = tmp_and_63__value_1;
        tmp_and_63__value_1 = tmp_assign_source_464;
        Py_XDECREF( old );
    }

    tmp_cond_value_246 = tmp_and_63__value_1;

    tmp_cond_truth_246 = CHECK_IF_TRUE( tmp_cond_value_246 );
    if ( tmp_cond_truth_246 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 560;
        goto try_finally_handler_530;
    }
    if (tmp_cond_truth_246 == 1)
    {
        goto condexpr_true_175;
    }
    else
    {
        goto condexpr_false_175;
    }
    condexpr_true_175:;
    tmp_cond_value_244 = NULL;
    // Tried code
    tmp_result = tmp_and_63__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_63__value_1 );
        tmp_and_63__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_237 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_237 == NULL ))
    {
        tmp_compexpr_left_237 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_237 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 560;
        goto try_finally_handler_531;
    }

    tmp_compexpr_right_237 = const_int_pos_1;
    tmp_cond_value_244 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_237, tmp_compexpr_right_237 );
    if ( tmp_cond_value_244 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 560;
        goto try_finally_handler_531;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_531:;
    exception_keeper_type_483 = exception_type;
    exception_keeper_value_483 = exception_value;
    exception_keeper_tb_483 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_483 != NULL )
    {
        exception_type = exception_keeper_type_483;
        exception_value = exception_keeper_value_483;
        exception_tb = exception_keeper_tb_483;

        goto try_finally_handler_530;
    }

    goto finally_end_483;
    finally_end_483:;
    goto condexpr_end_175;
    condexpr_false_175:;
    tmp_cond_value_244 = tmp_and_63__value_1;

    Py_INCREF( tmp_cond_value_244 );
    condexpr_end_175:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_530:;
    exception_keeper_type_484 = exception_type;
    exception_keeper_value_484 = exception_value;
    exception_keeper_tb_484 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_484 != NULL )
    {
        exception_type = exception_keeper_type_484;
        exception_value = exception_keeper_value_484;
        exception_tb = exception_keeper_tb_484;

        goto try_finally_handler_529;
    }

    goto finally_end_484;
    finally_end_484:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_529:;
    exception_keeper_type_485 = exception_type;
    exception_keeper_value_485 = exception_value;
    exception_keeper_tb_485 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_485 != NULL )
    {
        exception_type = exception_keeper_type_485;
        exception_value = exception_keeper_value_485;
        exception_tb = exception_keeper_tb_485;

        goto try_finally_handler_528;
    }

    goto finally_end_485;
    finally_end_485:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_528:;
    exception_keeper_type_486 = exception_type;
    exception_keeper_value_486 = exception_value;
    exception_keeper_tb_486 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_139 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_63__value_1 );
    tmp_and_63__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_139;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_486 != NULL )
    {
        exception_type = exception_keeper_type_486;
        exception_value = exception_keeper_value_486;
        exception_tb = exception_keeper_tb_486;

        goto try_finally_handler_527;
    }

    goto finally_end_486;
    finally_end_486:;
    goto condexpr_end_174;
    condexpr_false_174:;
    tmp_cond_value_244 = tmp_and_63__value_2;

    Py_INCREF( tmp_cond_value_244 );
    condexpr_end_174:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_527:;
    exception_keeper_type_487 = exception_type;
    exception_keeper_value_487 = exception_value;
    exception_keeper_tb_487 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_487 != NULL )
    {
        exception_type = exception_keeper_type_487;
        exception_value = exception_keeper_value_487;
        exception_tb = exception_keeper_tb_487;

        goto try_finally_handler_526;
    }

    goto finally_end_487;
    finally_end_487:;
    tmp_cond_truth_244 = CHECK_IF_TRUE( tmp_cond_value_244 );
    if ( tmp_cond_truth_244 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_244 );

        frame_module->f_lineno = 560;
        goto try_finally_handler_526;
    }
    Py_DECREF( tmp_cond_value_244 );
    if (tmp_cond_truth_244 == 1)
    {
        goto branch_yes_110;
    }
    else
    {
        goto branch_no_110;
    }
    branch_yes_110:;
    tmp_assign_source_465 = const_str_digest_16a9bf974dbf01a2f5af4d091ab4f19a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_465 );
    tmp_str_arg_85 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_85 == NULL ))
    {
        tmp_str_arg_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_85 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 562;
        goto try_finally_handler_526;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_85 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 562;
        goto try_finally_handler_526;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 562;
        goto try_finally_handler_526;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 562;
        goto try_finally_handler_526;
    }
    goto branch_end_110;
    branch_no_110:;
    // Tried code
    tmp_cond_value_247 = NULL;
    // Tried code
    tmp_compexpr_left_238 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_238 == NULL ))
    {
        tmp_compexpr_left_238 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_238 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 563;
        goto try_finally_handler_533;
    }

    tmp_compexpr_right_238 = const_int_neg_1;
    tmp_assign_source_466 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_238, tmp_compexpr_right_238 );
    if ( tmp_assign_source_466 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 563;
        goto try_finally_handler_533;
    }
    {
        PyObject *old = tmp_and_64__value_2;
        tmp_and_64__value_2 = tmp_assign_source_466;
        Py_XDECREF( old );
    }

    tmp_cond_value_248 = tmp_and_64__value_2;

    tmp_cond_truth_248 = CHECK_IF_TRUE( tmp_cond_value_248 );
    if ( tmp_cond_truth_248 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 563;
        goto try_finally_handler_533;
    }
    if (tmp_cond_truth_248 == 1)
    {
        goto condexpr_true_176;
    }
    else
    {
        goto condexpr_false_176;
    }
    condexpr_true_176:;
    tmp_cond_value_247 = NULL;
    // Tried code
    tmp_cond_value_247 = NULL;
    // Tried code
    tmp_result = tmp_and_64__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_64__value_2 );
        tmp_and_64__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_247 = NULL;
    // Tried code
    tmp_compexpr_left_239 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_239 == NULL ))
    {
        tmp_compexpr_left_239 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_239 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 563;
        goto try_finally_handler_536;
    }

    tmp_compexpr_right_239 = const_int_pos_14;
    tmp_assign_source_467 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_239, tmp_compexpr_right_239 );
    if ( tmp_assign_source_467 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 563;
        goto try_finally_handler_536;
    }
    {
        PyObject *old = tmp_and_64__value_1;
        tmp_and_64__value_1 = tmp_assign_source_467;
        Py_XDECREF( old );
    }

    tmp_cond_value_249 = tmp_and_64__value_1;

    tmp_cond_truth_249 = CHECK_IF_TRUE( tmp_cond_value_249 );
    if ( tmp_cond_truth_249 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 563;
        goto try_finally_handler_536;
    }
    if (tmp_cond_truth_249 == 1)
    {
        goto condexpr_true_177;
    }
    else
    {
        goto condexpr_false_177;
    }
    condexpr_true_177:;
    tmp_cond_value_247 = NULL;
    // Tried code
    tmp_result = tmp_and_64__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_64__value_1 );
        tmp_and_64__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_240 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_240 == NULL ))
    {
        tmp_compexpr_left_240 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_240 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 563;
        goto try_finally_handler_537;
    }

    tmp_compexpr_right_240 = const_int_pos_1;
    tmp_cond_value_247 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_240, tmp_compexpr_right_240 );
    if ( tmp_cond_value_247 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 563;
        goto try_finally_handler_537;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_537:;
    exception_keeper_type_488 = exception_type;
    exception_keeper_value_488 = exception_value;
    exception_keeper_tb_488 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_488 != NULL )
    {
        exception_type = exception_keeper_type_488;
        exception_value = exception_keeper_value_488;
        exception_tb = exception_keeper_tb_488;

        goto try_finally_handler_536;
    }

    goto finally_end_488;
    finally_end_488:;
    goto condexpr_end_177;
    condexpr_false_177:;
    tmp_cond_value_247 = tmp_and_64__value_1;

    Py_INCREF( tmp_cond_value_247 );
    condexpr_end_177:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_536:;
    exception_keeper_type_489 = exception_type;
    exception_keeper_value_489 = exception_value;
    exception_keeper_tb_489 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_489 != NULL )
    {
        exception_type = exception_keeper_type_489;
        exception_value = exception_keeper_value_489;
        exception_tb = exception_keeper_tb_489;

        goto try_finally_handler_535;
    }

    goto finally_end_489;
    finally_end_489:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_535:;
    exception_keeper_type_490 = exception_type;
    exception_keeper_value_490 = exception_value;
    exception_keeper_tb_490 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_490 != NULL )
    {
        exception_type = exception_keeper_type_490;
        exception_value = exception_keeper_value_490;
        exception_tb = exception_keeper_tb_490;

        goto try_finally_handler_534;
    }

    goto finally_end_490;
    finally_end_490:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_534:;
    exception_keeper_type_491 = exception_type;
    exception_keeper_value_491 = exception_value;
    exception_keeper_tb_491 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_140 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_64__value_1 );
    tmp_and_64__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_140;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_491 != NULL )
    {
        exception_type = exception_keeper_type_491;
        exception_value = exception_keeper_value_491;
        exception_tb = exception_keeper_tb_491;

        goto try_finally_handler_533;
    }

    goto finally_end_491;
    finally_end_491:;
    goto condexpr_end_176;
    condexpr_false_176:;
    tmp_cond_value_247 = tmp_and_64__value_2;

    Py_INCREF( tmp_cond_value_247 );
    condexpr_end_176:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_533:;
    exception_keeper_type_492 = exception_type;
    exception_keeper_value_492 = exception_value;
    exception_keeper_tb_492 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_492 != NULL )
    {
        exception_type = exception_keeper_type_492;
        exception_value = exception_keeper_value_492;
        exception_tb = exception_keeper_tb_492;

        goto try_finally_handler_532;
    }

    goto finally_end_492;
    finally_end_492:;
    tmp_cond_truth_247 = CHECK_IF_TRUE( tmp_cond_value_247 );
    if ( tmp_cond_truth_247 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_247 );

        frame_module->f_lineno = 563;
        goto try_finally_handler_532;
    }
    Py_DECREF( tmp_cond_value_247 );
    if (tmp_cond_truth_247 == 1)
    {
        goto branch_yes_111;
    }
    else
    {
        goto branch_no_111;
    }
    branch_yes_111:;
    tmp_assign_source_468 = const_str_digest_90d6828f205fcfdd2cf86e60f6a71395;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_468 );
    tmp_str_arg_86 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_86 == NULL ))
    {
        tmp_str_arg_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 565;
        goto try_finally_handler_532;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_86 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 565;
        goto try_finally_handler_532;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 565;
        goto try_finally_handler_532;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 565;
        goto try_finally_handler_532;
    }
    goto branch_end_111;
    branch_no_111:;
    // Tried code
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_compexpr_left_241 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_241 == NULL ))
    {
        tmp_compexpr_left_241 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_241 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 566;
        goto try_finally_handler_539;
    }

    tmp_compexpr_right_241 = const_int_neg_1;
    tmp_assign_source_469 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_241, tmp_compexpr_right_241 );
    if ( tmp_assign_source_469 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_539;
    }
    {
        PyObject *old = tmp_and_65__value_3;
        tmp_and_65__value_3 = tmp_assign_source_469;
        Py_XDECREF( old );
    }

    tmp_cond_value_251 = tmp_and_65__value_3;

    tmp_cond_truth_251 = CHECK_IF_TRUE( tmp_cond_value_251 );
    if ( tmp_cond_truth_251 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_539;
    }
    if (tmp_cond_truth_251 == 1)
    {
        goto condexpr_true_178;
    }
    else
    {
        goto condexpr_false_178;
    }
    condexpr_true_178:;
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_result = tmp_and_65__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_65__value_3 );
        tmp_and_65__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_compexpr_left_242 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_242 == NULL ))
    {
        tmp_compexpr_left_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_242 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 566;
        goto try_finally_handler_542;
    }

    tmp_compexpr_right_242 = const_int_pos_15;
    tmp_assign_source_470 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_242, tmp_compexpr_right_242 );
    if ( tmp_assign_source_470 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_542;
    }
    {
        PyObject *old = tmp_and_65__value_2;
        tmp_and_65__value_2 = tmp_assign_source_470;
        Py_XDECREF( old );
    }

    tmp_cond_value_252 = tmp_and_65__value_2;

    tmp_cond_truth_252 = CHECK_IF_TRUE( tmp_cond_value_252 );
    if ( tmp_cond_truth_252 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_542;
    }
    if (tmp_cond_truth_252 == 1)
    {
        goto condexpr_true_179;
    }
    else
    {
        goto condexpr_false_179;
    }
    condexpr_true_179:;
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_result = tmp_and_65__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_65__value_2 );
        tmp_and_65__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_compexpr_left_243 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_243 == NULL ))
    {
        tmp_compexpr_left_243 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_243 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 566;
        goto try_finally_handler_545;
    }

    tmp_compexpr_right_243 = const_int_pos_1;
    tmp_assign_source_471 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_243, tmp_compexpr_right_243 );
    if ( tmp_assign_source_471 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_545;
    }
    {
        PyObject *old = tmp_and_65__value_1;
        tmp_and_65__value_1 = tmp_assign_source_471;
        Py_XDECREF( old );
    }

    tmp_cond_value_253 = tmp_and_65__value_1;

    tmp_cond_truth_253 = CHECK_IF_TRUE( tmp_cond_value_253 );
    if ( tmp_cond_truth_253 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_545;
    }
    if (tmp_cond_truth_253 == 1)
    {
        goto condexpr_true_180;
    }
    else
    {
        goto condexpr_false_180;
    }
    condexpr_true_180:;
    tmp_cond_value_250 = NULL;
    // Tried code
    tmp_result = tmp_and_65__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_65__value_1 );
        tmp_and_65__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_244 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_244 == NULL ))
    {
        tmp_compexpr_left_244 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_244 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 566;
        goto try_finally_handler_546;
    }

    tmp_compexpr_right_244 = const_int_pos_1;
    tmp_cond_value_250 = RICH_COMPARE_LE( tmp_compexpr_left_244, tmp_compexpr_right_244 );
    if ( tmp_cond_value_250 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 566;
        goto try_finally_handler_546;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_546:;
    exception_keeper_type_493 = exception_type;
    exception_keeper_value_493 = exception_value;
    exception_keeper_tb_493 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_493 != NULL )
    {
        exception_type = exception_keeper_type_493;
        exception_value = exception_keeper_value_493;
        exception_tb = exception_keeper_tb_493;

        goto try_finally_handler_545;
    }

    goto finally_end_493;
    finally_end_493:;
    goto condexpr_end_180;
    condexpr_false_180:;
    tmp_cond_value_250 = tmp_and_65__value_1;

    Py_INCREF( tmp_cond_value_250 );
    condexpr_end_180:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_545:;
    exception_keeper_type_494 = exception_type;
    exception_keeper_value_494 = exception_value;
    exception_keeper_tb_494 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_494 != NULL )
    {
        exception_type = exception_keeper_type_494;
        exception_value = exception_keeper_value_494;
        exception_tb = exception_keeper_tb_494;

        goto try_finally_handler_544;
    }

    goto finally_end_494;
    finally_end_494:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_544:;
    exception_keeper_type_495 = exception_type;
    exception_keeper_value_495 = exception_value;
    exception_keeper_tb_495 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_495 != NULL )
    {
        exception_type = exception_keeper_type_495;
        exception_value = exception_keeper_value_495;
        exception_tb = exception_keeper_tb_495;

        goto try_finally_handler_543;
    }

    goto finally_end_495;
    finally_end_495:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_543:;
    exception_keeper_type_496 = exception_type;
    exception_keeper_value_496 = exception_value;
    exception_keeper_tb_496 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_141 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_65__value_1 );
    tmp_and_65__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_141;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_496 != NULL )
    {
        exception_type = exception_keeper_type_496;
        exception_value = exception_keeper_value_496;
        exception_tb = exception_keeper_tb_496;

        goto try_finally_handler_542;
    }

    goto finally_end_496;
    finally_end_496:;
    goto condexpr_end_179;
    condexpr_false_179:;
    tmp_cond_value_250 = tmp_and_65__value_2;

    Py_INCREF( tmp_cond_value_250 );
    condexpr_end_179:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_542:;
    exception_keeper_type_497 = exception_type;
    exception_keeper_value_497 = exception_value;
    exception_keeper_tb_497 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_497 != NULL )
    {
        exception_type = exception_keeper_type_497;
        exception_value = exception_keeper_value_497;
        exception_tb = exception_keeper_tb_497;

        goto try_finally_handler_541;
    }

    goto finally_end_497;
    finally_end_497:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_541:;
    exception_keeper_type_498 = exception_type;
    exception_keeper_value_498 = exception_value;
    exception_keeper_tb_498 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_498 != NULL )
    {
        exception_type = exception_keeper_type_498;
        exception_value = exception_keeper_value_498;
        exception_tb = exception_keeper_tb_498;

        goto try_finally_handler_540;
    }

    goto finally_end_498;
    finally_end_498:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_540:;
    exception_keeper_type_499 = exception_type;
    exception_keeper_value_499 = exception_value;
    exception_keeper_tb_499 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_142 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_65__value_2 );
    tmp_and_65__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_142;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_499 != NULL )
    {
        exception_type = exception_keeper_type_499;
        exception_value = exception_keeper_value_499;
        exception_tb = exception_keeper_tb_499;

        goto try_finally_handler_539;
    }

    goto finally_end_499;
    finally_end_499:;
    goto condexpr_end_178;
    condexpr_false_178:;
    tmp_cond_value_250 = tmp_and_65__value_3;

    Py_INCREF( tmp_cond_value_250 );
    condexpr_end_178:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_539:;
    exception_keeper_type_500 = exception_type;
    exception_keeper_value_500 = exception_value;
    exception_keeper_tb_500 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_500 != NULL )
    {
        exception_type = exception_keeper_type_500;
        exception_value = exception_keeper_value_500;
        exception_tb = exception_keeper_tb_500;

        goto try_finally_handler_538;
    }

    goto finally_end_500;
    finally_end_500:;
    tmp_cond_truth_250 = CHECK_IF_TRUE( tmp_cond_value_250 );
    if ( tmp_cond_truth_250 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_250 );

        frame_module->f_lineno = 566;
        goto try_finally_handler_538;
    }
    Py_DECREF( tmp_cond_value_250 );
    if (tmp_cond_truth_250 == 1)
    {
        goto branch_yes_112;
    }
    else
    {
        goto branch_no_112;
    }
    branch_yes_112:;
    tmp_assign_source_472 = const_str_digest_6d7f92b8f167b80c2738990b603ad4e8;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_472 );
    tmp_str_arg_87 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_87 == NULL ))
    {
        tmp_str_arg_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_87 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 568;
        goto try_finally_handler_538;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_87 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 568;
        goto try_finally_handler_538;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 568;
        goto try_finally_handler_538;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 568;
        goto try_finally_handler_538;
    }
    goto branch_end_112;
    branch_no_112:;
    // Tried code
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_compexpr_left_245 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_245 == NULL ))
    {
        tmp_compexpr_left_245 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_245 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 569;
        goto try_finally_handler_548;
    }

    tmp_compexpr_right_245 = const_int_neg_1;
    tmp_assign_source_473 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_245, tmp_compexpr_right_245 );
    if ( tmp_assign_source_473 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_548;
    }
    {
        PyObject *old = tmp_and_66__value_3;
        tmp_and_66__value_3 = tmp_assign_source_473;
        Py_XDECREF( old );
    }

    tmp_cond_value_255 = tmp_and_66__value_3;

    tmp_cond_truth_255 = CHECK_IF_TRUE( tmp_cond_value_255 );
    if ( tmp_cond_truth_255 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_548;
    }
    if (tmp_cond_truth_255 == 1)
    {
        goto condexpr_true_181;
    }
    else
    {
        goto condexpr_false_181;
    }
    condexpr_true_181:;
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_result = tmp_and_66__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_66__value_3 );
        tmp_and_66__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_compexpr_left_246 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_246 == NULL ))
    {
        tmp_compexpr_left_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_246 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 569;
        goto try_finally_handler_551;
    }

    tmp_compexpr_right_246 = const_int_pos_15;
    tmp_assign_source_474 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_246, tmp_compexpr_right_246 );
    if ( tmp_assign_source_474 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_551;
    }
    {
        PyObject *old = tmp_and_66__value_2;
        tmp_and_66__value_2 = tmp_assign_source_474;
        Py_XDECREF( old );
    }

    tmp_cond_value_256 = tmp_and_66__value_2;

    tmp_cond_truth_256 = CHECK_IF_TRUE( tmp_cond_value_256 );
    if ( tmp_cond_truth_256 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_551;
    }
    if (tmp_cond_truth_256 == 1)
    {
        goto condexpr_true_182;
    }
    else
    {
        goto condexpr_false_182;
    }
    condexpr_true_182:;
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_result = tmp_and_66__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_66__value_2 );
        tmp_and_66__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_compexpr_left_247 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_247 == NULL ))
    {
        tmp_compexpr_left_247 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_247 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 569;
        goto try_finally_handler_554;
    }

    tmp_compexpr_right_247 = const_int_pos_1;
    tmp_assign_source_475 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_247, tmp_compexpr_right_247 );
    if ( tmp_assign_source_475 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_554;
    }
    {
        PyObject *old = tmp_and_66__value_1;
        tmp_and_66__value_1 = tmp_assign_source_475;
        Py_XDECREF( old );
    }

    tmp_cond_value_257 = tmp_and_66__value_1;

    tmp_cond_truth_257 = CHECK_IF_TRUE( tmp_cond_value_257 );
    if ( tmp_cond_truth_257 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_554;
    }
    if (tmp_cond_truth_257 == 1)
    {
        goto condexpr_true_183;
    }
    else
    {
        goto condexpr_false_183;
    }
    condexpr_true_183:;
    tmp_cond_value_254 = NULL;
    // Tried code
    tmp_result = tmp_and_66__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_66__value_1 );
        tmp_and_66__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_248 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compexpr_left_248 == NULL ))
    {
        tmp_compexpr_left_248 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compexpr_left_248 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 569;
        goto try_finally_handler_555;
    }

    tmp_compexpr_right_248 = const_int_pos_2;
    tmp_cond_value_254 = RICH_COMPARE_GE( tmp_compexpr_left_248, tmp_compexpr_right_248 );
    if ( tmp_cond_value_254 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 569;
        goto try_finally_handler_555;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_555:;
    exception_keeper_type_501 = exception_type;
    exception_keeper_value_501 = exception_value;
    exception_keeper_tb_501 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_501 != NULL )
    {
        exception_type = exception_keeper_type_501;
        exception_value = exception_keeper_value_501;
        exception_tb = exception_keeper_tb_501;

        goto try_finally_handler_554;
    }

    goto finally_end_501;
    finally_end_501:;
    goto condexpr_end_183;
    condexpr_false_183:;
    tmp_cond_value_254 = tmp_and_66__value_1;

    Py_INCREF( tmp_cond_value_254 );
    condexpr_end_183:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_554:;
    exception_keeper_type_502 = exception_type;
    exception_keeper_value_502 = exception_value;
    exception_keeper_tb_502 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_502 != NULL )
    {
        exception_type = exception_keeper_type_502;
        exception_value = exception_keeper_value_502;
        exception_tb = exception_keeper_tb_502;

        goto try_finally_handler_553;
    }

    goto finally_end_502;
    finally_end_502:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_553:;
    exception_keeper_type_503 = exception_type;
    exception_keeper_value_503 = exception_value;
    exception_keeper_tb_503 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_503 != NULL )
    {
        exception_type = exception_keeper_type_503;
        exception_value = exception_keeper_value_503;
        exception_tb = exception_keeper_tb_503;

        goto try_finally_handler_552;
    }

    goto finally_end_503;
    finally_end_503:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_552:;
    exception_keeper_type_504 = exception_type;
    exception_keeper_value_504 = exception_value;
    exception_keeper_tb_504 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_143 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_66__value_1 );
    tmp_and_66__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_143;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_504 != NULL )
    {
        exception_type = exception_keeper_type_504;
        exception_value = exception_keeper_value_504;
        exception_tb = exception_keeper_tb_504;

        goto try_finally_handler_551;
    }

    goto finally_end_504;
    finally_end_504:;
    goto condexpr_end_182;
    condexpr_false_182:;
    tmp_cond_value_254 = tmp_and_66__value_2;

    Py_INCREF( tmp_cond_value_254 );
    condexpr_end_182:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_551:;
    exception_keeper_type_505 = exception_type;
    exception_keeper_value_505 = exception_value;
    exception_keeper_tb_505 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_505 != NULL )
    {
        exception_type = exception_keeper_type_505;
        exception_value = exception_keeper_value_505;
        exception_tb = exception_keeper_tb_505;

        goto try_finally_handler_550;
    }

    goto finally_end_505;
    finally_end_505:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_550:;
    exception_keeper_type_506 = exception_type;
    exception_keeper_value_506 = exception_value;
    exception_keeper_tb_506 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_506 != NULL )
    {
        exception_type = exception_keeper_type_506;
        exception_value = exception_keeper_value_506;
        exception_tb = exception_keeper_tb_506;

        goto try_finally_handler_549;
    }

    goto finally_end_506;
    finally_end_506:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_549:;
    exception_keeper_type_507 = exception_type;
    exception_keeper_value_507 = exception_value;
    exception_keeper_tb_507 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_144 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_66__value_2 );
    tmp_and_66__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_144;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_507 != NULL )
    {
        exception_type = exception_keeper_type_507;
        exception_value = exception_keeper_value_507;
        exception_tb = exception_keeper_tb_507;

        goto try_finally_handler_548;
    }

    goto finally_end_507;
    finally_end_507:;
    goto condexpr_end_181;
    condexpr_false_181:;
    tmp_cond_value_254 = tmp_and_66__value_3;

    Py_INCREF( tmp_cond_value_254 );
    condexpr_end_181:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_548:;
    exception_keeper_type_508 = exception_type;
    exception_keeper_value_508 = exception_value;
    exception_keeper_tb_508 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_508 != NULL )
    {
        exception_type = exception_keeper_type_508;
        exception_value = exception_keeper_value_508;
        exception_tb = exception_keeper_tb_508;

        goto try_finally_handler_547;
    }

    goto finally_end_508;
    finally_end_508:;
    tmp_cond_truth_254 = CHECK_IF_TRUE( tmp_cond_value_254 );
    if ( tmp_cond_truth_254 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_254 );

        frame_module->f_lineno = 569;
        goto try_finally_handler_547;
    }
    Py_DECREF( tmp_cond_value_254 );
    if (tmp_cond_truth_254 == 1)
    {
        goto branch_yes_113;
    }
    else
    {
        goto branch_no_113;
    }
    branch_yes_113:;
    tmp_assign_source_476 = const_str_digest_9b5bf35df2557083836d485a6d14f751;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_476 );
    tmp_str_arg_88 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_88 == NULL ))
    {
        tmp_str_arg_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 571;
        goto try_finally_handler_547;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_88 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 571;
        goto try_finally_handler_547;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 571;
        goto try_finally_handler_547;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 571;
        goto try_finally_handler_547;
    }
    goto branch_end_113;
    branch_no_113:;
    // Tried code
    tmp_cond_value_258 = NULL;
    // Tried code
    tmp_compexpr_left_249 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_249 == NULL ))
    {
        tmp_compexpr_left_249 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_249 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 572;
        goto try_finally_handler_557;
    }

    tmp_compexpr_right_249 = const_int_neg_1;
    tmp_assign_source_477 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_249, tmp_compexpr_right_249 );
    if ( tmp_assign_source_477 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 572;
        goto try_finally_handler_557;
    }
    {
        PyObject *old = tmp_and_67__value_2;
        tmp_and_67__value_2 = tmp_assign_source_477;
        Py_XDECREF( old );
    }

    tmp_cond_value_259 = tmp_and_67__value_2;

    tmp_cond_truth_259 = CHECK_IF_TRUE( tmp_cond_value_259 );
    if ( tmp_cond_truth_259 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 572;
        goto try_finally_handler_557;
    }
    if (tmp_cond_truth_259 == 1)
    {
        goto condexpr_true_184;
    }
    else
    {
        goto condexpr_false_184;
    }
    condexpr_true_184:;
    tmp_cond_value_258 = NULL;
    // Tried code
    tmp_cond_value_258 = NULL;
    // Tried code
    tmp_result = tmp_and_67__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_67__value_2 );
        tmp_and_67__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_258 = NULL;
    // Tried code
    tmp_compexpr_left_250 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_250 == NULL ))
    {
        tmp_compexpr_left_250 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_250 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 572;
        goto try_finally_handler_560;
    }

    tmp_compexpr_right_250 = const_int_pos_16;
    tmp_assign_source_478 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_250, tmp_compexpr_right_250 );
    if ( tmp_assign_source_478 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 572;
        goto try_finally_handler_560;
    }
    {
        PyObject *old = tmp_and_67__value_1;
        tmp_and_67__value_1 = tmp_assign_source_478;
        Py_XDECREF( old );
    }

    tmp_cond_value_260 = tmp_and_67__value_1;

    tmp_cond_truth_260 = CHECK_IF_TRUE( tmp_cond_value_260 );
    if ( tmp_cond_truth_260 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 572;
        goto try_finally_handler_560;
    }
    if (tmp_cond_truth_260 == 1)
    {
        goto condexpr_true_185;
    }
    else
    {
        goto condexpr_false_185;
    }
    condexpr_true_185:;
    tmp_cond_value_258 = NULL;
    // Tried code
    tmp_result = tmp_and_67__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_67__value_1 );
        tmp_and_67__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_251 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_251 == NULL ))
    {
        tmp_compexpr_left_251 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_251 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 572;
        goto try_finally_handler_561;
    }

    tmp_compexpr_right_251 = const_int_pos_1;
    tmp_cond_value_258 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_251, tmp_compexpr_right_251 );
    if ( tmp_cond_value_258 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 572;
        goto try_finally_handler_561;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_561:;
    exception_keeper_type_509 = exception_type;
    exception_keeper_value_509 = exception_value;
    exception_keeper_tb_509 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_509 != NULL )
    {
        exception_type = exception_keeper_type_509;
        exception_value = exception_keeper_value_509;
        exception_tb = exception_keeper_tb_509;

        goto try_finally_handler_560;
    }

    goto finally_end_509;
    finally_end_509:;
    goto condexpr_end_185;
    condexpr_false_185:;
    tmp_cond_value_258 = tmp_and_67__value_1;

    Py_INCREF( tmp_cond_value_258 );
    condexpr_end_185:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_560:;
    exception_keeper_type_510 = exception_type;
    exception_keeper_value_510 = exception_value;
    exception_keeper_tb_510 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_510 != NULL )
    {
        exception_type = exception_keeper_type_510;
        exception_value = exception_keeper_value_510;
        exception_tb = exception_keeper_tb_510;

        goto try_finally_handler_559;
    }

    goto finally_end_510;
    finally_end_510:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_559:;
    exception_keeper_type_511 = exception_type;
    exception_keeper_value_511 = exception_value;
    exception_keeper_tb_511 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_511 != NULL )
    {
        exception_type = exception_keeper_type_511;
        exception_value = exception_keeper_value_511;
        exception_tb = exception_keeper_tb_511;

        goto try_finally_handler_558;
    }

    goto finally_end_511;
    finally_end_511:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_558:;
    exception_keeper_type_512 = exception_type;
    exception_keeper_value_512 = exception_value;
    exception_keeper_tb_512 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_145 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_67__value_1 );
    tmp_and_67__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_145;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_512 != NULL )
    {
        exception_type = exception_keeper_type_512;
        exception_value = exception_keeper_value_512;
        exception_tb = exception_keeper_tb_512;

        goto try_finally_handler_557;
    }

    goto finally_end_512;
    finally_end_512:;
    goto condexpr_end_184;
    condexpr_false_184:;
    tmp_cond_value_258 = tmp_and_67__value_2;

    Py_INCREF( tmp_cond_value_258 );
    condexpr_end_184:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_557:;
    exception_keeper_type_513 = exception_type;
    exception_keeper_value_513 = exception_value;
    exception_keeper_tb_513 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_513 != NULL )
    {
        exception_type = exception_keeper_type_513;
        exception_value = exception_keeper_value_513;
        exception_tb = exception_keeper_tb_513;

        goto try_finally_handler_556;
    }

    goto finally_end_513;
    finally_end_513:;
    tmp_cond_truth_258 = CHECK_IF_TRUE( tmp_cond_value_258 );
    if ( tmp_cond_truth_258 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_258 );

        frame_module->f_lineno = 572;
        goto try_finally_handler_556;
    }
    Py_DECREF( tmp_cond_value_258 );
    if (tmp_cond_truth_258 == 1)
    {
        goto branch_yes_114;
    }
    else
    {
        goto branch_no_114;
    }
    branch_yes_114:;
    tmp_assign_source_479 = const_str_digest_2b2340a9889f6574d2006a900a722861;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_479 );
    tmp_str_arg_89 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_89 == NULL ))
    {
        tmp_str_arg_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_89 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 574;
        goto try_finally_handler_556;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_89 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 574;
        goto try_finally_handler_556;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 574;
        goto try_finally_handler_556;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 574;
        goto try_finally_handler_556;
    }
    goto branch_end_114;
    branch_no_114:;
    // Tried code
    tmp_cond_value_261 = NULL;
    // Tried code
    tmp_compexpr_left_252 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_252 == NULL ))
    {
        tmp_compexpr_left_252 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_252 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 575;
        goto try_finally_handler_563;
    }

    tmp_compexpr_right_252 = const_int_neg_1;
    tmp_assign_source_480 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_252, tmp_compexpr_right_252 );
    if ( tmp_assign_source_480 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 575;
        goto try_finally_handler_563;
    }
    {
        PyObject *old = tmp_and_68__value_2;
        tmp_and_68__value_2 = tmp_assign_source_480;
        Py_XDECREF( old );
    }

    tmp_cond_value_262 = tmp_and_68__value_2;

    tmp_cond_truth_262 = CHECK_IF_TRUE( tmp_cond_value_262 );
    if ( tmp_cond_truth_262 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 575;
        goto try_finally_handler_563;
    }
    if (tmp_cond_truth_262 == 1)
    {
        goto condexpr_true_186;
    }
    else
    {
        goto condexpr_false_186;
    }
    condexpr_true_186:;
    tmp_cond_value_261 = NULL;
    // Tried code
    tmp_cond_value_261 = NULL;
    // Tried code
    tmp_result = tmp_and_68__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_68__value_2 );
        tmp_and_68__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_261 = NULL;
    // Tried code
    tmp_compexpr_left_253 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_253 == NULL ))
    {
        tmp_compexpr_left_253 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_253 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 575;
        goto try_finally_handler_566;
    }

    tmp_compexpr_right_253 = const_int_pos_17;
    tmp_assign_source_481 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_253, tmp_compexpr_right_253 );
    if ( tmp_assign_source_481 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 575;
        goto try_finally_handler_566;
    }
    {
        PyObject *old = tmp_and_68__value_1;
        tmp_and_68__value_1 = tmp_assign_source_481;
        Py_XDECREF( old );
    }

    tmp_cond_value_263 = tmp_and_68__value_1;

    tmp_cond_truth_263 = CHECK_IF_TRUE( tmp_cond_value_263 );
    if ( tmp_cond_truth_263 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 575;
        goto try_finally_handler_566;
    }
    if (tmp_cond_truth_263 == 1)
    {
        goto condexpr_true_187;
    }
    else
    {
        goto condexpr_false_187;
    }
    condexpr_true_187:;
    tmp_cond_value_261 = NULL;
    // Tried code
    tmp_result = tmp_and_68__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_68__value_1 );
        tmp_and_68__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_254 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_254 == NULL ))
    {
        tmp_compexpr_left_254 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_254 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 575;
        goto try_finally_handler_567;
    }

    tmp_compexpr_right_254 = const_int_pos_1;
    tmp_cond_value_261 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_254, tmp_compexpr_right_254 );
    if ( tmp_cond_value_261 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 575;
        goto try_finally_handler_567;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_567:;
    exception_keeper_type_514 = exception_type;
    exception_keeper_value_514 = exception_value;
    exception_keeper_tb_514 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_514 != NULL )
    {
        exception_type = exception_keeper_type_514;
        exception_value = exception_keeper_value_514;
        exception_tb = exception_keeper_tb_514;

        goto try_finally_handler_566;
    }

    goto finally_end_514;
    finally_end_514:;
    goto condexpr_end_187;
    condexpr_false_187:;
    tmp_cond_value_261 = tmp_and_68__value_1;

    Py_INCREF( tmp_cond_value_261 );
    condexpr_end_187:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_566:;
    exception_keeper_type_515 = exception_type;
    exception_keeper_value_515 = exception_value;
    exception_keeper_tb_515 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_515 != NULL )
    {
        exception_type = exception_keeper_type_515;
        exception_value = exception_keeper_value_515;
        exception_tb = exception_keeper_tb_515;

        goto try_finally_handler_565;
    }

    goto finally_end_515;
    finally_end_515:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_565:;
    exception_keeper_type_516 = exception_type;
    exception_keeper_value_516 = exception_value;
    exception_keeper_tb_516 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_516 != NULL )
    {
        exception_type = exception_keeper_type_516;
        exception_value = exception_keeper_value_516;
        exception_tb = exception_keeper_tb_516;

        goto try_finally_handler_564;
    }

    goto finally_end_516;
    finally_end_516:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_564:;
    exception_keeper_type_517 = exception_type;
    exception_keeper_value_517 = exception_value;
    exception_keeper_tb_517 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_146 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_68__value_1 );
    tmp_and_68__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_146;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_517 != NULL )
    {
        exception_type = exception_keeper_type_517;
        exception_value = exception_keeper_value_517;
        exception_tb = exception_keeper_tb_517;

        goto try_finally_handler_563;
    }

    goto finally_end_517;
    finally_end_517:;
    goto condexpr_end_186;
    condexpr_false_186:;
    tmp_cond_value_261 = tmp_and_68__value_2;

    Py_INCREF( tmp_cond_value_261 );
    condexpr_end_186:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_563:;
    exception_keeper_type_518 = exception_type;
    exception_keeper_value_518 = exception_value;
    exception_keeper_tb_518 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_518 != NULL )
    {
        exception_type = exception_keeper_type_518;
        exception_value = exception_keeper_value_518;
        exception_tb = exception_keeper_tb_518;

        goto try_finally_handler_562;
    }

    goto finally_end_518;
    finally_end_518:;
    tmp_cond_truth_261 = CHECK_IF_TRUE( tmp_cond_value_261 );
    if ( tmp_cond_truth_261 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_261 );

        frame_module->f_lineno = 575;
        goto try_finally_handler_562;
    }
    Py_DECREF( tmp_cond_value_261 );
    if (tmp_cond_truth_261 == 1)
    {
        goto branch_yes_115;
    }
    else
    {
        goto branch_no_115;
    }
    branch_yes_115:;
    tmp_assign_source_482 = const_str_digest_aabf841ac44ed036deae16b0dc9a10d7;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_482 );
    tmp_str_arg_90 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_90 == NULL ))
    {
        tmp_str_arg_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 577;
        goto try_finally_handler_562;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_90 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 577;
        goto try_finally_handler_562;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 577;
        goto try_finally_handler_562;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 577;
        goto try_finally_handler_562;
    }
    tmp_assign_source_483 = const_int_pos_3;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_483 );
    tmp_assign_source_484 = const_int_pos_9;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_484 );
    tmp_assign_source_485 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_485 );
    goto branch_end_115;
    branch_no_115:;
    // Tried code
    tmp_cond_value_264 = NULL;
    // Tried code
    tmp_compexpr_left_255 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_255 == NULL ))
    {
        tmp_compexpr_left_255 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_255 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 582;
        goto try_finally_handler_569;
    }

    tmp_compexpr_right_255 = const_int_pos_4;
    tmp_assign_source_486 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_255, tmp_compexpr_right_255 );
    if ( tmp_assign_source_486 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 582;
        goto try_finally_handler_569;
    }
    {
        PyObject *old = tmp_and_69__value_2;
        tmp_and_69__value_2 = tmp_assign_source_486;
        Py_XDECREF( old );
    }

    tmp_cond_value_265 = tmp_and_69__value_2;

    tmp_cond_truth_265 = CHECK_IF_TRUE( tmp_cond_value_265 );
    if ( tmp_cond_truth_265 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 582;
        goto try_finally_handler_569;
    }
    if (tmp_cond_truth_265 == 1)
    {
        goto condexpr_true_188;
    }
    else
    {
        goto condexpr_false_188;
    }
    condexpr_true_188:;
    tmp_cond_value_264 = NULL;
    // Tried code
    tmp_cond_value_264 = NULL;
    // Tried code
    tmp_result = tmp_and_69__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_69__value_2 );
        tmp_and_69__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_264 = NULL;
    // Tried code
    tmp_compexpr_left_256 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_256 == NULL ))
    {
        tmp_compexpr_left_256 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_256 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 582;
        goto try_finally_handler_572;
    }

    tmp_compexpr_right_256 = const_int_pos_9;
    tmp_assign_source_487 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_256, tmp_compexpr_right_256 );
    if ( tmp_assign_source_487 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 582;
        goto try_finally_handler_572;
    }
    {
        PyObject *old = tmp_and_69__value_1;
        tmp_and_69__value_1 = tmp_assign_source_487;
        Py_XDECREF( old );
    }

    tmp_cond_value_266 = tmp_and_69__value_1;

    tmp_cond_truth_266 = CHECK_IF_TRUE( tmp_cond_value_266 );
    if ( tmp_cond_truth_266 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 582;
        goto try_finally_handler_572;
    }
    if (tmp_cond_truth_266 == 1)
    {
        goto condexpr_true_189;
    }
    else
    {
        goto condexpr_false_189;
    }
    condexpr_true_189:;
    tmp_cond_value_264 = NULL;
    // Tried code
    tmp_result = tmp_and_69__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_69__value_1 );
        tmp_and_69__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_257 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_257 == NULL ))
    {
        tmp_compexpr_left_257 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_257 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 582;
        goto try_finally_handler_573;
    }

    tmp_compexpr_right_257 = const_int_pos_1;
    tmp_cond_value_264 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_257, tmp_compexpr_right_257 );
    if ( tmp_cond_value_264 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 582;
        goto try_finally_handler_573;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_573:;
    exception_keeper_type_519 = exception_type;
    exception_keeper_value_519 = exception_value;
    exception_keeper_tb_519 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_519 != NULL )
    {
        exception_type = exception_keeper_type_519;
        exception_value = exception_keeper_value_519;
        exception_tb = exception_keeper_tb_519;

        goto try_finally_handler_572;
    }

    goto finally_end_519;
    finally_end_519:;
    goto condexpr_end_189;
    condexpr_false_189:;
    tmp_cond_value_264 = tmp_and_69__value_1;

    Py_INCREF( tmp_cond_value_264 );
    condexpr_end_189:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_572:;
    exception_keeper_type_520 = exception_type;
    exception_keeper_value_520 = exception_value;
    exception_keeper_tb_520 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_520 != NULL )
    {
        exception_type = exception_keeper_type_520;
        exception_value = exception_keeper_value_520;
        exception_tb = exception_keeper_tb_520;

        goto try_finally_handler_571;
    }

    goto finally_end_520;
    finally_end_520:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_571:;
    exception_keeper_type_521 = exception_type;
    exception_keeper_value_521 = exception_value;
    exception_keeper_tb_521 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_521 != NULL )
    {
        exception_type = exception_keeper_type_521;
        exception_value = exception_keeper_value_521;
        exception_tb = exception_keeper_tb_521;

        goto try_finally_handler_570;
    }

    goto finally_end_521;
    finally_end_521:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_570:;
    exception_keeper_type_522 = exception_type;
    exception_keeper_value_522 = exception_value;
    exception_keeper_tb_522 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_147 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_69__value_1 );
    tmp_and_69__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_147;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_522 != NULL )
    {
        exception_type = exception_keeper_type_522;
        exception_value = exception_keeper_value_522;
        exception_tb = exception_keeper_tb_522;

        goto try_finally_handler_569;
    }

    goto finally_end_522;
    finally_end_522:;
    goto condexpr_end_188;
    condexpr_false_188:;
    tmp_cond_value_264 = tmp_and_69__value_2;

    Py_INCREF( tmp_cond_value_264 );
    condexpr_end_188:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_569:;
    exception_keeper_type_523 = exception_type;
    exception_keeper_value_523 = exception_value;
    exception_keeper_tb_523 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_523 != NULL )
    {
        exception_type = exception_keeper_type_523;
        exception_value = exception_keeper_value_523;
        exception_tb = exception_keeper_tb_523;

        goto try_finally_handler_568;
    }

    goto finally_end_523;
    finally_end_523:;
    tmp_cond_truth_264 = CHECK_IF_TRUE( tmp_cond_value_264 );
    if ( tmp_cond_truth_264 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_264 );

        frame_module->f_lineno = 582;
        goto try_finally_handler_568;
    }
    Py_DECREF( tmp_cond_value_264 );
    if (tmp_cond_truth_264 == 1)
    {
        goto branch_yes_116;
    }
    else
    {
        goto branch_no_116;
    }
    branch_yes_116:;
    tmp_assign_source_488 = const_str_digest_213a6f7e5627ea04c974725bd9073f9e;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_488 );
    tmp_str_arg_91 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_91 == NULL ))
    {
        tmp_str_arg_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_91 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 584;
        goto try_finally_handler_568;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_91 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 584;
        goto try_finally_handler_568;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 584;
        goto try_finally_handler_568;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 584;
        goto try_finally_handler_568;
    }
    goto branch_end_116;
    branch_no_116:;
    // Tried code
    tmp_cond_value_267 = NULL;
    // Tried code
    tmp_compexpr_left_258 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_258 == NULL ))
    {
        tmp_compexpr_left_258 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_258 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 585;
        goto try_finally_handler_575;
    }

    tmp_compexpr_right_258 = const_int_pos_5;
    tmp_assign_source_489 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_258, tmp_compexpr_right_258 );
    if ( tmp_assign_source_489 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 585;
        goto try_finally_handler_575;
    }
    {
        PyObject *old = tmp_and_70__value_2;
        tmp_and_70__value_2 = tmp_assign_source_489;
        Py_XDECREF( old );
    }

    tmp_cond_value_268 = tmp_and_70__value_2;

    tmp_cond_truth_268 = CHECK_IF_TRUE( tmp_cond_value_268 );
    if ( tmp_cond_truth_268 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 585;
        goto try_finally_handler_575;
    }
    if (tmp_cond_truth_268 == 1)
    {
        goto condexpr_true_190;
    }
    else
    {
        goto condexpr_false_190;
    }
    condexpr_true_190:;
    tmp_cond_value_267 = NULL;
    // Tried code
    tmp_cond_value_267 = NULL;
    // Tried code
    tmp_result = tmp_and_70__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_70__value_2 );
        tmp_and_70__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_267 = NULL;
    // Tried code
    tmp_compexpr_left_259 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_259 == NULL ))
    {
        tmp_compexpr_left_259 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_259 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 585;
        goto try_finally_handler_578;
    }

    tmp_compexpr_right_259 = const_int_pos_9;
    tmp_assign_source_490 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_259, tmp_compexpr_right_259 );
    if ( tmp_assign_source_490 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 585;
        goto try_finally_handler_578;
    }
    {
        PyObject *old = tmp_and_70__value_1;
        tmp_and_70__value_1 = tmp_assign_source_490;
        Py_XDECREF( old );
    }

    tmp_cond_value_269 = tmp_and_70__value_1;

    tmp_cond_truth_269 = CHECK_IF_TRUE( tmp_cond_value_269 );
    if ( tmp_cond_truth_269 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 585;
        goto try_finally_handler_578;
    }
    if (tmp_cond_truth_269 == 1)
    {
        goto condexpr_true_191;
    }
    else
    {
        goto condexpr_false_191;
    }
    condexpr_true_191:;
    tmp_cond_value_267 = NULL;
    // Tried code
    tmp_result = tmp_and_70__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_70__value_1 );
        tmp_and_70__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_260 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_260 == NULL ))
    {
        tmp_compexpr_left_260 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_260 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 585;
        goto try_finally_handler_579;
    }

    tmp_compexpr_right_260 = const_int_pos_1;
    tmp_cond_value_267 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_260, tmp_compexpr_right_260 );
    if ( tmp_cond_value_267 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 585;
        goto try_finally_handler_579;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_579:;
    exception_keeper_type_524 = exception_type;
    exception_keeper_value_524 = exception_value;
    exception_keeper_tb_524 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_524 != NULL )
    {
        exception_type = exception_keeper_type_524;
        exception_value = exception_keeper_value_524;
        exception_tb = exception_keeper_tb_524;

        goto try_finally_handler_578;
    }

    goto finally_end_524;
    finally_end_524:;
    goto condexpr_end_191;
    condexpr_false_191:;
    tmp_cond_value_267 = tmp_and_70__value_1;

    Py_INCREF( tmp_cond_value_267 );
    condexpr_end_191:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_578:;
    exception_keeper_type_525 = exception_type;
    exception_keeper_value_525 = exception_value;
    exception_keeper_tb_525 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_525 != NULL )
    {
        exception_type = exception_keeper_type_525;
        exception_value = exception_keeper_value_525;
        exception_tb = exception_keeper_tb_525;

        goto try_finally_handler_577;
    }

    goto finally_end_525;
    finally_end_525:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_577:;
    exception_keeper_type_526 = exception_type;
    exception_keeper_value_526 = exception_value;
    exception_keeper_tb_526 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_526 != NULL )
    {
        exception_type = exception_keeper_type_526;
        exception_value = exception_keeper_value_526;
        exception_tb = exception_keeper_tb_526;

        goto try_finally_handler_576;
    }

    goto finally_end_526;
    finally_end_526:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_576:;
    exception_keeper_type_527 = exception_type;
    exception_keeper_value_527 = exception_value;
    exception_keeper_tb_527 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_148 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_70__value_1 );
    tmp_and_70__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_148;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_527 != NULL )
    {
        exception_type = exception_keeper_type_527;
        exception_value = exception_keeper_value_527;
        exception_tb = exception_keeper_tb_527;

        goto try_finally_handler_575;
    }

    goto finally_end_527;
    finally_end_527:;
    goto condexpr_end_190;
    condexpr_false_190:;
    tmp_cond_value_267 = tmp_and_70__value_2;

    Py_INCREF( tmp_cond_value_267 );
    condexpr_end_190:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_575:;
    exception_keeper_type_528 = exception_type;
    exception_keeper_value_528 = exception_value;
    exception_keeper_tb_528 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_528 != NULL )
    {
        exception_type = exception_keeper_type_528;
        exception_value = exception_keeper_value_528;
        exception_tb = exception_keeper_tb_528;

        goto try_finally_handler_574;
    }

    goto finally_end_528;
    finally_end_528:;
    tmp_cond_truth_267 = CHECK_IF_TRUE( tmp_cond_value_267 );
    if ( tmp_cond_truth_267 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_267 );

        frame_module->f_lineno = 585;
        goto try_finally_handler_574;
    }
    Py_DECREF( tmp_cond_value_267 );
    if (tmp_cond_truth_267 == 1)
    {
        goto branch_yes_117;
    }
    else
    {
        goto branch_no_117;
    }
    branch_yes_117:;
    tmp_assign_source_491 = const_str_plain_dwarf;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type, tmp_assign_source_491 );
    tmp_assign_source_492 = const_str_digest_94dce438eb60889f8e33b8e3941faa0d;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_492 );
    tmp_str_arg_92 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_92 == NULL ))
    {
        tmp_str_arg_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 588;
        goto try_finally_handler_574;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_92 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 588;
        goto try_finally_handler_574;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 588;
        goto try_finally_handler_574;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 588;
        goto try_finally_handler_574;
    }
    goto branch_end_117;
    branch_no_117:;
    // Tried code
    tmp_cond_value_270 = NULL;
    // Tried code
    tmp_compexpr_left_261 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_261 == NULL ))
    {
        tmp_compexpr_left_261 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_261 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 589;
        goto try_finally_handler_581;
    }

    tmp_compexpr_right_261 = const_int_pos_6;
    tmp_assign_source_493 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_261, tmp_compexpr_right_261 );
    if ( tmp_assign_source_493 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 589;
        goto try_finally_handler_581;
    }
    {
        PyObject *old = tmp_and_71__value_2;
        tmp_and_71__value_2 = tmp_assign_source_493;
        Py_XDECREF( old );
    }

    tmp_cond_value_271 = tmp_and_71__value_2;

    tmp_cond_truth_271 = CHECK_IF_TRUE( tmp_cond_value_271 );
    if ( tmp_cond_truth_271 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 589;
        goto try_finally_handler_581;
    }
    if (tmp_cond_truth_271 == 1)
    {
        goto condexpr_true_192;
    }
    else
    {
        goto condexpr_false_192;
    }
    condexpr_true_192:;
    tmp_cond_value_270 = NULL;
    // Tried code
    tmp_cond_value_270 = NULL;
    // Tried code
    tmp_result = tmp_and_71__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_71__value_2 );
        tmp_and_71__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_270 = NULL;
    // Tried code
    tmp_compexpr_left_262 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_262 == NULL ))
    {
        tmp_compexpr_left_262 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_262 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 589;
        goto try_finally_handler_584;
    }

    tmp_compexpr_right_262 = const_int_pos_9;
    tmp_assign_source_494 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_262, tmp_compexpr_right_262 );
    if ( tmp_assign_source_494 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 589;
        goto try_finally_handler_584;
    }
    {
        PyObject *old = tmp_and_71__value_1;
        tmp_and_71__value_1 = tmp_assign_source_494;
        Py_XDECREF( old );
    }

    tmp_cond_value_272 = tmp_and_71__value_1;

    tmp_cond_truth_272 = CHECK_IF_TRUE( tmp_cond_value_272 );
    if ( tmp_cond_truth_272 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 589;
        goto try_finally_handler_584;
    }
    if (tmp_cond_truth_272 == 1)
    {
        goto condexpr_true_193;
    }
    else
    {
        goto condexpr_false_193;
    }
    condexpr_true_193:;
    tmp_cond_value_270 = NULL;
    // Tried code
    tmp_result = tmp_and_71__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_71__value_1 );
        tmp_and_71__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_263 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_263 == NULL ))
    {
        tmp_compexpr_left_263 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_263 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 589;
        goto try_finally_handler_585;
    }

    tmp_compexpr_right_263 = const_int_pos_1;
    tmp_cond_value_270 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_263, tmp_compexpr_right_263 );
    if ( tmp_cond_value_270 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 589;
        goto try_finally_handler_585;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_585:;
    exception_keeper_type_529 = exception_type;
    exception_keeper_value_529 = exception_value;
    exception_keeper_tb_529 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_529 != NULL )
    {
        exception_type = exception_keeper_type_529;
        exception_value = exception_keeper_value_529;
        exception_tb = exception_keeper_tb_529;

        goto try_finally_handler_584;
    }

    goto finally_end_529;
    finally_end_529:;
    goto condexpr_end_193;
    condexpr_false_193:;
    tmp_cond_value_270 = tmp_and_71__value_1;

    Py_INCREF( tmp_cond_value_270 );
    condexpr_end_193:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_584:;
    exception_keeper_type_530 = exception_type;
    exception_keeper_value_530 = exception_value;
    exception_keeper_tb_530 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_530 != NULL )
    {
        exception_type = exception_keeper_type_530;
        exception_value = exception_keeper_value_530;
        exception_tb = exception_keeper_tb_530;

        goto try_finally_handler_583;
    }

    goto finally_end_530;
    finally_end_530:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_583:;
    exception_keeper_type_531 = exception_type;
    exception_keeper_value_531 = exception_value;
    exception_keeper_tb_531 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_531 != NULL )
    {
        exception_type = exception_keeper_type_531;
        exception_value = exception_keeper_value_531;
        exception_tb = exception_keeper_tb_531;

        goto try_finally_handler_582;
    }

    goto finally_end_531;
    finally_end_531:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_582:;
    exception_keeper_type_532 = exception_type;
    exception_keeper_value_532 = exception_value;
    exception_keeper_tb_532 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_149 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_71__value_1 );
    tmp_and_71__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_149;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_532 != NULL )
    {
        exception_type = exception_keeper_type_532;
        exception_value = exception_keeper_value_532;
        exception_tb = exception_keeper_tb_532;

        goto try_finally_handler_581;
    }

    goto finally_end_532;
    finally_end_532:;
    goto condexpr_end_192;
    condexpr_false_192:;
    tmp_cond_value_270 = tmp_and_71__value_2;

    Py_INCREF( tmp_cond_value_270 );
    condexpr_end_192:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_581:;
    exception_keeper_type_533 = exception_type;
    exception_keeper_value_533 = exception_value;
    exception_keeper_tb_533 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_533 != NULL )
    {
        exception_type = exception_keeper_type_533;
        exception_value = exception_keeper_value_533;
        exception_tb = exception_keeper_tb_533;

        goto try_finally_handler_580;
    }

    goto finally_end_533;
    finally_end_533:;
    tmp_cond_truth_270 = CHECK_IF_TRUE( tmp_cond_value_270 );
    if ( tmp_cond_truth_270 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_270 );

        frame_module->f_lineno = 589;
        goto try_finally_handler_580;
    }
    Py_DECREF( tmp_cond_value_270 );
    if (tmp_cond_truth_270 == 1)
    {
        goto branch_yes_118;
    }
    else
    {
        goto branch_no_118;
    }
    branch_yes_118:;
    tmp_assign_source_495 = const_str_digest_a3fd07d009b1920d2bbad46d05cafdcc;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_495 );
    tmp_str_arg_93 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_93 == NULL ))
    {
        tmp_str_arg_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_93 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 591;
        goto try_finally_handler_580;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_93 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 591;
        goto try_finally_handler_580;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 591;
        goto try_finally_handler_580;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 591;
        goto try_finally_handler_580;
    }
    goto branch_end_118;
    branch_no_118:;
    // Tried code
    tmp_cond_value_273 = NULL;
    // Tried code
    tmp_compexpr_left_264 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_264 == NULL ))
    {
        tmp_compexpr_left_264 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_264 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 592;
        goto try_finally_handler_587;
    }

    tmp_compexpr_right_264 = const_int_pos_7;
    tmp_assign_source_496 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_264, tmp_compexpr_right_264 );
    if ( tmp_assign_source_496 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 592;
        goto try_finally_handler_587;
    }
    {
        PyObject *old = tmp_and_72__value_2;
        tmp_and_72__value_2 = tmp_assign_source_496;
        Py_XDECREF( old );
    }

    tmp_cond_value_274 = tmp_and_72__value_2;

    tmp_cond_truth_274 = CHECK_IF_TRUE( tmp_cond_value_274 );
    if ( tmp_cond_truth_274 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 592;
        goto try_finally_handler_587;
    }
    if (tmp_cond_truth_274 == 1)
    {
        goto condexpr_true_194;
    }
    else
    {
        goto condexpr_false_194;
    }
    condexpr_true_194:;
    tmp_cond_value_273 = NULL;
    // Tried code
    tmp_cond_value_273 = NULL;
    // Tried code
    tmp_result = tmp_and_72__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_72__value_2 );
        tmp_and_72__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_273 = NULL;
    // Tried code
    tmp_compexpr_left_265 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_265 == NULL ))
    {
        tmp_compexpr_left_265 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_265 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 592;
        goto try_finally_handler_590;
    }

    tmp_compexpr_right_265 = const_int_pos_9;
    tmp_assign_source_497 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_265, tmp_compexpr_right_265 );
    if ( tmp_assign_source_497 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 592;
        goto try_finally_handler_590;
    }
    {
        PyObject *old = tmp_and_72__value_1;
        tmp_and_72__value_1 = tmp_assign_source_497;
        Py_XDECREF( old );
    }

    tmp_cond_value_275 = tmp_and_72__value_1;

    tmp_cond_truth_275 = CHECK_IF_TRUE( tmp_cond_value_275 );
    if ( tmp_cond_truth_275 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 592;
        goto try_finally_handler_590;
    }
    if (tmp_cond_truth_275 == 1)
    {
        goto condexpr_true_195;
    }
    else
    {
        goto condexpr_false_195;
    }
    condexpr_true_195:;
    tmp_cond_value_273 = NULL;
    // Tried code
    tmp_result = tmp_and_72__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_72__value_1 );
        tmp_and_72__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_266 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_266 == NULL ))
    {
        tmp_compexpr_left_266 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_266 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 592;
        goto try_finally_handler_591;
    }

    tmp_compexpr_right_266 = const_int_pos_1;
    tmp_cond_value_273 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_266, tmp_compexpr_right_266 );
    if ( tmp_cond_value_273 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 592;
        goto try_finally_handler_591;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_591:;
    exception_keeper_type_534 = exception_type;
    exception_keeper_value_534 = exception_value;
    exception_keeper_tb_534 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_534 != NULL )
    {
        exception_type = exception_keeper_type_534;
        exception_value = exception_keeper_value_534;
        exception_tb = exception_keeper_tb_534;

        goto try_finally_handler_590;
    }

    goto finally_end_534;
    finally_end_534:;
    goto condexpr_end_195;
    condexpr_false_195:;
    tmp_cond_value_273 = tmp_and_72__value_1;

    Py_INCREF( tmp_cond_value_273 );
    condexpr_end_195:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_590:;
    exception_keeper_type_535 = exception_type;
    exception_keeper_value_535 = exception_value;
    exception_keeper_tb_535 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_535 != NULL )
    {
        exception_type = exception_keeper_type_535;
        exception_value = exception_keeper_value_535;
        exception_tb = exception_keeper_tb_535;

        goto try_finally_handler_589;
    }

    goto finally_end_535;
    finally_end_535:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_589:;
    exception_keeper_type_536 = exception_type;
    exception_keeper_value_536 = exception_value;
    exception_keeper_tb_536 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_536 != NULL )
    {
        exception_type = exception_keeper_type_536;
        exception_value = exception_keeper_value_536;
        exception_tb = exception_keeper_tb_536;

        goto try_finally_handler_588;
    }

    goto finally_end_536;
    finally_end_536:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_588:;
    exception_keeper_type_537 = exception_type;
    exception_keeper_value_537 = exception_value;
    exception_keeper_tb_537 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_150 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_72__value_1 );
    tmp_and_72__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_150;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_537 != NULL )
    {
        exception_type = exception_keeper_type_537;
        exception_value = exception_keeper_value_537;
        exception_tb = exception_keeper_tb_537;

        goto try_finally_handler_587;
    }

    goto finally_end_537;
    finally_end_537:;
    goto condexpr_end_194;
    condexpr_false_194:;
    tmp_cond_value_273 = tmp_and_72__value_2;

    Py_INCREF( tmp_cond_value_273 );
    condexpr_end_194:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_587:;
    exception_keeper_type_538 = exception_type;
    exception_keeper_value_538 = exception_value;
    exception_keeper_tb_538 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_538 != NULL )
    {
        exception_type = exception_keeper_type_538;
        exception_value = exception_keeper_value_538;
        exception_tb = exception_keeper_tb_538;

        goto try_finally_handler_586;
    }

    goto finally_end_538;
    finally_end_538:;
    tmp_cond_truth_273 = CHECK_IF_TRUE( tmp_cond_value_273 );
    if ( tmp_cond_truth_273 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_273 );

        frame_module->f_lineno = 592;
        goto try_finally_handler_586;
    }
    Py_DECREF( tmp_cond_value_273 );
    if (tmp_cond_truth_273 == 1)
    {
        goto branch_yes_119;
    }
    else
    {
        goto branch_no_119;
    }
    branch_yes_119:;
    tmp_assign_source_498 = const_str_digest_addb5ceac985dd9cf49d4625aa54de87;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_498 );
    tmp_str_arg_94 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_94 == NULL ))
    {
        tmp_str_arg_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_94 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 594;
        goto try_finally_handler_586;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_94 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 594;
        goto try_finally_handler_586;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 594;
        goto try_finally_handler_586;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 594;
        goto try_finally_handler_586;
    }
    goto branch_end_119;
    branch_no_119:;
    // Tried code
    tmp_cond_value_276 = NULL;
    // Tried code
    tmp_compexpr_left_267 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_267 == NULL ))
    {
        tmp_compexpr_left_267 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_267 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 595;
        goto try_finally_handler_593;
    }

    tmp_compexpr_right_267 = const_int_pos_8;
    tmp_assign_source_499 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_267, tmp_compexpr_right_267 );
    if ( tmp_assign_source_499 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 595;
        goto try_finally_handler_593;
    }
    {
        PyObject *old = tmp_and_73__value_2;
        tmp_and_73__value_2 = tmp_assign_source_499;
        Py_XDECREF( old );
    }

    tmp_cond_value_277 = tmp_and_73__value_2;

    tmp_cond_truth_277 = CHECK_IF_TRUE( tmp_cond_value_277 );
    if ( tmp_cond_truth_277 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 595;
        goto try_finally_handler_593;
    }
    if (tmp_cond_truth_277 == 1)
    {
        goto condexpr_true_196;
    }
    else
    {
        goto condexpr_false_196;
    }
    condexpr_true_196:;
    tmp_cond_value_276 = NULL;
    // Tried code
    tmp_cond_value_276 = NULL;
    // Tried code
    tmp_result = tmp_and_73__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_73__value_2 );
        tmp_and_73__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_276 = NULL;
    // Tried code
    tmp_compexpr_left_268 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_268 == NULL ))
    {
        tmp_compexpr_left_268 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_268 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 595;
        goto try_finally_handler_596;
    }

    tmp_compexpr_right_268 = const_int_pos_9;
    tmp_assign_source_500 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_268, tmp_compexpr_right_268 );
    if ( tmp_assign_source_500 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 595;
        goto try_finally_handler_596;
    }
    {
        PyObject *old = tmp_and_73__value_1;
        tmp_and_73__value_1 = tmp_assign_source_500;
        Py_XDECREF( old );
    }

    tmp_cond_value_278 = tmp_and_73__value_1;

    tmp_cond_truth_278 = CHECK_IF_TRUE( tmp_cond_value_278 );
    if ( tmp_cond_truth_278 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 595;
        goto try_finally_handler_596;
    }
    if (tmp_cond_truth_278 == 1)
    {
        goto condexpr_true_197;
    }
    else
    {
        goto condexpr_false_197;
    }
    condexpr_true_197:;
    tmp_cond_value_276 = NULL;
    // Tried code
    tmp_result = tmp_and_73__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_73__value_1 );
        tmp_and_73__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_269 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_269 == NULL ))
    {
        tmp_compexpr_left_269 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_269 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 595;
        goto try_finally_handler_597;
    }

    tmp_compexpr_right_269 = const_int_pos_1;
    tmp_cond_value_276 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_269, tmp_compexpr_right_269 );
    if ( tmp_cond_value_276 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 595;
        goto try_finally_handler_597;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_597:;
    exception_keeper_type_539 = exception_type;
    exception_keeper_value_539 = exception_value;
    exception_keeper_tb_539 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_539 != NULL )
    {
        exception_type = exception_keeper_type_539;
        exception_value = exception_keeper_value_539;
        exception_tb = exception_keeper_tb_539;

        goto try_finally_handler_596;
    }

    goto finally_end_539;
    finally_end_539:;
    goto condexpr_end_197;
    condexpr_false_197:;
    tmp_cond_value_276 = tmp_and_73__value_1;

    Py_INCREF( tmp_cond_value_276 );
    condexpr_end_197:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_596:;
    exception_keeper_type_540 = exception_type;
    exception_keeper_value_540 = exception_value;
    exception_keeper_tb_540 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_540 != NULL )
    {
        exception_type = exception_keeper_type_540;
        exception_value = exception_keeper_value_540;
        exception_tb = exception_keeper_tb_540;

        goto try_finally_handler_595;
    }

    goto finally_end_540;
    finally_end_540:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_595:;
    exception_keeper_type_541 = exception_type;
    exception_keeper_value_541 = exception_value;
    exception_keeper_tb_541 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_541 != NULL )
    {
        exception_type = exception_keeper_type_541;
        exception_value = exception_keeper_value_541;
        exception_tb = exception_keeper_tb_541;

        goto try_finally_handler_594;
    }

    goto finally_end_541;
    finally_end_541:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_594:;
    exception_keeper_type_542 = exception_type;
    exception_keeper_value_542 = exception_value;
    exception_keeper_tb_542 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_151 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_73__value_1 );
    tmp_and_73__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_151;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_542 != NULL )
    {
        exception_type = exception_keeper_type_542;
        exception_value = exception_keeper_value_542;
        exception_tb = exception_keeper_tb_542;

        goto try_finally_handler_593;
    }

    goto finally_end_542;
    finally_end_542:;
    goto condexpr_end_196;
    condexpr_false_196:;
    tmp_cond_value_276 = tmp_and_73__value_2;

    Py_INCREF( tmp_cond_value_276 );
    condexpr_end_196:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_593:;
    exception_keeper_type_543 = exception_type;
    exception_keeper_value_543 = exception_value;
    exception_keeper_tb_543 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_543 != NULL )
    {
        exception_type = exception_keeper_type_543;
        exception_value = exception_keeper_value_543;
        exception_tb = exception_keeper_tb_543;

        goto try_finally_handler_592;
    }

    goto finally_end_543;
    finally_end_543:;
    tmp_cond_truth_276 = CHECK_IF_TRUE( tmp_cond_value_276 );
    if ( tmp_cond_truth_276 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_276 );

        frame_module->f_lineno = 595;
        goto try_finally_handler_592;
    }
    Py_DECREF( tmp_cond_value_276 );
    if (tmp_cond_truth_276 == 1)
    {
        goto branch_yes_120;
    }
    else
    {
        goto branch_no_120;
    }
    branch_yes_120:;
    tmp_assign_source_501 = const_str_digest_389f56b5d3d0c63bcc0dc92f40b3edfa;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_501 );
    tmp_str_arg_95 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_95 == NULL ))
    {
        tmp_str_arg_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_95 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 597;
        goto try_finally_handler_592;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_95 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 597;
        goto try_finally_handler_592;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 597;
        goto try_finally_handler_592;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 597;
        goto try_finally_handler_592;
    }
    goto branch_end_120;
    branch_no_120:;
    // Tried code
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_compexpr_left_270 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_270 == NULL ))
    {
        tmp_compexpr_left_270 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_270 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 598;
        goto try_finally_handler_599;
    }

    tmp_compexpr_right_270 = const_int_pos_9;
    tmp_assign_source_502 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_270, tmp_compexpr_right_270 );
    if ( tmp_assign_source_502 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_599;
    }
    {
        PyObject *old = tmp_and_74__value_3;
        tmp_and_74__value_3 = tmp_assign_source_502;
        Py_XDECREF( old );
    }

    tmp_cond_value_280 = tmp_and_74__value_3;

    tmp_cond_truth_280 = CHECK_IF_TRUE( tmp_cond_value_280 );
    if ( tmp_cond_truth_280 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_599;
    }
    if (tmp_cond_truth_280 == 1)
    {
        goto condexpr_true_198;
    }
    else
    {
        goto condexpr_false_198;
    }
    condexpr_true_198:;
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_result = tmp_and_74__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_74__value_3 );
        tmp_and_74__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_compexpr_left_271 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_271 == NULL ))
    {
        tmp_compexpr_left_271 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_271 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 598;
        goto try_finally_handler_602;
    }

    tmp_compexpr_right_271 = const_int_pos_9;
    tmp_assign_source_503 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_271, tmp_compexpr_right_271 );
    if ( tmp_assign_source_503 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_602;
    }
    {
        PyObject *old = tmp_and_74__value_2;
        tmp_and_74__value_2 = tmp_assign_source_503;
        Py_XDECREF( old );
    }

    tmp_cond_value_281 = tmp_and_74__value_2;

    tmp_cond_truth_281 = CHECK_IF_TRUE( tmp_cond_value_281 );
    if ( tmp_cond_truth_281 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_602;
    }
    if (tmp_cond_truth_281 == 1)
    {
        goto condexpr_true_199;
    }
    else
    {
        goto condexpr_false_199;
    }
    condexpr_true_199:;
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_result = tmp_and_74__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_74__value_2 );
        tmp_and_74__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_compexpr_left_272 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_272 == NULL ))
    {
        tmp_compexpr_left_272 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_272 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 598;
        goto try_finally_handler_605;
    }

    tmp_compexpr_right_272 = const_int_pos_1;
    tmp_assign_source_504 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_272, tmp_compexpr_right_272 );
    if ( tmp_assign_source_504 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_605;
    }
    {
        PyObject *old = tmp_and_74__value_1;
        tmp_and_74__value_1 = tmp_assign_source_504;
        Py_XDECREF( old );
    }

    tmp_cond_value_282 = tmp_and_74__value_1;

    tmp_cond_truth_282 = CHECK_IF_TRUE( tmp_cond_value_282 );
    if ( tmp_cond_truth_282 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_605;
    }
    if (tmp_cond_truth_282 == 1)
    {
        goto condexpr_true_200;
    }
    else
    {
        goto condexpr_false_200;
    }
    condexpr_true_200:;
    tmp_cond_value_279 = NULL;
    // Tried code
    tmp_result = tmp_and_74__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_74__value_1 );
        tmp_and_74__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_273 = const_str_plain_crowbar;
    tmp_compexpr_right_273 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_273 == NULL ))
    {
        tmp_compexpr_right_273 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_273 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 598;
        goto try_finally_handler_606;
    }

    tmp_cond_value_279 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_273, tmp_compexpr_right_273 );
    if ( tmp_cond_value_279 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_606;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_606:;
    exception_keeper_type_544 = exception_type;
    exception_keeper_value_544 = exception_value;
    exception_keeper_tb_544 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_544 != NULL )
    {
        exception_type = exception_keeper_type_544;
        exception_value = exception_keeper_value_544;
        exception_tb = exception_keeper_tb_544;

        goto try_finally_handler_605;
    }

    goto finally_end_544;
    finally_end_544:;
    goto condexpr_end_200;
    condexpr_false_200:;
    tmp_cond_value_279 = tmp_and_74__value_1;

    condexpr_end_200:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_605:;
    exception_keeper_type_545 = exception_type;
    exception_keeper_value_545 = exception_value;
    exception_keeper_tb_545 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_545 != NULL )
    {
        exception_type = exception_keeper_type_545;
        exception_value = exception_keeper_value_545;
        exception_tb = exception_keeper_tb_545;

        goto try_finally_handler_604;
    }

    goto finally_end_545;
    finally_end_545:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_604:;
    exception_keeper_type_546 = exception_type;
    exception_keeper_value_546 = exception_value;
    exception_keeper_tb_546 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_546 != NULL )
    {
        exception_type = exception_keeper_type_546;
        exception_value = exception_keeper_value_546;
        exception_tb = exception_keeper_tb_546;

        goto try_finally_handler_603;
    }

    goto finally_end_546;
    finally_end_546:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_603:;
    exception_keeper_type_547 = exception_type;
    exception_keeper_value_547 = exception_value;
    exception_keeper_tb_547 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_152 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_74__value_1 );
    tmp_and_74__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_152;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_547 != NULL )
    {
        exception_type = exception_keeper_type_547;
        exception_value = exception_keeper_value_547;
        exception_tb = exception_keeper_tb_547;

        goto try_finally_handler_602;
    }

    goto finally_end_547;
    finally_end_547:;
    goto condexpr_end_199;
    condexpr_false_199:;
    tmp_cond_value_279 = tmp_and_74__value_2;

    condexpr_end_199:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_602:;
    exception_keeper_type_548 = exception_type;
    exception_keeper_value_548 = exception_value;
    exception_keeper_tb_548 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_548 != NULL )
    {
        exception_type = exception_keeper_type_548;
        exception_value = exception_keeper_value_548;
        exception_tb = exception_keeper_tb_548;

        goto try_finally_handler_601;
    }

    goto finally_end_548;
    finally_end_548:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_601:;
    exception_keeper_type_549 = exception_type;
    exception_keeper_value_549 = exception_value;
    exception_keeper_tb_549 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_549 != NULL )
    {
        exception_type = exception_keeper_type_549;
        exception_value = exception_keeper_value_549;
        exception_tb = exception_keeper_tb_549;

        goto try_finally_handler_600;
    }

    goto finally_end_549;
    finally_end_549:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_600:;
    exception_keeper_type_550 = exception_type;
    exception_keeper_value_550 = exception_value;
    exception_keeper_tb_550 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_153 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_74__value_2 );
    tmp_and_74__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_153;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_550 != NULL )
    {
        exception_type = exception_keeper_type_550;
        exception_value = exception_keeper_value_550;
        exception_tb = exception_keeper_tb_550;

        goto try_finally_handler_599;
    }

    goto finally_end_550;
    finally_end_550:;
    goto condexpr_end_198;
    condexpr_false_198:;
    tmp_cond_value_279 = tmp_and_74__value_3;

    condexpr_end_198:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_599:;
    exception_keeper_type_551 = exception_type;
    exception_keeper_value_551 = exception_value;
    exception_keeper_tb_551 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_551 != NULL )
    {
        exception_type = exception_keeper_type_551;
        exception_value = exception_keeper_value_551;
        exception_tb = exception_keeper_tb_551;

        goto try_finally_handler_598;
    }

    goto finally_end_551;
    finally_end_551:;
    tmp_cond_truth_279 = CHECK_IF_TRUE( tmp_cond_value_279 );
    if ( tmp_cond_truth_279 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 598;
        goto try_finally_handler_598;
    }
    if (tmp_cond_truth_279 == 1)
    {
        goto branch_yes_121;
    }
    else
    {
        goto branch_no_121;
    }
    branch_yes_121:;
    tmp_assign_source_505 = const_str_digest_4f16afaae97722f9306d79e5985eee74;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_505 );
    tmp_str_arg_96 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_96 == NULL ))
    {
        tmp_str_arg_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_96 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 600;
        goto try_finally_handler_598;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_96 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 600;
        goto try_finally_handler_598;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 600;
        goto try_finally_handler_598;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 600;
        goto try_finally_handler_598;
    }
    goto branch_end_121;
    branch_no_121:;
    // Tried code
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_compexpr_left_274 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_274 == NULL ))
    {
        tmp_compexpr_left_274 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_274 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 601;
        goto try_finally_handler_608;
    }

    tmp_compexpr_right_274 = const_int_pos_9;
    tmp_assign_source_506 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_274, tmp_compexpr_right_274 );
    if ( tmp_assign_source_506 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_608;
    }
    {
        PyObject *old = tmp_and_75__value_3;
        tmp_and_75__value_3 = tmp_assign_source_506;
        Py_XDECREF( old );
    }

    tmp_cond_value_284 = tmp_and_75__value_3;

    tmp_cond_truth_284 = CHECK_IF_TRUE( tmp_cond_value_284 );
    if ( tmp_cond_truth_284 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_608;
    }
    if (tmp_cond_truth_284 == 1)
    {
        goto condexpr_true_201;
    }
    else
    {
        goto condexpr_false_201;
    }
    condexpr_true_201:;
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_result = tmp_and_75__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_75__value_3 );
        tmp_and_75__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_compexpr_left_275 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_275 == NULL ))
    {
        tmp_compexpr_left_275 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_275 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 601;
        goto try_finally_handler_611;
    }

    tmp_compexpr_right_275 = const_int_pos_9;
    tmp_assign_source_507 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_275, tmp_compexpr_right_275 );
    if ( tmp_assign_source_507 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_611;
    }
    {
        PyObject *old = tmp_and_75__value_2;
        tmp_and_75__value_2 = tmp_assign_source_507;
        Py_XDECREF( old );
    }

    tmp_cond_value_285 = tmp_and_75__value_2;

    tmp_cond_truth_285 = CHECK_IF_TRUE( tmp_cond_value_285 );
    if ( tmp_cond_truth_285 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_611;
    }
    if (tmp_cond_truth_285 == 1)
    {
        goto condexpr_true_202;
    }
    else
    {
        goto condexpr_false_202;
    }
    condexpr_true_202:;
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_result = tmp_and_75__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_75__value_2 );
        tmp_and_75__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_compexpr_left_276 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_276 == NULL ))
    {
        tmp_compexpr_left_276 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_276 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 601;
        goto try_finally_handler_614;
    }

    tmp_compexpr_right_276 = const_int_pos_1;
    tmp_assign_source_508 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_276, tmp_compexpr_right_276 );
    if ( tmp_assign_source_508 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_614;
    }
    {
        PyObject *old = tmp_and_75__value_1;
        tmp_and_75__value_1 = tmp_assign_source_508;
        Py_XDECREF( old );
    }

    tmp_cond_value_286 = tmp_and_75__value_1;

    tmp_cond_truth_286 = CHECK_IF_TRUE( tmp_cond_value_286 );
    if ( tmp_cond_truth_286 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_614;
    }
    if (tmp_cond_truth_286 == 1)
    {
        goto condexpr_true_203;
    }
    else
    {
        goto condexpr_false_203;
    }
    condexpr_true_203:;
    tmp_cond_value_283 = NULL;
    // Tried code
    tmp_result = tmp_and_75__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_75__value_1 );
        tmp_and_75__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_277 = const_str_plain_crowbar;
    tmp_compexpr_right_277 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_277 == NULL ))
    {
        tmp_compexpr_right_277 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_277 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 601;
        goto try_finally_handler_615;
    }

    tmp_cond_value_283 = SEQUENCE_CONTAINS( tmp_compexpr_left_277, tmp_compexpr_right_277 );
    if ( tmp_cond_value_283 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_615;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_615:;
    exception_keeper_type_552 = exception_type;
    exception_keeper_value_552 = exception_value;
    exception_keeper_tb_552 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_552 != NULL )
    {
        exception_type = exception_keeper_type_552;
        exception_value = exception_keeper_value_552;
        exception_tb = exception_keeper_tb_552;

        goto try_finally_handler_614;
    }

    goto finally_end_552;
    finally_end_552:;
    goto condexpr_end_203;
    condexpr_false_203:;
    tmp_cond_value_283 = tmp_and_75__value_1;

    condexpr_end_203:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_614:;
    exception_keeper_type_553 = exception_type;
    exception_keeper_value_553 = exception_value;
    exception_keeper_tb_553 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_553 != NULL )
    {
        exception_type = exception_keeper_type_553;
        exception_value = exception_keeper_value_553;
        exception_tb = exception_keeper_tb_553;

        goto try_finally_handler_613;
    }

    goto finally_end_553;
    finally_end_553:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_613:;
    exception_keeper_type_554 = exception_type;
    exception_keeper_value_554 = exception_value;
    exception_keeper_tb_554 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_554 != NULL )
    {
        exception_type = exception_keeper_type_554;
        exception_value = exception_keeper_value_554;
        exception_tb = exception_keeper_tb_554;

        goto try_finally_handler_612;
    }

    goto finally_end_554;
    finally_end_554:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_612:;
    exception_keeper_type_555 = exception_type;
    exception_keeper_value_555 = exception_value;
    exception_keeper_tb_555 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_154 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_75__value_1 );
    tmp_and_75__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_154;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_555 != NULL )
    {
        exception_type = exception_keeper_type_555;
        exception_value = exception_keeper_value_555;
        exception_tb = exception_keeper_tb_555;

        goto try_finally_handler_611;
    }

    goto finally_end_555;
    finally_end_555:;
    goto condexpr_end_202;
    condexpr_false_202:;
    tmp_cond_value_283 = tmp_and_75__value_2;

    condexpr_end_202:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_611:;
    exception_keeper_type_556 = exception_type;
    exception_keeper_value_556 = exception_value;
    exception_keeper_tb_556 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_556 != NULL )
    {
        exception_type = exception_keeper_type_556;
        exception_value = exception_keeper_value_556;
        exception_tb = exception_keeper_tb_556;

        goto try_finally_handler_610;
    }

    goto finally_end_556;
    finally_end_556:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_610:;
    exception_keeper_type_557 = exception_type;
    exception_keeper_value_557 = exception_value;
    exception_keeper_tb_557 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_557 != NULL )
    {
        exception_type = exception_keeper_type_557;
        exception_value = exception_keeper_value_557;
        exception_tb = exception_keeper_tb_557;

        goto try_finally_handler_609;
    }

    goto finally_end_557;
    finally_end_557:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_609:;
    exception_keeper_type_558 = exception_type;
    exception_keeper_value_558 = exception_value;
    exception_keeper_tb_558 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_155 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_75__value_2 );
    tmp_and_75__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_155;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_558 != NULL )
    {
        exception_type = exception_keeper_type_558;
        exception_value = exception_keeper_value_558;
        exception_tb = exception_keeper_tb_558;

        goto try_finally_handler_608;
    }

    goto finally_end_558;
    finally_end_558:;
    goto condexpr_end_201;
    condexpr_false_201:;
    tmp_cond_value_283 = tmp_and_75__value_3;

    condexpr_end_201:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_608:;
    exception_keeper_type_559 = exception_type;
    exception_keeper_value_559 = exception_value;
    exception_keeper_tb_559 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_559 != NULL )
    {
        exception_type = exception_keeper_type_559;
        exception_value = exception_keeper_value_559;
        exception_tb = exception_keeper_tb_559;

        goto try_finally_handler_607;
    }

    goto finally_end_559;
    finally_end_559:;
    tmp_cond_truth_283 = CHECK_IF_TRUE( tmp_cond_value_283 );
    if ( tmp_cond_truth_283 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 601;
        goto try_finally_handler_607;
    }
    if (tmp_cond_truth_283 == 1)
    {
        goto branch_yes_122;
    }
    else
    {
        goto branch_no_122;
    }
    branch_yes_122:;
    tmp_assign_source_509 = const_str_digest_3548880918594fabf8a2ccac9b2b8e7f;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_509 );
    tmp_str_arg_97 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_97 == NULL ))
    {
        tmp_str_arg_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_97 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 603;
        goto try_finally_handler_607;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_97 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 603;
        goto try_finally_handler_607;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 603;
        goto try_finally_handler_607;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 603;
        goto try_finally_handler_607;
    }
    goto branch_end_122;
    branch_no_122:;
    // Tried code
    tmp_cond_value_287 = NULL;
    // Tried code
    tmp_compexpr_left_278 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_278 == NULL ))
    {
        tmp_compexpr_left_278 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_278 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 604;
        goto try_finally_handler_617;
    }

    tmp_compexpr_right_278 = const_int_pos_10;
    tmp_assign_source_510 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_278, tmp_compexpr_right_278 );
    if ( tmp_assign_source_510 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 604;
        goto try_finally_handler_617;
    }
    {
        PyObject *old = tmp_and_76__value_2;
        tmp_and_76__value_2 = tmp_assign_source_510;
        Py_XDECREF( old );
    }

    tmp_cond_value_288 = tmp_and_76__value_2;

    tmp_cond_truth_288 = CHECK_IF_TRUE( tmp_cond_value_288 );
    if ( tmp_cond_truth_288 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 604;
        goto try_finally_handler_617;
    }
    if (tmp_cond_truth_288 == 1)
    {
        goto condexpr_true_204;
    }
    else
    {
        goto condexpr_false_204;
    }
    condexpr_true_204:;
    tmp_cond_value_287 = NULL;
    // Tried code
    tmp_cond_value_287 = NULL;
    // Tried code
    tmp_result = tmp_and_76__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_76__value_2 );
        tmp_and_76__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_287 = NULL;
    // Tried code
    tmp_compexpr_left_279 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_279 == NULL ))
    {
        tmp_compexpr_left_279 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_279 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 604;
        goto try_finally_handler_620;
    }

    tmp_compexpr_right_279 = const_int_pos_9;
    tmp_assign_source_511 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_279, tmp_compexpr_right_279 );
    if ( tmp_assign_source_511 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 604;
        goto try_finally_handler_620;
    }
    {
        PyObject *old = tmp_and_76__value_1;
        tmp_and_76__value_1 = tmp_assign_source_511;
        Py_XDECREF( old );
    }

    tmp_cond_value_289 = tmp_and_76__value_1;

    tmp_cond_truth_289 = CHECK_IF_TRUE( tmp_cond_value_289 );
    if ( tmp_cond_truth_289 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 604;
        goto try_finally_handler_620;
    }
    if (tmp_cond_truth_289 == 1)
    {
        goto condexpr_true_205;
    }
    else
    {
        goto condexpr_false_205;
    }
    condexpr_true_205:;
    tmp_cond_value_287 = NULL;
    // Tried code
    tmp_result = tmp_and_76__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_76__value_1 );
        tmp_and_76__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_280 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_280 == NULL ))
    {
        tmp_compexpr_left_280 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_280 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 604;
        goto try_finally_handler_621;
    }

    tmp_compexpr_right_280 = const_int_pos_1;
    tmp_cond_value_287 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_280, tmp_compexpr_right_280 );
    if ( tmp_cond_value_287 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 604;
        goto try_finally_handler_621;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_621:;
    exception_keeper_type_560 = exception_type;
    exception_keeper_value_560 = exception_value;
    exception_keeper_tb_560 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_560 != NULL )
    {
        exception_type = exception_keeper_type_560;
        exception_value = exception_keeper_value_560;
        exception_tb = exception_keeper_tb_560;

        goto try_finally_handler_620;
    }

    goto finally_end_560;
    finally_end_560:;
    goto condexpr_end_205;
    condexpr_false_205:;
    tmp_cond_value_287 = tmp_and_76__value_1;

    Py_INCREF( tmp_cond_value_287 );
    condexpr_end_205:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_620:;
    exception_keeper_type_561 = exception_type;
    exception_keeper_value_561 = exception_value;
    exception_keeper_tb_561 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_561 != NULL )
    {
        exception_type = exception_keeper_type_561;
        exception_value = exception_keeper_value_561;
        exception_tb = exception_keeper_tb_561;

        goto try_finally_handler_619;
    }

    goto finally_end_561;
    finally_end_561:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_619:;
    exception_keeper_type_562 = exception_type;
    exception_keeper_value_562 = exception_value;
    exception_keeper_tb_562 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_562 != NULL )
    {
        exception_type = exception_keeper_type_562;
        exception_value = exception_keeper_value_562;
        exception_tb = exception_keeper_tb_562;

        goto try_finally_handler_618;
    }

    goto finally_end_562;
    finally_end_562:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_618:;
    exception_keeper_type_563 = exception_type;
    exception_keeper_value_563 = exception_value;
    exception_keeper_tb_563 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_156 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_76__value_1 );
    tmp_and_76__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_156;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_563 != NULL )
    {
        exception_type = exception_keeper_type_563;
        exception_value = exception_keeper_value_563;
        exception_tb = exception_keeper_tb_563;

        goto try_finally_handler_617;
    }

    goto finally_end_563;
    finally_end_563:;
    goto condexpr_end_204;
    condexpr_false_204:;
    tmp_cond_value_287 = tmp_and_76__value_2;

    Py_INCREF( tmp_cond_value_287 );
    condexpr_end_204:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_617:;
    exception_keeper_type_564 = exception_type;
    exception_keeper_value_564 = exception_value;
    exception_keeper_tb_564 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_564 != NULL )
    {
        exception_type = exception_keeper_type_564;
        exception_value = exception_keeper_value_564;
        exception_tb = exception_keeper_tb_564;

        goto try_finally_handler_616;
    }

    goto finally_end_564;
    finally_end_564:;
    tmp_cond_truth_287 = CHECK_IF_TRUE( tmp_cond_value_287 );
    if ( tmp_cond_truth_287 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_287 );

        frame_module->f_lineno = 604;
        goto try_finally_handler_616;
    }
    Py_DECREF( tmp_cond_value_287 );
    if (tmp_cond_truth_287 == 1)
    {
        goto branch_yes_123;
    }
    else
    {
        goto branch_no_123;
    }
    branch_yes_123:;
    tmp_assign_source_512 = const_str_digest_1be8436eca48da8b17e9e83f39ca7e27;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_512 );
    tmp_str_arg_98 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_98 == NULL ))
    {
        tmp_str_arg_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_98 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 606;
        goto try_finally_handler_616;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_98 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 606;
        goto try_finally_handler_616;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 606;
        goto try_finally_handler_616;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 606;
        goto try_finally_handler_616;
    }
    goto branch_end_123;
    branch_no_123:;
    // Tried code
    tmp_cond_value_290 = NULL;
    // Tried code
    tmp_compexpr_left_281 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_281 == NULL ))
    {
        tmp_compexpr_left_281 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_281 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 607;
        goto try_finally_handler_623;
    }

    tmp_compexpr_right_281 = const_int_pos_11;
    tmp_assign_source_513 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_281, tmp_compexpr_right_281 );
    if ( tmp_assign_source_513 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 607;
        goto try_finally_handler_623;
    }
    {
        PyObject *old = tmp_and_77__value_2;
        tmp_and_77__value_2 = tmp_assign_source_513;
        Py_XDECREF( old );
    }

    tmp_cond_value_291 = tmp_and_77__value_2;

    tmp_cond_truth_291 = CHECK_IF_TRUE( tmp_cond_value_291 );
    if ( tmp_cond_truth_291 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 607;
        goto try_finally_handler_623;
    }
    if (tmp_cond_truth_291 == 1)
    {
        goto condexpr_true_206;
    }
    else
    {
        goto condexpr_false_206;
    }
    condexpr_true_206:;
    tmp_cond_value_290 = NULL;
    // Tried code
    tmp_cond_value_290 = NULL;
    // Tried code
    tmp_result = tmp_and_77__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_77__value_2 );
        tmp_and_77__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_290 = NULL;
    // Tried code
    tmp_compexpr_left_282 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_282 == NULL ))
    {
        tmp_compexpr_left_282 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_282 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 607;
        goto try_finally_handler_626;
    }

    tmp_compexpr_right_282 = const_int_pos_9;
    tmp_assign_source_514 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_282, tmp_compexpr_right_282 );
    if ( tmp_assign_source_514 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 607;
        goto try_finally_handler_626;
    }
    {
        PyObject *old = tmp_and_77__value_1;
        tmp_and_77__value_1 = tmp_assign_source_514;
        Py_XDECREF( old );
    }

    tmp_cond_value_292 = tmp_and_77__value_1;

    tmp_cond_truth_292 = CHECK_IF_TRUE( tmp_cond_value_292 );
    if ( tmp_cond_truth_292 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 607;
        goto try_finally_handler_626;
    }
    if (tmp_cond_truth_292 == 1)
    {
        goto condexpr_true_207;
    }
    else
    {
        goto condexpr_false_207;
    }
    condexpr_true_207:;
    tmp_cond_value_290 = NULL;
    // Tried code
    tmp_result = tmp_and_77__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_77__value_1 );
        tmp_and_77__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_283 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_283 == NULL ))
    {
        tmp_compexpr_left_283 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_283 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 607;
        goto try_finally_handler_627;
    }

    tmp_compexpr_right_283 = const_int_pos_1;
    tmp_cond_value_290 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_283, tmp_compexpr_right_283 );
    if ( tmp_cond_value_290 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 607;
        goto try_finally_handler_627;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_627:;
    exception_keeper_type_565 = exception_type;
    exception_keeper_value_565 = exception_value;
    exception_keeper_tb_565 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_565 != NULL )
    {
        exception_type = exception_keeper_type_565;
        exception_value = exception_keeper_value_565;
        exception_tb = exception_keeper_tb_565;

        goto try_finally_handler_626;
    }

    goto finally_end_565;
    finally_end_565:;
    goto condexpr_end_207;
    condexpr_false_207:;
    tmp_cond_value_290 = tmp_and_77__value_1;

    Py_INCREF( tmp_cond_value_290 );
    condexpr_end_207:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_626:;
    exception_keeper_type_566 = exception_type;
    exception_keeper_value_566 = exception_value;
    exception_keeper_tb_566 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_566 != NULL )
    {
        exception_type = exception_keeper_type_566;
        exception_value = exception_keeper_value_566;
        exception_tb = exception_keeper_tb_566;

        goto try_finally_handler_625;
    }

    goto finally_end_566;
    finally_end_566:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_625:;
    exception_keeper_type_567 = exception_type;
    exception_keeper_value_567 = exception_value;
    exception_keeper_tb_567 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_567 != NULL )
    {
        exception_type = exception_keeper_type_567;
        exception_value = exception_keeper_value_567;
        exception_tb = exception_keeper_tb_567;

        goto try_finally_handler_624;
    }

    goto finally_end_567;
    finally_end_567:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_624:;
    exception_keeper_type_568 = exception_type;
    exception_keeper_value_568 = exception_value;
    exception_keeper_tb_568 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_157 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_77__value_1 );
    tmp_and_77__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_157;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_568 != NULL )
    {
        exception_type = exception_keeper_type_568;
        exception_value = exception_keeper_value_568;
        exception_tb = exception_keeper_tb_568;

        goto try_finally_handler_623;
    }

    goto finally_end_568;
    finally_end_568:;
    goto condexpr_end_206;
    condexpr_false_206:;
    tmp_cond_value_290 = tmp_and_77__value_2;

    Py_INCREF( tmp_cond_value_290 );
    condexpr_end_206:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_623:;
    exception_keeper_type_569 = exception_type;
    exception_keeper_value_569 = exception_value;
    exception_keeper_tb_569 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_569 != NULL )
    {
        exception_type = exception_keeper_type_569;
        exception_value = exception_keeper_value_569;
        exception_tb = exception_keeper_tb_569;

        goto try_finally_handler_622;
    }

    goto finally_end_569;
    finally_end_569:;
    tmp_cond_truth_290 = CHECK_IF_TRUE( tmp_cond_value_290 );
    if ( tmp_cond_truth_290 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_290 );

        frame_module->f_lineno = 607;
        goto try_finally_handler_622;
    }
    Py_DECREF( tmp_cond_value_290 );
    if (tmp_cond_truth_290 == 1)
    {
        goto branch_yes_124;
    }
    else
    {
        goto branch_no_124;
    }
    branch_yes_124:;
    tmp_assign_source_515 = const_str_digest_e44b8745f1767ba156d73eccc6250b71;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_515 );
    tmp_str_arg_99 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_99 == NULL ))
    {
        tmp_str_arg_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_99 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 609;
        goto try_finally_handler_622;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_99 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 609;
        goto try_finally_handler_622;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 609;
        goto try_finally_handler_622;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 609;
        goto try_finally_handler_622;
    }
    tmp_assign_source_516 = const_int_pos_3;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_516 );
    tmp_assign_source_517 = const_int_pos_9;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_517 );
    tmp_assign_source_518 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_518 );
    goto branch_end_124;
    branch_no_124:;
    // Tried code
    tmp_cond_value_293 = NULL;
    // Tried code
    tmp_compexpr_left_284 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_284 == NULL ))
    {
        tmp_compexpr_left_284 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_284 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 614;
        goto try_finally_handler_629;
    }

    tmp_compexpr_right_284 = const_int_pos_3;
    tmp_assign_source_519 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_284, tmp_compexpr_right_284 );
    if ( tmp_assign_source_519 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 614;
        goto try_finally_handler_629;
    }
    {
        PyObject *old = tmp_and_78__value_2;
        tmp_and_78__value_2 = tmp_assign_source_519;
        Py_XDECREF( old );
    }

    tmp_cond_value_294 = tmp_and_78__value_2;

    tmp_cond_truth_294 = CHECK_IF_TRUE( tmp_cond_value_294 );
    if ( tmp_cond_truth_294 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 614;
        goto try_finally_handler_629;
    }
    if (tmp_cond_truth_294 == 1)
    {
        goto condexpr_true_208;
    }
    else
    {
        goto condexpr_false_208;
    }
    condexpr_true_208:;
    tmp_cond_value_293 = NULL;
    // Tried code
    tmp_cond_value_293 = NULL;
    // Tried code
    tmp_result = tmp_and_78__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_78__value_2 );
        tmp_and_78__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_293 = NULL;
    // Tried code
    tmp_compexpr_left_285 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_285 == NULL ))
    {
        tmp_compexpr_left_285 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_285 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 614;
        goto try_finally_handler_632;
    }

    tmp_compexpr_right_285 = const_int_pos_10;
    tmp_assign_source_520 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_285, tmp_compexpr_right_285 );
    if ( tmp_assign_source_520 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 614;
        goto try_finally_handler_632;
    }
    {
        PyObject *old = tmp_and_78__value_1;
        tmp_and_78__value_1 = tmp_assign_source_520;
        Py_XDECREF( old );
    }

    tmp_cond_value_295 = tmp_and_78__value_1;

    tmp_cond_truth_295 = CHECK_IF_TRUE( tmp_cond_value_295 );
    if ( tmp_cond_truth_295 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 614;
        goto try_finally_handler_632;
    }
    if (tmp_cond_truth_295 == 1)
    {
        goto condexpr_true_209;
    }
    else
    {
        goto condexpr_false_209;
    }
    condexpr_true_209:;
    tmp_cond_value_293 = NULL;
    // Tried code
    tmp_result = tmp_and_78__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_78__value_1 );
        tmp_and_78__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_286 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_286 == NULL ))
    {
        tmp_compexpr_left_286 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_286 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 614;
        goto try_finally_handler_633;
    }

    tmp_compexpr_right_286 = const_int_pos_1;
    tmp_cond_value_293 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_286, tmp_compexpr_right_286 );
    if ( tmp_cond_value_293 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 614;
        goto try_finally_handler_633;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_633:;
    exception_keeper_type_570 = exception_type;
    exception_keeper_value_570 = exception_value;
    exception_keeper_tb_570 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_570 != NULL )
    {
        exception_type = exception_keeper_type_570;
        exception_value = exception_keeper_value_570;
        exception_tb = exception_keeper_tb_570;

        goto try_finally_handler_632;
    }

    goto finally_end_570;
    finally_end_570:;
    goto condexpr_end_209;
    condexpr_false_209:;
    tmp_cond_value_293 = tmp_and_78__value_1;

    Py_INCREF( tmp_cond_value_293 );
    condexpr_end_209:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_632:;
    exception_keeper_type_571 = exception_type;
    exception_keeper_value_571 = exception_value;
    exception_keeper_tb_571 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_571 != NULL )
    {
        exception_type = exception_keeper_type_571;
        exception_value = exception_keeper_value_571;
        exception_tb = exception_keeper_tb_571;

        goto try_finally_handler_631;
    }

    goto finally_end_571;
    finally_end_571:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_631:;
    exception_keeper_type_572 = exception_type;
    exception_keeper_value_572 = exception_value;
    exception_keeper_tb_572 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_572 != NULL )
    {
        exception_type = exception_keeper_type_572;
        exception_value = exception_keeper_value_572;
        exception_tb = exception_keeper_tb_572;

        goto try_finally_handler_630;
    }

    goto finally_end_572;
    finally_end_572:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_630:;
    exception_keeper_type_573 = exception_type;
    exception_keeper_value_573 = exception_value;
    exception_keeper_tb_573 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_158 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_78__value_1 );
    tmp_and_78__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_158;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_573 != NULL )
    {
        exception_type = exception_keeper_type_573;
        exception_value = exception_keeper_value_573;
        exception_tb = exception_keeper_tb_573;

        goto try_finally_handler_629;
    }

    goto finally_end_573;
    finally_end_573:;
    goto condexpr_end_208;
    condexpr_false_208:;
    tmp_cond_value_293 = tmp_and_78__value_2;

    Py_INCREF( tmp_cond_value_293 );
    condexpr_end_208:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_629:;
    exception_keeper_type_574 = exception_type;
    exception_keeper_value_574 = exception_value;
    exception_keeper_tb_574 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_574 != NULL )
    {
        exception_type = exception_keeper_type_574;
        exception_value = exception_keeper_value_574;
        exception_tb = exception_keeper_tb_574;

        goto try_finally_handler_628;
    }

    goto finally_end_574;
    finally_end_574:;
    tmp_cond_truth_293 = CHECK_IF_TRUE( tmp_cond_value_293 );
    if ( tmp_cond_truth_293 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_293 );

        frame_module->f_lineno = 614;
        goto try_finally_handler_628;
    }
    Py_DECREF( tmp_cond_value_293 );
    if (tmp_cond_truth_293 == 1)
    {
        goto branch_yes_125;
    }
    else
    {
        goto branch_no_125;
    }
    branch_yes_125:;
    tmp_assign_source_521 = const_str_digest_f11ef94db78eef6ff8b61394f971aee2;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_521 );
    tmp_str_arg_100 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_100 == NULL ))
    {
        tmp_str_arg_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_100 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 616;
        goto try_finally_handler_628;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_100 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 616;
        goto try_finally_handler_628;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 616;
        goto try_finally_handler_628;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 616;
        goto try_finally_handler_628;
    }
    goto branch_end_125;
    branch_no_125:;
    // Tried code
    tmp_cond_value_296 = NULL;
    // Tried code
    tmp_compexpr_left_287 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_287 == NULL ))
    {
        tmp_compexpr_left_287 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_287 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 617;
        goto try_finally_handler_635;
    }

    tmp_compexpr_right_287 = const_int_pos_3;
    tmp_assign_source_522 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_287, tmp_compexpr_right_287 );
    if ( tmp_assign_source_522 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 617;
        goto try_finally_handler_635;
    }
    {
        PyObject *old = tmp_and_79__value_2;
        tmp_and_79__value_2 = tmp_assign_source_522;
        Py_XDECREF( old );
    }

    tmp_cond_value_297 = tmp_and_79__value_2;

    tmp_cond_truth_297 = CHECK_IF_TRUE( tmp_cond_value_297 );
    if ( tmp_cond_truth_297 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 617;
        goto try_finally_handler_635;
    }
    if (tmp_cond_truth_297 == 1)
    {
        goto condexpr_true_210;
    }
    else
    {
        goto condexpr_false_210;
    }
    condexpr_true_210:;
    tmp_cond_value_296 = NULL;
    // Tried code
    tmp_cond_value_296 = NULL;
    // Tried code
    tmp_result = tmp_and_79__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_79__value_2 );
        tmp_and_79__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_296 = NULL;
    // Tried code
    tmp_compexpr_left_288 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_288 == NULL ))
    {
        tmp_compexpr_left_288 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_288 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 617;
        goto try_finally_handler_638;
    }

    tmp_compexpr_right_288 = const_int_pos_11;
    tmp_assign_source_523 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_288, tmp_compexpr_right_288 );
    if ( tmp_assign_source_523 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 617;
        goto try_finally_handler_638;
    }
    {
        PyObject *old = tmp_and_79__value_1;
        tmp_and_79__value_1 = tmp_assign_source_523;
        Py_XDECREF( old );
    }

    tmp_cond_value_298 = tmp_and_79__value_1;

    tmp_cond_truth_298 = CHECK_IF_TRUE( tmp_cond_value_298 );
    if ( tmp_cond_truth_298 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 617;
        goto try_finally_handler_638;
    }
    if (tmp_cond_truth_298 == 1)
    {
        goto condexpr_true_211;
    }
    else
    {
        goto condexpr_false_211;
    }
    condexpr_true_211:;
    tmp_cond_value_296 = NULL;
    // Tried code
    tmp_result = tmp_and_79__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_79__value_1 );
        tmp_and_79__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_289 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_289 == NULL ))
    {
        tmp_compexpr_left_289 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_289 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 617;
        goto try_finally_handler_639;
    }

    tmp_compexpr_right_289 = const_int_pos_1;
    tmp_cond_value_296 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_289, tmp_compexpr_right_289 );
    if ( tmp_cond_value_296 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 617;
        goto try_finally_handler_639;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_639:;
    exception_keeper_type_575 = exception_type;
    exception_keeper_value_575 = exception_value;
    exception_keeper_tb_575 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_575 != NULL )
    {
        exception_type = exception_keeper_type_575;
        exception_value = exception_keeper_value_575;
        exception_tb = exception_keeper_tb_575;

        goto try_finally_handler_638;
    }

    goto finally_end_575;
    finally_end_575:;
    goto condexpr_end_211;
    condexpr_false_211:;
    tmp_cond_value_296 = tmp_and_79__value_1;

    Py_INCREF( tmp_cond_value_296 );
    condexpr_end_211:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_638:;
    exception_keeper_type_576 = exception_type;
    exception_keeper_value_576 = exception_value;
    exception_keeper_tb_576 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_576 != NULL )
    {
        exception_type = exception_keeper_type_576;
        exception_value = exception_keeper_value_576;
        exception_tb = exception_keeper_tb_576;

        goto try_finally_handler_637;
    }

    goto finally_end_576;
    finally_end_576:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_637:;
    exception_keeper_type_577 = exception_type;
    exception_keeper_value_577 = exception_value;
    exception_keeper_tb_577 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_577 != NULL )
    {
        exception_type = exception_keeper_type_577;
        exception_value = exception_keeper_value_577;
        exception_tb = exception_keeper_tb_577;

        goto try_finally_handler_636;
    }

    goto finally_end_577;
    finally_end_577:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_636:;
    exception_keeper_type_578 = exception_type;
    exception_keeper_value_578 = exception_value;
    exception_keeper_tb_578 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_159 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_79__value_1 );
    tmp_and_79__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_159;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_578 != NULL )
    {
        exception_type = exception_keeper_type_578;
        exception_value = exception_keeper_value_578;
        exception_tb = exception_keeper_tb_578;

        goto try_finally_handler_635;
    }

    goto finally_end_578;
    finally_end_578:;
    goto condexpr_end_210;
    condexpr_false_210:;
    tmp_cond_value_296 = tmp_and_79__value_2;

    Py_INCREF( tmp_cond_value_296 );
    condexpr_end_210:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_635:;
    exception_keeper_type_579 = exception_type;
    exception_keeper_value_579 = exception_value;
    exception_keeper_tb_579 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_579 != NULL )
    {
        exception_type = exception_keeper_type_579;
        exception_value = exception_keeper_value_579;
        exception_tb = exception_keeper_tb_579;

        goto try_finally_handler_634;
    }

    goto finally_end_579;
    finally_end_579:;
    tmp_cond_truth_296 = CHECK_IF_TRUE( tmp_cond_value_296 );
    if ( tmp_cond_truth_296 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_296 );

        frame_module->f_lineno = 617;
        goto try_finally_handler_634;
    }
    Py_DECREF( tmp_cond_value_296 );
    if (tmp_cond_truth_296 == 1)
    {
        goto branch_yes_126;
    }
    else
    {
        goto branch_no_126;
    }
    branch_yes_126:;
    tmp_assign_source_524 = const_str_digest_2f43b42fd833d1e77420a8dae7419000;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_524 );
    tmp_str_arg_101 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_101 == NULL ))
    {
        tmp_str_arg_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_101 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 619;
        goto try_finally_handler_634;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_101 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 619;
        goto try_finally_handler_634;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 619;
        goto try_finally_handler_634;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 619;
        goto try_finally_handler_634;
    }
    goto branch_end_126;
    branch_no_126:;
    // Tried code
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_compexpr_left_290 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_290 == NULL ))
    {
        tmp_compexpr_left_290 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_290 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 620;
        goto try_finally_handler_641;
    }

    tmp_compexpr_right_290 = const_int_pos_3;
    tmp_assign_source_525 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_290, tmp_compexpr_right_290 );
    if ( tmp_assign_source_525 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_641;
    }
    {
        PyObject *old = tmp_and_80__value_3;
        tmp_and_80__value_3 = tmp_assign_source_525;
        Py_XDECREF( old );
    }

    tmp_cond_value_300 = tmp_and_80__value_3;

    tmp_cond_truth_300 = CHECK_IF_TRUE( tmp_cond_value_300 );
    if ( tmp_cond_truth_300 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_641;
    }
    if (tmp_cond_truth_300 == 1)
    {
        goto condexpr_true_212;
    }
    else
    {
        goto condexpr_false_212;
    }
    condexpr_true_212:;
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_result = tmp_and_80__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_80__value_3 );
        tmp_and_80__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_compexpr_left_291 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_291 == NULL ))
    {
        tmp_compexpr_left_291 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_291 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 620;
        goto try_finally_handler_644;
    }

    tmp_compexpr_right_291 = const_int_pos_12;
    tmp_assign_source_526 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_291, tmp_compexpr_right_291 );
    if ( tmp_assign_source_526 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_644;
    }
    {
        PyObject *old = tmp_and_80__value_2;
        tmp_and_80__value_2 = tmp_assign_source_526;
        Py_XDECREF( old );
    }

    tmp_cond_value_301 = tmp_and_80__value_2;

    tmp_cond_truth_301 = CHECK_IF_TRUE( tmp_cond_value_301 );
    if ( tmp_cond_truth_301 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_644;
    }
    if (tmp_cond_truth_301 == 1)
    {
        goto condexpr_true_213;
    }
    else
    {
        goto condexpr_false_213;
    }
    condexpr_true_213:;
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_result = tmp_and_80__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_80__value_2 );
        tmp_and_80__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_compexpr_left_292 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_292 == NULL ))
    {
        tmp_compexpr_left_292 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_292 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 620;
        goto try_finally_handler_647;
    }

    tmp_compexpr_right_292 = const_int_pos_1;
    tmp_assign_source_527 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_292, tmp_compexpr_right_292 );
    if ( tmp_assign_source_527 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_647;
    }
    {
        PyObject *old = tmp_and_80__value_1;
        tmp_and_80__value_1 = tmp_assign_source_527;
        Py_XDECREF( old );
    }

    tmp_cond_value_302 = tmp_and_80__value_1;

    tmp_cond_truth_302 = CHECK_IF_TRUE( tmp_cond_value_302 );
    if ( tmp_cond_truth_302 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_647;
    }
    if (tmp_cond_truth_302 == 1)
    {
        goto condexpr_true_214;
    }
    else
    {
        goto condexpr_false_214;
    }
    condexpr_true_214:;
    tmp_cond_value_299 = NULL;
    // Tried code
    tmp_result = tmp_and_80__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_80__value_1 );
        tmp_and_80__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_293 = const_str_plain_underground_door;
    tmp_compexpr_right_293 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_293 == NULL ))
    {
        tmp_compexpr_right_293 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_293 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 620;
        goto try_finally_handler_648;
    }

    tmp_cond_value_299 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_293, tmp_compexpr_right_293 );
    if ( tmp_cond_value_299 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_648;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_648:;
    exception_keeper_type_580 = exception_type;
    exception_keeper_value_580 = exception_value;
    exception_keeper_tb_580 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_580 != NULL )
    {
        exception_type = exception_keeper_type_580;
        exception_value = exception_keeper_value_580;
        exception_tb = exception_keeper_tb_580;

        goto try_finally_handler_647;
    }

    goto finally_end_580;
    finally_end_580:;
    goto condexpr_end_214;
    condexpr_false_214:;
    tmp_cond_value_299 = tmp_and_80__value_1;

    condexpr_end_214:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_647:;
    exception_keeper_type_581 = exception_type;
    exception_keeper_value_581 = exception_value;
    exception_keeper_tb_581 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_581 != NULL )
    {
        exception_type = exception_keeper_type_581;
        exception_value = exception_keeper_value_581;
        exception_tb = exception_keeper_tb_581;

        goto try_finally_handler_646;
    }

    goto finally_end_581;
    finally_end_581:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_646:;
    exception_keeper_type_582 = exception_type;
    exception_keeper_value_582 = exception_value;
    exception_keeper_tb_582 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_582 != NULL )
    {
        exception_type = exception_keeper_type_582;
        exception_value = exception_keeper_value_582;
        exception_tb = exception_keeper_tb_582;

        goto try_finally_handler_645;
    }

    goto finally_end_582;
    finally_end_582:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_645:;
    exception_keeper_type_583 = exception_type;
    exception_keeper_value_583 = exception_value;
    exception_keeper_tb_583 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_160 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_80__value_1 );
    tmp_and_80__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_160;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_583 != NULL )
    {
        exception_type = exception_keeper_type_583;
        exception_value = exception_keeper_value_583;
        exception_tb = exception_keeper_tb_583;

        goto try_finally_handler_644;
    }

    goto finally_end_583;
    finally_end_583:;
    goto condexpr_end_213;
    condexpr_false_213:;
    tmp_cond_value_299 = tmp_and_80__value_2;

    condexpr_end_213:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_644:;
    exception_keeper_type_584 = exception_type;
    exception_keeper_value_584 = exception_value;
    exception_keeper_tb_584 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_584 != NULL )
    {
        exception_type = exception_keeper_type_584;
        exception_value = exception_keeper_value_584;
        exception_tb = exception_keeper_tb_584;

        goto try_finally_handler_643;
    }

    goto finally_end_584;
    finally_end_584:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_643:;
    exception_keeper_type_585 = exception_type;
    exception_keeper_value_585 = exception_value;
    exception_keeper_tb_585 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_585 != NULL )
    {
        exception_type = exception_keeper_type_585;
        exception_value = exception_keeper_value_585;
        exception_tb = exception_keeper_tb_585;

        goto try_finally_handler_642;
    }

    goto finally_end_585;
    finally_end_585:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_642:;
    exception_keeper_type_586 = exception_type;
    exception_keeper_value_586 = exception_value;
    exception_keeper_tb_586 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_161 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_80__value_2 );
    tmp_and_80__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_161;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_586 != NULL )
    {
        exception_type = exception_keeper_type_586;
        exception_value = exception_keeper_value_586;
        exception_tb = exception_keeper_tb_586;

        goto try_finally_handler_641;
    }

    goto finally_end_586;
    finally_end_586:;
    goto condexpr_end_212;
    condexpr_false_212:;
    tmp_cond_value_299 = tmp_and_80__value_3;

    condexpr_end_212:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_641:;
    exception_keeper_type_587 = exception_type;
    exception_keeper_value_587 = exception_value;
    exception_keeper_tb_587 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_587 != NULL )
    {
        exception_type = exception_keeper_type_587;
        exception_value = exception_keeper_value_587;
        exception_tb = exception_keeper_tb_587;

        goto try_finally_handler_640;
    }

    goto finally_end_587;
    finally_end_587:;
    tmp_cond_truth_299 = CHECK_IF_TRUE( tmp_cond_value_299 );
    if ( tmp_cond_truth_299 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 620;
        goto try_finally_handler_640;
    }
    if (tmp_cond_truth_299 == 1)
    {
        goto branch_yes_127;
    }
    else
    {
        goto branch_no_127;
    }
    branch_yes_127:;
    tmp_assign_source_528 = const_str_digest_68551a24202e92fa366edf4a6de0f395;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_528 );
    tmp_str_arg_102 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_102 == NULL ))
    {
        tmp_str_arg_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_102 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 622;
        goto try_finally_handler_640;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_102 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 622;
        goto try_finally_handler_640;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 622;
        goto try_finally_handler_640;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 622;
        goto try_finally_handler_640;
    }
    goto branch_end_127;
    branch_no_127:;
    // Tried code
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_compexpr_left_294 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_294 == NULL ))
    {
        tmp_compexpr_left_294 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_294 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 623;
        goto try_finally_handler_650;
    }

    tmp_compexpr_right_294 = const_int_pos_3;
    tmp_assign_source_529 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_294, tmp_compexpr_right_294 );
    if ( tmp_assign_source_529 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_650;
    }
    {
        PyObject *old = tmp_and_81__value_3;
        tmp_and_81__value_3 = tmp_assign_source_529;
        Py_XDECREF( old );
    }

    tmp_cond_value_304 = tmp_and_81__value_3;

    tmp_cond_truth_304 = CHECK_IF_TRUE( tmp_cond_value_304 );
    if ( tmp_cond_truth_304 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_650;
    }
    if (tmp_cond_truth_304 == 1)
    {
        goto condexpr_true_215;
    }
    else
    {
        goto condexpr_false_215;
    }
    condexpr_true_215:;
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_result = tmp_and_81__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_81__value_3 );
        tmp_and_81__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_compexpr_left_295 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_295 == NULL ))
    {
        tmp_compexpr_left_295 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_295 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 623;
        goto try_finally_handler_653;
    }

    tmp_compexpr_right_295 = const_int_pos_12;
    tmp_assign_source_530 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_295, tmp_compexpr_right_295 );
    if ( tmp_assign_source_530 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_653;
    }
    {
        PyObject *old = tmp_and_81__value_2;
        tmp_and_81__value_2 = tmp_assign_source_530;
        Py_XDECREF( old );
    }

    tmp_cond_value_305 = tmp_and_81__value_2;

    tmp_cond_truth_305 = CHECK_IF_TRUE( tmp_cond_value_305 );
    if ( tmp_cond_truth_305 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_653;
    }
    if (tmp_cond_truth_305 == 1)
    {
        goto condexpr_true_216;
    }
    else
    {
        goto condexpr_false_216;
    }
    condexpr_true_216:;
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_result = tmp_and_81__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_81__value_2 );
        tmp_and_81__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_compexpr_left_296 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_296 == NULL ))
    {
        tmp_compexpr_left_296 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_296 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 623;
        goto try_finally_handler_656;
    }

    tmp_compexpr_right_296 = const_int_pos_1;
    tmp_assign_source_531 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_296, tmp_compexpr_right_296 );
    if ( tmp_assign_source_531 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_656;
    }
    {
        PyObject *old = tmp_and_81__value_1;
        tmp_and_81__value_1 = tmp_assign_source_531;
        Py_XDECREF( old );
    }

    tmp_cond_value_306 = tmp_and_81__value_1;

    tmp_cond_truth_306 = CHECK_IF_TRUE( tmp_cond_value_306 );
    if ( tmp_cond_truth_306 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_656;
    }
    if (tmp_cond_truth_306 == 1)
    {
        goto condexpr_true_217;
    }
    else
    {
        goto condexpr_false_217;
    }
    condexpr_true_217:;
    tmp_cond_value_303 = NULL;
    // Tried code
    tmp_result = tmp_and_81__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_81__value_1 );
        tmp_and_81__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_297 = const_str_plain_underground_door;
    tmp_compexpr_right_297 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_297 == NULL ))
    {
        tmp_compexpr_right_297 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_297 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 623;
        goto try_finally_handler_657;
    }

    tmp_cond_value_303 = SEQUENCE_CONTAINS( tmp_compexpr_left_297, tmp_compexpr_right_297 );
    if ( tmp_cond_value_303 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_657;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_657:;
    exception_keeper_type_588 = exception_type;
    exception_keeper_value_588 = exception_value;
    exception_keeper_tb_588 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_588 != NULL )
    {
        exception_type = exception_keeper_type_588;
        exception_value = exception_keeper_value_588;
        exception_tb = exception_keeper_tb_588;

        goto try_finally_handler_656;
    }

    goto finally_end_588;
    finally_end_588:;
    goto condexpr_end_217;
    condexpr_false_217:;
    tmp_cond_value_303 = tmp_and_81__value_1;

    condexpr_end_217:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_656:;
    exception_keeper_type_589 = exception_type;
    exception_keeper_value_589 = exception_value;
    exception_keeper_tb_589 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_589 != NULL )
    {
        exception_type = exception_keeper_type_589;
        exception_value = exception_keeper_value_589;
        exception_tb = exception_keeper_tb_589;

        goto try_finally_handler_655;
    }

    goto finally_end_589;
    finally_end_589:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_655:;
    exception_keeper_type_590 = exception_type;
    exception_keeper_value_590 = exception_value;
    exception_keeper_tb_590 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_590 != NULL )
    {
        exception_type = exception_keeper_type_590;
        exception_value = exception_keeper_value_590;
        exception_tb = exception_keeper_tb_590;

        goto try_finally_handler_654;
    }

    goto finally_end_590;
    finally_end_590:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_654:;
    exception_keeper_type_591 = exception_type;
    exception_keeper_value_591 = exception_value;
    exception_keeper_tb_591 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_162 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_81__value_1 );
    tmp_and_81__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_162;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_591 != NULL )
    {
        exception_type = exception_keeper_type_591;
        exception_value = exception_keeper_value_591;
        exception_tb = exception_keeper_tb_591;

        goto try_finally_handler_653;
    }

    goto finally_end_591;
    finally_end_591:;
    goto condexpr_end_216;
    condexpr_false_216:;
    tmp_cond_value_303 = tmp_and_81__value_2;

    condexpr_end_216:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_653:;
    exception_keeper_type_592 = exception_type;
    exception_keeper_value_592 = exception_value;
    exception_keeper_tb_592 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_592 != NULL )
    {
        exception_type = exception_keeper_type_592;
        exception_value = exception_keeper_value_592;
        exception_tb = exception_keeper_tb_592;

        goto try_finally_handler_652;
    }

    goto finally_end_592;
    finally_end_592:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_652:;
    exception_keeper_type_593 = exception_type;
    exception_keeper_value_593 = exception_value;
    exception_keeper_tb_593 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_593 != NULL )
    {
        exception_type = exception_keeper_type_593;
        exception_value = exception_keeper_value_593;
        exception_tb = exception_keeper_tb_593;

        goto try_finally_handler_651;
    }

    goto finally_end_593;
    finally_end_593:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_651:;
    exception_keeper_type_594 = exception_type;
    exception_keeper_value_594 = exception_value;
    exception_keeper_tb_594 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_163 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_81__value_2 );
    tmp_and_81__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_163;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_594 != NULL )
    {
        exception_type = exception_keeper_type_594;
        exception_value = exception_keeper_value_594;
        exception_tb = exception_keeper_tb_594;

        goto try_finally_handler_650;
    }

    goto finally_end_594;
    finally_end_594:;
    goto condexpr_end_215;
    condexpr_false_215:;
    tmp_cond_value_303 = tmp_and_81__value_3;

    condexpr_end_215:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_650:;
    exception_keeper_type_595 = exception_type;
    exception_keeper_value_595 = exception_value;
    exception_keeper_tb_595 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_595 != NULL )
    {
        exception_type = exception_keeper_type_595;
        exception_value = exception_keeper_value_595;
        exception_tb = exception_keeper_tb_595;

        goto try_finally_handler_649;
    }

    goto finally_end_595;
    finally_end_595:;
    tmp_cond_truth_303 = CHECK_IF_TRUE( tmp_cond_value_303 );
    if ( tmp_cond_truth_303 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 623;
        goto try_finally_handler_649;
    }
    if (tmp_cond_truth_303 == 1)
    {
        goto branch_yes_128;
    }
    else
    {
        goto branch_no_128;
    }
    branch_yes_128:;
    tmp_assign_source_532 = const_str_digest_ad0af8501c28ca625dfa3ecff90825e5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_532 );
    tmp_str_arg_103 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_103 == NULL ))
    {
        tmp_str_arg_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_103 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 625;
        goto try_finally_handler_649;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_103 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 625;
        goto try_finally_handler_649;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 625;
        goto try_finally_handler_649;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 625;
        goto try_finally_handler_649;
    }
    goto branch_end_128;
    branch_no_128:;
    // Tried code
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_compexpr_left_298 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_298 == NULL ))
    {
        tmp_compexpr_left_298 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_298 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 626;
        goto try_finally_handler_659;
    }

    tmp_compexpr_right_298 = const_int_pos_3;
    tmp_assign_source_533 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_298, tmp_compexpr_right_298 );
    if ( tmp_assign_source_533 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_659;
    }
    {
        PyObject *old = tmp_and_82__value_3;
        tmp_and_82__value_3 = tmp_assign_source_533;
        Py_XDECREF( old );
    }

    tmp_cond_value_308 = tmp_and_82__value_3;

    tmp_cond_truth_308 = CHECK_IF_TRUE( tmp_cond_value_308 );
    if ( tmp_cond_truth_308 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_659;
    }
    if (tmp_cond_truth_308 == 1)
    {
        goto condexpr_true_218;
    }
    else
    {
        goto condexpr_false_218;
    }
    condexpr_true_218:;
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_result = tmp_and_82__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_82__value_3 );
        tmp_and_82__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_compexpr_left_299 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_299 == NULL ))
    {
        tmp_compexpr_left_299 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_299 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 626;
        goto try_finally_handler_662;
    }

    tmp_compexpr_right_299 = const_int_pos_13;
    tmp_assign_source_534 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_299, tmp_compexpr_right_299 );
    if ( tmp_assign_source_534 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_662;
    }
    {
        PyObject *old = tmp_and_82__value_2;
        tmp_and_82__value_2 = tmp_assign_source_534;
        Py_XDECREF( old );
    }

    tmp_cond_value_309 = tmp_and_82__value_2;

    tmp_cond_truth_309 = CHECK_IF_TRUE( tmp_cond_value_309 );
    if ( tmp_cond_truth_309 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_662;
    }
    if (tmp_cond_truth_309 == 1)
    {
        goto condexpr_true_219;
    }
    else
    {
        goto condexpr_false_219;
    }
    condexpr_true_219:;
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_result = tmp_and_82__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_82__value_2 );
        tmp_and_82__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_compexpr_left_300 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_300 == NULL ))
    {
        tmp_compexpr_left_300 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_300 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 626;
        goto try_finally_handler_665;
    }

    tmp_compexpr_right_300 = const_int_pos_1;
    tmp_assign_source_535 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_300, tmp_compexpr_right_300 );
    if ( tmp_assign_source_535 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_665;
    }
    {
        PyObject *old = tmp_and_82__value_1;
        tmp_and_82__value_1 = tmp_assign_source_535;
        Py_XDECREF( old );
    }

    tmp_cond_value_310 = tmp_and_82__value_1;

    tmp_cond_truth_310 = CHECK_IF_TRUE( tmp_cond_value_310 );
    if ( tmp_cond_truth_310 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_665;
    }
    if (tmp_cond_truth_310 == 1)
    {
        goto condexpr_true_220;
    }
    else
    {
        goto condexpr_false_220;
    }
    condexpr_true_220:;
    tmp_cond_value_307 = NULL;
    // Tried code
    tmp_result = tmp_and_82__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_82__value_1 );
        tmp_and_82__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_301 = const_str_plain_underground_door;
    tmp_compexpr_right_301 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_triggers );

    if (unlikely( tmp_compexpr_right_301 == NULL ))
    {
        tmp_compexpr_right_301 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_triggers );
    }

    if ( tmp_compexpr_right_301 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 623 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 626;
        goto try_finally_handler_666;
    }

    tmp_cond_value_307 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_301, tmp_compexpr_right_301 );
    if ( tmp_cond_value_307 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_666;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_666:;
    exception_keeper_type_596 = exception_type;
    exception_keeper_value_596 = exception_value;
    exception_keeper_tb_596 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_596 != NULL )
    {
        exception_type = exception_keeper_type_596;
        exception_value = exception_keeper_value_596;
        exception_tb = exception_keeper_tb_596;

        goto try_finally_handler_665;
    }

    goto finally_end_596;
    finally_end_596:;
    goto condexpr_end_220;
    condexpr_false_220:;
    tmp_cond_value_307 = tmp_and_82__value_1;

    condexpr_end_220:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_665:;
    exception_keeper_type_597 = exception_type;
    exception_keeper_value_597 = exception_value;
    exception_keeper_tb_597 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_597 != NULL )
    {
        exception_type = exception_keeper_type_597;
        exception_value = exception_keeper_value_597;
        exception_tb = exception_keeper_tb_597;

        goto try_finally_handler_664;
    }

    goto finally_end_597;
    finally_end_597:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_664:;
    exception_keeper_type_598 = exception_type;
    exception_keeper_value_598 = exception_value;
    exception_keeper_tb_598 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_598 != NULL )
    {
        exception_type = exception_keeper_type_598;
        exception_value = exception_keeper_value_598;
        exception_tb = exception_keeper_tb_598;

        goto try_finally_handler_663;
    }

    goto finally_end_598;
    finally_end_598:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_663:;
    exception_keeper_type_599 = exception_type;
    exception_keeper_value_599 = exception_value;
    exception_keeper_tb_599 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_164 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_82__value_1 );
    tmp_and_82__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_164;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_599 != NULL )
    {
        exception_type = exception_keeper_type_599;
        exception_value = exception_keeper_value_599;
        exception_tb = exception_keeper_tb_599;

        goto try_finally_handler_662;
    }

    goto finally_end_599;
    finally_end_599:;
    goto condexpr_end_219;
    condexpr_false_219:;
    tmp_cond_value_307 = tmp_and_82__value_2;

    condexpr_end_219:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_662:;
    exception_keeper_type_600 = exception_type;
    exception_keeper_value_600 = exception_value;
    exception_keeper_tb_600 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_600 != NULL )
    {
        exception_type = exception_keeper_type_600;
        exception_value = exception_keeper_value_600;
        exception_tb = exception_keeper_tb_600;

        goto try_finally_handler_661;
    }

    goto finally_end_600;
    finally_end_600:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_661:;
    exception_keeper_type_601 = exception_type;
    exception_keeper_value_601 = exception_value;
    exception_keeper_tb_601 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_601 != NULL )
    {
        exception_type = exception_keeper_type_601;
        exception_value = exception_keeper_value_601;
        exception_tb = exception_keeper_tb_601;

        goto try_finally_handler_660;
    }

    goto finally_end_601;
    finally_end_601:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_660:;
    exception_keeper_type_602 = exception_type;
    exception_keeper_value_602 = exception_value;
    exception_keeper_tb_602 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_165 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_82__value_2 );
    tmp_and_82__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_165;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_602 != NULL )
    {
        exception_type = exception_keeper_type_602;
        exception_value = exception_keeper_value_602;
        exception_tb = exception_keeper_tb_602;

        goto try_finally_handler_659;
    }

    goto finally_end_602;
    finally_end_602:;
    goto condexpr_end_218;
    condexpr_false_218:;
    tmp_cond_value_307 = tmp_and_82__value_3;

    condexpr_end_218:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_659:;
    exception_keeper_type_603 = exception_type;
    exception_keeper_value_603 = exception_value;
    exception_keeper_tb_603 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_603 != NULL )
    {
        exception_type = exception_keeper_type_603;
        exception_value = exception_keeper_value_603;
        exception_tb = exception_keeper_tb_603;

        goto try_finally_handler_658;
    }

    goto finally_end_603;
    finally_end_603:;
    tmp_cond_truth_307 = CHECK_IF_TRUE( tmp_cond_value_307 );
    if ( tmp_cond_truth_307 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 626;
        goto try_finally_handler_658;
    }
    if (tmp_cond_truth_307 == 1)
    {
        goto branch_yes_129;
    }
    else
    {
        goto branch_no_129;
    }
    branch_yes_129:;
    tmp_left_name_103 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_left_name_103 == NULL ))
    {
        tmp_left_name_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_left_name_103 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 627;
        goto try_finally_handler_658;
    }

    tmp_right_name_103 = const_int_pos_1;
    tmp_assign_source_536 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_103, tmp_right_name_103 );
    if ( tmp_assign_source_536 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 627;
        goto try_finally_handler_658;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_536 );
    goto branch_end_129;
    branch_no_129:;
    // Tried code
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_compexpr_left_302 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_302 == NULL ))
    {
        tmp_compexpr_left_302 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_302 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 628;
        goto try_finally_handler_668;
    }

    tmp_compexpr_right_302 = const_int_pos_3;
    tmp_assign_source_537 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_302, tmp_compexpr_right_302 );
    if ( tmp_assign_source_537 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_668;
    }
    {
        PyObject *old = tmp_and_83__value_4;
        tmp_and_83__value_4 = tmp_assign_source_537;
        Py_XDECREF( old );
    }

    tmp_cond_value_312 = tmp_and_83__value_4;

    tmp_cond_truth_312 = CHECK_IF_TRUE( tmp_cond_value_312 );
    if ( tmp_cond_truth_312 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_668;
    }
    if (tmp_cond_truth_312 == 1)
    {
        goto condexpr_true_221;
    }
    else
    {
        goto condexpr_false_221;
    }
    condexpr_true_221:;
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_result = tmp_and_83__value_4 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_83__value_4 );
        tmp_and_83__value_4 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_compexpr_left_303 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_303 == NULL ))
    {
        tmp_compexpr_left_303 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_303 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 628;
        goto try_finally_handler_671;
    }

    tmp_compexpr_right_303 = const_int_pos_13;
    tmp_assign_source_538 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_303, tmp_compexpr_right_303 );
    if ( tmp_assign_source_538 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_671;
    }
    {
        PyObject *old = tmp_and_83__value_3;
        tmp_and_83__value_3 = tmp_assign_source_538;
        Py_XDECREF( old );
    }

    tmp_cond_value_313 = tmp_and_83__value_3;

    tmp_cond_truth_313 = CHECK_IF_TRUE( tmp_cond_value_313 );
    if ( tmp_cond_truth_313 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_671;
    }
    if (tmp_cond_truth_313 == 1)
    {
        goto condexpr_true_222;
    }
    else
    {
        goto condexpr_false_222;
    }
    condexpr_true_222:;
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_result = tmp_and_83__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_83__value_3 );
        tmp_and_83__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_compexpr_left_304 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_304 == NULL ))
    {
        tmp_compexpr_left_304 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_304 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 628;
        goto try_finally_handler_674;
    }

    tmp_compexpr_right_304 = const_int_pos_1;
    tmp_assign_source_539 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_304, tmp_compexpr_right_304 );
    if ( tmp_assign_source_539 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_674;
    }
    {
        PyObject *old = tmp_and_83__value_2;
        tmp_and_83__value_2 = tmp_assign_source_539;
        Py_XDECREF( old );
    }

    tmp_cond_value_314 = tmp_and_83__value_2;

    tmp_cond_truth_314 = CHECK_IF_TRUE( tmp_cond_value_314 );
    if ( tmp_cond_truth_314 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_674;
    }
    if (tmp_cond_truth_314 == 1)
    {
        goto condexpr_true_223;
    }
    else
    {
        goto condexpr_false_223;
    }
    condexpr_true_223:;
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_result = tmp_and_83__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_83__value_2 );
        tmp_and_83__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_compexpr_left_305 = const_str_digest_62e0e143b9e2a50d815df0a5c6a7df84;
    tmp_compexpr_right_305 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_305 == NULL ))
    {
        tmp_compexpr_right_305 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_305 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 628;
        goto try_finally_handler_677;
    }

    tmp_assign_source_540 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_305, tmp_compexpr_right_305 );
    if ( tmp_assign_source_540 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_677;
    }
    {
        PyObject *old = tmp_and_83__value_1;
        tmp_and_83__value_1 = tmp_assign_source_540;
        Py_INCREF( tmp_and_83__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_315 = tmp_and_83__value_1;

    tmp_cond_truth_315 = CHECK_IF_TRUE( tmp_cond_value_315 );
    if ( tmp_cond_truth_315 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_677;
    }
    if (tmp_cond_truth_315 == 1)
    {
        goto condexpr_true_224;
    }
    else
    {
        goto condexpr_false_224;
    }
    condexpr_true_224:;
    tmp_cond_value_311 = NULL;
    // Tried code
    tmp_result = tmp_and_83__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_83__value_1 );
        tmp_and_83__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_306 = const_str_plain_firebolt;
    tmp_compexpr_right_306 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_306 == NULL ))
    {
        tmp_compexpr_right_306 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_306 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 628;
        goto try_finally_handler_678;
    }

    tmp_cond_value_311 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_306, tmp_compexpr_right_306 );
    if ( tmp_cond_value_311 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_678;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_678:;
    exception_keeper_type_604 = exception_type;
    exception_keeper_value_604 = exception_value;
    exception_keeper_tb_604 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_604 != NULL )
    {
        exception_type = exception_keeper_type_604;
        exception_value = exception_keeper_value_604;
        exception_tb = exception_keeper_tb_604;

        goto try_finally_handler_677;
    }

    goto finally_end_604;
    finally_end_604:;
    goto condexpr_end_224;
    condexpr_false_224:;
    tmp_cond_value_311 = tmp_and_83__value_1;

    condexpr_end_224:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_677:;
    exception_keeper_type_605 = exception_type;
    exception_keeper_value_605 = exception_value;
    exception_keeper_tb_605 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_605 != NULL )
    {
        exception_type = exception_keeper_type_605;
        exception_value = exception_keeper_value_605;
        exception_tb = exception_keeper_tb_605;

        goto try_finally_handler_676;
    }

    goto finally_end_605;
    finally_end_605:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_676:;
    exception_keeper_type_606 = exception_type;
    exception_keeper_value_606 = exception_value;
    exception_keeper_tb_606 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_606 != NULL )
    {
        exception_type = exception_keeper_type_606;
        exception_value = exception_keeper_value_606;
        exception_tb = exception_keeper_tb_606;

        goto try_finally_handler_675;
    }

    goto finally_end_606;
    finally_end_606:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_675:;
    exception_keeper_type_607 = exception_type;
    exception_keeper_value_607 = exception_value;
    exception_keeper_tb_607 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_166 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_83__value_1 );
    tmp_and_83__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_166;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_607 != NULL )
    {
        exception_type = exception_keeper_type_607;
        exception_value = exception_keeper_value_607;
        exception_tb = exception_keeper_tb_607;

        goto try_finally_handler_674;
    }

    goto finally_end_607;
    finally_end_607:;
    goto condexpr_end_223;
    condexpr_false_223:;
    tmp_cond_value_311 = tmp_and_83__value_2;

    condexpr_end_223:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_674:;
    exception_keeper_type_608 = exception_type;
    exception_keeper_value_608 = exception_value;
    exception_keeper_tb_608 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_608 != NULL )
    {
        exception_type = exception_keeper_type_608;
        exception_value = exception_keeper_value_608;
        exception_tb = exception_keeper_tb_608;

        goto try_finally_handler_673;
    }

    goto finally_end_608;
    finally_end_608:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_673:;
    exception_keeper_type_609 = exception_type;
    exception_keeper_value_609 = exception_value;
    exception_keeper_tb_609 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_609 != NULL )
    {
        exception_type = exception_keeper_type_609;
        exception_value = exception_keeper_value_609;
        exception_tb = exception_keeper_tb_609;

        goto try_finally_handler_672;
    }

    goto finally_end_609;
    finally_end_609:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_672:;
    exception_keeper_type_610 = exception_type;
    exception_keeper_value_610 = exception_value;
    exception_keeper_tb_610 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_167 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_83__value_2 );
    tmp_and_83__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_167;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_610 != NULL )
    {
        exception_type = exception_keeper_type_610;
        exception_value = exception_keeper_value_610;
        exception_tb = exception_keeper_tb_610;

        goto try_finally_handler_671;
    }

    goto finally_end_610;
    finally_end_610:;
    goto condexpr_end_222;
    condexpr_false_222:;
    tmp_cond_value_311 = tmp_and_83__value_3;

    condexpr_end_222:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_671:;
    exception_keeper_type_611 = exception_type;
    exception_keeper_value_611 = exception_value;
    exception_keeper_tb_611 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_611 != NULL )
    {
        exception_type = exception_keeper_type_611;
        exception_value = exception_keeper_value_611;
        exception_tb = exception_keeper_tb_611;

        goto try_finally_handler_670;
    }

    goto finally_end_611;
    finally_end_611:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_670:;
    exception_keeper_type_612 = exception_type;
    exception_keeper_value_612 = exception_value;
    exception_keeper_tb_612 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_612 != NULL )
    {
        exception_type = exception_keeper_type_612;
        exception_value = exception_keeper_value_612;
        exception_tb = exception_keeper_tb_612;

        goto try_finally_handler_669;
    }

    goto finally_end_612;
    finally_end_612:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_669:;
    exception_keeper_type_613 = exception_type;
    exception_keeper_value_613 = exception_value;
    exception_keeper_tb_613 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_168 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_83__value_3 );
    tmp_and_83__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_168;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_613 != NULL )
    {
        exception_type = exception_keeper_type_613;
        exception_value = exception_keeper_value_613;
        exception_tb = exception_keeper_tb_613;

        goto try_finally_handler_668;
    }

    goto finally_end_613;
    finally_end_613:;
    goto condexpr_end_221;
    condexpr_false_221:;
    tmp_cond_value_311 = tmp_and_83__value_4;

    condexpr_end_221:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_668:;
    exception_keeper_type_614 = exception_type;
    exception_keeper_value_614 = exception_value;
    exception_keeper_tb_614 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_614 != NULL )
    {
        exception_type = exception_keeper_type_614;
        exception_value = exception_keeper_value_614;
        exception_tb = exception_keeper_tb_614;

        goto try_finally_handler_667;
    }

    goto finally_end_614;
    finally_end_614:;
    tmp_cond_truth_311 = CHECK_IF_TRUE( tmp_cond_value_311 );
    if ( tmp_cond_truth_311 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 628;
        goto try_finally_handler_667;
    }
    if (tmp_cond_truth_311 == 1)
    {
        goto branch_yes_130;
    }
    else
    {
        goto branch_no_130;
    }
    branch_yes_130:;
    tmp_assign_source_541 = const_str_digest_a9a955143cd935b2a05c6c23a8d35eea;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_541 );
    tmp_str_arg_104 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_104 == NULL ))
    {
        tmp_str_arg_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_104 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 630;
        goto try_finally_handler_667;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_104 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 630;
        goto try_finally_handler_667;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 630;
        goto try_finally_handler_667;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 630;
        goto try_finally_handler_667;
    }
    goto branch_end_130;
    branch_no_130:;
    // Tried code
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_compexpr_left_307 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_307 == NULL ))
    {
        tmp_compexpr_left_307 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_307 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 631;
        goto try_finally_handler_680;
    }

    tmp_compexpr_right_307 = const_int_pos_3;
    tmp_assign_source_542 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_307, tmp_compexpr_right_307 );
    if ( tmp_assign_source_542 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_680;
    }
    {
        PyObject *old = tmp_and_84__value_3;
        tmp_and_84__value_3 = tmp_assign_source_542;
        Py_XDECREF( old );
    }

    tmp_cond_value_317 = tmp_and_84__value_3;

    tmp_cond_truth_317 = CHECK_IF_TRUE( tmp_cond_value_317 );
    if ( tmp_cond_truth_317 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_680;
    }
    if (tmp_cond_truth_317 == 1)
    {
        goto condexpr_true_225;
    }
    else
    {
        goto condexpr_false_225;
    }
    condexpr_true_225:;
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_result = tmp_and_84__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_84__value_3 );
        tmp_and_84__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_compexpr_left_308 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_308 == NULL ))
    {
        tmp_compexpr_left_308 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_308 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 631;
        goto try_finally_handler_683;
    }

    tmp_compexpr_right_308 = const_int_pos_13;
    tmp_assign_source_543 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_308, tmp_compexpr_right_308 );
    if ( tmp_assign_source_543 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_683;
    }
    {
        PyObject *old = tmp_and_84__value_2;
        tmp_and_84__value_2 = tmp_assign_source_543;
        Py_XDECREF( old );
    }

    tmp_cond_value_318 = tmp_and_84__value_2;

    tmp_cond_truth_318 = CHECK_IF_TRUE( tmp_cond_value_318 );
    if ( tmp_cond_truth_318 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_683;
    }
    if (tmp_cond_truth_318 == 1)
    {
        goto condexpr_true_226;
    }
    else
    {
        goto condexpr_false_226;
    }
    condexpr_true_226:;
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_result = tmp_and_84__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_84__value_2 );
        tmp_and_84__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_compexpr_left_309 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_309 == NULL ))
    {
        tmp_compexpr_left_309 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_309 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 631;
        goto try_finally_handler_686;
    }

    tmp_compexpr_right_309 = const_int_pos_1;
    tmp_assign_source_544 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_309, tmp_compexpr_right_309 );
    if ( tmp_assign_source_544 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_686;
    }
    {
        PyObject *old = tmp_and_84__value_1;
        tmp_and_84__value_1 = tmp_assign_source_544;
        Py_XDECREF( old );
    }

    tmp_cond_value_319 = tmp_and_84__value_1;

    tmp_cond_truth_319 = CHECK_IF_TRUE( tmp_cond_value_319 );
    if ( tmp_cond_truth_319 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_686;
    }
    if (tmp_cond_truth_319 == 1)
    {
        goto condexpr_true_227;
    }
    else
    {
        goto condexpr_false_227;
    }
    condexpr_true_227:;
    tmp_cond_value_316 = NULL;
    // Tried code
    tmp_result = tmp_and_84__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_84__value_1 );
        tmp_and_84__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_310 = const_str_digest_62e0e143b9e2a50d815df0a5c6a7df84;
    tmp_compexpr_right_310 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_inventory );

    if (unlikely( tmp_compexpr_right_310 == NULL ))
    {
        tmp_compexpr_right_310 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_inventory );
    }

    if ( tmp_compexpr_right_310 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 653 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 631;
        goto try_finally_handler_687;
    }

    tmp_cond_value_316 = SEQUENCE_CONTAINS( tmp_compexpr_left_310, tmp_compexpr_right_310 );
    if ( tmp_cond_value_316 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_687;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_687:;
    exception_keeper_type_615 = exception_type;
    exception_keeper_value_615 = exception_value;
    exception_keeper_tb_615 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_615 != NULL )
    {
        exception_type = exception_keeper_type_615;
        exception_value = exception_keeper_value_615;
        exception_tb = exception_keeper_tb_615;

        goto try_finally_handler_686;
    }

    goto finally_end_615;
    finally_end_615:;
    goto condexpr_end_227;
    condexpr_false_227:;
    tmp_cond_value_316 = tmp_and_84__value_1;

    condexpr_end_227:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_686:;
    exception_keeper_type_616 = exception_type;
    exception_keeper_value_616 = exception_value;
    exception_keeper_tb_616 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_616 != NULL )
    {
        exception_type = exception_keeper_type_616;
        exception_value = exception_keeper_value_616;
        exception_tb = exception_keeper_tb_616;

        goto try_finally_handler_685;
    }

    goto finally_end_616;
    finally_end_616:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_685:;
    exception_keeper_type_617 = exception_type;
    exception_keeper_value_617 = exception_value;
    exception_keeper_tb_617 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_617 != NULL )
    {
        exception_type = exception_keeper_type_617;
        exception_value = exception_keeper_value_617;
        exception_tb = exception_keeper_tb_617;

        goto try_finally_handler_684;
    }

    goto finally_end_617;
    finally_end_617:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_684:;
    exception_keeper_type_618 = exception_type;
    exception_keeper_value_618 = exception_value;
    exception_keeper_tb_618 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_169 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_84__value_1 );
    tmp_and_84__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_169;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_618 != NULL )
    {
        exception_type = exception_keeper_type_618;
        exception_value = exception_keeper_value_618;
        exception_tb = exception_keeper_tb_618;

        goto try_finally_handler_683;
    }

    goto finally_end_618;
    finally_end_618:;
    goto condexpr_end_226;
    condexpr_false_226:;
    tmp_cond_value_316 = tmp_and_84__value_2;

    condexpr_end_226:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_683:;
    exception_keeper_type_619 = exception_type;
    exception_keeper_value_619 = exception_value;
    exception_keeper_tb_619 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_619 != NULL )
    {
        exception_type = exception_keeper_type_619;
        exception_value = exception_keeper_value_619;
        exception_tb = exception_keeper_tb_619;

        goto try_finally_handler_682;
    }

    goto finally_end_619;
    finally_end_619:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_682:;
    exception_keeper_type_620 = exception_type;
    exception_keeper_value_620 = exception_value;
    exception_keeper_tb_620 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_620 != NULL )
    {
        exception_type = exception_keeper_type_620;
        exception_value = exception_keeper_value_620;
        exception_tb = exception_keeper_tb_620;

        goto try_finally_handler_681;
    }

    goto finally_end_620;
    finally_end_620:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_681:;
    exception_keeper_type_621 = exception_type;
    exception_keeper_value_621 = exception_value;
    exception_keeper_tb_621 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_170 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_84__value_2 );
    tmp_and_84__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_170;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_621 != NULL )
    {
        exception_type = exception_keeper_type_621;
        exception_value = exception_keeper_value_621;
        exception_tb = exception_keeper_tb_621;

        goto try_finally_handler_680;
    }

    goto finally_end_621;
    finally_end_621:;
    goto condexpr_end_225;
    condexpr_false_225:;
    tmp_cond_value_316 = tmp_and_84__value_3;

    condexpr_end_225:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_680:;
    exception_keeper_type_622 = exception_type;
    exception_keeper_value_622 = exception_value;
    exception_keeper_tb_622 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_622 != NULL )
    {
        exception_type = exception_keeper_type_622;
        exception_value = exception_keeper_value_622;
        exception_tb = exception_keeper_tb_622;

        goto try_finally_handler_679;
    }

    goto finally_end_622;
    finally_end_622:;
    tmp_cond_truth_316 = CHECK_IF_TRUE( tmp_cond_value_316 );
    if ( tmp_cond_truth_316 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 631;
        goto try_finally_handler_679;
    }
    if (tmp_cond_truth_316 == 1)
    {
        goto branch_yes_131;
    }
    else
    {
        goto branch_no_131;
    }
    branch_yes_131:;
    tmp_assign_source_545 = const_str_digest_8f9b4420dd840faad38bba6ca2cb1490;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_545 );
    tmp_str_arg_105 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_105 == NULL ))
    {
        tmp_str_arg_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_105 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 633;
        goto try_finally_handler_679;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_105 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 633;
        goto try_finally_handler_679;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 633;
        goto try_finally_handler_679;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 633;
        goto try_finally_handler_679;
    }
    goto branch_end_131;
    branch_no_131:;
    // Tried code
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_compexpr_left_311 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_compexpr_left_311 == NULL ))
    {
        tmp_compexpr_left_311 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_compexpr_left_311 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 634;
        goto try_finally_handler_689;
    }

    tmp_compexpr_right_311 = const_int_pos_3;
    tmp_assign_source_546 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_311, tmp_compexpr_right_311 );
    if ( tmp_assign_source_546 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_689;
    }
    {
        PyObject *old = tmp_and_85__value_3;
        tmp_and_85__value_3 = tmp_assign_source_546;
        Py_XDECREF( old );
    }

    tmp_cond_value_321 = tmp_and_85__value_3;

    tmp_cond_truth_321 = CHECK_IF_TRUE( tmp_cond_value_321 );
    if ( tmp_cond_truth_321 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_689;
    }
    if (tmp_cond_truth_321 == 1)
    {
        goto condexpr_true_228;
    }
    else
    {
        goto condexpr_false_228;
    }
    condexpr_true_228:;
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_result = tmp_and_85__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_85__value_3 );
        tmp_and_85__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_compexpr_left_312 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_compexpr_left_312 == NULL ))
    {
        tmp_compexpr_left_312 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_compexpr_left_312 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 634;
        goto try_finally_handler_692;
    }

    tmp_compexpr_right_312 = const_int_pos_13;
    tmp_assign_source_547 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_312, tmp_compexpr_right_312 );
    if ( tmp_assign_source_547 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_692;
    }
    {
        PyObject *old = tmp_and_85__value_2;
        tmp_and_85__value_2 = tmp_assign_source_547;
        Py_XDECREF( old );
    }

    tmp_cond_value_322 = tmp_and_85__value_2;

    tmp_cond_truth_322 = CHECK_IF_TRUE( tmp_cond_value_322 );
    if ( tmp_cond_truth_322 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_692;
    }
    if (tmp_cond_truth_322 == 1)
    {
        goto condexpr_true_229;
    }
    else
    {
        goto condexpr_false_229;
    }
    condexpr_true_229:;
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_result = tmp_and_85__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_85__value_2 );
        tmp_and_85__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_compexpr_left_313 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_compexpr_left_313 == NULL ))
    {
        tmp_compexpr_left_313 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_compexpr_left_313 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 634;
        goto try_finally_handler_695;
    }

    tmp_compexpr_right_313 = const_int_pos_1;
    tmp_assign_source_548 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_313, tmp_compexpr_right_313 );
    if ( tmp_assign_source_548 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_695;
    }
    {
        PyObject *old = tmp_and_85__value_1;
        tmp_and_85__value_1 = tmp_assign_source_548;
        Py_XDECREF( old );
    }

    tmp_cond_value_323 = tmp_and_85__value_1;

    tmp_cond_truth_323 = CHECK_IF_TRUE( tmp_cond_value_323 );
    if ( tmp_cond_truth_323 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_695;
    }
    if (tmp_cond_truth_323 == 1)
    {
        goto condexpr_true_230;
    }
    else
    {
        goto condexpr_false_230;
    }
    condexpr_true_230:;
    tmp_cond_value_320 = NULL;
    // Tried code
    tmp_result = tmp_and_85__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_85__value_1 );
        tmp_and_85__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_314 = const_str_plain_firebolt;
    tmp_compexpr_right_314 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_314 == NULL ))
    {
        tmp_compexpr_right_314 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_314 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 634;
        goto try_finally_handler_696;
    }

    tmp_cond_value_320 = SEQUENCE_CONTAINS( tmp_compexpr_left_314, tmp_compexpr_right_314 );
    if ( tmp_cond_value_320 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_696;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_696:;
    exception_keeper_type_623 = exception_type;
    exception_keeper_value_623 = exception_value;
    exception_keeper_tb_623 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_623 != NULL )
    {
        exception_type = exception_keeper_type_623;
        exception_value = exception_keeper_value_623;
        exception_tb = exception_keeper_tb_623;

        goto try_finally_handler_695;
    }

    goto finally_end_623;
    finally_end_623:;
    goto condexpr_end_230;
    condexpr_false_230:;
    tmp_cond_value_320 = tmp_and_85__value_1;

    condexpr_end_230:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_695:;
    exception_keeper_type_624 = exception_type;
    exception_keeper_value_624 = exception_value;
    exception_keeper_tb_624 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_624 != NULL )
    {
        exception_type = exception_keeper_type_624;
        exception_value = exception_keeper_value_624;
        exception_tb = exception_keeper_tb_624;

        goto try_finally_handler_694;
    }

    goto finally_end_624;
    finally_end_624:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_694:;
    exception_keeper_type_625 = exception_type;
    exception_keeper_value_625 = exception_value;
    exception_keeper_tb_625 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_625 != NULL )
    {
        exception_type = exception_keeper_type_625;
        exception_value = exception_keeper_value_625;
        exception_tb = exception_keeper_tb_625;

        goto try_finally_handler_693;
    }

    goto finally_end_625;
    finally_end_625:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_693:;
    exception_keeper_type_626 = exception_type;
    exception_keeper_value_626 = exception_value;
    exception_keeper_tb_626 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_171 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_85__value_1 );
    tmp_and_85__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_171;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_626 != NULL )
    {
        exception_type = exception_keeper_type_626;
        exception_value = exception_keeper_value_626;
        exception_tb = exception_keeper_tb_626;

        goto try_finally_handler_692;
    }

    goto finally_end_626;
    finally_end_626:;
    goto condexpr_end_229;
    condexpr_false_229:;
    tmp_cond_value_320 = tmp_and_85__value_2;

    condexpr_end_229:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_692:;
    exception_keeper_type_627 = exception_type;
    exception_keeper_value_627 = exception_value;
    exception_keeper_tb_627 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_627 != NULL )
    {
        exception_type = exception_keeper_type_627;
        exception_value = exception_keeper_value_627;
        exception_tb = exception_keeper_tb_627;

        goto try_finally_handler_691;
    }

    goto finally_end_627;
    finally_end_627:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_691:;
    exception_keeper_type_628 = exception_type;
    exception_keeper_value_628 = exception_value;
    exception_keeper_tb_628 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_628 != NULL )
    {
        exception_type = exception_keeper_type_628;
        exception_value = exception_keeper_value_628;
        exception_tb = exception_keeper_tb_628;

        goto try_finally_handler_690;
    }

    goto finally_end_628;
    finally_end_628:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_690:;
    exception_keeper_type_629 = exception_type;
    exception_keeper_value_629 = exception_value;
    exception_keeper_tb_629 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_172 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_85__value_2 );
    tmp_and_85__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_172;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_629 != NULL )
    {
        exception_type = exception_keeper_type_629;
        exception_value = exception_keeper_value_629;
        exception_tb = exception_keeper_tb_629;

        goto try_finally_handler_689;
    }

    goto finally_end_629;
    finally_end_629:;
    goto condexpr_end_228;
    condexpr_false_228:;
    tmp_cond_value_320 = tmp_and_85__value_3;

    condexpr_end_228:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_689:;
    exception_keeper_type_630 = exception_type;
    exception_keeper_value_630 = exception_value;
    exception_keeper_tb_630 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_630 != NULL )
    {
        exception_type = exception_keeper_type_630;
        exception_value = exception_keeper_value_630;
        exception_tb = exception_keeper_tb_630;

        goto try_finally_handler_688;
    }

    goto finally_end_630;
    finally_end_630:;
    tmp_cond_truth_320 = CHECK_IF_TRUE( tmp_cond_value_320 );
    if ( tmp_cond_truth_320 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 634;
        goto try_finally_handler_688;
    }
    if (tmp_cond_truth_320 == 1)
    {
        goto branch_yes_132;
    }
    else
    {
        goto branch_no_132;
    }
    branch_yes_132:;
    tmp_assign_source_549 = const_str_digest_8f9b4420dd840faad38bba6ca2cb1490;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo, tmp_assign_source_549 );
    tmp_str_arg_106 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_roominfo );

    if (unlikely( tmp_str_arg_106 == NULL ))
    {
        tmp_str_arg_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_roominfo );
    }

    if ( tmp_str_arg_106 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1294 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 636;
        goto try_finally_handler_688;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_106 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 636;
        goto try_finally_handler_688;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 636;
        goto try_finally_handler_688;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 636;
        goto try_finally_handler_688;
    }
    goto branch_end_132;
    branch_no_132:;
    tmp_compare_left_40 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_40 == NULL ))
    {
        tmp_compare_left_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 639;
        goto try_finally_handler_688;
    }

    tmp_compare_right_40 = const_str_plain_n;
    tmp_cmp_Eq_32 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_40, tmp_compare_right_40 );
    if ( tmp_cmp_Eq_32 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 639;
        goto try_finally_handler_688;
    }
    if (tmp_cmp_Eq_32 == 1)
    {
        goto branch_yes_133;
    }
    else
    {
        goto branch_no_133;
    }
    branch_yes_133:;
    tmp_left_name_104 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_left_name_104 == NULL ))
    {
        tmp_left_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_left_name_104 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 640;
        goto try_finally_handler_688;
    }

    tmp_right_name_104 = const_int_pos_1;
    tmp_assign_source_550 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_104, tmp_right_name_104 );
    if ( tmp_assign_source_550 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 640;
        goto try_finally_handler_688;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_550 );
    goto branch_end_133;
    branch_no_133:;
    tmp_compare_left_41 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_41 == NULL ))
    {
        tmp_compare_left_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 641;
        goto try_finally_handler_688;
    }

    tmp_compare_right_41 = const_str_plain_s;
    tmp_cmp_Eq_33 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_41, tmp_compare_right_41 );
    if ( tmp_cmp_Eq_33 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 641;
        goto try_finally_handler_688;
    }
    if (tmp_cmp_Eq_33 == 1)
    {
        goto branch_yes_134;
    }
    else
    {
        goto branch_no_134;
    }
    branch_yes_134:;
    tmp_left_name_105 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y );

    if (unlikely( tmp_left_name_105 == NULL ))
    {
        tmp_left_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_y );
    }

    if ( tmp_left_name_105 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 400 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 642;
        goto try_finally_handler_688;
    }

    tmp_right_name_105 = const_int_pos_1;
    tmp_assign_source_551 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_105, tmp_right_name_105 );
    if ( tmp_assign_source_551 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 642;
        goto try_finally_handler_688;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_y, tmp_assign_source_551 );
    goto branch_end_134;
    branch_no_134:;
    tmp_compare_left_42 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_42 == NULL ))
    {
        tmp_compare_left_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_42 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 643;
        goto try_finally_handler_688;
    }

    tmp_compare_right_42 = const_str_plain_w;
    tmp_cmp_Eq_34 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_42, tmp_compare_right_42 );
    if ( tmp_cmp_Eq_34 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 643;
        goto try_finally_handler_688;
    }
    if (tmp_cmp_Eq_34 == 1)
    {
        goto branch_yes_135;
    }
    else
    {
        goto branch_no_135;
    }
    branch_yes_135:;
    tmp_left_name_106 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_left_name_106 == NULL ))
    {
        tmp_left_name_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_left_name_106 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 644;
        goto try_finally_handler_688;
    }

    tmp_right_name_106 = const_int_pos_1;
    tmp_assign_source_552 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_106, tmp_right_name_106 );
    if ( tmp_assign_source_552 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 644;
        goto try_finally_handler_688;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_552 );
    goto branch_end_135;
    branch_no_135:;
    tmp_compare_left_43 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_43 == NULL ))
    {
        tmp_compare_left_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 645;
        goto try_finally_handler_688;
    }

    tmp_compare_right_43 = const_str_plain_e;
    tmp_cmp_Eq_35 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_43, tmp_compare_right_43 );
    if ( tmp_cmp_Eq_35 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 645;
        goto try_finally_handler_688;
    }
    if (tmp_cmp_Eq_35 == 1)
    {
        goto branch_yes_136;
    }
    else
    {
        goto branch_no_136;
    }
    branch_yes_136:;
    tmp_left_name_107 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x );

    if (unlikely( tmp_left_name_107 == NULL ))
    {
        tmp_left_name_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_x );
    }

    if ( tmp_left_name_107 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 481 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 646;
        goto try_finally_handler_688;
    }

    tmp_right_name_107 = const_int_pos_1;
    tmp_assign_source_553 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_107, tmp_right_name_107 );
    if ( tmp_assign_source_553 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 646;
        goto try_finally_handler_688;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_x, tmp_assign_source_553 );
    goto branch_end_136;
    branch_no_136:;
    tmp_compare_left_44 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_44 == NULL ))
    {
        tmp_compare_left_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 647;
        goto try_finally_handler_688;
    }

    tmp_compare_right_44 = const_str_plain_d;
    tmp_cmp_Eq_36 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_44, tmp_compare_right_44 );
    if ( tmp_cmp_Eq_36 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 647;
        goto try_finally_handler_688;
    }
    if (tmp_cmp_Eq_36 == 1)
    {
        goto branch_yes_137;
    }
    else
    {
        goto branch_no_137;
    }
    branch_yes_137:;
    tmp_left_name_108 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_left_name_108 == NULL ))
    {
        tmp_left_name_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_left_name_108 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 648;
        goto try_finally_handler_688;
    }

    tmp_right_name_108 = const_int_pos_1;
    tmp_assign_source_554 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_108, tmp_right_name_108 );
    if ( tmp_assign_source_554 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 648;
        goto try_finally_handler_688;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_554 );
    goto branch_end_137;
    branch_no_137:;
    tmp_compare_left_45 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_compare_left_45 == NULL ))
    {
        tmp_compare_left_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_compare_left_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 649;
        goto try_finally_handler_688;
    }

    tmp_compare_right_45 = const_str_plain_u;
    tmp_cmp_Eq_37 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_45, tmp_compare_right_45 );
    if ( tmp_cmp_Eq_37 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 649;
        goto try_finally_handler_688;
    }
    if (tmp_cmp_Eq_37 == 1)
    {
        goto branch_yes_138;
    }
    else
    {
        goto branch_no_138;
    }
    branch_yes_138:;
    tmp_left_name_109 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z );

    if (unlikely( tmp_left_name_109 == NULL ))
    {
        tmp_left_name_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_z );
    }

    if ( tmp_left_name_109 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 533 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 650;
        goto try_finally_handler_688;
    }

    tmp_right_name_109 = const_int_pos_1;
    tmp_assign_source_555 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_109, tmp_right_name_109 );
    if ( tmp_assign_source_555 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 650;
        goto try_finally_handler_688;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_z, tmp_assign_source_555 );
    branch_no_138:;
    branch_end_137:;
    branch_end_136:;
    branch_end_135:;
    branch_end_134:;
    branch_end_133:;
    branch_end_132:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_688:;
    exception_keeper_type_631 = exception_type;
    exception_keeper_value_631 = exception_value;
    exception_keeper_tb_631 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_173 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_85__value_3 );
    tmp_and_85__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_173;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_631 != NULL )
    {
        exception_type = exception_keeper_type_631;
        exception_value = exception_keeper_value_631;
        exception_tb = exception_keeper_tb_631;

        goto try_finally_handler_679;
    }

    goto finally_end_631;
    finally_end_631:;
    branch_end_131:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_679:;
    exception_keeper_type_632 = exception_type;
    exception_keeper_value_632 = exception_value;
    exception_keeper_tb_632 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_174 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_84__value_3 );
    tmp_and_84__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_174;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_632 != NULL )
    {
        exception_type = exception_keeper_type_632;
        exception_value = exception_keeper_value_632;
        exception_tb = exception_keeper_tb_632;

        goto try_finally_handler_667;
    }

    goto finally_end_632;
    finally_end_632:;
    branch_end_130:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_667:;
    exception_keeper_type_633 = exception_type;
    exception_keeper_value_633 = exception_value;
    exception_keeper_tb_633 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_175 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_83__value_4 );
    tmp_and_83__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_175;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_633 != NULL )
    {
        exception_type = exception_keeper_type_633;
        exception_value = exception_keeper_value_633;
        exception_tb = exception_keeper_tb_633;

        goto try_finally_handler_658;
    }

    goto finally_end_633;
    finally_end_633:;
    branch_end_129:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_658:;
    exception_keeper_type_634 = exception_type;
    exception_keeper_value_634 = exception_value;
    exception_keeper_tb_634 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_176 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_82__value_3 );
    tmp_and_82__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_176;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_634 != NULL )
    {
        exception_type = exception_keeper_type_634;
        exception_value = exception_keeper_value_634;
        exception_tb = exception_keeper_tb_634;

        goto try_finally_handler_649;
    }

    goto finally_end_634;
    finally_end_634:;
    branch_end_128:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_649:;
    exception_keeper_type_635 = exception_type;
    exception_keeper_value_635 = exception_value;
    exception_keeper_tb_635 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_177 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_81__value_3 );
    tmp_and_81__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_177;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_635 != NULL )
    {
        exception_type = exception_keeper_type_635;
        exception_value = exception_keeper_value_635;
        exception_tb = exception_keeper_tb_635;

        goto try_finally_handler_640;
    }

    goto finally_end_635;
    finally_end_635:;
    branch_end_127:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_640:;
    exception_keeper_type_636 = exception_type;
    exception_keeper_value_636 = exception_value;
    exception_keeper_tb_636 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_178 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_80__value_3 );
    tmp_and_80__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_178;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_636 != NULL )
    {
        exception_type = exception_keeper_type_636;
        exception_value = exception_keeper_value_636;
        exception_tb = exception_keeper_tb_636;

        goto try_finally_handler_634;
    }

    goto finally_end_636;
    finally_end_636:;
    branch_end_126:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_634:;
    exception_keeper_type_637 = exception_type;
    exception_keeper_value_637 = exception_value;
    exception_keeper_tb_637 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_179 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_79__value_2 );
    tmp_and_79__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_179;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_637 != NULL )
    {
        exception_type = exception_keeper_type_637;
        exception_value = exception_keeper_value_637;
        exception_tb = exception_keeper_tb_637;

        goto try_finally_handler_628;
    }

    goto finally_end_637;
    finally_end_637:;
    branch_end_125:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_628:;
    exception_keeper_type_638 = exception_type;
    exception_keeper_value_638 = exception_value;
    exception_keeper_tb_638 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_180 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_78__value_2 );
    tmp_and_78__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_180;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_638 != NULL )
    {
        exception_type = exception_keeper_type_638;
        exception_value = exception_keeper_value_638;
        exception_tb = exception_keeper_tb_638;

        goto try_finally_handler_622;
    }

    goto finally_end_638;
    finally_end_638:;
    branch_end_124:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_622:;
    exception_keeper_type_639 = exception_type;
    exception_keeper_value_639 = exception_value;
    exception_keeper_tb_639 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_181 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_77__value_2 );
    tmp_and_77__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_181;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_639 != NULL )
    {
        exception_type = exception_keeper_type_639;
        exception_value = exception_keeper_value_639;
        exception_tb = exception_keeper_tb_639;

        goto try_finally_handler_616;
    }

    goto finally_end_639;
    finally_end_639:;
    branch_end_123:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_616:;
    exception_keeper_type_640 = exception_type;
    exception_keeper_value_640 = exception_value;
    exception_keeper_tb_640 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_182 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_76__value_2 );
    tmp_and_76__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_182;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_640 != NULL )
    {
        exception_type = exception_keeper_type_640;
        exception_value = exception_keeper_value_640;
        exception_tb = exception_keeper_tb_640;

        goto try_finally_handler_607;
    }

    goto finally_end_640;
    finally_end_640:;
    branch_end_122:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_607:;
    exception_keeper_type_641 = exception_type;
    exception_keeper_value_641 = exception_value;
    exception_keeper_tb_641 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_183 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_75__value_3 );
    tmp_and_75__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_183;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_641 != NULL )
    {
        exception_type = exception_keeper_type_641;
        exception_value = exception_keeper_value_641;
        exception_tb = exception_keeper_tb_641;

        goto try_finally_handler_598;
    }

    goto finally_end_641;
    finally_end_641:;
    branch_end_121:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_598:;
    exception_keeper_type_642 = exception_type;
    exception_keeper_value_642 = exception_value;
    exception_keeper_tb_642 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_184 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_74__value_3 );
    tmp_and_74__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_184;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_642 != NULL )
    {
        exception_type = exception_keeper_type_642;
        exception_value = exception_keeper_value_642;
        exception_tb = exception_keeper_tb_642;

        goto try_finally_handler_592;
    }

    goto finally_end_642;
    finally_end_642:;
    branch_end_120:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_592:;
    exception_keeper_type_643 = exception_type;
    exception_keeper_value_643 = exception_value;
    exception_keeper_tb_643 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_185 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_73__value_2 );
    tmp_and_73__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_185;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_643 != NULL )
    {
        exception_type = exception_keeper_type_643;
        exception_value = exception_keeper_value_643;
        exception_tb = exception_keeper_tb_643;

        goto try_finally_handler_586;
    }

    goto finally_end_643;
    finally_end_643:;
    branch_end_119:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_586:;
    exception_keeper_type_644 = exception_type;
    exception_keeper_value_644 = exception_value;
    exception_keeper_tb_644 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_186 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_72__value_2 );
    tmp_and_72__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_186;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_644 != NULL )
    {
        exception_type = exception_keeper_type_644;
        exception_value = exception_keeper_value_644;
        exception_tb = exception_keeper_tb_644;

        goto try_finally_handler_580;
    }

    goto finally_end_644;
    finally_end_644:;
    branch_end_118:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_580:;
    exception_keeper_type_645 = exception_type;
    exception_keeper_value_645 = exception_value;
    exception_keeper_tb_645 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_187 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_71__value_2 );
    tmp_and_71__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_187;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_645 != NULL )
    {
        exception_type = exception_keeper_type_645;
        exception_value = exception_keeper_value_645;
        exception_tb = exception_keeper_tb_645;

        goto try_finally_handler_574;
    }

    goto finally_end_645;
    finally_end_645:;
    branch_end_117:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_574:;
    exception_keeper_type_646 = exception_type;
    exception_keeper_value_646 = exception_value;
    exception_keeper_tb_646 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_188 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_70__value_2 );
    tmp_and_70__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_188;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_646 != NULL )
    {
        exception_type = exception_keeper_type_646;
        exception_value = exception_keeper_value_646;
        exception_tb = exception_keeper_tb_646;

        goto try_finally_handler_568;
    }

    goto finally_end_646;
    finally_end_646:;
    branch_end_116:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_568:;
    exception_keeper_type_647 = exception_type;
    exception_keeper_value_647 = exception_value;
    exception_keeper_tb_647 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_189 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_69__value_2 );
    tmp_and_69__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_189;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_647 != NULL )
    {
        exception_type = exception_keeper_type_647;
        exception_value = exception_keeper_value_647;
        exception_tb = exception_keeper_tb_647;

        goto try_finally_handler_562;
    }

    goto finally_end_647;
    finally_end_647:;
    branch_end_115:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_562:;
    exception_keeper_type_648 = exception_type;
    exception_keeper_value_648 = exception_value;
    exception_keeper_tb_648 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_190 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_68__value_2 );
    tmp_and_68__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_190;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_648 != NULL )
    {
        exception_type = exception_keeper_type_648;
        exception_value = exception_keeper_value_648;
        exception_tb = exception_keeper_tb_648;

        goto try_finally_handler_556;
    }

    goto finally_end_648;
    finally_end_648:;
    branch_end_114:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_556:;
    exception_keeper_type_649 = exception_type;
    exception_keeper_value_649 = exception_value;
    exception_keeper_tb_649 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_191 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_67__value_2 );
    tmp_and_67__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_191;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_649 != NULL )
    {
        exception_type = exception_keeper_type_649;
        exception_value = exception_keeper_value_649;
        exception_tb = exception_keeper_tb_649;

        goto try_finally_handler_547;
    }

    goto finally_end_649;
    finally_end_649:;
    branch_end_113:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_547:;
    exception_keeper_type_650 = exception_type;
    exception_keeper_value_650 = exception_value;
    exception_keeper_tb_650 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_192 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_66__value_3 );
    tmp_and_66__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_192;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_650 != NULL )
    {
        exception_type = exception_keeper_type_650;
        exception_value = exception_keeper_value_650;
        exception_tb = exception_keeper_tb_650;

        goto try_finally_handler_538;
    }

    goto finally_end_650;
    finally_end_650:;
    branch_end_112:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_538:;
    exception_keeper_type_651 = exception_type;
    exception_keeper_value_651 = exception_value;
    exception_keeper_tb_651 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_193 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_65__value_3 );
    tmp_and_65__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_193;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_651 != NULL )
    {
        exception_type = exception_keeper_type_651;
        exception_value = exception_keeper_value_651;
        exception_tb = exception_keeper_tb_651;

        goto try_finally_handler_532;
    }

    goto finally_end_651;
    finally_end_651:;
    branch_end_111:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_532:;
    exception_keeper_type_652 = exception_type;
    exception_keeper_value_652 = exception_value;
    exception_keeper_tb_652 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_194 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_64__value_2 );
    tmp_and_64__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_194;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_652 != NULL )
    {
        exception_type = exception_keeper_type_652;
        exception_value = exception_keeper_value_652;
        exception_tb = exception_keeper_tb_652;

        goto try_finally_handler_526;
    }

    goto finally_end_652;
    finally_end_652:;
    branch_end_110:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_526:;
    exception_keeper_type_653 = exception_type;
    exception_keeper_value_653 = exception_value;
    exception_keeper_tb_653 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_195 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_63__value_2 );
    tmp_and_63__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_195;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_653 != NULL )
    {
        exception_type = exception_keeper_type_653;
        exception_value = exception_keeper_value_653;
        exception_tb = exception_keeper_tb_653;

        goto try_finally_handler_520;
    }

    goto finally_end_653;
    finally_end_653:;
    branch_end_109:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_520:;
    exception_keeper_type_654 = exception_type;
    exception_keeper_value_654 = exception_value;
    exception_keeper_tb_654 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_196 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_62__value_2 );
    tmp_and_62__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_196;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_654 != NULL )
    {
        exception_type = exception_keeper_type_654;
        exception_value = exception_keeper_value_654;
        exception_tb = exception_keeper_tb_654;

        goto try_finally_handler_514;
    }

    goto finally_end_654;
    finally_end_654:;
    branch_end_108:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_514:;
    exception_keeper_type_655 = exception_type;
    exception_keeper_value_655 = exception_value;
    exception_keeper_tb_655 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_197 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_61__value_2 );
    tmp_and_61__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_197;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_655 != NULL )
    {
        exception_type = exception_keeper_type_655;
        exception_value = exception_keeper_value_655;
        exception_tb = exception_keeper_tb_655;

        goto try_finally_handler_508;
    }

    goto finally_end_655;
    finally_end_655:;
    branch_end_107:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_508:;
    exception_keeper_type_656 = exception_type;
    exception_keeper_value_656 = exception_value;
    exception_keeper_tb_656 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_198 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_60__value_2 );
    tmp_and_60__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_198;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_656 != NULL )
    {
        exception_type = exception_keeper_type_656;
        exception_value = exception_keeper_value_656;
        exception_tb = exception_keeper_tb_656;

        goto try_finally_handler_502;
    }

    goto finally_end_656;
    finally_end_656:;
    branch_end_106:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_502:;
    exception_keeper_type_657 = exception_type;
    exception_keeper_value_657 = exception_value;
    exception_keeper_tb_657 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_199 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_59__value_2 );
    tmp_and_59__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_199;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_657 != NULL )
    {
        exception_type = exception_keeper_type_657;
        exception_value = exception_keeper_value_657;
        exception_tb = exception_keeper_tb_657;

        goto try_finally_handler_496;
    }

    goto finally_end_657;
    finally_end_657:;
    branch_end_105:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_496:;
    exception_keeper_type_658 = exception_type;
    exception_keeper_value_658 = exception_value;
    exception_keeper_tb_658 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_200 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_58__value_2 );
    tmp_and_58__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_200;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_658 != NULL )
    {
        exception_type = exception_keeper_type_658;
        exception_value = exception_keeper_value_658;
        exception_tb = exception_keeper_tb_658;

        goto try_finally_handler_490;
    }

    goto finally_end_658;
    finally_end_658:;
    branch_end_104:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_490:;
    exception_keeper_type_659 = exception_type;
    exception_keeper_value_659 = exception_value;
    exception_keeper_tb_659 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_201 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_57__value_2 );
    tmp_and_57__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_201;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_659 != NULL )
    {
        exception_type = exception_keeper_type_659;
        exception_value = exception_keeper_value_659;
        exception_tb = exception_keeper_tb_659;

        goto try_finally_handler_484;
    }

    goto finally_end_659;
    finally_end_659:;
    branch_end_103:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_484:;
    exception_keeper_type_660 = exception_type;
    exception_keeper_value_660 = exception_value;
    exception_keeper_tb_660 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_202 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_56__value_2 );
    tmp_and_56__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_202;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_660 != NULL )
    {
        exception_type = exception_keeper_type_660;
        exception_value = exception_keeper_value_660;
        exception_tb = exception_keeper_tb_660;

        goto try_finally_handler_478;
    }

    goto finally_end_660;
    finally_end_660:;
    branch_end_102:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_478:;
    exception_keeper_type_661 = exception_type;
    exception_keeper_value_661 = exception_value;
    exception_keeper_tb_661 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_203 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_55__value_2 );
    tmp_and_55__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_203;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_661 != NULL )
    {
        exception_type = exception_keeper_type_661;
        exception_value = exception_keeper_value_661;
        exception_tb = exception_keeper_tb_661;

        goto try_finally_handler_472;
    }

    goto finally_end_661;
    finally_end_661:;
    branch_end_101:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_472:;
    exception_keeper_type_662 = exception_type;
    exception_keeper_value_662 = exception_value;
    exception_keeper_tb_662 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_204 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_54__value_2 );
    tmp_and_54__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_204;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_662 != NULL )
    {
        exception_type = exception_keeper_type_662;
        exception_value = exception_keeper_value_662;
        exception_tb = exception_keeper_tb_662;

        goto try_finally_handler_466;
    }

    goto finally_end_662;
    finally_end_662:;
    branch_end_100:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_466:;
    exception_keeper_type_663 = exception_type;
    exception_keeper_value_663 = exception_value;
    exception_keeper_tb_663 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_205 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_53__value_2 );
    tmp_and_53__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_205;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_663 != NULL )
    {
        exception_type = exception_keeper_type_663;
        exception_value = exception_keeper_value_663;
        exception_tb = exception_keeper_tb_663;

        goto try_finally_handler_451;
    }

    goto finally_end_663;
    finally_end_663:;
    branch_end_99:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_451:;
    exception_keeper_type_664 = exception_type;
    exception_keeper_value_664 = exception_value;
    exception_keeper_tb_664 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_206 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_52__value_5 );
    tmp_and_52__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_206;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_664 != NULL )
    {
        exception_type = exception_keeper_type_664;
        exception_value = exception_keeper_value_664;
        exception_tb = exception_keeper_tb_664;

        goto try_finally_handler_436;
    }

    goto finally_end_664;
    finally_end_664:;
    branch_end_98:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_436:;
    exception_keeper_type_665 = exception_type;
    exception_keeper_value_665 = exception_value;
    exception_keeper_tb_665 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_207 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_51__value_5 );
    tmp_and_51__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_207;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_665 != NULL )
    {
        exception_type = exception_keeper_type_665;
        exception_value = exception_keeper_value_665;
        exception_tb = exception_keeper_tb_665;

        goto try_finally_handler_421;
    }

    goto finally_end_665;
    finally_end_665:;
    branch_end_97:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_421:;
    exception_keeper_type_666 = exception_type;
    exception_keeper_value_666 = exception_value;
    exception_keeper_tb_666 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_208 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_50__value_5 );
    tmp_and_50__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_208;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_666 != NULL )
    {
        exception_type = exception_keeper_type_666;
        exception_value = exception_keeper_value_666;
        exception_tb = exception_keeper_tb_666;

        goto try_finally_handler_406;
    }

    goto finally_end_666;
    finally_end_666:;
    branch_end_96:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_406:;
    exception_keeper_type_667 = exception_type;
    exception_keeper_value_667 = exception_value;
    exception_keeper_tb_667 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_209 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_49__value_5 );
    tmp_and_49__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_209;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_667 != NULL )
    {
        exception_type = exception_keeper_type_667;
        exception_value = exception_keeper_value_667;
        exception_tb = exception_keeper_tb_667;

        goto try_finally_handler_391;
    }

    goto finally_end_667;
    finally_end_667:;
    branch_end_95:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_391:;
    exception_keeper_type_668 = exception_type;
    exception_keeper_value_668 = exception_value;
    exception_keeper_tb_668 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_210 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_48__value_5 );
    tmp_and_48__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_210;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_668 != NULL )
    {
        exception_type = exception_keeper_type_668;
        exception_value = exception_keeper_value_668;
        exception_tb = exception_keeper_tb_668;

        goto try_finally_handler_376;
    }

    goto finally_end_668;
    finally_end_668:;
    branch_end_94:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_376:;
    exception_keeper_type_669 = exception_type;
    exception_keeper_value_669 = exception_value;
    exception_keeper_tb_669 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_211 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_47__value_5 );
    tmp_and_47__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_211;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_669 != NULL )
    {
        exception_type = exception_keeper_type_669;
        exception_value = exception_keeper_value_669;
        exception_tb = exception_keeper_tb_669;

        goto try_finally_handler_361;
    }

    goto finally_end_669;
    finally_end_669:;
    branch_end_93:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_361:;
    exception_keeper_type_670 = exception_type;
    exception_keeper_value_670 = exception_value;
    exception_keeper_tb_670 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_212 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_46__value_5 );
    tmp_and_46__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_212;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_670 != NULL )
    {
        exception_type = exception_keeper_type_670;
        exception_value = exception_keeper_value_670;
        exception_tb = exception_keeper_tb_670;

        goto try_finally_handler_346;
    }

    goto finally_end_670;
    finally_end_670:;
    branch_end_92:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_346:;
    exception_keeper_type_671 = exception_type;
    exception_keeper_value_671 = exception_value;
    exception_keeper_tb_671 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_213 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_45__value_5 );
    tmp_and_45__value_5 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_213;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_671 != NULL )
    {
        exception_type = exception_keeper_type_671;
        exception_value = exception_keeper_value_671;
        exception_tb = exception_keeper_tb_671;

        goto try_finally_handler_337;
    }

    goto finally_end_671;
    finally_end_671:;
    branch_end_91:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_337:;
    exception_keeper_type_672 = exception_type;
    exception_keeper_value_672 = exception_value;
    exception_keeper_tb_672 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_214 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_44__value_3 );
    tmp_and_44__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_214;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_672 != NULL )
    {
        exception_type = exception_keeper_type_672;
        exception_value = exception_keeper_value_672;
        exception_tb = exception_keeper_tb_672;

        goto try_finally_handler_328;
    }

    goto finally_end_672;
    finally_end_672:;
    branch_end_90:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_328:;
    exception_keeper_type_673 = exception_type;
    exception_keeper_value_673 = exception_value;
    exception_keeper_tb_673 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_215 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_43__value_3 );
    tmp_and_43__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_215;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_673 != NULL )
    {
        exception_type = exception_keeper_type_673;
        exception_value = exception_keeper_value_673;
        exception_tb = exception_keeper_tb_673;

        goto try_finally_handler_316;
    }

    goto finally_end_673;
    finally_end_673:;
    branch_end_89:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_316:;
    exception_keeper_type_674 = exception_type;
    exception_keeper_value_674 = exception_value;
    exception_keeper_tb_674 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_216 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_42__value_4 );
    tmp_and_42__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_216;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_674 != NULL )
    {
        exception_type = exception_keeper_type_674;
        exception_value = exception_keeper_value_674;
        exception_tb = exception_keeper_tb_674;

        goto try_finally_handler_304;
    }

    goto finally_end_674;
    finally_end_674:;
    branch_end_88:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_304:;
    exception_keeper_type_675 = exception_type;
    exception_keeper_value_675 = exception_value;
    exception_keeper_tb_675 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_217 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_41__value_4 );
    tmp_and_41__value_4 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_217;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_675 != NULL )
    {
        exception_type = exception_keeper_type_675;
        exception_value = exception_keeper_value_675;
        exception_tb = exception_keeper_tb_675;

        goto try_finally_handler_295;
    }

    goto finally_end_675;
    finally_end_675:;
    branch_end_87:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_295:;
    exception_keeper_type_676 = exception_type;
    exception_keeper_value_676 = exception_value;
    exception_keeper_tb_676 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_218 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_40__value_3 );
    tmp_and_40__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_218;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_676 != NULL )
    {
        exception_type = exception_keeper_type_676;
        exception_value = exception_keeper_value_676;
        exception_tb = exception_keeper_tb_676;

        goto try_finally_handler_289;
    }

    goto finally_end_676;
    finally_end_676:;
    branch_end_86:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_289:;
    exception_keeper_type_677 = exception_type;
    exception_keeper_value_677 = exception_value;
    exception_keeper_tb_677 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_219 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_39__value_2 );
    tmp_and_39__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_219;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_677 != NULL )
    {
        exception_type = exception_keeper_type_677;
        exception_value = exception_keeper_value_677;
        exception_tb = exception_keeper_tb_677;

        goto try_finally_handler_280;
    }

    goto finally_end_677;
    finally_end_677:;
    branch_end_85:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_280:;
    exception_keeper_type_678 = exception_type;
    exception_keeper_value_678 = exception_value;
    exception_keeper_tb_678 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_220 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_38__value_3 );
    tmp_and_38__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_220;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_678 != NULL )
    {
        exception_type = exception_keeper_type_678;
        exception_value = exception_keeper_value_678;
        exception_tb = exception_keeper_tb_678;

        goto try_finally_handler_274;
    }

    goto finally_end_678;
    finally_end_678:;
    branch_end_84:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_274:;
    exception_keeper_type_679 = exception_type;
    exception_keeper_value_679 = exception_value;
    exception_keeper_tb_679 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_221 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_37__value_2 );
    tmp_and_37__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_221;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_679 != NULL )
    {
        exception_type = exception_keeper_type_679;
        exception_value = exception_keeper_value_679;
        exception_tb = exception_keeper_tb_679;

        goto try_finally_handler_268;
    }

    goto finally_end_679;
    finally_end_679:;
    branch_end_83:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_268:;
    exception_keeper_type_680 = exception_type;
    exception_keeper_value_680 = exception_value;
    exception_keeper_tb_680 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_222 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_36__value_2 );
    tmp_and_36__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_222;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_680 != NULL )
    {
        exception_type = exception_keeper_type_680;
        exception_value = exception_keeper_value_680;
        exception_tb = exception_keeper_tb_680;

        goto try_finally_handler_259;
    }

    goto finally_end_680;
    finally_end_680:;
    branch_end_82:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_259:;
    exception_keeper_type_681 = exception_type;
    exception_keeper_value_681 = exception_value;
    exception_keeper_tb_681 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_223 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_35__value_3 );
    tmp_and_35__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_223;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_681 != NULL )
    {
        exception_type = exception_keeper_type_681;
        exception_value = exception_keeper_value_681;
        exception_tb = exception_keeper_tb_681;

        goto try_finally_handler_250;
    }

    goto finally_end_681;
    finally_end_681:;
    branch_end_81:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_250:;
    exception_keeper_type_682 = exception_type;
    exception_keeper_value_682 = exception_value;
    exception_keeper_tb_682 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_224 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_34__value_3 );
    tmp_and_34__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_224;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_682 != NULL )
    {
        exception_type = exception_keeper_type_682;
        exception_value = exception_keeper_value_682;
        exception_tb = exception_keeper_tb_682;

        goto try_finally_handler_247;
    }

    goto finally_end_682;
    finally_end_682:;
    branch_end_80:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_247:;
    exception_keeper_type_683 = exception_type;
    exception_keeper_value_683 = exception_value;
    exception_keeper_tb_683 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_225 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_33__value_1 );
    tmp_and_33__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_225;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_683 != NULL )
    {
        exception_type = exception_keeper_type_683;
        exception_value = exception_keeper_value_683;
        exception_tb = exception_keeper_tb_683;

        goto try_finally_handler_244;
    }

    goto finally_end_683;
    finally_end_683:;
    branch_end_79:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_244:;
    exception_keeper_type_684 = exception_type;
    exception_keeper_value_684 = exception_value;
    exception_keeper_tb_684 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_226 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_32__value_1 );
    tmp_and_32__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_226;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_684 != NULL )
    {
        exception_type = exception_keeper_type_684;
        exception_value = exception_keeper_value_684;
        exception_tb = exception_keeper_tb_684;

        goto try_finally_handler_241;
    }

    goto finally_end_684;
    finally_end_684:;
    branch_end_78:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_241:;
    exception_keeper_type_685 = exception_type;
    exception_keeper_value_685 = exception_value;
    exception_keeper_tb_685 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_227 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_31__value_1 );
    tmp_and_31__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_227;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_685 != NULL )
    {
        exception_type = exception_keeper_type_685;
        exception_value = exception_keeper_value_685;
        exception_tb = exception_keeper_tb_685;

        goto try_finally_handler_238;
    }

    goto finally_end_685;
    finally_end_685:;
    branch_end_77:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_238:;
    exception_keeper_type_686 = exception_type;
    exception_keeper_value_686 = exception_value;
    exception_keeper_tb_686 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_228 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_30__value_1 );
    tmp_and_30__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_228;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_686 != NULL )
    {
        exception_type = exception_keeper_type_686;
        exception_value = exception_keeper_value_686;
        exception_tb = exception_keeper_tb_686;

        goto try_finally_handler_235;
    }

    goto finally_end_686;
    finally_end_686:;
    branch_end_76:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_235:;
    exception_keeper_type_687 = exception_type;
    exception_keeper_value_687 = exception_value;
    exception_keeper_tb_687 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_229 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_29__value_1 );
    tmp_and_29__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_229;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_687 != NULL )
    {
        exception_type = exception_keeper_type_687;
        exception_value = exception_keeper_value_687;
        exception_tb = exception_keeper_tb_687;

        goto try_finally_handler_232;
    }

    goto finally_end_687;
    finally_end_687:;
    branch_end_75:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_232:;
    exception_keeper_type_688 = exception_type;
    exception_keeper_value_688 = exception_value;
    exception_keeper_tb_688 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_230 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_28__value_1 );
    tmp_and_28__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_230;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_688 != NULL )
    {
        exception_type = exception_keeper_type_688;
        exception_value = exception_keeper_value_688;
        exception_tb = exception_keeper_tb_688;

        goto try_finally_handler_229;
    }

    goto finally_end_688;
    finally_end_688:;
    branch_end_74:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_229:;
    exception_keeper_type_689 = exception_type;
    exception_keeper_value_689 = exception_value;
    exception_keeper_tb_689 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_231 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_27__value_1 );
    tmp_and_27__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_231;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_689 != NULL )
    {
        exception_type = exception_keeper_type_689;
        exception_value = exception_keeper_value_689;
        exception_tb = exception_keeper_tb_689;

        goto try_finally_handler_223;
    }

    goto finally_end_689;
    finally_end_689:;
    branch_end_73:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_223:;
    exception_keeper_type_690 = exception_type;
    exception_keeper_value_690 = exception_value;
    exception_keeper_tb_690 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_232 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_26__value_2 );
    tmp_and_26__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_232;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_690 != NULL )
    {
        exception_type = exception_keeper_type_690;
        exception_value = exception_keeper_value_690;
        exception_tb = exception_keeper_tb_690;

        goto try_finally_handler_217;
    }

    goto finally_end_690;
    finally_end_690:;
    branch_end_72:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_217:;
    exception_keeper_type_691 = exception_type;
    exception_keeper_value_691 = exception_value;
    exception_keeper_tb_691 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_233 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_25__value_2 );
    tmp_and_25__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_233;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_691 != NULL )
    {
        exception_type = exception_keeper_type_691;
        exception_value = exception_keeper_value_691;
        exception_tb = exception_keeper_tb_691;

        goto try_finally_handler_214;
    }

    goto finally_end_691;
    finally_end_691:;
    branch_end_71:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_214:;
    exception_keeper_type_692 = exception_type;
    exception_keeper_value_692 = exception_value;
    exception_keeper_tb_692 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_234 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_24__value_1 );
    tmp_and_24__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_234;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_692 != NULL )
    {
        exception_type = exception_keeper_type_692;
        exception_value = exception_keeper_value_692;
        exception_tb = exception_keeper_tb_692;

        goto try_finally_handler_208;
    }

    goto finally_end_692;
    finally_end_692:;
    branch_end_70:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_208:;
    exception_keeper_type_693 = exception_type;
    exception_keeper_value_693 = exception_value;
    exception_keeper_tb_693 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_235 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_23__value_2 );
    tmp_and_23__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_235;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_693 != NULL )
    {
        exception_type = exception_keeper_type_693;
        exception_value = exception_keeper_value_693;
        exception_tb = exception_keeper_tb_693;

        goto try_finally_handler_202;
    }

    goto finally_end_693;
    finally_end_693:;
    branch_end_69:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_202:;
    exception_keeper_type_694 = exception_type;
    exception_keeper_value_694 = exception_value;
    exception_keeper_tb_694 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_236 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_22__value_2 );
    tmp_and_22__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_236;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_694 != NULL )
    {
        exception_type = exception_keeper_type_694;
        exception_value = exception_keeper_value_694;
        exception_tb = exception_keeper_tb_694;

        goto try_finally_handler_196;
    }

    goto finally_end_694;
    finally_end_694:;
    branch_end_68:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_196:;
    exception_keeper_type_695 = exception_type;
    exception_keeper_value_695 = exception_value;
    exception_keeper_tb_695 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_237 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_21__value_2 );
    tmp_and_21__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_237;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_695 != NULL )
    {
        exception_type = exception_keeper_type_695;
        exception_value = exception_keeper_value_695;
        exception_tb = exception_keeper_tb_695;

        goto try_finally_handler_190;
    }

    goto finally_end_695;
    finally_end_695:;
    branch_end_67:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_190:;
    exception_keeper_type_696 = exception_type;
    exception_keeper_value_696 = exception_value;
    exception_keeper_tb_696 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_238 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_20__value_2 );
    tmp_and_20__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_238;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_696 != NULL )
    {
        exception_type = exception_keeper_type_696;
        exception_value = exception_keeper_value_696;
        exception_tb = exception_keeper_tb_696;

        goto frame_exception_exit_1;
    }

    goto finally_end_696;
    finally_end_696:;
    tmp_compare_left_46 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter );

    if (unlikely( tmp_compare_left_46 == NULL ))
    {
        tmp_compare_left_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter );
    }

    if ( tmp_compare_left_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1231 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 651;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_46 = const_int_0;
    tmp_cmp_NotEq_2 = RICH_COMPARE_BOOL_NE( tmp_compare_left_46, tmp_compare_right_46 );
    if ( tmp_cmp_NotEq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 651;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotEq_2 == 1)
    {
        goto branch_yes_139;
    }
    else
    {
        goto branch_no_139;
    }
    branch_yes_139:;
    tmp_left_name_110 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_left_name_110 == NULL ))
    {
        tmp_left_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_left_name_110 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }

    tmp_right_name_110 = const_int_pos_1;
    tmp_assign_source_556 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_110, tmp_right_name_110 );
    if ( tmp_assign_source_556 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_556 );
    branch_no_139:;
    tmp_compare_left_47 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_47 == NULL ))
    {
        tmp_compare_left_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 653;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_47 = const_int_0;
    tmp_cmp_Eq_38 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_47, tmp_compare_right_47 );
    if ( tmp_cmp_Eq_38 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 653;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_38 == 1)
    {
        goto branch_yes_140;
    }
    else
    {
        goto branch_no_140;
    }
    branch_yes_140:;
    tmp_assign_source_557 = const_int_pos_3;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_557 );
    goto branch_end_140;
    branch_no_140:;
    tmp_compare_left_48 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_48 == NULL ))
    {
        tmp_compare_left_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_48 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 655;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_48 = const_int_pos_1;
    tmp_cmp_Eq_39 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_48, tmp_compare_right_48 );
    if ( tmp_cmp_Eq_39 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 655;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_39 == 1)
    {
        goto branch_yes_141;
    }
    else
    {
        goto branch_no_141;
    }
    branch_yes_141:;
    tmp_assign_source_558 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_558 );
    tmp_left_name_111 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_111 == NULL ))
    {
        tmp_left_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_111 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 657;
        goto frame_exception_exit_1;
    }

    tmp_right_name_111 = const_int_pos_1;
    tmp_assign_source_559 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_111, tmp_right_name_111 );
    if ( tmp_assign_source_559 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 657;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_559 );
    goto branch_end_141;
    branch_no_141:;
    tmp_compare_left_49 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_49 == NULL ))
    {
        tmp_compare_left_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 658;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_49 = const_int_pos_2;
    tmp_cmp_Eq_40 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_49, tmp_compare_right_49 );
    if ( tmp_cmp_Eq_40 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 658;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_40 == 1)
    {
        goto branch_yes_142;
    }
    else
    {
        goto branch_no_142;
    }
    branch_yes_142:;
    tmp_assign_source_560 = const_int_pos_8;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_560 );
    tmp_left_name_112 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_112 == NULL ))
    {
        tmp_left_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_112 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 660;
        goto frame_exception_exit_1;
    }

    tmp_right_name_112 = const_int_pos_3;
    tmp_assign_source_561 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_112, tmp_right_name_112 );
    if ( tmp_assign_source_561 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 660;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_561 );
    goto branch_end_142;
    branch_no_142:;
    tmp_compare_left_50 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_50 == NULL ))
    {
        tmp_compare_left_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 661;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_50 = const_int_pos_3;
    tmp_cmp_Eq_41 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_50, tmp_compare_right_50 );
    if ( tmp_cmp_Eq_41 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 661;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_41 == 1)
    {
        goto branch_yes_143;
    }
    else
    {
        goto branch_no_143;
    }
    branch_yes_143:;
    tmp_assign_source_562 = const_int_pos_10;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_562 );
    tmp_left_name_113 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_113 == NULL ))
    {
        tmp_left_name_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_113 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 663;
        goto frame_exception_exit_1;
    }

    tmp_right_name_113 = const_int_pos_5;
    tmp_assign_source_563 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_113, tmp_right_name_113 );
    if ( tmp_assign_source_563 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 663;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_563 );
    goto branch_end_143;
    branch_no_143:;
    tmp_compare_left_51 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_51 == NULL ))
    {
        tmp_compare_left_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 664;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_51 = const_int_pos_4;
    tmp_cmp_Eq_42 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_51, tmp_compare_right_51 );
    if ( tmp_cmp_Eq_42 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 664;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_42 == 1)
    {
        goto branch_yes_144;
    }
    else
    {
        goto branch_no_144;
    }
    branch_yes_144:;
    tmp_assign_source_564 = const_int_pos_15;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_564 );
    tmp_left_name_114 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_114 == NULL ))
    {
        tmp_left_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_114 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 666;
        goto frame_exception_exit_1;
    }

    tmp_right_name_114 = const_int_pos_10;
    tmp_assign_source_565 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_114, tmp_right_name_114 );
    if ( tmp_assign_source_565 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 666;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_565 );
    goto branch_end_144;
    branch_no_144:;
    tmp_compare_left_52 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_52 == NULL ))
    {
        tmp_compare_left_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 667;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_52 = const_int_pos_5;
    tmp_cmp_Eq_43 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_52, tmp_compare_right_52 );
    if ( tmp_cmp_Eq_43 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 667;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_43 == 1)
    {
        goto branch_yes_145;
    }
    else
    {
        goto branch_no_145;
    }
    branch_yes_145:;
    tmp_assign_source_566 = const_int_pos_20;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_566 );
    tmp_left_name_115 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_115 == NULL ))
    {
        tmp_left_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_115 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 669;
        goto frame_exception_exit_1;
    }

    tmp_right_name_115 = const_int_pos_20;
    tmp_assign_source_567 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_115, tmp_right_name_115 );
    if ( tmp_assign_source_567 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 669;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_567 );
    goto branch_end_145;
    branch_no_145:;
    tmp_compare_left_53 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_53 == NULL ))
    {
        tmp_compare_left_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 670;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_53 = const_int_pos_6;
    tmp_cmp_Eq_44 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_53, tmp_compare_right_53 );
    if ( tmp_cmp_Eq_44 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 670;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_44 == 1)
    {
        goto branch_yes_146;
    }
    else
    {
        goto branch_no_146;
    }
    branch_yes_146:;
    tmp_assign_source_568 = const_int_pos_30;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_568 );
    tmp_left_name_116 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_116 == NULL ))
    {
        tmp_left_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_116 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 672;
        goto frame_exception_exit_1;
    }

    tmp_right_name_116 = const_int_pos_25;
    tmp_assign_source_569 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_116, tmp_right_name_116 );
    if ( tmp_assign_source_569 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 672;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_569 );
    goto branch_end_146;
    branch_no_146:;
    tmp_compare_left_54 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_weapon );

    if (unlikely( tmp_compare_left_54 == NULL ))
    {
        tmp_compare_left_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weapon );
    }

    if ( tmp_compare_left_54 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 839 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 674;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_54 = const_int_pos_7;
    tmp_cmp_Eq_45 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_54, tmp_compare_right_54 );
    if ( tmp_cmp_Eq_45 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 674;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_45 == 1)
    {
        goto branch_yes_147;
    }
    else
    {
        goto branch_no_147;
    }
    branch_yes_147:;
    tmp_assign_source_570 = const_int_pos_1337;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_570 );
    branch_no_147:;
    branch_end_146:;
    branch_end_145:;
    branch_end_144:;
    branch_end_143:;
    branch_end_142:;
    branch_end_141:;
    branch_end_140:;
    tmp_compare_left_55 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_55 == NULL ))
    {
        tmp_compare_left_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_55 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 676;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_55 = const_int_0;
    tmp_cmp_Eq_46 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_55, tmp_compare_right_55 );
    if ( tmp_cmp_Eq_46 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 676;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_46 == 1)
    {
        goto branch_yes_148;
    }
    else
    {
        goto branch_no_148;
    }
    branch_yes_148:;
    tmp_assign_source_571 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_571 );
    tmp_assign_source_572 = const_int_pos_20;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_572 );
    tmp_assign_source_573 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_573 );
    goto branch_end_148;
    branch_no_148:;
    tmp_compare_left_56 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_56 == NULL ))
    {
        tmp_compare_left_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_56 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 680;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_56 = const_int_pos_1;
    tmp_cmp_Eq_47 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_56, tmp_compare_right_56 );
    if ( tmp_cmp_Eq_47 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 680;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_47 == 1)
    {
        goto branch_yes_149;
    }
    else
    {
        goto branch_no_149;
    }
    branch_yes_149:;
    tmp_assign_source_574 = const_int_pos_4;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_574 );
    tmp_assign_source_575 = const_int_pos_25;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_575 );
    tmp_assign_source_576 = const_int_pos_10;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_576 );
    tmp_left_name_117 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_117 == NULL ))
    {
        tmp_left_name_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_117 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 684;
        goto frame_exception_exit_1;
    }

    tmp_right_name_117 = const_int_pos_2;
    tmp_assign_source_577 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_117, tmp_right_name_117 );
    if ( tmp_assign_source_577 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 684;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_577 );
    goto branch_end_149;
    branch_no_149:;
    tmp_compare_left_57 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_57 == NULL ))
    {
        tmp_compare_left_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_57 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 685;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_57 = const_int_pos_2;
    tmp_cmp_Eq_48 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_57, tmp_compare_right_57 );
    if ( tmp_cmp_Eq_48 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 685;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_48 == 1)
    {
        goto branch_yes_150;
    }
    else
    {
        goto branch_no_150;
    }
    branch_yes_150:;
    tmp_assign_source_578 = const_int_pos_6;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_578 );
    tmp_assign_source_579 = const_int_pos_30;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_579 );
    tmp_assign_source_580 = const_int_pos_15;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_580 );
    tmp_left_name_118 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_118 == NULL ))
    {
        tmp_left_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_118 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 689;
        goto frame_exception_exit_1;
    }

    tmp_right_name_118 = const_int_pos_4;
    tmp_assign_source_581 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_118, tmp_right_name_118 );
    if ( tmp_assign_source_581 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 689;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_581 );
    goto branch_end_150;
    branch_no_150:;
    tmp_compare_left_58 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_58 == NULL ))
    {
        tmp_compare_left_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 690;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_58 = const_int_pos_3;
    tmp_cmp_Eq_49 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_58, tmp_compare_right_58 );
    if ( tmp_cmp_Eq_49 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 690;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_49 == 1)
    {
        goto branch_yes_151;
    }
    else
    {
        goto branch_no_151;
    }
    branch_yes_151:;
    tmp_assign_source_582 = const_int_pos_9;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_582 );
    tmp_assign_source_583 = const_int_pos_40;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_583 );
    tmp_assign_source_584 = const_int_pos_20;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_584 );
    tmp_left_name_119 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_119 == NULL ))
    {
        tmp_left_name_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_119 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 694;
        goto frame_exception_exit_1;
    }

    tmp_right_name_119 = const_int_pos_5;
    tmp_assign_source_585 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_119, tmp_right_name_119 );
    if ( tmp_assign_source_585 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 694;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_585 );
    goto branch_end_151;
    branch_no_151:;
    tmp_compare_left_59 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_59 == NULL ))
    {
        tmp_compare_left_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 695;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_59 = const_int_pos_4;
    tmp_cmp_Eq_50 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_59, tmp_compare_right_59 );
    if ( tmp_cmp_Eq_50 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 695;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_50 == 1)
    {
        goto branch_yes_152;
    }
    else
    {
        goto branch_no_152;
    }
    branch_yes_152:;
    tmp_assign_source_586 = const_int_pos_12;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_586 );
    tmp_assign_source_587 = const_int_pos_50;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_587 );
    tmp_assign_source_588 = const_int_pos_30;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_588 );
    tmp_left_name_120 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_120 == NULL ))
    {
        tmp_left_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_120 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 699;
        goto frame_exception_exit_1;
    }

    tmp_right_name_120 = const_int_pos_10;
    tmp_assign_source_589 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_120, tmp_right_name_120 );
    if ( tmp_assign_source_589 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 699;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_589 );
    goto branch_end_152;
    branch_no_152:;
    tmp_compare_left_60 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_60 == NULL ))
    {
        tmp_compare_left_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 700;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_60 = const_int_pos_5;
    tmp_cmp_Eq_51 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_60, tmp_compare_right_60 );
    if ( tmp_cmp_Eq_51 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 700;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_51 == 1)
    {
        goto branch_yes_153;
    }
    else
    {
        goto branch_no_153;
    }
    branch_yes_153:;
    tmp_assign_source_590 = const_int_pos_15;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_590 );
    tmp_assign_source_591 = const_int_pos_60;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_591 );
    tmp_assign_source_592 = const_int_pos_40;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_592 );
    tmp_left_name_121 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_121 == NULL ))
    {
        tmp_left_name_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_121 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 704;
        goto frame_exception_exit_1;
    }

    tmp_right_name_121 = const_int_pos_15;
    tmp_assign_source_593 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_121, tmp_right_name_121 );
    if ( tmp_assign_source_593 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 704;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_593 );
    goto branch_end_153;
    branch_no_153:;
    tmp_compare_left_61 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_61 == NULL ))
    {
        tmp_compare_left_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_61 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 705;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_61 = const_int_pos_6;
    tmp_cmp_Eq_52 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_61, tmp_compare_right_61 );
    if ( tmp_cmp_Eq_52 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 705;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_52 == 1)
    {
        goto branch_yes_154;
    }
    else
    {
        goto branch_no_154;
    }
    branch_yes_154:;
    tmp_assign_source_594 = const_int_pos_20;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_594 );
    tmp_assign_source_595 = const_int_pos_75;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_595 );
    tmp_assign_source_596 = const_int_pos_50;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_596 );
    tmp_left_name_122 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_122 == NULL ))
    {
        tmp_left_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_122 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 709;
        goto frame_exception_exit_1;
    }

    tmp_right_name_122 = const_int_pos_20;
    tmp_assign_source_597 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_122, tmp_right_name_122 );
    if ( tmp_assign_source_597 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 709;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_597 );
    goto branch_end_154;
    branch_no_154:;
    tmp_compare_left_62 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_armor );

    if (unlikely( tmp_compare_left_62 == NULL ))
    {
        tmp_compare_left_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_armor );
    }

    if ( tmp_compare_left_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 895 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_62 = const_int_pos_7;
    tmp_cmp_Eq_53 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_62, tmp_compare_right_62 );
    if ( tmp_cmp_Eq_53 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_53 == 1)
    {
        goto branch_yes_155;
    }
    else
    {
        goto branch_no_155;
    }
    branch_yes_155:;
    tmp_assign_source_598 = const_int_pos_420;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe, tmp_assign_source_598 );
    tmp_assign_source_599 = const_int_pos_9001;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_599 );
    tmp_assign_source_600 = const_float_6_9e42;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_600 );
    branch_no_155:;
    branch_end_154:;
    branch_end_153:;
    branch_end_152:;
    branch_end_151:;
    branch_end_150:;
    branch_end_149:;
    branch_end_148:;
    tmp_compare_left_63 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_compare_left_63 == NULL ))
    {
        tmp_compare_left_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_compare_left_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 714;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_63 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit );

    if (unlikely( tmp_compare_right_63 == NULL ))
    {
        tmp_compare_right_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp_limit );
    }

    if ( tmp_compare_right_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1599 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 714;
        goto frame_exception_exit_1;
    }

    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_63, tmp_compare_right_63 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 714;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_GtE_1 == 1)
    {
        goto branch_yes_156;
    }
    else
    {
        goto branch_no_156;
    }
    branch_yes_156:;
    tmp_subscribed_name_65 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_65 == NULL ))
    {
        tmp_subscribed_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_65 = const_str_plain_blue;
    tmp_left_name_124 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_65, tmp_subscript_name_65 );
    if ( tmp_left_name_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_right_name_123 = const_str_digest_54e04523c708b21fce800443629a6138;
    tmp_left_name_123 = BINARY_OPERATION_ADD( tmp_left_name_124, tmp_right_name_123 );
    Py_DECREF( tmp_left_name_124 );
    if ( tmp_left_name_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_66 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_66 == NULL ))
    {
        tmp_subscribed_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_66 == NULL )
    {
        Py_DECREF( tmp_left_name_123 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_66 = const_str_plain_off;
    tmp_right_name_124 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_66, tmp_subscript_name_66 );
    if ( tmp_right_name_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_123 );

        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_107 = BINARY_OPERATION_ADD( tmp_left_name_123, tmp_right_name_124 );
    Py_DECREF( tmp_left_name_123 );
    Py_DECREF( tmp_right_name_124 );
    if ( tmp_str_arg_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_107 );
    Py_DECREF( tmp_str_arg_107 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_601 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_601 );
    tmp_compare_left_64 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_64 == NULL ))
    {
        tmp_compare_left_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_64 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_64 = const_int_pos_1;
    tmp_cmp_Eq_54 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_64, tmp_compare_right_64 );
    if ( tmp_cmp_Eq_54 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 717;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_54 == 1)
    {
        goto branch_yes_157;
    }
    else
    {
        goto branch_no_157;
    }
    branch_yes_157:;
    tmp_assign_source_602 = const_int_pos_25;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_602 );
    goto branch_end_157;
    branch_no_157:;
    tmp_compare_left_65 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_65 == NULL ))
    {
        tmp_compare_left_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 719;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_65 = const_int_pos_2;
    tmp_cmp_Eq_55 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_65, tmp_compare_right_65 );
    if ( tmp_cmp_Eq_55 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 719;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_55 == 1)
    {
        goto branch_yes_158;
    }
    else
    {
        goto branch_no_158;
    }
    branch_yes_158:;
    tmp_assign_source_603 = const_int_pos_50;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_603 );
    goto branch_end_158;
    branch_no_158:;
    tmp_compare_left_66 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_66 == NULL ))
    {
        tmp_compare_left_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_66 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 721;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_66 = const_int_pos_3;
    tmp_cmp_Eq_56 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_66, tmp_compare_right_66 );
    if ( tmp_cmp_Eq_56 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 721;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_56 == 1)
    {
        goto branch_yes_159;
    }
    else
    {
        goto branch_no_159;
    }
    branch_yes_159:;
    tmp_assign_source_604 = const_int_pos_85;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_604 );
    goto branch_end_159;
    branch_no_159:;
    tmp_compare_left_67 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_67 == NULL ))
    {
        tmp_compare_left_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_67 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 723;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_67 = const_int_pos_4;
    tmp_cmp_Eq_57 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_67, tmp_compare_right_67 );
    if ( tmp_cmp_Eq_57 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 723;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_57 == 1)
    {
        goto branch_yes_160;
    }
    else
    {
        goto branch_no_160;
    }
    branch_yes_160:;
    tmp_assign_source_605 = const_int_pos_125;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_605 );
    goto branch_end_160;
    branch_no_160:;
    tmp_compare_left_68 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_68 == NULL ))
    {
        tmp_compare_left_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 725;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_68 = const_int_pos_5;
    tmp_cmp_Eq_58 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_68, tmp_compare_right_68 );
    if ( tmp_cmp_Eq_58 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 725;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_58 == 1)
    {
        goto branch_yes_161;
    }
    else
    {
        goto branch_no_161;
    }
    branch_yes_161:;
    tmp_assign_source_606 = const_int_pos_150;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_606 );
    goto branch_end_161;
    branch_no_161:;
    tmp_compare_left_69 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_69 == NULL ))
    {
        tmp_compare_left_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 727;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_69 = const_int_pos_6;
    tmp_cmp_Eq_59 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_69, tmp_compare_right_69 );
    if ( tmp_cmp_Eq_59 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 727;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_59 == 1)
    {
        goto branch_yes_162;
    }
    else
    {
        goto branch_no_162;
    }
    branch_yes_162:;
    tmp_assign_source_607 = const_int_pos_180;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_607 );
    goto branch_end_162;
    branch_no_162:;
    tmp_compare_left_70 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_70 == NULL ))
    {
        tmp_compare_left_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_70 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 729;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_70 = const_int_pos_7;
    tmp_cmp_Eq_60 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_70, tmp_compare_right_70 );
    if ( tmp_cmp_Eq_60 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 729;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_60 == 1)
    {
        goto branch_yes_163;
    }
    else
    {
        goto branch_no_163;
    }
    branch_yes_163:;
    tmp_assign_source_608 = const_int_pos_210;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_608 );
    goto branch_end_163;
    branch_no_163:;
    tmp_compare_left_71 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_71 == NULL ))
    {
        tmp_compare_left_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_71 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 731;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_71 = const_int_pos_8;
    tmp_cmp_Eq_61 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_71, tmp_compare_right_71 );
    if ( tmp_cmp_Eq_61 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 731;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_61 == 1)
    {
        goto branch_yes_164;
    }
    else
    {
        goto branch_no_164;
    }
    branch_yes_164:;
    tmp_assign_source_609 = const_int_pos_245;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_609 );
    goto branch_end_164;
    branch_no_164:;
    tmp_compare_left_72 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_72 == NULL ))
    {
        tmp_compare_left_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_72 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 733;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_72 = const_int_pos_9;
    tmp_cmp_Eq_62 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_72, tmp_compare_right_72 );
    if ( tmp_cmp_Eq_62 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 733;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_62 == 1)
    {
        goto branch_yes_165;
    }
    else
    {
        goto branch_no_165;
    }
    branch_yes_165:;
    tmp_assign_source_610 = const_int_pos_275;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_610 );
    goto branch_end_165;
    branch_no_165:;
    tmp_compare_left_73 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_compare_left_73 == NULL ))
    {
        tmp_compare_left_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_compare_left_73 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 735;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_73 = const_int_pos_10;
    tmp_cmp_Eq_63 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_73, tmp_compare_right_73 );
    if ( tmp_cmp_Eq_63 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 735;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_63 == 1)
    {
        goto branch_yes_166;
    }
    else
    {
        goto branch_no_166;
    }
    branch_yes_166:;
    tmp_assign_source_611 = const_int_pos_325;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp_limit, tmp_assign_source_611 );
    branch_no_166:;
    branch_end_165:;
    branch_end_164:;
    branch_end_163:;
    branch_end_162:;
    branch_end_161:;
    branch_end_160:;
    branch_end_159:;
    branch_end_158:;
    branch_end_157:;
    tmp_left_name_125 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_left_name_125 == NULL ))
    {
        tmp_left_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_left_name_125 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 737;
        goto frame_exception_exit_1;
    }

    tmp_right_name_125 = const_str_chr_33;
    tmp_assign_source_612 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_125, tmp_right_name_125 );
    if ( tmp_assign_source_612 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 737;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels, tmp_assign_source_612 );
    tmp_left_name_126 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_126 == NULL ))
    {
        tmp_left_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_126 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 738;
        goto frame_exception_exit_1;
    }

    tmp_right_name_126 = const_int_pos_10;
    tmp_assign_source_613 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_126, tmp_right_name_126 );
    if ( tmp_assign_source_613 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 738;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_613 );
    branch_no_156:;
    tmp_len_arg_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_1 == NULL ))
    {
        tmp_len_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 739;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_74 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 739;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_74 = const_int_pos_1;
    tmp_cmp_Eq_64 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_74, tmp_compare_right_74 );
    if ( tmp_cmp_Eq_64 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_74 );

        frame_module->f_lineno = 739;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_74 );
    if (tmp_cmp_Eq_64 == 1)
    {
        goto branch_yes_167;
    }
    else
    {
        goto branch_no_167;
    }
    branch_yes_167:;
    tmp_left_name_127 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_127 == NULL ))
    {
        tmp_left_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_127 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 740;
        goto frame_exception_exit_1;
    }

    tmp_right_name_127 = const_int_pos_2;
    tmp_assign_source_614 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_127, tmp_right_name_127 );
    if ( tmp_assign_source_614 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 740;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_614 );
    tmp_left_name_128 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_128 == NULL ))
    {
        tmp_left_name_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_128 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 741;
        goto frame_exception_exit_1;
    }

    tmp_right_name_128 = const_int_pos_5;
    tmp_assign_source_615 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_128, tmp_right_name_128 );
    if ( tmp_assign_source_615 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 741;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_615 );
    tmp_left_name_129 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_129 == NULL ))
    {
        tmp_left_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_129 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 742;
        goto frame_exception_exit_1;
    }

    tmp_right_name_129 = const_int_pos_2;
    tmp_assign_source_616 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_129, tmp_right_name_129 );
    if ( tmp_assign_source_616 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 742;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_616 );
    goto branch_end_167;
    branch_no_167:;
    tmp_len_arg_2 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_2 == NULL ))
    {
        tmp_len_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 743;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_75 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compare_left_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 743;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_75 = const_int_pos_2;
    tmp_cmp_Eq_65 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_75, tmp_compare_right_75 );
    if ( tmp_cmp_Eq_65 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_75 );

        frame_module->f_lineno = 743;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_75 );
    if (tmp_cmp_Eq_65 == 1)
    {
        goto branch_yes_168;
    }
    else
    {
        goto branch_no_168;
    }
    branch_yes_168:;
    tmp_left_name_130 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_130 == NULL ))
    {
        tmp_left_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_130 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 744;
        goto frame_exception_exit_1;
    }

    tmp_right_name_130 = const_int_pos_3;
    tmp_assign_source_617 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_130, tmp_right_name_130 );
    if ( tmp_assign_source_617 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 744;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_617 );
    tmp_left_name_131 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_131 == NULL ))
    {
        tmp_left_name_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_131 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 745;
        goto frame_exception_exit_1;
    }

    tmp_right_name_131 = const_int_pos_5;
    tmp_assign_source_618 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_131, tmp_right_name_131 );
    if ( tmp_assign_source_618 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 745;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_618 );
    tmp_left_name_132 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_132 == NULL ))
    {
        tmp_left_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_132 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 746;
        goto frame_exception_exit_1;
    }

    tmp_right_name_132 = const_int_pos_3;
    tmp_assign_source_619 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_132, tmp_right_name_132 );
    if ( tmp_assign_source_619 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 746;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_619 );
    goto branch_end_168;
    branch_no_168:;
    tmp_len_arg_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_3 == NULL ))
    {
        tmp_len_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_76 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_compare_left_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_76 = const_int_pos_3;
    tmp_cmp_Eq_66 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_76, tmp_compare_right_76 );
    if ( tmp_cmp_Eq_66 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_76 );

        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_76 );
    if (tmp_cmp_Eq_66 == 1)
    {
        goto branch_yes_169;
    }
    else
    {
        goto branch_no_169;
    }
    branch_yes_169:;
    tmp_left_name_133 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_133 == NULL ))
    {
        tmp_left_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_133 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 748;
        goto frame_exception_exit_1;
    }

    tmp_right_name_133 = const_int_pos_3;
    tmp_assign_source_620 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_133, tmp_right_name_133 );
    if ( tmp_assign_source_620 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 748;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_620 );
    tmp_left_name_134 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_134 == NULL ))
    {
        tmp_left_name_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_134 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 749;
        goto frame_exception_exit_1;
    }

    tmp_right_name_134 = const_int_pos_8;
    tmp_assign_source_621 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_134, tmp_right_name_134 );
    if ( tmp_assign_source_621 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 749;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_621 );
    tmp_left_name_135 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_135 == NULL ))
    {
        tmp_left_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_135 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 750;
        goto frame_exception_exit_1;
    }

    tmp_right_name_135 = const_int_pos_5;
    tmp_assign_source_622 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_135, tmp_right_name_135 );
    if ( tmp_assign_source_622 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 750;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_622 );
    goto branch_end_169;
    branch_no_169:;
    tmp_len_arg_4 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_4 == NULL ))
    {
        tmp_len_arg_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 751;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_77 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_compare_left_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 751;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_77 = const_int_pos_4;
    tmp_cmp_Eq_67 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_77, tmp_compare_right_77 );
    if ( tmp_cmp_Eq_67 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_77 );

        frame_module->f_lineno = 751;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_77 );
    if (tmp_cmp_Eq_67 == 1)
    {
        goto branch_yes_170;
    }
    else
    {
        goto branch_no_170;
    }
    branch_yes_170:;
    tmp_left_name_136 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_136 == NULL ))
    {
        tmp_left_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_136 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 752;
        goto frame_exception_exit_1;
    }

    tmp_right_name_136 = const_int_pos_5;
    tmp_assign_source_623 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_136, tmp_right_name_136 );
    if ( tmp_assign_source_623 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 752;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_623 );
    tmp_left_name_137 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_137 == NULL ))
    {
        tmp_left_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_137 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 753;
        goto frame_exception_exit_1;
    }

    tmp_right_name_137 = const_int_pos_10;
    tmp_assign_source_624 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_137, tmp_right_name_137 );
    if ( tmp_assign_source_624 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 753;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_624 );
    tmp_left_name_138 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_138 == NULL ))
    {
        tmp_left_name_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_138 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 754;
        goto frame_exception_exit_1;
    }

    tmp_right_name_138 = const_int_pos_5;
    tmp_assign_source_625 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_138, tmp_right_name_138 );
    if ( tmp_assign_source_625 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 754;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_625 );
    goto branch_end_170;
    branch_no_170:;
    tmp_len_arg_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_5 == NULL ))
    {
        tmp_len_arg_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 755;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_78 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_compare_left_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 755;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_78 = const_int_pos_5;
    tmp_cmp_Eq_68 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_78, tmp_compare_right_78 );
    if ( tmp_cmp_Eq_68 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_78 );

        frame_module->f_lineno = 755;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_78 );
    if (tmp_cmp_Eq_68 == 1)
    {
        goto branch_yes_171;
    }
    else
    {
        goto branch_no_171;
    }
    branch_yes_171:;
    tmp_left_name_139 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_139 == NULL ))
    {
        tmp_left_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_139 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 756;
        goto frame_exception_exit_1;
    }

    tmp_right_name_139 = const_int_pos_8;
    tmp_assign_source_626 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_139, tmp_right_name_139 );
    if ( tmp_assign_source_626 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 756;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_626 );
    tmp_left_name_140 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_140 == NULL ))
    {
        tmp_left_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_140 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 757;
        goto frame_exception_exit_1;
    }

    tmp_right_name_140 = const_int_pos_10;
    tmp_assign_source_627 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_140, tmp_right_name_140 );
    if ( tmp_assign_source_627 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_627 );
    tmp_left_name_141 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_141 == NULL ))
    {
        tmp_left_name_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_141 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 758;
        goto frame_exception_exit_1;
    }

    tmp_right_name_141 = const_int_pos_7;
    tmp_assign_source_628 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_141, tmp_right_name_141 );
    if ( tmp_assign_source_628 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 758;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_628 );
    goto branch_end_171;
    branch_no_171:;
    // Tried code
    tmp_cond_value_324 = NULL;
    // Tried code
    tmp_len_arg_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_6 == NULL ))
    {
        tmp_len_arg_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 760;
        goto try_finally_handler_698;
    }

    tmp_compexpr_left_315 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_compexpr_left_315 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 760;
        goto try_finally_handler_698;
    }
    tmp_compexpr_right_315 = const_int_pos_6;
    tmp_assign_source_629 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_315, tmp_compexpr_right_315 );
    Py_DECREF( tmp_compexpr_left_315 );
    if ( tmp_assign_source_629 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 760;
        goto try_finally_handler_698;
    }
    {
        PyObject *old = tmp_and_86__value_1;
        tmp_and_86__value_1 = tmp_assign_source_629;
        Py_XDECREF( old );
    }

    tmp_cond_value_325 = tmp_and_86__value_1;

    tmp_cond_truth_325 = CHECK_IF_TRUE( tmp_cond_value_325 );
    if ( tmp_cond_truth_325 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 760;
        goto try_finally_handler_698;
    }
    if (tmp_cond_truth_325 == 1)
    {
        goto condexpr_true_231;
    }
    else
    {
        goto condexpr_false_231;
    }
    condexpr_true_231:;
    tmp_cond_value_324 = NULL;
    // Tried code
    tmp_result = tmp_and_86__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_86__value_1 );
        tmp_and_86__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_316 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_evolve_count );

    if (unlikely( tmp_compexpr_left_316 == NULL ))
    {
        tmp_compexpr_left_316 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_evolve_count );
    }

    if ( tmp_compexpr_left_316 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 746 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 760;
        goto try_finally_handler_699;
    }

    tmp_compexpr_right_316 = const_int_pos_1;
    tmp_cond_value_324 = RICH_COMPARE_GE( tmp_compexpr_left_316, tmp_compexpr_right_316 );
    if ( tmp_cond_value_324 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 760;
        goto try_finally_handler_699;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_699:;
    exception_keeper_type_697 = exception_type;
    exception_keeper_value_697 = exception_value;
    exception_keeper_tb_697 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_697 != NULL )
    {
        exception_type = exception_keeper_type_697;
        exception_value = exception_keeper_value_697;
        exception_tb = exception_keeper_tb_697;

        goto try_finally_handler_698;
    }

    goto finally_end_697;
    finally_end_697:;
    goto condexpr_end_231;
    condexpr_false_231:;
    tmp_cond_value_324 = tmp_and_86__value_1;

    Py_INCREF( tmp_cond_value_324 );
    condexpr_end_231:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_698:;
    exception_keeper_type_698 = exception_type;
    exception_keeper_value_698 = exception_value;
    exception_keeper_tb_698 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_698 != NULL )
    {
        exception_type = exception_keeper_type_698;
        exception_value = exception_keeper_value_698;
        exception_tb = exception_keeper_tb_698;

        goto try_finally_handler_697;
    }

    goto finally_end_698;
    finally_end_698:;
    tmp_cond_truth_324 = CHECK_IF_TRUE( tmp_cond_value_324 );
    if ( tmp_cond_truth_324 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_324 );

        frame_module->f_lineno = 760;
        goto try_finally_handler_697;
    }
    Py_DECREF( tmp_cond_value_324 );
    if (tmp_cond_truth_324 == 1)
    {
        goto branch_yes_172;
    }
    else
    {
        goto branch_no_172;
    }
    branch_yes_172:;
    tmp_left_name_142 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_142 == NULL ))
    {
        tmp_left_name_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_142 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 761;
        goto try_finally_handler_697;
    }

    tmp_right_name_142 = const_int_pos_10;
    tmp_assign_source_630 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_142, tmp_right_name_142 );
    if ( tmp_assign_source_630 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 761;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_630 );
    tmp_left_name_143 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_143 == NULL ))
    {
        tmp_left_name_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_143 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 762;
        goto try_finally_handler_697;
    }

    tmp_right_name_143 = const_int_pos_10;
    tmp_assign_source_631 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_143, tmp_right_name_143 );
    if ( tmp_assign_source_631 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 762;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_631 );
    tmp_left_name_144 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_144 == NULL ))
    {
        tmp_left_name_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_144 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 763;
        goto try_finally_handler_697;
    }

    tmp_right_name_144 = const_int_pos_8;
    tmp_assign_source_632 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_144, tmp_right_name_144 );
    if ( tmp_assign_source_632 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 763;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_632 );
    goto branch_end_172;
    branch_no_172:;
    tmp_len_arg_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_7 == NULL ))
    {
        tmp_len_arg_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 764;
        goto try_finally_handler_697;
    }

    tmp_compare_left_79 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_compare_left_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 764;
        goto try_finally_handler_697;
    }
    tmp_compare_right_79 = const_int_pos_7;
    tmp_cmp_Eq_69 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_79, tmp_compare_right_79 );
    if ( tmp_cmp_Eq_69 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_79 );

        frame_module->f_lineno = 764;
        goto try_finally_handler_697;
    }
    Py_DECREF( tmp_compare_left_79 );
    if (tmp_cmp_Eq_69 == 1)
    {
        goto branch_yes_173;
    }
    else
    {
        goto branch_no_173;
    }
    branch_yes_173:;
    tmp_left_name_145 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_145 == NULL ))
    {
        tmp_left_name_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_145 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 765;
        goto try_finally_handler_697;
    }

    tmp_right_name_145 = const_int_pos_10;
    tmp_assign_source_633 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_145, tmp_right_name_145 );
    if ( tmp_assign_source_633 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 765;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_633 );
    tmp_left_name_146 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_146 == NULL ))
    {
        tmp_left_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_146 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 766;
        goto try_finally_handler_697;
    }

    tmp_right_name_146 = const_int_pos_15;
    tmp_assign_source_634 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_146, tmp_right_name_146 );
    if ( tmp_assign_source_634 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 766;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_634 );
    tmp_left_name_147 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_147 == NULL ))
    {
        tmp_left_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_147 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 767;
        goto try_finally_handler_697;
    }

    tmp_right_name_147 = const_int_pos_9;
    tmp_assign_source_635 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_147, tmp_right_name_147 );
    if ( tmp_assign_source_635 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 767;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_635 );
    goto branch_end_173;
    branch_no_173:;
    tmp_len_arg_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_8 == NULL ))
    {
        tmp_len_arg_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 768;
        goto try_finally_handler_697;
    }

    tmp_compare_left_80 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_compare_left_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 768;
        goto try_finally_handler_697;
    }
    tmp_compare_right_80 = const_int_pos_8;
    tmp_cmp_Eq_70 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_80, tmp_compare_right_80 );
    if ( tmp_cmp_Eq_70 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_80 );

        frame_module->f_lineno = 768;
        goto try_finally_handler_697;
    }
    Py_DECREF( tmp_compare_left_80 );
    if (tmp_cmp_Eq_70 == 1)
    {
        goto branch_yes_174;
    }
    else
    {
        goto branch_no_174;
    }
    branch_yes_174:;
    tmp_left_name_148 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_148 == NULL ))
    {
        tmp_left_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_148 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 769;
        goto try_finally_handler_697;
    }

    tmp_right_name_148 = const_int_pos_10;
    tmp_assign_source_636 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_148, tmp_right_name_148 );
    if ( tmp_assign_source_636 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 769;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_636 );
    tmp_left_name_149 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_149 == NULL ))
    {
        tmp_left_name_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_149 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 770;
        goto try_finally_handler_697;
    }

    tmp_right_name_149 = const_int_pos_15;
    tmp_assign_source_637 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_149, tmp_right_name_149 );
    if ( tmp_assign_source_637 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 770;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_637 );
    tmp_left_name_150 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_150 == NULL ))
    {
        tmp_left_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_150 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 771;
        goto try_finally_handler_697;
    }

    tmp_right_name_150 = const_int_pos_10;
    tmp_assign_source_638 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_150, tmp_right_name_150 );
    if ( tmp_assign_source_638 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 771;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_638 );
    goto branch_end_174;
    branch_no_174:;
    tmp_len_arg_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_levels );

    if (unlikely( tmp_len_arg_9 == NULL ))
    {
        tmp_len_arg_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_levels );
    }

    if ( tmp_len_arg_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1657 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 772;
        goto try_finally_handler_697;
    }

    tmp_compare_left_81 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_compare_left_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 772;
        goto try_finally_handler_697;
    }
    tmp_compare_right_81 = const_int_pos_9;
    tmp_cmp_GtE_2 = RICH_COMPARE_BOOL_GE( tmp_compare_left_81, tmp_compare_right_81 );
    if ( tmp_cmp_GtE_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_81 );

        frame_module->f_lineno = 772;
        goto try_finally_handler_697;
    }
    Py_DECREF( tmp_compare_left_81 );
    if (tmp_cmp_GtE_2 == 1)
    {
        goto branch_yes_175;
    }
    else
    {
        goto branch_no_175;
    }
    branch_yes_175:;
    tmp_left_name_151 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_151 == NULL ))
    {
        tmp_left_name_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_151 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 773;
        goto try_finally_handler_697;
    }

    tmp_right_name_151 = const_int_pos_5;
    tmp_assign_source_639 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_151, tmp_right_name_151 );
    if ( tmp_assign_source_639 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 773;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage, tmp_assign_source_639 );
    tmp_left_name_152 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_left_name_152 == NULL ))
    {
        tmp_left_name_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_left_name_152 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 774;
        goto try_finally_handler_697;
    }

    tmp_right_name_152 = const_int_pos_5;
    tmp_assign_source_640 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_152, tmp_right_name_152 );
    if ( tmp_assign_source_640 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 774;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp, tmp_assign_source_640 );
    tmp_left_name_153 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_left_name_153 == NULL ))
    {
        tmp_left_name_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_left_name_153 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 775;
        goto try_finally_handler_697;
    }

    tmp_right_name_153 = const_int_pos_5;
    tmp_assign_source_641 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_153, tmp_right_name_153 );
    if ( tmp_assign_source_641 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 775;
        goto try_finally_handler_697;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana, tmp_assign_source_641 );
    branch_no_175:;
    branch_end_174:;
    branch_end_173:;
    branch_end_172:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_697:;
    exception_keeper_type_699 = exception_type;
    exception_keeper_value_699 = exception_value;
    exception_keeper_tb_699 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_239 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_86__value_1 );
    tmp_and_86__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_239;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_699 != NULL )
    {
        exception_type = exception_keeper_type_699;
        exception_value = exception_keeper_value_699;
        exception_tb = exception_keeper_tb_699;

        goto frame_exception_exit_1;
    }

    goto finally_end_699;
    finally_end_699:;
    branch_end_171:;
    branch_end_170:;
    branch_end_169:;
    branch_end_168:;
    branch_end_167:;
    tmp_assign_source_642 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop, tmp_assign_source_642 );
    tmp_assign_source_643 = const_str_empty;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act, tmp_assign_source_643 );
    tmp_assign_source_644 = const_str_empty;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words, tmp_assign_source_644 );
    tmp_called_name_75 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 780;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_46 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 780;
    tmp_assign_source_645 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_75, tmp_call_arg_element_46 );
    if ( tmp_assign_source_645 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 780;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act, tmp_assign_source_645 );
    tmp_source_name_58 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_act );

    if (unlikely( tmp_source_name_58 == NULL ))
    {
        tmp_source_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_act );
    }

    if ( tmp_source_name_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 293 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 781;
        goto frame_exception_exit_1;
    }

    tmp_called_name_76 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_split );
    if ( tmp_called_name_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 781;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_47 = const_str_space;
    frame_module->f_lineno = 781;
    tmp_assign_source_646 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_76, tmp_call_arg_element_47 );
    Py_DECREF( tmp_called_name_76 );
    if ( tmp_assign_source_646 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 781;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_words, tmp_assign_source_646 );
    tmp_assign_source_647 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop, tmp_assign_source_647 );
    loop_start_4:;
    tmp_cond_value_326 = NULL;
    // Tried code
    tmp_operand_name_2 = NULL;
    // Tried code
    tmp_compexpr_left_317 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter );

    if (unlikely( tmp_compexpr_left_317 == NULL ))
    {
        tmp_compexpr_left_317 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter );
    }

    if ( tmp_compexpr_left_317 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1231 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 783;
        goto try_finally_handler_701;
    }

    tmp_compexpr_right_317 = const_int_0;
    tmp_assign_source_648 = RICH_COMPARE_NE( tmp_compexpr_left_317, tmp_compexpr_right_317 );
    if ( tmp_assign_source_648 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 783;
        goto try_finally_handler_701;
    }
    {
        PyObject *old = tmp_and_93__value_1;
        tmp_and_93__value_1 = tmp_assign_source_648;
        Py_XDECREF( old );
    }

    tmp_cond_value_327 = tmp_and_93__value_1;

    tmp_cond_truth_327 = CHECK_IF_TRUE( tmp_cond_value_327 );
    if ( tmp_cond_truth_327 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 783;
        goto try_finally_handler_701;
    }
    if (tmp_cond_truth_327 == 1)
    {
        goto condexpr_true_232;
    }
    else
    {
        goto condexpr_false_232;
    }
    condexpr_true_232:;
    tmp_operand_name_2 = NULL;
    // Tried code
    tmp_result = tmp_and_93__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_93__value_1 );
        tmp_and_93__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_318 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time );

    if (unlikely( tmp_compexpr_left_318 == NULL ))
    {
        tmp_compexpr_left_318 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encounter_time );
    }

    if ( tmp_compexpr_left_318 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 556 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 783;
        goto try_finally_handler_702;
    }

    tmp_compexpr_right_318 = const_int_0;
    tmp_operand_name_2 = RICH_COMPARE_LE( tmp_compexpr_left_318, tmp_compexpr_right_318 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 783;
        goto try_finally_handler_702;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_702:;
    exception_keeper_type_700 = exception_type;
    exception_keeper_value_700 = exception_value;
    exception_keeper_tb_700 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_700 != NULL )
    {
        exception_type = exception_keeper_type_700;
        exception_value = exception_keeper_value_700;
        exception_tb = exception_keeper_tb_700;

        goto try_finally_handler_701;
    }

    goto finally_end_700;
    finally_end_700:;
    goto condexpr_end_232;
    condexpr_false_232:;
    tmp_operand_name_2 = tmp_and_93__value_1;

    Py_INCREF( tmp_operand_name_2 );
    condexpr_end_232:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_701:;
    exception_keeper_type_701 = exception_type;
    exception_keeper_value_701 = exception_value;
    exception_keeper_tb_701 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_701 != NULL )
    {
        exception_type = exception_keeper_type_701;
        exception_value = exception_keeper_value_701;
        exception_tb = exception_keeper_tb_701;

        goto try_finally_handler_700;
    }

    goto finally_end_701;
    finally_end_701:;
    tmp_cond_value_326 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_cond_value_326 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 783;
        goto try_finally_handler_700;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_700:;
    exception_keeper_type_702 = exception_type;
    exception_keeper_value_702 = exception_value;
    exception_keeper_tb_702 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_240 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_93__value_1 );
    tmp_and_93__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_240;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_702 != NULL )
    {
        exception_type = exception_keeper_type_702;
        exception_value = exception_keeper_value_702;
        exception_tb = exception_keeper_tb_702;

        goto frame_exception_exit_1;
    }

    goto finally_end_702;
    finally_end_702:;
    tmp_cond_truth_326 = CHECK_IF_TRUE( tmp_cond_value_326 );
    if ( tmp_cond_truth_326 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 783;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_326 == 1)
    {
        goto branch_yes_176;
    }
    else
    {
        goto branch_no_176;
    }
    branch_yes_176:;
    goto loop_end_4;
    branch_no_176:;
    tmp_assign_source_649 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop, tmp_assign_source_649 );
    loop_start_5:;
    tmp_compare_left_82 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_set );

    if (unlikely( tmp_compare_left_82 == NULL ))
    {
        tmp_compare_left_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_set );
    }

    if ( tmp_compare_left_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1685 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 785;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_82 = const_int_pos_1;
    tmp_cmp_NotEq_3 = RICH_COMPARE_BOOL_NE( tmp_compare_left_82, tmp_compare_right_82 );
    if ( tmp_cmp_NotEq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 785;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotEq_3 == 1)
    {
        goto branch_no_177;
    }
    else
    {
        goto branch_yes_177;
    }
    branch_yes_177:;
    goto loop_end_5;
    branch_no_177:;
    tmp_compare_left_83 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_83 == NULL ))
    {
        tmp_compare_left_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_83 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 786;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_83 = const_str_plain_wolf;
    tmp_cmp_Eq_71 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_83, tmp_compare_right_83 );
    if ( tmp_cmp_Eq_71 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 786;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_71 == 1)
    {
        goto branch_yes_178;
    }
    else
    {
        goto branch_no_178;
    }
    branch_yes_178:;
    tmp_assign_source_650 = const_int_pos_15;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_650 );
    tmp_source_name_59 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_59 == NULL ))
    {
        tmp_source_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 788;
        goto frame_exception_exit_1;
    }

    tmp_called_name_77 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_randint );
    if ( tmp_called_name_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 788;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_48 = const_int_pos_2;
    tmp_call_arg_element_49 = const_int_pos_4;
    frame_module->f_lineno = 788;
    tmp_assign_source_651 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_77, tmp_call_arg_element_48, tmp_call_arg_element_49 );
    Py_DECREF( tmp_called_name_77 );
    if ( tmp_assign_source_651 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 788;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_651 );
    tmp_assign_source_652 = const_str_digest_3199a9c83d03c5a0c8d4a0cca204f2a0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_652 );
    tmp_assign_source_653 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_653 );
    goto branch_end_178;
    branch_no_178:;
    tmp_compare_left_84 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_84 == NULL ))
    {
        tmp_compare_left_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_84 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 791;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_84 = const_str_plain_orc;
    tmp_cmp_Eq_72 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_84, tmp_compare_right_84 );
    if ( tmp_cmp_Eq_72 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 791;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_72 == 1)
    {
        goto branch_yes_179;
    }
    else
    {
        goto branch_no_179;
    }
    branch_yes_179:;
    tmp_assign_source_654 = const_int_pos_25;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_654 );
    tmp_source_name_60 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_60 == NULL ))
    {
        tmp_source_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 793;
        goto frame_exception_exit_1;
    }

    tmp_called_name_78 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_randint );
    if ( tmp_called_name_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 793;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_50 = const_int_pos_6;
    tmp_call_arg_element_51 = const_int_pos_8;
    frame_module->f_lineno = 793;
    tmp_assign_source_655 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_78, tmp_call_arg_element_50, tmp_call_arg_element_51 );
    Py_DECREF( tmp_called_name_78 );
    if ( tmp_assign_source_655 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 793;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_655 );
    tmp_assign_source_656 = const_str_digest_945fe5ca24bb47d33c320b179193760a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_656 );
    tmp_assign_source_657 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_657 );
    goto branch_end_179;
    branch_no_179:;
    tmp_compare_left_85 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_85 == NULL ))
    {
        tmp_compare_left_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_85 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 796;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_85 = const_str_plain_wraith;
    tmp_cmp_Eq_73 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_85, tmp_compare_right_85 );
    if ( tmp_cmp_Eq_73 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 796;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_73 == 1)
    {
        goto branch_yes_180;
    }
    else
    {
        goto branch_no_180;
    }
    branch_yes_180:;
    tmp_assign_source_658 = const_int_pos_30;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_658 );
    tmp_source_name_61 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_61 == NULL ))
    {
        tmp_source_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_61 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 798;
        goto frame_exception_exit_1;
    }

    tmp_called_name_79 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_randint );
    if ( tmp_called_name_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 798;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_52 = const_int_pos_7;
    tmp_call_arg_element_53 = const_int_pos_9;
    frame_module->f_lineno = 798;
    tmp_assign_source_659 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_79, tmp_call_arg_element_52, tmp_call_arg_element_53 );
    Py_DECREF( tmp_called_name_79 );
    if ( tmp_assign_source_659 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 798;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_659 );
    tmp_assign_source_660 = const_str_digest_a5300c714d41971b3085dd5d05860574;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_660 );
    tmp_assign_source_661 = const_int_pos_3;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_661 );
    goto branch_end_180;
    branch_no_180:;
    tmp_compare_left_86 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_86 == NULL ))
    {
        tmp_compare_left_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 801;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_86 = const_str_plain_dwarf;
    tmp_cmp_Eq_74 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_86, tmp_compare_right_86 );
    if ( tmp_cmp_Eq_74 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 801;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_74 == 1)
    {
        goto branch_yes_181;
    }
    else
    {
        goto branch_no_181;
    }
    branch_yes_181:;
    tmp_assign_source_662 = const_int_pos_35;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_662 );
    tmp_source_name_62 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_62 == NULL ))
    {
        tmp_source_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 803;
        goto frame_exception_exit_1;
    }

    tmp_called_name_80 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_randint );
    if ( tmp_called_name_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 803;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_54 = const_int_pos_7;
    tmp_call_arg_element_55 = const_int_pos_10;
    frame_module->f_lineno = 803;
    tmp_assign_source_663 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_80, tmp_call_arg_element_54, tmp_call_arg_element_55 );
    Py_DECREF( tmp_called_name_80 );
    if ( tmp_assign_source_663 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 803;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_663 );
    tmp_assign_source_664 = const_str_digest_f0fce6e2e1e5199c033a274ea14748eb;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_664 );
    tmp_assign_source_665 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_665 );
    goto branch_end_181;
    branch_no_181:;
    tmp_compare_left_87 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_87 == NULL ))
    {
        tmp_compare_left_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_87 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 806;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_87 = const_str_plain_spirit;
    tmp_cmp_Eq_75 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_87, tmp_compare_right_87 );
    if ( tmp_cmp_Eq_75 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 806;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_75 == 1)
    {
        goto branch_yes_182;
    }
    else
    {
        goto branch_no_182;
    }
    branch_yes_182:;
    tmp_assign_source_666 = const_int_pos_40;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_666 );
    tmp_source_name_63 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_63 == NULL ))
    {
        tmp_source_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 808;
        goto frame_exception_exit_1;
    }

    tmp_called_name_81 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_randint );
    if ( tmp_called_name_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 808;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_56 = const_int_pos_8;
    tmp_call_arg_element_57 = const_int_pos_11;
    frame_module->f_lineno = 808;
    tmp_assign_source_667 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_81, tmp_call_arg_element_56, tmp_call_arg_element_57 );
    Py_DECREF( tmp_called_name_81 );
    if ( tmp_assign_source_667 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 808;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_667 );
    tmp_assign_source_668 = const_str_digest_3be955ac72ff89fc82250a6499cde963;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_668 );
    tmp_assign_source_669 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_669 );
    goto branch_end_182;
    branch_no_182:;
    tmp_compare_left_88 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_88 == NULL ))
    {
        tmp_compare_left_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 811;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_88 = const_str_plain_slime;
    tmp_cmp_Eq_76 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_88, tmp_compare_right_88 );
    if ( tmp_cmp_Eq_76 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 811;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_76 == 1)
    {
        goto branch_yes_183;
    }
    else
    {
        goto branch_no_183;
    }
    branch_yes_183:;
    tmp_assign_source_670 = const_int_pos_100;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_670 );
    tmp_source_name_64 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_64 == NULL ))
    {
        tmp_source_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_64 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 813;
        goto frame_exception_exit_1;
    }

    tmp_called_name_82 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_randint );
    if ( tmp_called_name_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 813;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_58 = const_int_pos_5;
    tmp_call_arg_element_59 = const_int_pos_15;
    frame_module->f_lineno = 813;
    tmp_assign_source_671 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_82, tmp_call_arg_element_58, tmp_call_arg_element_59 );
    Py_DECREF( tmp_called_name_82 );
    if ( tmp_assign_source_671 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 813;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_671 );
    tmp_assign_source_672 = const_str_digest_15528ddd1ecf9b12264c55564182fa7a;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info, tmp_assign_source_672 );
    tmp_assign_source_673 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dodge, tmp_assign_source_673 );
    branch_no_183:;
    branch_end_182:;
    branch_end_181:;
    branch_end_180:;
    branch_end_179:;
    branch_end_178:;
    tmp_subscribed_name_67 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_67 == NULL ))
    {
        tmp_subscribed_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_67 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_67 = const_str_plain_red;
    tmp_left_name_157 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_67, tmp_subscript_name_67 );
    if ( tmp_left_name_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_right_name_154 = const_str_digest_6743b9fcc57cf1b169fb4ef6c7a955d2;
    tmp_left_name_156 = BINARY_OPERATION_ADD( tmp_left_name_157, tmp_right_name_154 );
    Py_DECREF( tmp_left_name_157 );
    if ( tmp_left_name_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_right_name_155 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_right_name_155 == NULL ))
    {
        tmp_right_name_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_right_name_155 == NULL )
    {
        Py_DECREF( tmp_left_name_156 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }

    tmp_left_name_155 = BINARY_OPERATION_ADD( tmp_left_name_156, tmp_right_name_155 );
    Py_DECREF( tmp_left_name_156 );
    if ( tmp_left_name_155 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_right_name_156 = const_str_digest_bdc1e5b842ee0a84a7b24240306fcbde;
    tmp_left_name_154 = BINARY_OPERATION_ADD( tmp_left_name_155, tmp_right_name_156 );
    Py_DECREF( tmp_left_name_155 );
    if ( tmp_left_name_154 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_68 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_68 == NULL ))
    {
        tmp_subscribed_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_68 == NULL )
    {
        Py_DECREF( tmp_left_name_154 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_68 = const_str_plain_off;
    tmp_right_name_157 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_68, tmp_subscript_name_68 );
    if ( tmp_right_name_157 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_154 );

        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_674 = BINARY_OPERATION_ADD( tmp_left_name_154, tmp_right_name_157 );
    Py_DECREF( tmp_left_name_154 );
    Py_DECREF( tmp_right_name_157 );
    if ( tmp_assign_source_674 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 817;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_info, tmp_assign_source_674 );
    tmp_str_arg_108 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_info );

    if (unlikely( tmp_str_arg_108 == NULL ))
    {
        tmp_str_arg_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_info );
    }

    if ( tmp_str_arg_108 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1716 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 818;
        goto frame_exception_exit_1;
    }

    tmp_print_value = PyObject_Str( tmp_str_arg_108 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 818;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 818;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 818;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_675 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_set, tmp_assign_source_675 );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 785;
        goto frame_exception_exit_1;
    }
    goto loop_start_5;
    loop_end_5:;
    tmp_called_name_83 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_69 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_69 == NULL ))
    {
        tmp_subscribed_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_69 = const_str_plain_blue;
    tmp_left_name_173 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_69, tmp_subscript_name_69 );
    if ( tmp_left_name_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_right_name_158 = const_str_digest_39380e7c6c8a7d893bb571b6c41ba3fe;
    tmp_left_name_172 = BINARY_OPERATION_ADD( tmp_left_name_173, tmp_right_name_158 );
    Py_DECREF( tmp_left_name_173 );
    if ( tmp_left_name_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_70 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_70 == NULL ))
    {
        tmp_subscribed_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_70 == NULL )
    {
        Py_DECREF( tmp_left_name_172 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_70 = const_str_plain_yellow;
    tmp_right_name_159 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_70, tmp_subscript_name_70 );
    if ( tmp_right_name_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_172 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_171 = BINARY_OPERATION_ADD( tmp_left_name_172, tmp_right_name_159 );
    Py_DECREF( tmp_left_name_172 );
    Py_DECREF( tmp_right_name_159 );
    if ( tmp_left_name_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_right_name_160 = const_str_digest_b6e64694f0625a8db6f4a3fc5ea57fd3;
    tmp_left_name_170 = BINARY_OPERATION_ADD( tmp_left_name_171, tmp_right_name_160 );
    Py_DECREF( tmp_left_name_171 );
    if ( tmp_left_name_170 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_71 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_71 == NULL ))
    {
        tmp_subscribed_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_71 == NULL )
    {
        Py_DECREF( tmp_left_name_170 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_71 = const_str_plain_green;
    tmp_right_name_161 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_71, tmp_subscript_name_71 );
    if ( tmp_right_name_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_170 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_169 = BINARY_OPERATION_ADD( tmp_left_name_170, tmp_right_name_161 );
    Py_DECREF( tmp_left_name_170 );
    Py_DECREF( tmp_right_name_161 );
    if ( tmp_left_name_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_174 = const_str_digest_d21acec99d223ff4aa839ddb2436a86d;
    tmp_right_name_163 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_right_name_163 == NULL ))
    {
        tmp_right_name_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_right_name_163 == NULL )
    {
        Py_DECREF( tmp_left_name_169 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_right_name_162 = BINARY_OPERATION_REMAINDER( tmp_left_name_174, tmp_right_name_163 );
    if ( tmp_right_name_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_169 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_168 = BINARY_OPERATION_ADD( tmp_left_name_169, tmp_right_name_162 );
    Py_DECREF( tmp_left_name_169 );
    Py_DECREF( tmp_right_name_162 );
    if ( tmp_left_name_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_72 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_72 == NULL ))
    {
        tmp_subscribed_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_72 == NULL )
    {
        Py_DECREF( tmp_left_name_168 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_72 = const_str_plain_red;
    tmp_right_name_164 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_72, tmp_subscript_name_72 );
    if ( tmp_right_name_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_168 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_167 = BINARY_OPERATION_ADD( tmp_left_name_168, tmp_right_name_164 );
    Py_DECREF( tmp_left_name_168 );
    Py_DECREF( tmp_right_name_164 );
    if ( tmp_left_name_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_175 = const_str_digest_82a4f5bd40ca61f63ae66c7399f848ad;
    tmp_right_name_166 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_right_name_166 == NULL ))
    {
        tmp_right_name_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_right_name_166 == NULL )
    {
        Py_DECREF( tmp_left_name_167 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_right_name_165 = BINARY_OPERATION_REMAINDER( tmp_left_name_175, tmp_right_name_166 );
    if ( tmp_right_name_165 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_167 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_166 = BINARY_OPERATION_ADD( tmp_left_name_167, tmp_right_name_165 );
    Py_DECREF( tmp_left_name_167 );
    Py_DECREF( tmp_right_name_165 );
    if ( tmp_left_name_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_73 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_73 == NULL ))
    {
        tmp_subscribed_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_73 == NULL )
    {
        Py_DECREF( tmp_left_name_166 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_73 = const_str_plain_yellow;
    tmp_right_name_167 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_73, tmp_subscript_name_73 );
    if ( tmp_right_name_167 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_166 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_165 = BINARY_OPERATION_ADD( tmp_left_name_166, tmp_right_name_167 );
    Py_DECREF( tmp_left_name_166 );
    Py_DECREF( tmp_right_name_167 );
    if ( tmp_left_name_165 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_right_name_168 = const_str_digest_2b9f05328b61046b25a7911eca1f60f2;
    tmp_left_name_164 = BINARY_OPERATION_ADD( tmp_left_name_165, tmp_right_name_168 );
    Py_DECREF( tmp_left_name_165 );
    if ( tmp_left_name_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_74 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_74 == NULL ))
    {
        tmp_subscribed_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_74 == NULL )
    {
        Py_DECREF( tmp_left_name_164 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_74 = const_str_plain_green;
    tmp_right_name_169 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_74, tmp_subscript_name_74 );
    if ( tmp_right_name_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_164 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_163 = BINARY_OPERATION_ADD( tmp_left_name_164, tmp_right_name_169 );
    Py_DECREF( tmp_left_name_164 );
    Py_DECREF( tmp_right_name_169 );
    if ( tmp_left_name_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_176 = const_str_digest_dedaf9312f3000d8a51c9b5bb5aab81e;
    tmp_right_name_171 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_right_name_171 == NULL ))
    {
        tmp_right_name_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_right_name_171 == NULL )
    {
        Py_DECREF( tmp_left_name_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_right_name_170 = BINARY_OPERATION_REMAINDER( tmp_left_name_176, tmp_right_name_171 );
    if ( tmp_right_name_170 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_163 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_162 = BINARY_OPERATION_ADD( tmp_left_name_163, tmp_right_name_170 );
    Py_DECREF( tmp_left_name_163 );
    Py_DECREF( tmp_right_name_170 );
    if ( tmp_left_name_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_75 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_75 == NULL ))
    {
        tmp_subscribed_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_75 == NULL )
    {
        Py_DECREF( tmp_left_name_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_75 = const_str_plain_red;
    tmp_right_name_172 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_75, tmp_subscript_name_75 );
    if ( tmp_right_name_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_162 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_161 = BINARY_OPERATION_ADD( tmp_left_name_162, tmp_right_name_172 );
    Py_DECREF( tmp_left_name_162 );
    Py_DECREF( tmp_right_name_172 );
    if ( tmp_left_name_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_177 = const_str_digest_544010be28dd8c0c26d4ccd8c6bcc62d;
    tmp_right_name_174 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info );

    if (unlikely( tmp_right_name_174 == NULL ))
    {
        tmp_right_name_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_dam_info );
    }

    if ( tmp_right_name_174 == NULL )
    {
        Py_DECREF( tmp_left_name_161 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1778 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_right_name_173 = BINARY_OPERATION_REMAINDER( tmp_left_name_177, tmp_right_name_174 );
    if ( tmp_right_name_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_161 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_160 = BINARY_OPERATION_ADD( tmp_left_name_161, tmp_right_name_173 );
    Py_DECREF( tmp_left_name_161 );
    Py_DECREF( tmp_right_name_173 );
    if ( tmp_left_name_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_76 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_76 == NULL ))
    {
        tmp_subscribed_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_76 == NULL )
    {
        Py_DECREF( tmp_left_name_160 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_76 = const_str_plain_yellow;
    tmp_right_name_175 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_76, tmp_subscript_name_76 );
    if ( tmp_right_name_175 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_160 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_left_name_159 = BINARY_OPERATION_ADD( tmp_left_name_160, tmp_right_name_175 );
    Py_DECREF( tmp_left_name_160 );
    Py_DECREF( tmp_right_name_175 );
    if ( tmp_left_name_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_right_name_176 = const_str_digest_bab877bb6a22a7eac6f3df35628ffacb;
    tmp_left_name_158 = BINARY_OPERATION_ADD( tmp_left_name_159, tmp_right_name_176 );
    Py_DECREF( tmp_left_name_159 );
    if ( tmp_left_name_158 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_77 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_77 == NULL ))
    {
        tmp_subscribed_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_77 == NULL )
    {
        Py_DECREF( tmp_left_name_158 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_77 = const_str_plain_off;
    tmp_right_name_177 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_77, tmp_subscript_name_77 );
    if ( tmp_right_name_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_158 );

        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_37 = BINARY_OPERATION_ADD( tmp_left_name_158, tmp_right_name_177 );
    Py_DECREF( tmp_left_name_158 );
    Py_DECREF( tmp_right_name_177 );
    if ( tmp_args_element_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 820;
    tmp_assign_source_676 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_83, tmp_args_element_name_37 );
    Py_DECREF( tmp_args_element_name_37 );
    if ( tmp_assign_source_676 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 820;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act, tmp_assign_source_676 );
    tmp_assign_source_677 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges, tmp_assign_source_677 );
    tmp_compare_left_89 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compare_left_89 == NULL ))
    {
        tmp_compare_left_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compare_left_89 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 822;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_89 = const_str_plain_1;
    tmp_cmp_Eq_77 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_89, tmp_compare_right_89 );
    if ( tmp_cmp_Eq_77 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 822;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_77 == 1)
    {
        goto branch_yes_184;
    }
    else
    {
        goto branch_no_184;
    }
    branch_yes_184:;
    tmp_left_name_178 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_178 == NULL ))
    {
        tmp_left_name_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_178 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 823;
        goto frame_exception_exit_1;
    }

    tmp_right_name_178 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_right_name_178 == NULL ))
    {
        tmp_right_name_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_right_name_178 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 823;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_678 = BINARY_OPERATION_SUB( tmp_left_name_178, tmp_right_name_178 );
    if ( tmp_assign_source_678 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 823;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_678 );
    tmp_subscribed_name_78 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_78 == NULL ))
    {
        tmp_subscribed_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_78 = const_str_plain_green;
    tmp_left_name_180 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_78, tmp_subscript_name_78 );
    if ( tmp_left_name_180 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_left_name_181 = const_str_digest_bbba3068aeccffdb18e97016eda79e81;
    tmp_right_name_180 = PyTuple_New( 2 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_left_name_180 );
        Py_DECREF( tmp_right_name_180 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_right_name_180, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_left_name_180 );
        Py_DECREF( tmp_right_name_180 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_right_name_180, 1, tmp_tuple_element_5 );
    tmp_right_name_179 = BINARY_OPERATION_REMAINDER( tmp_left_name_181, tmp_right_name_180 );
    Py_DECREF( tmp_right_name_180 );
    if ( tmp_right_name_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_180 );

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_left_name_179 = BINARY_OPERATION_ADD( tmp_left_name_180, tmp_right_name_179 );
    Py_DECREF( tmp_left_name_180 );
    Py_DECREF( tmp_right_name_179 );
    if ( tmp_left_name_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_79 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_79 == NULL ))
    {
        tmp_subscribed_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_79 == NULL )
    {
        Py_DECREF( tmp_left_name_179 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_79 = const_str_plain_off;
    tmp_right_name_181 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_79, tmp_subscript_name_79 );
    if ( tmp_right_name_181 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_179 );

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_109 = BINARY_OPERATION_ADD( tmp_left_name_179, tmp_right_name_181 );
    Py_DECREF( tmp_left_name_179 );
    Py_DECREF( tmp_right_name_181 );
    if ( tmp_str_arg_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_109 );
    Py_DECREF( tmp_str_arg_109 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }
    goto branch_end_184;
    branch_no_184:;
    tmp_compare_left_90 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compare_left_90 == NULL ))
    {
        tmp_compare_left_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compare_left_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 825;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_90 = const_str_plain_2;
    tmp_cmp_Eq_78 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_90, tmp_compare_right_90 );
    if ( tmp_cmp_Eq_78 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 825;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_78 == 1)
    {
        goto branch_yes_185;
    }
    else
    {
        goto branch_no_185;
    }
    branch_yes_185:;
    tmp_left_name_182 = const_str_digest_d5b4a07f69d1e4c0335732b2a301b14a;
    tmp_source_name_65 = const_str_newline;
    tmp_called_name_84 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_join );
    if ( tmp_called_name_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_38 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells_thing );

    if (unlikely( tmp_args_element_name_38 == NULL ))
    {
        tmp_args_element_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells_thing );
    }

    if ( tmp_args_element_name_38 == NULL )
    {
        Py_DECREF( tmp_called_name_84 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 712 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 826;
    tmp_right_name_182 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_84, tmp_args_element_name_38 );
    Py_DECREF( tmp_called_name_84 );
    if ( tmp_right_name_182 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_110 = BINARY_OPERATION_ADD( tmp_left_name_182, tmp_right_name_182 );
    Py_DECREF( tmp_right_name_182 );
    if ( tmp_str_arg_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_110 );
    Py_DECREF( tmp_str_arg_110 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_called_name_85 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_60 = const_str_digest_1c1f0a417d5e943433755a8ce593542f;
    frame_module->f_lineno = 827;
    tmp_assign_source_679 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_85, tmp_call_arg_element_60 );
    if ( tmp_assign_source_679 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_attack, tmp_assign_source_679 );
    // Tried code
    tmp_cond_value_328 = NULL;
    // Tried code
    tmp_compexpr_left_319 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_attack );

    if (unlikely( tmp_compexpr_left_319 == NULL ))
    {
        tmp_compexpr_left_319 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_attack );
    }

    if ( tmp_compexpr_left_319 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1845 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 828;
        goto try_finally_handler_704;
    }

    tmp_compexpr_right_319 = const_str_plain_1;
    tmp_assign_source_680 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_319, tmp_compexpr_right_319 );
    if ( tmp_assign_source_680 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 828;
        goto try_finally_handler_704;
    }
    {
        PyObject *old = tmp_and_87__value_2;
        tmp_and_87__value_2 = tmp_assign_source_680;
        Py_XDECREF( old );
    }

    tmp_cond_value_329 = tmp_and_87__value_2;

    tmp_cond_truth_329 = CHECK_IF_TRUE( tmp_cond_value_329 );
    if ( tmp_cond_truth_329 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 828;
        goto try_finally_handler_704;
    }
    if (tmp_cond_truth_329 == 1)
    {
        goto condexpr_true_233;
    }
    else
    {
        goto condexpr_false_233;
    }
    condexpr_true_233:;
    tmp_cond_value_328 = NULL;
    // Tried code
    tmp_cond_value_328 = NULL;
    // Tried code
    tmp_result = tmp_and_87__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_87__value_2 );
        tmp_and_87__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_328 = NULL;
    // Tried code
    tmp_compexpr_left_320 = const_str_plain_firebolt;
    tmp_compexpr_right_320 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_320 == NULL ))
    {
        tmp_compexpr_right_320 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_320 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 828;
        goto try_finally_handler_707;
    }

    tmp_assign_source_681 = SEQUENCE_CONTAINS( tmp_compexpr_left_320, tmp_compexpr_right_320 );
    if ( tmp_assign_source_681 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 828;
        goto try_finally_handler_707;
    }
    {
        PyObject *old = tmp_and_87__value_1;
        tmp_and_87__value_1 = tmp_assign_source_681;
        Py_INCREF( tmp_and_87__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_330 = tmp_and_87__value_1;

    tmp_cond_truth_330 = CHECK_IF_TRUE( tmp_cond_value_330 );
    if ( tmp_cond_truth_330 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 828;
        goto try_finally_handler_707;
    }
    if (tmp_cond_truth_330 == 1)
    {
        goto condexpr_true_234;
    }
    else
    {
        goto condexpr_false_234;
    }
    condexpr_true_234:;
    tmp_cond_value_328 = NULL;
    // Tried code
    tmp_result = tmp_and_87__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_87__value_1 );
        tmp_and_87__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_321 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_compexpr_left_321 == NULL ))
    {
        tmp_compexpr_left_321 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_compexpr_left_321 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 828;
        goto try_finally_handler_708;
    }

    tmp_compexpr_right_321 = const_int_pos_5;
    tmp_cond_value_328 = RICH_COMPARE_GE( tmp_compexpr_left_321, tmp_compexpr_right_321 );
    if ( tmp_cond_value_328 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 828;
        goto try_finally_handler_708;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_708:;
    exception_keeper_type_703 = exception_type;
    exception_keeper_value_703 = exception_value;
    exception_keeper_tb_703 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_703 != NULL )
    {
        exception_type = exception_keeper_type_703;
        exception_value = exception_keeper_value_703;
        exception_tb = exception_keeper_tb_703;

        goto try_finally_handler_707;
    }

    goto finally_end_703;
    finally_end_703:;
    goto condexpr_end_234;
    condexpr_false_234:;
    tmp_cond_value_328 = tmp_and_87__value_1;

    Py_INCREF( tmp_cond_value_328 );
    condexpr_end_234:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_707:;
    exception_keeper_type_704 = exception_type;
    exception_keeper_value_704 = exception_value;
    exception_keeper_tb_704 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_704 != NULL )
    {
        exception_type = exception_keeper_type_704;
        exception_value = exception_keeper_value_704;
        exception_tb = exception_keeper_tb_704;

        goto try_finally_handler_706;
    }

    goto finally_end_704;
    finally_end_704:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_706:;
    exception_keeper_type_705 = exception_type;
    exception_keeper_value_705 = exception_value;
    exception_keeper_tb_705 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_705 != NULL )
    {
        exception_type = exception_keeper_type_705;
        exception_value = exception_keeper_value_705;
        exception_tb = exception_keeper_tb_705;

        goto try_finally_handler_705;
    }

    goto finally_end_705;
    finally_end_705:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_705:;
    exception_keeper_type_706 = exception_type;
    exception_keeper_value_706 = exception_value;
    exception_keeper_tb_706 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_241 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_87__value_1 );
    tmp_and_87__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_241;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_706 != NULL )
    {
        exception_type = exception_keeper_type_706;
        exception_value = exception_keeper_value_706;
        exception_tb = exception_keeper_tb_706;

        goto try_finally_handler_704;
    }

    goto finally_end_706;
    finally_end_706:;
    goto condexpr_end_233;
    condexpr_false_233:;
    tmp_cond_value_328 = tmp_and_87__value_2;

    Py_INCREF( tmp_cond_value_328 );
    condexpr_end_233:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_704:;
    exception_keeper_type_707 = exception_type;
    exception_keeper_value_707 = exception_value;
    exception_keeper_tb_707 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_707 != NULL )
    {
        exception_type = exception_keeper_type_707;
        exception_value = exception_keeper_value_707;
        exception_tb = exception_keeper_tb_707;

        goto try_finally_handler_703;
    }

    goto finally_end_707;
    finally_end_707:;
    tmp_cond_truth_328 = CHECK_IF_TRUE( tmp_cond_value_328 );
    if ( tmp_cond_truth_328 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_328 );

        frame_module->f_lineno = 828;
        goto try_finally_handler_703;
    }
    Py_DECREF( tmp_cond_value_328 );
    if (tmp_cond_truth_328 == 1)
    {
        goto branch_yes_186;
    }
    else
    {
        goto branch_no_186;
    }
    branch_yes_186:;
    tmp_source_name_66 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_66 == NULL ))
    {
        tmp_source_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_66 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 829;
        goto try_finally_handler_703;
    }

    tmp_called_name_86 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_randint );
    if ( tmp_called_name_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 829;
        goto try_finally_handler_703;
    }
    tmp_call_arg_element_61 = const_int_pos_20;
    tmp_call_arg_element_62 = const_int_pos_40;
    frame_module->f_lineno = 829;
    tmp_assign_source_682 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_86, tmp_call_arg_element_61, tmp_call_arg_element_62 );
    Py_DECREF( tmp_called_name_86 );
    if ( tmp_assign_source_682 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 829;
        goto try_finally_handler_703;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam, tmp_assign_source_682 );
    tmp_left_name_183 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_left_name_183 == NULL ))
    {
        tmp_left_name_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_left_name_183 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 830;
        goto try_finally_handler_703;
    }

    tmp_right_name_183 = const_int_pos_5;
    tmp_assign_source_683 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_183, tmp_right_name_183 );
    if ( tmp_assign_source_683 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 830;
        goto try_finally_handler_703;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_683 );
    tmp_left_name_184 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_184 == NULL ))
    {
        tmp_left_name_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_184 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 831;
        goto try_finally_handler_703;
    }

    tmp_right_name_184 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam );

    if (unlikely( tmp_right_name_184 == NULL ))
    {
        tmp_right_name_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_dam );
    }

    if ( tmp_right_name_184 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 831;
        goto try_finally_handler_703;
    }

    tmp_assign_source_684 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_184, tmp_right_name_184 );
    if ( tmp_assign_source_684 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 831;
        goto try_finally_handler_703;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_684 );
    tmp_source_name_67 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_source_name_67 == NULL ))
    {
        tmp_source_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_source_name_67 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 832;
        goto try_finally_handler_703;
    }

    tmp_called_name_87 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_append );
    if ( tmp_called_name_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 832;
        goto try_finally_handler_703;
    }
    tmp_call_arg_element_63 = const_str_plain_Burning;
    frame_module->f_lineno = 832;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_87, tmp_call_arg_element_63 );
    Py_DECREF( tmp_called_name_87 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 832;
        goto try_finally_handler_703;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_685 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer, tmp_assign_source_685 );
    tmp_subscribed_name_80 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_80 == NULL ))
    {
        tmp_subscribed_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }

    tmp_subscript_name_80 = const_str_plain_red;
    tmp_left_name_186 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_80, tmp_subscript_name_80 );
    if ( tmp_left_name_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    tmp_left_name_187 = const_str_digest_299958b72eeba1cfe366c9595a024926;
    tmp_right_name_186 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam );

    if (unlikely( tmp_right_name_186 == NULL ))
    {
        tmp_right_name_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_dam );
    }

    if ( tmp_right_name_186 == NULL )
    {
        Py_DECREF( tmp_left_name_186 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }

    tmp_right_name_185 = BINARY_OPERATION_REMAINDER( tmp_left_name_187, tmp_right_name_186 );
    if ( tmp_right_name_185 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_186 );

        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    tmp_left_name_185 = BINARY_OPERATION_ADD( tmp_left_name_186, tmp_right_name_185 );
    Py_DECREF( tmp_left_name_186 );
    Py_DECREF( tmp_right_name_185 );
    if ( tmp_left_name_185 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    tmp_subscribed_name_81 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_81 == NULL ))
    {
        tmp_subscribed_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_81 == NULL )
    {
        Py_DECREF( tmp_left_name_185 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }

    tmp_subscript_name_81 = const_str_plain_off;
    tmp_right_name_187 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_81, tmp_subscript_name_81 );
    if ( tmp_right_name_187 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_185 );

        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    tmp_str_arg_111 = BINARY_OPERATION_ADD( tmp_left_name_185, tmp_right_name_187 );
    Py_DECREF( tmp_left_name_185 );
    Py_DECREF( tmp_right_name_187 );
    if ( tmp_str_arg_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_111 );
    Py_DECREF( tmp_str_arg_111 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 834;
        goto try_finally_handler_703;
    }
    goto branch_end_186;
    branch_no_186:;
    // Tried code
    tmp_cond_value_331 = NULL;
    // Tried code
    tmp_compexpr_left_322 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_attack );

    if (unlikely( tmp_compexpr_left_322 == NULL ))
    {
        tmp_compexpr_left_322 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_attack );
    }

    if ( tmp_compexpr_left_322 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1845 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 835;
        goto try_finally_handler_710;
    }

    tmp_compexpr_right_322 = const_str_plain_2;
    tmp_assign_source_686 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_322, tmp_compexpr_right_322 );
    if ( tmp_assign_source_686 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 835;
        goto try_finally_handler_710;
    }
    {
        PyObject *old = tmp_and_88__value_2;
        tmp_and_88__value_2 = tmp_assign_source_686;
        Py_XDECREF( old );
    }

    tmp_cond_value_332 = tmp_and_88__value_2;

    tmp_cond_truth_332 = CHECK_IF_TRUE( tmp_cond_value_332 );
    if ( tmp_cond_truth_332 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 835;
        goto try_finally_handler_710;
    }
    if (tmp_cond_truth_332 == 1)
    {
        goto condexpr_true_235;
    }
    else
    {
        goto condexpr_false_235;
    }
    condexpr_true_235:;
    tmp_cond_value_331 = NULL;
    // Tried code
    tmp_cond_value_331 = NULL;
    // Tried code
    tmp_result = tmp_and_88__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_88__value_2 );
        tmp_and_88__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_331 = NULL;
    // Tried code
    tmp_compexpr_left_323 = const_str_plain_frost;
    tmp_compexpr_right_323 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_323 == NULL ))
    {
        tmp_compexpr_right_323 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_323 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 835;
        goto try_finally_handler_713;
    }

    tmp_assign_source_687 = SEQUENCE_CONTAINS( tmp_compexpr_left_323, tmp_compexpr_right_323 );
    if ( tmp_assign_source_687 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 835;
        goto try_finally_handler_713;
    }
    {
        PyObject *old = tmp_and_88__value_1;
        tmp_and_88__value_1 = tmp_assign_source_687;
        Py_INCREF( tmp_and_88__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_333 = tmp_and_88__value_1;

    tmp_cond_truth_333 = CHECK_IF_TRUE( tmp_cond_value_333 );
    if ( tmp_cond_truth_333 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 835;
        goto try_finally_handler_713;
    }
    if (tmp_cond_truth_333 == 1)
    {
        goto condexpr_true_236;
    }
    else
    {
        goto condexpr_false_236;
    }
    condexpr_true_236:;
    tmp_cond_value_331 = NULL;
    // Tried code
    tmp_result = tmp_and_88__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_88__value_1 );
        tmp_and_88__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_324 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_compexpr_left_324 == NULL ))
    {
        tmp_compexpr_left_324 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_compexpr_left_324 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 835;
        goto try_finally_handler_714;
    }

    tmp_compexpr_right_324 = const_int_pos_8;
    tmp_cond_value_331 = RICH_COMPARE_GE( tmp_compexpr_left_324, tmp_compexpr_right_324 );
    if ( tmp_cond_value_331 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 835;
        goto try_finally_handler_714;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_714:;
    exception_keeper_type_708 = exception_type;
    exception_keeper_value_708 = exception_value;
    exception_keeper_tb_708 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_708 != NULL )
    {
        exception_type = exception_keeper_type_708;
        exception_value = exception_keeper_value_708;
        exception_tb = exception_keeper_tb_708;

        goto try_finally_handler_713;
    }

    goto finally_end_708;
    finally_end_708:;
    goto condexpr_end_236;
    condexpr_false_236:;
    tmp_cond_value_331 = tmp_and_88__value_1;

    Py_INCREF( tmp_cond_value_331 );
    condexpr_end_236:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_713:;
    exception_keeper_type_709 = exception_type;
    exception_keeper_value_709 = exception_value;
    exception_keeper_tb_709 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_709 != NULL )
    {
        exception_type = exception_keeper_type_709;
        exception_value = exception_keeper_value_709;
        exception_tb = exception_keeper_tb_709;

        goto try_finally_handler_712;
    }

    goto finally_end_709;
    finally_end_709:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_712:;
    exception_keeper_type_710 = exception_type;
    exception_keeper_value_710 = exception_value;
    exception_keeper_tb_710 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_710 != NULL )
    {
        exception_type = exception_keeper_type_710;
        exception_value = exception_keeper_value_710;
        exception_tb = exception_keeper_tb_710;

        goto try_finally_handler_711;
    }

    goto finally_end_710;
    finally_end_710:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_711:;
    exception_keeper_type_711 = exception_type;
    exception_keeper_value_711 = exception_value;
    exception_keeper_tb_711 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_242 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_88__value_1 );
    tmp_and_88__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_242;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_711 != NULL )
    {
        exception_type = exception_keeper_type_711;
        exception_value = exception_keeper_value_711;
        exception_tb = exception_keeper_tb_711;

        goto try_finally_handler_710;
    }

    goto finally_end_711;
    finally_end_711:;
    goto condexpr_end_235;
    condexpr_false_235:;
    tmp_cond_value_331 = tmp_and_88__value_2;

    Py_INCREF( tmp_cond_value_331 );
    condexpr_end_235:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_710:;
    exception_keeper_type_712 = exception_type;
    exception_keeper_value_712 = exception_value;
    exception_keeper_tb_712 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_712 != NULL )
    {
        exception_type = exception_keeper_type_712;
        exception_value = exception_keeper_value_712;
        exception_tb = exception_keeper_tb_712;

        goto try_finally_handler_709;
    }

    goto finally_end_712;
    finally_end_712:;
    tmp_cond_truth_331 = CHECK_IF_TRUE( tmp_cond_value_331 );
    if ( tmp_cond_truth_331 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_331 );

        frame_module->f_lineno = 835;
        goto try_finally_handler_709;
    }
    Py_DECREF( tmp_cond_value_331 );
    if (tmp_cond_truth_331 == 1)
    {
        goto branch_yes_187;
    }
    else
    {
        goto branch_no_187;
    }
    branch_yes_187:;
    tmp_source_name_68 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_68 == NULL ))
    {
        tmp_source_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 836;
        goto try_finally_handler_709;
    }

    tmp_called_name_88 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_randint );
    if ( tmp_called_name_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 836;
        goto try_finally_handler_709;
    }
    tmp_call_arg_element_64 = const_int_pos_50;
    tmp_call_arg_element_65 = const_int_pos_60;
    frame_module->f_lineno = 836;
    tmp_assign_source_688 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_88, tmp_call_arg_element_64, tmp_call_arg_element_65 );
    Py_DECREF( tmp_called_name_88 );
    if ( tmp_assign_source_688 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 836;
        goto try_finally_handler_709;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam, tmp_assign_source_688 );
    tmp_left_name_188 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_left_name_188 == NULL ))
    {
        tmp_left_name_188 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_left_name_188 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 837;
        goto try_finally_handler_709;
    }

    tmp_right_name_188 = const_int_pos_8;
    tmp_assign_source_689 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_188, tmp_right_name_188 );
    if ( tmp_assign_source_689 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 837;
        goto try_finally_handler_709;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_689 );
    tmp_left_name_189 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_189 == NULL ))
    {
        tmp_left_name_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_189 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 838;
        goto try_finally_handler_709;
    }

    tmp_right_name_189 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam );

    if (unlikely( tmp_right_name_189 == NULL ))
    {
        tmp_right_name_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_dam );
    }

    if ( tmp_right_name_189 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 838;
        goto try_finally_handler_709;
    }

    tmp_assign_source_690 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_189, tmp_right_name_189 );
    if ( tmp_assign_source_690 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 838;
        goto try_finally_handler_709;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_690 );
    tmp_source_name_69 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_source_name_69 == NULL ))
    {
        tmp_source_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_source_name_69 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 839;
        goto try_finally_handler_709;
    }

    tmp_called_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_append );
    if ( tmp_called_name_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 839;
        goto try_finally_handler_709;
    }
    tmp_call_arg_element_66 = const_str_plain_Frozen;
    frame_module->f_lineno = 839;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_89, tmp_call_arg_element_66 );
    Py_DECREF( tmp_called_name_89 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 839;
        goto try_finally_handler_709;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_691 = const_int_pos_5;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer, tmp_assign_source_691 );
    tmp_subscribed_name_82 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_82 == NULL ))
    {
        tmp_subscribed_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }

    tmp_subscript_name_82 = const_str_plain_blue;
    tmp_left_name_191 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_82, tmp_subscript_name_82 );
    if ( tmp_left_name_191 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    tmp_left_name_192 = const_str_digest_38424cdfef64b473333dd1c3a9eb5e64;
    tmp_right_name_191 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam );

    if (unlikely( tmp_right_name_191 == NULL ))
    {
        tmp_right_name_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_dam );
    }

    if ( tmp_right_name_191 == NULL )
    {
        Py_DECREF( tmp_left_name_191 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }

    tmp_right_name_190 = BINARY_OPERATION_REMAINDER( tmp_left_name_192, tmp_right_name_191 );
    if ( tmp_right_name_190 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_191 );

        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    tmp_left_name_190 = BINARY_OPERATION_ADD( tmp_left_name_191, tmp_right_name_190 );
    Py_DECREF( tmp_left_name_191 );
    Py_DECREF( tmp_right_name_190 );
    if ( tmp_left_name_190 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    tmp_subscribed_name_83 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_83 == NULL ))
    {
        tmp_subscribed_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_83 == NULL )
    {
        Py_DECREF( tmp_left_name_190 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }

    tmp_subscript_name_83 = const_str_plain_off;
    tmp_right_name_192 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_83, tmp_subscript_name_83 );
    if ( tmp_right_name_192 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_190 );

        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    tmp_str_arg_112 = BINARY_OPERATION_ADD( tmp_left_name_190, tmp_right_name_192 );
    Py_DECREF( tmp_left_name_190 );
    Py_DECREF( tmp_right_name_192 );
    if ( tmp_str_arg_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_112 );
    Py_DECREF( tmp_str_arg_112 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 841;
        goto try_finally_handler_709;
    }
    goto branch_end_187;
    branch_no_187:;
    // Tried code
    tmp_cond_value_334 = NULL;
    // Tried code
    tmp_compexpr_left_325 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_attack );

    if (unlikely( tmp_compexpr_left_325 == NULL ))
    {
        tmp_compexpr_left_325 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_attack );
    }

    if ( tmp_compexpr_left_325 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1845 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 842;
        goto try_finally_handler_716;
    }

    tmp_compexpr_right_325 = const_str_plain_3;
    tmp_assign_source_692 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_325, tmp_compexpr_right_325 );
    if ( tmp_assign_source_692 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 842;
        goto try_finally_handler_716;
    }
    {
        PyObject *old = tmp_and_89__value_2;
        tmp_and_89__value_2 = tmp_assign_source_692;
        Py_XDECREF( old );
    }

    tmp_cond_value_335 = tmp_and_89__value_2;

    tmp_cond_truth_335 = CHECK_IF_TRUE( tmp_cond_value_335 );
    if ( tmp_cond_truth_335 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 842;
        goto try_finally_handler_716;
    }
    if (tmp_cond_truth_335 == 1)
    {
        goto condexpr_true_237;
    }
    else
    {
        goto condexpr_false_237;
    }
    condexpr_true_237:;
    tmp_cond_value_334 = NULL;
    // Tried code
    tmp_cond_value_334 = NULL;
    // Tried code
    tmp_result = tmp_and_89__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_89__value_2 );
        tmp_and_89__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_334 = NULL;
    // Tried code
    tmp_compexpr_left_326 = const_str_plain_poison;
    tmp_compexpr_right_326 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_326 == NULL ))
    {
        tmp_compexpr_right_326 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_326 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 842;
        goto try_finally_handler_719;
    }

    tmp_assign_source_693 = SEQUENCE_CONTAINS( tmp_compexpr_left_326, tmp_compexpr_right_326 );
    if ( tmp_assign_source_693 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 842;
        goto try_finally_handler_719;
    }
    {
        PyObject *old = tmp_and_89__value_1;
        tmp_and_89__value_1 = tmp_assign_source_693;
        Py_INCREF( tmp_and_89__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_336 = tmp_and_89__value_1;

    tmp_cond_truth_336 = CHECK_IF_TRUE( tmp_cond_value_336 );
    if ( tmp_cond_truth_336 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 842;
        goto try_finally_handler_719;
    }
    if (tmp_cond_truth_336 == 1)
    {
        goto condexpr_true_238;
    }
    else
    {
        goto condexpr_false_238;
    }
    condexpr_true_238:;
    tmp_cond_value_334 = NULL;
    // Tried code
    tmp_result = tmp_and_89__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_89__value_1 );
        tmp_and_89__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_327 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_compexpr_left_327 == NULL ))
    {
        tmp_compexpr_left_327 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_compexpr_left_327 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 842;
        goto try_finally_handler_720;
    }

    tmp_compexpr_right_327 = const_int_pos_13;
    tmp_cond_value_334 = RICH_COMPARE_GE( tmp_compexpr_left_327, tmp_compexpr_right_327 );
    if ( tmp_cond_value_334 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 842;
        goto try_finally_handler_720;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_720:;
    exception_keeper_type_713 = exception_type;
    exception_keeper_value_713 = exception_value;
    exception_keeper_tb_713 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_713 != NULL )
    {
        exception_type = exception_keeper_type_713;
        exception_value = exception_keeper_value_713;
        exception_tb = exception_keeper_tb_713;

        goto try_finally_handler_719;
    }

    goto finally_end_713;
    finally_end_713:;
    goto condexpr_end_238;
    condexpr_false_238:;
    tmp_cond_value_334 = tmp_and_89__value_1;

    Py_INCREF( tmp_cond_value_334 );
    condexpr_end_238:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_719:;
    exception_keeper_type_714 = exception_type;
    exception_keeper_value_714 = exception_value;
    exception_keeper_tb_714 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_714 != NULL )
    {
        exception_type = exception_keeper_type_714;
        exception_value = exception_keeper_value_714;
        exception_tb = exception_keeper_tb_714;

        goto try_finally_handler_718;
    }

    goto finally_end_714;
    finally_end_714:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_718:;
    exception_keeper_type_715 = exception_type;
    exception_keeper_value_715 = exception_value;
    exception_keeper_tb_715 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_715 != NULL )
    {
        exception_type = exception_keeper_type_715;
        exception_value = exception_keeper_value_715;
        exception_tb = exception_keeper_tb_715;

        goto try_finally_handler_717;
    }

    goto finally_end_715;
    finally_end_715:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_717:;
    exception_keeper_type_716 = exception_type;
    exception_keeper_value_716 = exception_value;
    exception_keeper_tb_716 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_243 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_89__value_1 );
    tmp_and_89__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_243;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_716 != NULL )
    {
        exception_type = exception_keeper_type_716;
        exception_value = exception_keeper_value_716;
        exception_tb = exception_keeper_tb_716;

        goto try_finally_handler_716;
    }

    goto finally_end_716;
    finally_end_716:;
    goto condexpr_end_237;
    condexpr_false_237:;
    tmp_cond_value_334 = tmp_and_89__value_2;

    Py_INCREF( tmp_cond_value_334 );
    condexpr_end_237:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_716:;
    exception_keeper_type_717 = exception_type;
    exception_keeper_value_717 = exception_value;
    exception_keeper_tb_717 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_717 != NULL )
    {
        exception_type = exception_keeper_type_717;
        exception_value = exception_keeper_value_717;
        exception_tb = exception_keeper_tb_717;

        goto try_finally_handler_715;
    }

    goto finally_end_717;
    finally_end_717:;
    tmp_cond_truth_334 = CHECK_IF_TRUE( tmp_cond_value_334 );
    if ( tmp_cond_truth_334 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_334 );

        frame_module->f_lineno = 842;
        goto try_finally_handler_715;
    }
    Py_DECREF( tmp_cond_value_334 );
    if (tmp_cond_truth_334 == 1)
    {
        goto branch_yes_188;
    }
    else
    {
        goto branch_no_188;
    }
    branch_yes_188:;
    tmp_source_name_70 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_70 == NULL ))
    {
        tmp_source_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_70 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 843;
        goto try_finally_handler_715;
    }

    tmp_called_name_90 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_randint );
    if ( tmp_called_name_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 843;
        goto try_finally_handler_715;
    }
    tmp_call_arg_element_67 = const_int_pos_25;
    tmp_call_arg_element_68 = const_int_pos_50;
    frame_module->f_lineno = 843;
    tmp_assign_source_694 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_90, tmp_call_arg_element_67, tmp_call_arg_element_68 );
    Py_DECREF( tmp_called_name_90 );
    if ( tmp_assign_source_694 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 843;
        goto try_finally_handler_715;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam, tmp_assign_source_694 );
    tmp_left_name_193 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_left_name_193 == NULL ))
    {
        tmp_left_name_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_left_name_193 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 844;
        goto try_finally_handler_715;
    }

    tmp_right_name_193 = const_int_pos_13;
    tmp_assign_source_695 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_193, tmp_right_name_193 );
    if ( tmp_assign_source_695 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 844;
        goto try_finally_handler_715;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_695 );
    tmp_left_name_194 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_194 == NULL ))
    {
        tmp_left_name_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_194 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 845;
        goto try_finally_handler_715;
    }

    tmp_right_name_194 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam );

    if (unlikely( tmp_right_name_194 == NULL ))
    {
        tmp_right_name_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_dam );
    }

    if ( tmp_right_name_194 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 845;
        goto try_finally_handler_715;
    }

    tmp_assign_source_696 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_194, tmp_right_name_194 );
    if ( tmp_assign_source_696 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 845;
        goto try_finally_handler_715;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_696 );
    tmp_source_name_71 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_source_name_71 == NULL ))
    {
        tmp_source_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_source_name_71 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 846;
        goto try_finally_handler_715;
    }

    tmp_called_name_91 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_append );
    if ( tmp_called_name_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 846;
        goto try_finally_handler_715;
    }
    tmp_call_arg_element_69 = const_str_plain_Poisoned;
    frame_module->f_lineno = 846;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_91, tmp_call_arg_element_69 );
    Py_DECREF( tmp_called_name_91 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 846;
        goto try_finally_handler_715;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_697 = const_int_pos_8;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer, tmp_assign_source_697 );
    tmp_subscribed_name_84 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_84 == NULL ))
    {
        tmp_subscribed_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_84 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }

    tmp_subscript_name_84 = const_str_plain_darkgreen;
    tmp_left_name_196 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_84, tmp_subscript_name_84 );
    if ( tmp_left_name_196 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    tmp_left_name_197 = const_str_digest_3482ddbd0e4c095381d583e51763f9ca;
    tmp_right_name_196 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_dam );

    if (unlikely( tmp_right_name_196 == NULL ))
    {
        tmp_right_name_196 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_dam );
    }

    if ( tmp_right_name_196 == NULL )
    {
        Py_DECREF( tmp_left_name_196 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1879 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }

    tmp_right_name_195 = BINARY_OPERATION_REMAINDER( tmp_left_name_197, tmp_right_name_196 );
    if ( tmp_right_name_195 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_196 );

        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    tmp_left_name_195 = BINARY_OPERATION_ADD( tmp_left_name_196, tmp_right_name_195 );
    Py_DECREF( tmp_left_name_196 );
    Py_DECREF( tmp_right_name_195 );
    if ( tmp_left_name_195 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    tmp_subscribed_name_85 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_85 == NULL ))
    {
        tmp_subscribed_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_85 == NULL )
    {
        Py_DECREF( tmp_left_name_195 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }

    tmp_subscript_name_85 = const_str_plain_off;
    tmp_right_name_197 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_85, tmp_subscript_name_85 );
    if ( tmp_right_name_197 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_195 );

        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    tmp_str_arg_113 = BINARY_OPERATION_ADD( tmp_left_name_195, tmp_right_name_197 );
    Py_DECREF( tmp_left_name_195 );
    Py_DECREF( tmp_right_name_197 );
    if ( tmp_str_arg_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_113 );
    Py_DECREF( tmp_str_arg_113 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 848;
        goto try_finally_handler_715;
    }
    goto branch_end_188;
    branch_no_188:;
    // Tried code
    tmp_cond_value_337 = NULL;
    // Tried code
    tmp_compexpr_left_328 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_magic_attack );

    if (unlikely( tmp_compexpr_left_328 == NULL ))
    {
        tmp_compexpr_left_328 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_magic_attack );
    }

    if ( tmp_compexpr_left_328 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1845 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 849;
        goto try_finally_handler_722;
    }

    tmp_compexpr_right_328 = const_str_plain_4;
    tmp_assign_source_698 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_328, tmp_compexpr_right_328 );
    if ( tmp_assign_source_698 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 849;
        goto try_finally_handler_722;
    }
    {
        PyObject *old = tmp_and_90__value_2;
        tmp_and_90__value_2 = tmp_assign_source_698;
        Py_XDECREF( old );
    }

    tmp_cond_value_338 = tmp_and_90__value_2;

    tmp_cond_truth_338 = CHECK_IF_TRUE( tmp_cond_value_338 );
    if ( tmp_cond_truth_338 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 849;
        goto try_finally_handler_722;
    }
    if (tmp_cond_truth_338 == 1)
    {
        goto condexpr_true_239;
    }
    else
    {
        goto condexpr_false_239;
    }
    condexpr_true_239:;
    tmp_cond_value_337 = NULL;
    // Tried code
    tmp_cond_value_337 = NULL;
    // Tried code
    tmp_result = tmp_and_90__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_90__value_2 );
        tmp_and_90__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_337 = NULL;
    // Tried code
    tmp_compexpr_left_329 = const_str_digest_de49972fa23676d1d83ded073c6b3042;
    tmp_compexpr_right_329 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_spells );

    if (unlikely( tmp_compexpr_right_329 == NULL ))
    {
        tmp_compexpr_right_329 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_spells );
    }

    if ( tmp_compexpr_right_329 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 684 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 849;
        goto try_finally_handler_725;
    }

    tmp_assign_source_699 = SEQUENCE_CONTAINS( tmp_compexpr_left_329, tmp_compexpr_right_329 );
    if ( tmp_assign_source_699 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 849;
        goto try_finally_handler_725;
    }
    {
        PyObject *old = tmp_and_90__value_1;
        tmp_and_90__value_1 = tmp_assign_source_699;
        Py_INCREF( tmp_and_90__value_1 );
        Py_XDECREF( old );
    }

    tmp_cond_value_339 = tmp_and_90__value_1;

    tmp_cond_truth_339 = CHECK_IF_TRUE( tmp_cond_value_339 );
    if ( tmp_cond_truth_339 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 849;
        goto try_finally_handler_725;
    }
    if (tmp_cond_truth_339 == 1)
    {
        goto condexpr_true_240;
    }
    else
    {
        goto condexpr_false_240;
    }
    condexpr_true_240:;
    tmp_cond_value_337 = NULL;
    // Tried code
    tmp_result = tmp_and_90__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_90__value_1 );
        tmp_and_90__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_330 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_compexpr_left_330 == NULL ))
    {
        tmp_compexpr_left_330 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_compexpr_left_330 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 849;
        goto try_finally_handler_726;
    }

    tmp_compexpr_right_330 = const_int_pos_20;
    tmp_cond_value_337 = RICH_COMPARE_GE( tmp_compexpr_left_330, tmp_compexpr_right_330 );
    if ( tmp_cond_value_337 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 849;
        goto try_finally_handler_726;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_726:;
    exception_keeper_type_718 = exception_type;
    exception_keeper_value_718 = exception_value;
    exception_keeper_tb_718 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_718 != NULL )
    {
        exception_type = exception_keeper_type_718;
        exception_value = exception_keeper_value_718;
        exception_tb = exception_keeper_tb_718;

        goto try_finally_handler_725;
    }

    goto finally_end_718;
    finally_end_718:;
    goto condexpr_end_240;
    condexpr_false_240:;
    tmp_cond_value_337 = tmp_and_90__value_1;

    Py_INCREF( tmp_cond_value_337 );
    condexpr_end_240:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_725:;
    exception_keeper_type_719 = exception_type;
    exception_keeper_value_719 = exception_value;
    exception_keeper_tb_719 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_719 != NULL )
    {
        exception_type = exception_keeper_type_719;
        exception_value = exception_keeper_value_719;
        exception_tb = exception_keeper_tb_719;

        goto try_finally_handler_724;
    }

    goto finally_end_719;
    finally_end_719:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_724:;
    exception_keeper_type_720 = exception_type;
    exception_keeper_value_720 = exception_value;
    exception_keeper_tb_720 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_720 != NULL )
    {
        exception_type = exception_keeper_type_720;
        exception_value = exception_keeper_value_720;
        exception_tb = exception_keeper_tb_720;

        goto try_finally_handler_723;
    }

    goto finally_end_720;
    finally_end_720:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_723:;
    exception_keeper_type_721 = exception_type;
    exception_keeper_value_721 = exception_value;
    exception_keeper_tb_721 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_244 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_90__value_1 );
    tmp_and_90__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_244;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_721 != NULL )
    {
        exception_type = exception_keeper_type_721;
        exception_value = exception_keeper_value_721;
        exception_tb = exception_keeper_tb_721;

        goto try_finally_handler_722;
    }

    goto finally_end_721;
    finally_end_721:;
    goto condexpr_end_239;
    condexpr_false_239:;
    tmp_cond_value_337 = tmp_and_90__value_2;

    Py_INCREF( tmp_cond_value_337 );
    condexpr_end_239:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_722:;
    exception_keeper_type_722 = exception_type;
    exception_keeper_value_722 = exception_value;
    exception_keeper_tb_722 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_722 != NULL )
    {
        exception_type = exception_keeper_type_722;
        exception_value = exception_keeper_value_722;
        exception_tb = exception_keeper_tb_722;

        goto try_finally_handler_721;
    }

    goto finally_end_722;
    finally_end_722:;
    tmp_cond_truth_337 = CHECK_IF_TRUE( tmp_cond_value_337 );
    if ( tmp_cond_truth_337 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_337 );

        frame_module->f_lineno = 849;
        goto try_finally_handler_721;
    }
    Py_DECREF( tmp_cond_value_337 );
    if (tmp_cond_truth_337 == 1)
    {
        goto branch_yes_189;
    }
    else
    {
        goto branch_no_189;
    }
    branch_yes_189:;
    tmp_source_name_72 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_72 == NULL ))
    {
        tmp_source_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_72 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 850;
        goto try_finally_handler_721;
    }

    tmp_called_name_92 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain_randint );
    if ( tmp_called_name_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 850;
        goto try_finally_handler_721;
    }
    tmp_call_arg_element_70 = const_int_pos_20;
    tmp_call_arg_element_71 = const_int_pos_35;
    frame_module->f_lineno = 850;
    tmp_assign_source_700 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_92, tmp_call_arg_element_70, tmp_call_arg_element_71 );
    Py_DECREF( tmp_called_name_92 );
    if ( tmp_assign_source_700 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 850;
        goto try_finally_handler_721;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_drain_dam, tmp_assign_source_700 );
    tmp_left_name_198 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_left_name_198 == NULL ))
    {
        tmp_left_name_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_left_name_198 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 851;
        goto try_finally_handler_721;
    }

    tmp_right_name_198 = const_int_pos_20;
    tmp_assign_source_701 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_198, tmp_right_name_198 );
    if ( tmp_assign_source_701 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 851;
        goto try_finally_handler_721;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_701 );
    tmp_left_name_199 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_199 == NULL ))
    {
        tmp_left_name_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_199 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 852;
        goto try_finally_handler_721;
    }

    tmp_right_name_199 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_drain_dam );

    if (unlikely( tmp_right_name_199 == NULL ))
    {
        tmp_right_name_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_drain_dam );
    }

    if ( tmp_right_name_199 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1945 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 852;
        goto try_finally_handler_721;
    }

    tmp_assign_source_702 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_199, tmp_right_name_199 );
    if ( tmp_assign_source_702 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 852;
        goto try_finally_handler_721;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_702 );
    tmp_left_name_200 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_left_name_200 == NULL ))
    {
        tmp_left_name_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_left_name_200 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 853;
        goto try_finally_handler_721;
    }

    tmp_right_name_200 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_drain_dam );

    if (unlikely( tmp_right_name_200 == NULL ))
    {
        tmp_right_name_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_drain_dam );
    }

    if ( tmp_right_name_200 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1945 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 853;
        goto try_finally_handler_721;
    }

    tmp_assign_source_703 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_200, tmp_right_name_200 );
    if ( tmp_assign_source_703 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 853;
        goto try_finally_handler_721;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_703 );
    tmp_subscribed_name_86 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_86 == NULL ))
    {
        tmp_subscribed_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }

    tmp_subscript_name_86 = const_str_plain_magenta;
    tmp_left_name_202 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_86, tmp_subscript_name_86 );
    if ( tmp_left_name_202 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    tmp_left_name_203 = const_str_digest_a40843c9499d560140a8ce54e4970aed;
    tmp_right_name_202 = PyTuple_New( 2 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_drain_dam );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_drain_dam );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_left_name_202 );
        Py_DECREF( tmp_right_name_202 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1945 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_right_name_202, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_left_name_202 );
        Py_DECREF( tmp_right_name_202 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_right_name_202, 1, tmp_tuple_element_6 );
    tmp_right_name_201 = BINARY_OPERATION_REMAINDER( tmp_left_name_203, tmp_right_name_202 );
    Py_DECREF( tmp_right_name_202 );
    if ( tmp_right_name_201 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_202 );

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    tmp_left_name_201 = BINARY_OPERATION_ADD( tmp_left_name_202, tmp_right_name_201 );
    Py_DECREF( tmp_left_name_202 );
    Py_DECREF( tmp_right_name_201 );
    if ( tmp_left_name_201 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    tmp_subscribed_name_87 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_87 == NULL ))
    {
        tmp_subscribed_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_87 == NULL )
    {
        Py_DECREF( tmp_left_name_201 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }

    tmp_subscript_name_87 = const_str_plain_off;
    tmp_right_name_203 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_87, tmp_subscript_name_87 );
    if ( tmp_right_name_203 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_201 );

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    tmp_str_arg_114 = BINARY_OPERATION_ADD( tmp_left_name_201, tmp_right_name_203 );
    Py_DECREF( tmp_left_name_201 );
    Py_DECREF( tmp_right_name_203 );
    if ( tmp_str_arg_114 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_114 );
    Py_DECREF( tmp_str_arg_114 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 854;
        goto try_finally_handler_721;
    }
    goto branch_end_189;
    branch_no_189:;
    tmp_subscribed_name_88 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_88 == NULL ))
    {
        tmp_subscribed_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }

    tmp_subscript_name_88 = const_str_plain_darkyellow;
    tmp_left_name_205 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_88, tmp_subscript_name_88 );
    if ( tmp_left_name_205 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    tmp_right_name_204 = const_str_digest_44ca42ef93d9d07497b572bc368e9e4a;
    tmp_left_name_204 = BINARY_OPERATION_ADD( tmp_left_name_205, tmp_right_name_204 );
    Py_DECREF( tmp_left_name_205 );
    if ( tmp_left_name_204 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    tmp_subscribed_name_89 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_89 == NULL ))
    {
        tmp_subscribed_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_89 == NULL )
    {
        Py_DECREF( tmp_left_name_204 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }

    tmp_subscript_name_89 = const_str_plain_off;
    tmp_right_name_205 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_89, tmp_subscript_name_89 );
    if ( tmp_right_name_205 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_204 );

        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    tmp_str_arg_115 = BINARY_OPERATION_ADD( tmp_left_name_204, tmp_right_name_205 );
    Py_DECREF( tmp_left_name_204 );
    Py_DECREF( tmp_right_name_205 );
    if ( tmp_str_arg_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_115 );
    Py_DECREF( tmp_str_arg_115 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 856;
        goto try_finally_handler_721;
    }
    branch_end_189:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_721:;
    exception_keeper_type_723 = exception_type;
    exception_keeper_value_723 = exception_value;
    exception_keeper_tb_723 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_245 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_90__value_2 );
    tmp_and_90__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_245;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_723 != NULL )
    {
        exception_type = exception_keeper_type_723;
        exception_value = exception_keeper_value_723;
        exception_tb = exception_keeper_tb_723;

        goto try_finally_handler_715;
    }

    goto finally_end_723;
    finally_end_723:;
    branch_end_188:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_715:;
    exception_keeper_type_724 = exception_type;
    exception_keeper_value_724 = exception_value;
    exception_keeper_tb_724 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_246 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_89__value_2 );
    tmp_and_89__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_246;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_724 != NULL )
    {
        exception_type = exception_keeper_type_724;
        exception_value = exception_keeper_value_724;
        exception_tb = exception_keeper_tb_724;

        goto try_finally_handler_709;
    }

    goto finally_end_724;
    finally_end_724:;
    branch_end_187:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_709:;
    exception_keeper_type_725 = exception_type;
    exception_keeper_value_725 = exception_value;
    exception_keeper_tb_725 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_247 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_88__value_2 );
    tmp_and_88__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_247;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_725 != NULL )
    {
        exception_type = exception_keeper_type_725;
        exception_value = exception_keeper_value_725;
        exception_tb = exception_keeper_tb_725;

        goto try_finally_handler_703;
    }

    goto finally_end_725;
    finally_end_725:;
    branch_end_186:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_703:;
    exception_keeper_type_726 = exception_type;
    exception_keeper_value_726 = exception_value;
    exception_keeper_tb_726 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_248 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_87__value_2 );
    tmp_and_87__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_248;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_726 != NULL )
    {
        exception_type = exception_keeper_type_726;
        exception_value = exception_keeper_value_726;
        exception_tb = exception_keeper_tb_726;

        goto frame_exception_exit_1;
    }

    goto finally_end_726;
    finally_end_726:;
    goto branch_end_185;
    branch_no_185:;
    tmp_compare_left_91 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compare_left_91 == NULL ))
    {
        tmp_compare_left_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compare_left_91 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 857;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_91 = const_str_plain_3;
    tmp_cmp_Eq_79 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_91, tmp_compare_right_91 );
    if ( tmp_cmp_Eq_79 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 857;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_79 == 1)
    {
        goto branch_yes_190;
    }
    else
    {
        goto branch_no_190;
    }
    branch_yes_190:;
    tmp_source_name_73 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_73 == NULL ))
    {
        tmp_source_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_73 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 858;
        goto frame_exception_exit_1;
    }

    tmp_called_name_93 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain_randint );
    if ( tmp_called_name_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 858;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_72 = const_int_0;
    tmp_call_arg_element_73 = const_int_pos_100;
    frame_module->f_lineno = 858;
    tmp_assign_source_704 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_93, tmp_call_arg_element_72, tmp_call_arg_element_73 );
    Py_DECREF( tmp_called_name_93 );
    if ( tmp_assign_source_704 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 858;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodge_act, tmp_assign_source_704 );
    tmp_compare_left_92 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodge_act );

    if (unlikely( tmp_compare_left_92 == NULL ))
    {
        tmp_compare_left_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dodge_act );
    }

    if ( tmp_compare_left_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1976 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 859;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_92 = const_int_pos_25;
    tmp_cmp_LtE_1 = RICH_COMPARE_BOOL_LE( tmp_compare_left_92, tmp_compare_right_92 );
    if ( tmp_cmp_LtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 859;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_LtE_1 == 1)
    {
        goto branch_yes_191;
    }
    else
    {
        goto branch_no_191;
    }
    branch_yes_191:;
    tmp_subscribed_name_90 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_90 == NULL ))
    {
        tmp_subscribed_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_90 = const_str_plain_green;
    tmp_left_name_207 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_90, tmp_subscript_name_90 );
    if ( tmp_left_name_207 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    tmp_right_name_206 = const_str_digest_1e93a5dc2c431edbd1f36406d9782516;
    tmp_left_name_206 = BINARY_OPERATION_ADD( tmp_left_name_207, tmp_right_name_206 );
    Py_DECREF( tmp_left_name_207 );
    if ( tmp_left_name_206 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_91 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_91 == NULL ))
    {
        tmp_subscribed_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_91 == NULL )
    {
        Py_DECREF( tmp_left_name_206 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_91 = const_str_plain_off;
    tmp_right_name_207 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_91, tmp_subscript_name_91 );
    if ( tmp_right_name_207 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_206 );

        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_116 = BINARY_OPERATION_ADD( tmp_left_name_206, tmp_right_name_207 );
    Py_DECREF( tmp_left_name_206 );
    Py_DECREF( tmp_right_name_207 );
    if ( tmp_str_arg_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_116 );
    Py_DECREF( tmp_str_arg_116 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 860;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_705 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges, tmp_assign_source_705 );
    branch_no_191:;
    tmp_compare_left_93 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodge_act );

    if (unlikely( tmp_compare_left_93 == NULL ))
    {
        tmp_compare_left_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dodge_act );
    }

    if ( tmp_compare_left_93 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1976 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 862;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_93 = const_int_pos_75;
    tmp_cmp_GtE_3 = RICH_COMPARE_BOOL_GE( tmp_compare_left_93, tmp_compare_right_93 );
    if ( tmp_cmp_GtE_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 862;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_GtE_3 == 1)
    {
        goto branch_yes_192;
    }
    else
    {
        goto branch_no_192;
    }
    branch_yes_192:;
    tmp_left_name_208 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_left_name_208 == NULL ))
    {
        tmp_left_name_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_left_name_208 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }

    tmp_right_name_208 = const_int_pos_2;
    tmp_assign_source_706 = BINARY_OPERATION_MUL( tmp_left_name_208, tmp_right_name_208 );
    if ( tmp_assign_source_706 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_parrypowa, tmp_assign_source_706 );
    tmp_left_name_209 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_209 == NULL ))
    {
        tmp_left_name_209 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_209 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 864;
        goto frame_exception_exit_1;
    }

    tmp_right_name_209 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_parrypowa );

    if (unlikely( tmp_right_name_209 == NULL ))
    {
        tmp_right_name_209 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_parrypowa );
    }

    if ( tmp_right_name_209 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2007 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 864;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_707 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_209, tmp_right_name_209 );
    if ( tmp_assign_source_707 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 864;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_707 );
    tmp_subscribed_name_92 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_92 == NULL ))
    {
        tmp_subscribed_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_92 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_92 = const_str_plain_green;
    tmp_left_name_211 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_92, tmp_subscript_name_92 );
    if ( tmp_left_name_211 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    tmp_left_name_212 = const_str_digest_6775e3930e3690b09dc145200c435ce2;
    tmp_right_name_211 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_parrypowa );

    if (unlikely( tmp_right_name_211 == NULL ))
    {
        tmp_right_name_211 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_parrypowa );
    }

    if ( tmp_right_name_211 == NULL )
    {
        Py_DECREF( tmp_left_name_211 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2007 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }

    tmp_right_name_210 = BINARY_OPERATION_REMAINDER( tmp_left_name_212, tmp_right_name_211 );
    if ( tmp_right_name_210 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_211 );

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    tmp_left_name_210 = BINARY_OPERATION_ADD( tmp_left_name_211, tmp_right_name_210 );
    Py_DECREF( tmp_left_name_211 );
    Py_DECREF( tmp_right_name_210 );
    if ( tmp_left_name_210 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_93 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_93 == NULL ))
    {
        tmp_subscribed_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_93 == NULL )
    {
        Py_DECREF( tmp_left_name_210 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_93 = const_str_plain_off;
    tmp_right_name_212 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_93, tmp_subscript_name_93 );
    if ( tmp_right_name_212 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_210 );

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_117 = BINARY_OPERATION_ADD( tmp_left_name_210, tmp_right_name_212 );
    Py_DECREF( tmp_left_name_210 );
    Py_DECREF( tmp_right_name_212 );
    if ( tmp_str_arg_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_117 );
    Py_DECREF( tmp_str_arg_117 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_708 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges, tmp_assign_source_708 );
    branch_no_192:;
    goto branch_end_190;
    branch_no_190:;
    tmp_compare_left_94 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compare_left_94 == NULL ))
    {
        tmp_compare_left_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compare_left_94 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 867;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_94 = const_str_plain_4;
    tmp_cmp_Eq_80 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_94, tmp_compare_right_94 );
    if ( tmp_cmp_Eq_80 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 867;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_80 == 1)
    {
        goto branch_yes_193;
    }
    else
    {
        goto branch_no_193;
    }
    branch_yes_193:;
    tmp_subscribed_name_94 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_94 == NULL ))
    {
        tmp_subscribed_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_94 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_94 = const_str_plain_darkgreen;
    tmp_left_name_214 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_94, tmp_subscript_name_94 );
    if ( tmp_left_name_214 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_left_name_215 = const_str_digest_4f604344241e03b4163146c139ad5134;
    tmp_right_name_214 = PyTuple_New( 2 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_left_name_214 );
        Py_DECREF( tmp_right_name_214 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_right_name_214, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam_info );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_dam_info );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_left_name_214 );
        Py_DECREF( tmp_right_name_214 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1778 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_right_name_214, 1, tmp_tuple_element_7 );
    tmp_right_name_213 = BINARY_OPERATION_REMAINDER( tmp_left_name_215, tmp_right_name_214 );
    Py_DECREF( tmp_right_name_214 );
    if ( tmp_right_name_213 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_214 );

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_left_name_213 = BINARY_OPERATION_ADD( tmp_left_name_214, tmp_right_name_213 );
    Py_DECREF( tmp_left_name_214 );
    Py_DECREF( tmp_right_name_213 );
    if ( tmp_left_name_213 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_95 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_95 == NULL ))
    {
        tmp_subscribed_name_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_95 == NULL )
    {
        Py_DECREF( tmp_left_name_213 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_95 = const_str_plain_off;
    tmp_right_name_215 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_95, tmp_subscript_name_95 );
    if ( tmp_right_name_215 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_213 );

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_118 = BINARY_OPERATION_ADD( tmp_left_name_213, tmp_right_name_215 );
    Py_DECREF( tmp_left_name_213 );
    Py_DECREF( tmp_right_name_215 );
    if ( tmp_str_arg_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_118 );
    Py_DECREF( tmp_str_arg_118 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    goto branch_end_193;
    branch_no_193:;
    tmp_compare_left_95 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compare_left_95 == NULL ))
    {
        tmp_compare_left_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compare_left_95 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 869;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_95 = const_str_plain_5;
    tmp_cmp_Eq_81 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_95, tmp_compare_right_95 );
    if ( tmp_cmp_Eq_81 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 869;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_81 == 1)
    {
        goto branch_yes_194;
    }
    else
    {
        goto branch_no_194;
    }
    branch_yes_194:;
    tmp_source_name_74 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_74 == NULL ))
    {
        tmp_source_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_74 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 870;
        goto frame_exception_exit_1;
    }

    tmp_called_name_94 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_randint );
    if ( tmp_called_name_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 870;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_74 = const_int_0;
    tmp_call_arg_element_75 = const_int_pos_3;
    frame_module->f_lineno = 870;
    tmp_assign_source_709 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_94, tmp_call_arg_element_74, tmp_call_arg_element_75 );
    Py_DECREF( tmp_called_name_94 );
    if ( tmp_assign_source_709 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 870;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_run_success, tmp_assign_source_709 );
    tmp_compare_left_96 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_run_success );

    if (unlikely( tmp_compare_left_96 == NULL ))
    {
        tmp_compare_left_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_run_success );
    }

    if ( tmp_compare_left_96 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2038 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 871;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_96 = const_int_pos_1;
    tmp_cmp_Eq_82 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_96, tmp_compare_right_96 );
    if ( tmp_cmp_Eq_82 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 871;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_82 == 1)
    {
        goto branch_yes_195;
    }
    else
    {
        goto branch_no_195;
    }
    branch_yes_195:;
    tmp_source_name_75 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_75 == NULL ))
    {
        tmp_source_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_75 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 872;
        goto frame_exception_exit_1;
    }

    tmp_called_name_95 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain_randint );
    if ( tmp_called_name_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 872;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_76 = const_int_pos_5;
    tmp_call_arg_element_77 = const_int_pos_7;
    frame_module->f_lineno = 872;
    tmp_assign_source_710 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_95, tmp_call_arg_element_76, tmp_call_arg_element_77 );
    Py_DECREF( tmp_called_name_95 );
    if ( tmp_assign_source_710 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 872;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_710 );
    tmp_assign_source_711 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_711 );
    tmp_assign_source_712 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges, tmp_assign_source_712 );
    tmp_assign_source_713 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs, tmp_assign_source_713 );
    tmp_subscribed_name_96 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_96 == NULL ))
    {
        tmp_subscribed_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_96 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_96 = const_str_plain_darkyellow;
    tmp_left_name_217 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_96, tmp_subscript_name_96 );
    if ( tmp_left_name_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    tmp_right_name_216 = const_str_digest_5cd15518594c041c4a5c3561c5c6abeb;
    tmp_left_name_216 = BINARY_OPERATION_ADD( tmp_left_name_217, tmp_right_name_216 );
    Py_DECREF( tmp_left_name_217 );
    if ( tmp_left_name_216 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_97 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_97 == NULL ))
    {
        tmp_subscribed_name_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_97 == NULL )
    {
        Py_DECREF( tmp_left_name_216 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_97 = const_str_plain_off;
    tmp_right_name_217 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_97, tmp_subscript_name_97 );
    if ( tmp_right_name_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_216 );

        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_119 = BINARY_OPERATION_ADD( tmp_left_name_216, tmp_right_name_217 );
    Py_DECREF( tmp_left_name_216 );
    Py_DECREF( tmp_right_name_217 );
    if ( tmp_str_arg_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_119 );
    Py_DECREF( tmp_str_arg_119 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 876;
        goto frame_exception_exit_1;
    }
    branch_no_195:;
    goto branch_end_194;
    branch_no_194:;
    tmp_subscribed_name_98 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_98 == NULL ))
    {
        tmp_subscribed_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_98 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_98 = const_str_plain_darkyellow;
    tmp_left_name_219 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_98, tmp_subscript_name_98 );
    if ( tmp_left_name_219 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    tmp_right_name_218 = const_str_digest_44ca42ef93d9d07497b572bc368e9e4a;
    tmp_left_name_218 = BINARY_OPERATION_ADD( tmp_left_name_219, tmp_right_name_218 );
    Py_DECREF( tmp_left_name_219 );
    if ( tmp_left_name_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_99 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_99 == NULL ))
    {
        tmp_subscribed_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_99 == NULL )
    {
        Py_DECREF( tmp_left_name_218 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_99 = const_str_plain_off;
    tmp_right_name_219 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_99, tmp_subscript_name_99 );
    if ( tmp_right_name_219 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_218 );

        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_120 = BINARY_OPERATION_ADD( tmp_left_name_218, tmp_right_name_219 );
    Py_DECREF( tmp_left_name_218 );
    Py_DECREF( tmp_right_name_219 );
    if ( tmp_str_arg_120 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_120 );
    Py_DECREF( tmp_str_arg_120 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    branch_end_194:;
    branch_end_193:;
    branch_end_190:;
    branch_end_185:;
    branch_end_184:;
    // Tried code
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_compexpr_left_331 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_compexpr_left_331 == NULL ))
    {
        tmp_compexpr_left_331 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_compexpr_left_331 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 879;
        goto try_finally_handler_728;
    }

    tmp_compexpr_right_331 = const_int_0;
    tmp_assign_source_714 = RICH_COMPARE_GT( tmp_compexpr_left_331, tmp_compexpr_right_331 );
    if ( tmp_assign_source_714 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_728;
    }
    {
        PyObject *old = tmp_and_91__value_3;
        tmp_and_91__value_3 = tmp_assign_source_714;
        Py_XDECREF( old );
    }

    tmp_cond_value_341 = tmp_and_91__value_3;

    tmp_cond_truth_341 = CHECK_IF_TRUE( tmp_cond_value_341 );
    if ( tmp_cond_truth_341 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_728;
    }
    if (tmp_cond_truth_341 == 1)
    {
        goto condexpr_true_241;
    }
    else
    {
        goto condexpr_false_241;
    }
    condexpr_true_241:;
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_result = tmp_and_91__value_3 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_91__value_3 );
        tmp_and_91__value_3 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_compexpr_left_332 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges );

    if (unlikely( tmp_compexpr_left_332 == NULL ))
    {
        tmp_compexpr_left_332 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dodges );
    }

    if ( tmp_compexpr_left_332 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2071 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 879;
        goto try_finally_handler_731;
    }

    tmp_compexpr_right_332 = const_int_0;
    tmp_assign_source_715 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_332, tmp_compexpr_right_332 );
    if ( tmp_assign_source_715 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_731;
    }
    {
        PyObject *old = tmp_and_91__value_2;
        tmp_and_91__value_2 = tmp_assign_source_715;
        Py_XDECREF( old );
    }

    tmp_cond_value_342 = tmp_and_91__value_2;

    tmp_cond_truth_342 = CHECK_IF_TRUE( tmp_cond_value_342 );
    if ( tmp_cond_truth_342 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_731;
    }
    if (tmp_cond_truth_342 == 1)
    {
        goto condexpr_true_242;
    }
    else
    {
        goto condexpr_false_242;
    }
    condexpr_true_242:;
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_result = tmp_and_91__value_2 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_91__value_2 );
        tmp_and_91__value_2 = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_compexpr_left_333 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compexpr_left_333 == NULL ))
    {
        tmp_compexpr_left_333 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compexpr_left_333 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 879;
        goto try_finally_handler_734;
    }

    tmp_compexpr_right_333 = const_str_plain_4;
    tmp_assign_source_716 = RICH_COMPARE_NE( tmp_compexpr_left_333, tmp_compexpr_right_333 );
    if ( tmp_assign_source_716 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_734;
    }
    {
        PyObject *old = tmp_and_91__value_1;
        tmp_and_91__value_1 = tmp_assign_source_716;
        Py_XDECREF( old );
    }

    tmp_cond_value_343 = tmp_and_91__value_1;

    tmp_cond_truth_343 = CHECK_IF_TRUE( tmp_cond_value_343 );
    if ( tmp_cond_truth_343 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_734;
    }
    if (tmp_cond_truth_343 == 1)
    {
        goto condexpr_true_243;
    }
    else
    {
        goto condexpr_false_243;
    }
    condexpr_true_243:;
    tmp_cond_value_340 = NULL;
    // Tried code
    tmp_result = tmp_and_91__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_91__value_1 );
        tmp_and_91__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_334 = const_str_plain_Frozen;
    tmp_compexpr_right_334 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_compexpr_right_334 == NULL ))
    {
        tmp_compexpr_right_334 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_compexpr_right_334 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 879;
        goto try_finally_handler_735;
    }

    tmp_cond_value_340 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_334, tmp_compexpr_right_334 );
    if ( tmp_cond_value_340 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_735;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_735:;
    exception_keeper_type_727 = exception_type;
    exception_keeper_value_727 = exception_value;
    exception_keeper_tb_727 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_727 != NULL )
    {
        exception_type = exception_keeper_type_727;
        exception_value = exception_keeper_value_727;
        exception_tb = exception_keeper_tb_727;

        goto try_finally_handler_734;
    }

    goto finally_end_727;
    finally_end_727:;
    goto condexpr_end_243;
    condexpr_false_243:;
    tmp_cond_value_340 = tmp_and_91__value_1;

    condexpr_end_243:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_734:;
    exception_keeper_type_728 = exception_type;
    exception_keeper_value_728 = exception_value;
    exception_keeper_tb_728 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_728 != NULL )
    {
        exception_type = exception_keeper_type_728;
        exception_value = exception_keeper_value_728;
        exception_tb = exception_keeper_tb_728;

        goto try_finally_handler_733;
    }

    goto finally_end_728;
    finally_end_728:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_733:;
    exception_keeper_type_729 = exception_type;
    exception_keeper_value_729 = exception_value;
    exception_keeper_tb_729 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_729 != NULL )
    {
        exception_type = exception_keeper_type_729;
        exception_value = exception_keeper_value_729;
        exception_tb = exception_keeper_tb_729;

        goto try_finally_handler_732;
    }

    goto finally_end_729;
    finally_end_729:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_732:;
    exception_keeper_type_730 = exception_type;
    exception_keeper_value_730 = exception_value;
    exception_keeper_tb_730 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_249 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_91__value_1 );
    tmp_and_91__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_249;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_730 != NULL )
    {
        exception_type = exception_keeper_type_730;
        exception_value = exception_keeper_value_730;
        exception_tb = exception_keeper_tb_730;

        goto try_finally_handler_731;
    }

    goto finally_end_730;
    finally_end_730:;
    goto condexpr_end_242;
    condexpr_false_242:;
    tmp_cond_value_340 = tmp_and_91__value_2;

    condexpr_end_242:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_731:;
    exception_keeper_type_731 = exception_type;
    exception_keeper_value_731 = exception_value;
    exception_keeper_tb_731 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_731 != NULL )
    {
        exception_type = exception_keeper_type_731;
        exception_value = exception_keeper_value_731;
        exception_tb = exception_keeper_tb_731;

        goto try_finally_handler_730;
    }

    goto finally_end_731;
    finally_end_731:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_730:;
    exception_keeper_type_732 = exception_type;
    exception_keeper_value_732 = exception_value;
    exception_keeper_tb_732 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_732 != NULL )
    {
        exception_type = exception_keeper_type_732;
        exception_value = exception_keeper_value_732;
        exception_tb = exception_keeper_tb_732;

        goto try_finally_handler_729;
    }

    goto finally_end_732;
    finally_end_732:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_729:;
    exception_keeper_type_733 = exception_type;
    exception_keeper_value_733 = exception_value;
    exception_keeper_tb_733 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_250 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_91__value_2 );
    tmp_and_91__value_2 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_250;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_733 != NULL )
    {
        exception_type = exception_keeper_type_733;
        exception_value = exception_keeper_value_733;
        exception_tb = exception_keeper_tb_733;

        goto try_finally_handler_728;
    }

    goto finally_end_733;
    finally_end_733:;
    goto condexpr_end_241;
    condexpr_false_241:;
    tmp_cond_value_340 = tmp_and_91__value_3;

    condexpr_end_241:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_728:;
    exception_keeper_type_734 = exception_type;
    exception_keeper_value_734 = exception_value;
    exception_keeper_tb_734 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_734 != NULL )
    {
        exception_type = exception_keeper_type_734;
        exception_value = exception_keeper_value_734;
        exception_tb = exception_keeper_tb_734;

        goto try_finally_handler_727;
    }

    goto finally_end_734;
    finally_end_734:;
    tmp_cond_truth_340 = CHECK_IF_TRUE( tmp_cond_value_340 );
    if ( tmp_cond_truth_340 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 879;
        goto try_finally_handler_727;
    }
    if (tmp_cond_truth_340 == 1)
    {
        goto branch_yes_196;
    }
    else
    {
        goto branch_no_196;
    }
    branch_yes_196:;
    tmp_compare_left_97 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_97 == NULL ))
    {
        tmp_compare_left_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_97 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 880;
        goto try_finally_handler_727;
    }

    tmp_compare_right_97 = const_str_plain_wolf;
    tmp_cmp_Eq_83 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_97, tmp_compare_right_97 );
    if ( tmp_cmp_Eq_83 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 880;
        goto try_finally_handler_727;
    }
    if (tmp_cmp_Eq_83 == 1)
    {
        goto branch_yes_197;
    }
    else
    {
        goto branch_no_197;
    }
    branch_yes_197:;
    tmp_source_name_76 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_76 == NULL ))
    {
        tmp_source_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_76 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 881;
        goto try_finally_handler_727;
    }

    tmp_called_name_96 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain_randint );
    if ( tmp_called_name_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 881;
        goto try_finally_handler_727;
    }
    tmp_call_arg_element_78 = const_int_pos_2;
    tmp_call_arg_element_79 = const_int_pos_4;
    frame_module->f_lineno = 881;
    tmp_assign_source_717 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_96, tmp_call_arg_element_78, tmp_call_arg_element_79 );
    Py_DECREF( tmp_called_name_96 );
    if ( tmp_assign_source_717 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 881;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_717 );
    goto branch_end_197;
    branch_no_197:;
    tmp_compare_left_98 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_98 == NULL ))
    {
        tmp_compare_left_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_98 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 882;
        goto try_finally_handler_727;
    }

    tmp_compare_right_98 = const_str_plain_orc;
    tmp_cmp_Eq_84 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_98, tmp_compare_right_98 );
    if ( tmp_cmp_Eq_84 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 882;
        goto try_finally_handler_727;
    }
    if (tmp_cmp_Eq_84 == 1)
    {
        goto branch_yes_198;
    }
    else
    {
        goto branch_no_198;
    }
    branch_yes_198:;
    tmp_source_name_77 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_77 == NULL ))
    {
        tmp_source_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_77 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 883;
        goto try_finally_handler_727;
    }

    tmp_called_name_97 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain_randint );
    if ( tmp_called_name_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 883;
        goto try_finally_handler_727;
    }
    tmp_call_arg_element_80 = const_int_pos_6;
    tmp_call_arg_element_81 = const_int_pos_8;
    frame_module->f_lineno = 883;
    tmp_assign_source_718 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_97, tmp_call_arg_element_80, tmp_call_arg_element_81 );
    Py_DECREF( tmp_called_name_97 );
    if ( tmp_assign_source_718 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 883;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_718 );
    goto branch_end_198;
    branch_no_198:;
    tmp_compare_left_99 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_99 == NULL ))
    {
        tmp_compare_left_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_99 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 884;
        goto try_finally_handler_727;
    }

    tmp_compare_right_99 = const_str_plain_wraith;
    tmp_cmp_Eq_85 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_99, tmp_compare_right_99 );
    if ( tmp_cmp_Eq_85 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 884;
        goto try_finally_handler_727;
    }
    if (tmp_cmp_Eq_85 == 1)
    {
        goto branch_yes_199;
    }
    else
    {
        goto branch_no_199;
    }
    branch_yes_199:;
    tmp_source_name_78 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_78 == NULL ))
    {
        tmp_source_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 885;
        goto try_finally_handler_727;
    }

    tmp_called_name_98 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_randint );
    if ( tmp_called_name_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 885;
        goto try_finally_handler_727;
    }
    tmp_call_arg_element_82 = const_int_pos_7;
    tmp_call_arg_element_83 = const_int_pos_9;
    frame_module->f_lineno = 885;
    tmp_assign_source_719 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_98, tmp_call_arg_element_82, tmp_call_arg_element_83 );
    Py_DECREF( tmp_called_name_98 );
    if ( tmp_assign_source_719 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 885;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_719 );
    goto branch_end_199;
    branch_no_199:;
    tmp_compare_left_100 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_100 == NULL ))
    {
        tmp_compare_left_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_100 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 886;
        goto try_finally_handler_727;
    }

    tmp_compare_right_100 = const_str_plain_dwarf;
    tmp_cmp_Eq_86 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_100, tmp_compare_right_100 );
    if ( tmp_cmp_Eq_86 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 886;
        goto try_finally_handler_727;
    }
    if (tmp_cmp_Eq_86 == 1)
    {
        goto branch_yes_200;
    }
    else
    {
        goto branch_no_200;
    }
    branch_yes_200:;
    tmp_source_name_79 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_79 == NULL ))
    {
        tmp_source_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_79 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 887;
        goto try_finally_handler_727;
    }

    tmp_called_name_99 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain_randint );
    if ( tmp_called_name_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 887;
        goto try_finally_handler_727;
    }
    tmp_call_arg_element_84 = const_int_pos_7;
    tmp_call_arg_element_85 = const_int_pos_10;
    frame_module->f_lineno = 887;
    tmp_assign_source_720 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_99, tmp_call_arg_element_84, tmp_call_arg_element_85 );
    Py_DECREF( tmp_called_name_99 );
    if ( tmp_assign_source_720 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 887;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_720 );
    goto branch_end_200;
    branch_no_200:;
    tmp_compare_left_101 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_101 == NULL ))
    {
        tmp_compare_left_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_101 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 888;
        goto try_finally_handler_727;
    }

    tmp_compare_right_101 = const_str_plain_spirit;
    tmp_cmp_Eq_87 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_101, tmp_compare_right_101 );
    if ( tmp_cmp_Eq_87 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 888;
        goto try_finally_handler_727;
    }
    if (tmp_cmp_Eq_87 == 1)
    {
        goto branch_yes_201;
    }
    else
    {
        goto branch_no_201;
    }
    branch_yes_201:;
    tmp_source_name_80 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_80 == NULL ))
    {
        tmp_source_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 889;
        goto try_finally_handler_727;
    }

    tmp_called_name_100 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_randint );
    if ( tmp_called_name_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 889;
        goto try_finally_handler_727;
    }
    tmp_call_arg_element_86 = const_int_pos_8;
    tmp_call_arg_element_87 = const_int_pos_11;
    frame_module->f_lineno = 889;
    tmp_assign_source_721 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_100, tmp_call_arg_element_86, tmp_call_arg_element_87 );
    Py_DECREF( tmp_called_name_100 );
    if ( tmp_assign_source_721 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 889;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_721 );
    goto branch_end_201;
    branch_no_201:;
    tmp_compare_left_102 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_102 == NULL ))
    {
        tmp_compare_left_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_102 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 890;
        goto try_finally_handler_727;
    }

    tmp_compare_right_102 = const_str_plain_slime;
    tmp_cmp_Eq_88 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_102, tmp_compare_right_102 );
    if ( tmp_cmp_Eq_88 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 890;
        goto try_finally_handler_727;
    }
    if (tmp_cmp_Eq_88 == 1)
    {
        goto branch_yes_202;
    }
    else
    {
        goto branch_no_202;
    }
    branch_yes_202:;
    tmp_source_name_81 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_81 == NULL ))
    {
        tmp_source_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_81 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 891;
        goto try_finally_handler_727;
    }

    tmp_called_name_101 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain_randint );
    if ( tmp_called_name_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 891;
        goto try_finally_handler_727;
    }
    tmp_call_arg_element_88 = const_int_pos_5;
    tmp_call_arg_element_89 = const_int_pos_15;
    frame_module->f_lineno = 891;
    tmp_assign_source_722 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_101, tmp_call_arg_element_88, tmp_call_arg_element_89 );
    Py_DECREF( tmp_called_name_101 );
    if ( tmp_assign_source_722 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 891;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam, tmp_assign_source_722 );
    branch_no_202:;
    branch_end_201:;
    branch_end_200:;
    branch_end_199:;
    branch_end_198:;
    branch_end_197:;
    tmp_left_name_221 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_left_name_221 == NULL ))
    {
        tmp_left_name_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_left_name_221 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 892;
        goto try_finally_handler_727;
    }

    tmp_right_name_220 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam );

    if (unlikely( tmp_right_name_220 == NULL ))
    {
        tmp_right_name_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_dam );
    }

    if ( tmp_right_name_220 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2099 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 892;
        goto try_finally_handler_727;
    }

    tmp_left_name_220 = BINARY_OPERATION_SUB( tmp_left_name_221, tmp_right_name_220 );
    if ( tmp_left_name_220 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 892;
        goto try_finally_handler_727;
    }
    tmp_right_name_221 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe );

    if (unlikely( tmp_right_name_221 == NULL ))
    {
        tmp_right_name_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defe );
    }

    if ( tmp_right_name_221 == NULL )
    {
        Py_DECREF( tmp_left_name_220 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1066 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 892;
        goto try_finally_handler_727;
    }

    tmp_assign_source_723 = BINARY_OPERATION_ADD( tmp_left_name_220, tmp_right_name_221 );
    Py_DECREF( tmp_left_name_220 );
    if ( tmp_assign_source_723 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 892;
        goto try_finally_handler_727;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_723 );
    tmp_assign_source_724 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dodges, tmp_assign_source_724 );
    tmp_subscribed_name_100 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_100 == NULL ))
    {
        tmp_subscribed_name_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_100 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }

    tmp_subscript_name_100 = const_str_plain_magenta;
    tmp_left_name_223 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_100, tmp_subscript_name_100 );
    if ( tmp_left_name_223 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    tmp_left_name_224 = const_str_digest_f9fc86739847c45d80846ef19985c811;
    tmp_right_name_223 = PyTuple_New( 2 );
    tmp_tuple_element_8 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_tuple_element_8 == NULL ))
    {
        tmp_tuple_element_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_left_name_223 );
        Py_DECREF( tmp_right_name_223 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_right_name_223, 0, tmp_tuple_element_8 );
    tmp_left_name_225 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_dam );

    if (unlikely( tmp_left_name_225 == NULL ))
    {
        tmp_left_name_225 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_dam );
    }

    if ( tmp_left_name_225 == NULL )
    {
        Py_DECREF( tmp_left_name_223 );
        Py_DECREF( tmp_right_name_223 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2099 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }

    tmp_right_name_224 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe );

    if (unlikely( tmp_right_name_224 == NULL ))
    {
        tmp_right_name_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defe );
    }

    if ( tmp_right_name_224 == NULL )
    {
        Py_DECREF( tmp_left_name_223 );
        Py_DECREF( tmp_right_name_223 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1066 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }

    tmp_tuple_element_8 = BINARY_OPERATION_SUB( tmp_left_name_225, tmp_right_name_224 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_223 );
        Py_DECREF( tmp_right_name_223 );

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    PyTuple_SET_ITEM( tmp_right_name_223, 1, tmp_tuple_element_8 );
    tmp_right_name_222 = BINARY_OPERATION_REMAINDER( tmp_left_name_224, tmp_right_name_223 );
    Py_DECREF( tmp_right_name_223 );
    if ( tmp_right_name_222 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_223 );

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    tmp_left_name_222 = BINARY_OPERATION_ADD( tmp_left_name_223, tmp_right_name_222 );
    Py_DECREF( tmp_left_name_223 );
    Py_DECREF( tmp_right_name_222 );
    if ( tmp_left_name_222 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    tmp_subscribed_name_101 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_101 == NULL ))
    {
        tmp_subscribed_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_101 == NULL )
    {
        Py_DECREF( tmp_left_name_222 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }

    tmp_subscript_name_101 = const_str_plain_off;
    tmp_right_name_225 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_101, tmp_subscript_name_101 );
    if ( tmp_right_name_225 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_222 );

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    tmp_str_arg_121 = BINARY_OPERATION_ADD( tmp_left_name_222, tmp_right_name_225 );
    Py_DECREF( tmp_left_name_222 );
    Py_DECREF( tmp_right_name_225 );
    if ( tmp_str_arg_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_121 );
    Py_DECREF( tmp_str_arg_121 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 894;
        goto try_finally_handler_727;
    }
    branch_no_196:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_727:;
    exception_keeper_type_735 = exception_type;
    exception_keeper_value_735 = exception_value;
    exception_keeper_tb_735 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_251 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_91__value_3 );
    tmp_and_91__value_3 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_251;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_735 != NULL )
    {
        exception_type = exception_keeper_type_735;
        exception_value = exception_keeper_value_735;
        exception_tb = exception_keeper_tb_735;

        goto frame_exception_exit_1;
    }

    goto finally_end_735;
    finally_end_735:;
    tmp_len_arg_10 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_len_arg_10 == NULL ))
    {
        tmp_len_arg_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_len_arg_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 895;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_103 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_compare_left_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 895;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_103 = const_int_0;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_103, tmp_compare_right_103 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_103 );

        frame_module->f_lineno = 895;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_103 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_203;
    }
    else
    {
        goto branch_no_203;
    }
    branch_yes_203:;
    tmp_compare_left_104 = const_str_plain_Burning;
    tmp_compare_right_104 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_compare_right_104 == NULL ))
    {
        tmp_compare_right_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_compare_right_104 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 896;
        goto frame_exception_exit_1;
    }

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_104, tmp_compare_left_104 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 896;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_In_2 == 1)
    {
        goto branch_yes_204;
    }
    else
    {
        goto branch_no_204;
    }
    branch_yes_204:;
    tmp_left_name_226 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_226 == NULL ))
    {
        tmp_left_name_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_226 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 897;
        goto frame_exception_exit_1;
    }

    tmp_right_name_226 = const_int_pos_3;
    tmp_assign_source_725 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_226, tmp_right_name_226 );
    if ( tmp_assign_source_725 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 897;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_725 );
    tmp_print_value = const_str_digest_c2201a26cd591a94095f787d9d718c20;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 898;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 898;
        goto frame_exception_exit_1;
    }
    branch_no_204:;
    tmp_compare_left_105 = const_str_plain_Poisoned;
    tmp_compare_right_105 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_compare_right_105 == NULL ))
    {
        tmp_compare_right_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_compare_right_105 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 899;
        goto frame_exception_exit_1;
    }

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_105, tmp_compare_left_105 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 899;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_In_3 == 1)
    {
        goto branch_yes_205;
    }
    else
    {
        goto branch_no_205;
    }
    branch_yes_205:;
    tmp_left_name_227 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_left_name_227 == NULL ))
    {
        tmp_left_name_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_left_name_227 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 900;
        goto frame_exception_exit_1;
    }

    tmp_right_name_227 = const_int_pos_15;
    tmp_assign_source_726 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_227, tmp_right_name_227 );
    if ( tmp_assign_source_726 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 900;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp, tmp_assign_source_726 );
    tmp_print_value = const_str_digest_5b821a034a3b984ec1045dbb88295522;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 901;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 901;
        goto frame_exception_exit_1;
    }
    branch_no_205:;
    tmp_compare_left_106 = const_str_plain_Frozen;
    tmp_compare_right_106 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );

    if (unlikely( tmp_compare_right_106 == NULL ))
    {
        tmp_compare_right_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuffs );
    }

    if ( tmp_compare_right_106 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1910 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 902;
        goto frame_exception_exit_1;
    }

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_106, tmp_compare_left_106 );
    if ( tmp_cmp_In_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 902;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_In_4 == 1)
    {
        goto branch_yes_206;
    }
    else
    {
        goto branch_no_206;
    }
    branch_yes_206:;
    tmp_print_value = const_str_digest_c20baaba4abaa30c99278e47fbdf6a02;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 903;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 903;
        goto frame_exception_exit_1;
    }
    branch_no_206:;
    tmp_left_name_228 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer );

    if (unlikely( tmp_left_name_228 == NULL ))
    {
        tmp_left_name_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer );
    }

    if ( tmp_left_name_228 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2130 ], 40, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 904;
        goto frame_exception_exit_1;
    }

    tmp_right_name_228 = const_int_pos_1;
    tmp_assign_source_727 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_228, tmp_right_name_228 );
    if ( tmp_assign_source_727 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 904;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer, tmp_assign_source_727 );
    tmp_compare_left_107 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer );

    if (unlikely( tmp_compare_left_107 == NULL ))
    {
        tmp_compare_left_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_debuff_timer );
    }

    if ( tmp_compare_left_107 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2130 ], 40, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 905;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_107 = const_int_0;
    tmp_cmp_LtE_2 = RICH_COMPARE_BOOL_LE( tmp_compare_left_107, tmp_compare_right_107 );
    if ( tmp_cmp_LtE_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 905;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_LtE_2 == 1)
    {
        goto branch_yes_207;
    }
    else
    {
        goto branch_no_207;
    }
    branch_yes_207:;
    tmp_assign_source_728 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs, tmp_assign_source_728 );
    branch_no_207:;
    branch_no_203:;
    // Tried code
    tmp_cond_value_344 = NULL;
    // Tried code
    tmp_compexpr_left_335 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_hp );

    if (unlikely( tmp_compexpr_left_335 == NULL ))
    {
        tmp_compexpr_left_335 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_hp );
    }

    if ( tmp_compexpr_left_335 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1748 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 907;
        goto try_finally_handler_737;
    }

    tmp_compexpr_right_335 = const_int_0;
    tmp_assign_source_729 = RICH_COMPARE_LE( tmp_compexpr_left_335, tmp_compexpr_right_335 );
    if ( tmp_assign_source_729 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 907;
        goto try_finally_handler_737;
    }
    {
        PyObject *old = tmp_and_92__value_1;
        tmp_and_92__value_1 = tmp_assign_source_729;
        Py_XDECREF( old );
    }

    tmp_cond_value_345 = tmp_and_92__value_1;

    tmp_cond_truth_345 = CHECK_IF_TRUE( tmp_cond_value_345 );
    if ( tmp_cond_truth_345 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 907;
        goto try_finally_handler_737;
    }
    if (tmp_cond_truth_345 == 1)
    {
        goto condexpr_true_244;
    }
    else
    {
        goto condexpr_false_244;
    }
    condexpr_true_244:;
    tmp_cond_value_344 = NULL;
    // Tried code
    tmp_result = tmp_and_92__value_1 != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_92__value_1 );
        tmp_and_92__value_1 = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_336 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_fight_act );

    if (unlikely( tmp_compexpr_left_336 == NULL ))
    {
        tmp_compexpr_left_336 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fight_act );
    }

    if ( tmp_compexpr_left_336 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1814 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 907;
        goto try_finally_handler_738;
    }

    tmp_compexpr_right_336 = const_str_plain_5;
    tmp_cond_value_344 = RICH_COMPARE_NE( tmp_compexpr_left_336, tmp_compexpr_right_336 );
    if ( tmp_cond_value_344 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 907;
        goto try_finally_handler_738;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_738:;
    exception_keeper_type_736 = exception_type;
    exception_keeper_value_736 = exception_value;
    exception_keeper_tb_736 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_736 != NULL )
    {
        exception_type = exception_keeper_type_736;
        exception_value = exception_keeper_value_736;
        exception_tb = exception_keeper_tb_736;

        goto try_finally_handler_737;
    }

    goto finally_end_736;
    finally_end_736:;
    goto condexpr_end_244;
    condexpr_false_244:;
    tmp_cond_value_344 = tmp_and_92__value_1;

    Py_INCREF( tmp_cond_value_344 );
    condexpr_end_244:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_737:;
    exception_keeper_type_737 = exception_type;
    exception_keeper_value_737 = exception_value;
    exception_keeper_tb_737 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_737 != NULL )
    {
        exception_type = exception_keeper_type_737;
        exception_value = exception_keeper_value_737;
        exception_tb = exception_keeper_tb_737;

        goto try_finally_handler_736;
    }

    goto finally_end_737;
    finally_end_737:;
    tmp_cond_truth_344 = CHECK_IF_TRUE( tmp_cond_value_344 );
    if ( tmp_cond_truth_344 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_344 );

        frame_module->f_lineno = 907;
        goto try_finally_handler_736;
    }
    Py_DECREF( tmp_cond_value_344 );
    if (tmp_cond_truth_344 == 1)
    {
        goto branch_yes_208;
    }
    else
    {
        goto branch_no_208;
    }
    branch_yes_208:;
    tmp_assign_source_730 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_set, tmp_assign_source_730 );
    tmp_assign_source_731 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_debuffs, tmp_assign_source_731 );
    tmp_subscribed_name_102 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_102 == NULL ))
    {
        tmp_subscribed_name_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_102 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }

    tmp_subscript_name_102 = const_str_plain_blue;
    tmp_left_name_232 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_102, tmp_subscript_name_102 );
    if ( tmp_left_name_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_right_name_229 = const_str_digest_27302fb60afd206f9698e297afcb0956;
    tmp_left_name_231 = BINARY_OPERATION_ADD( tmp_left_name_232, tmp_right_name_229 );
    Py_DECREF( tmp_left_name_232 );
    if ( tmp_left_name_231 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_right_name_230 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_right_name_230 == NULL ))
    {
        tmp_right_name_230 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_right_name_230 == NULL )
    {
        Py_DECREF( tmp_left_name_231 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }

    tmp_left_name_230 = BINARY_OPERATION_ADD( tmp_left_name_231, tmp_right_name_230 );
    Py_DECREF( tmp_left_name_231 );
    if ( tmp_left_name_230 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_right_name_231 = const_str_chr_33;
    tmp_left_name_229 = BINARY_OPERATION_ADD( tmp_left_name_230, tmp_right_name_231 );
    Py_DECREF( tmp_left_name_230 );
    if ( tmp_left_name_229 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_subscribed_name_103 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_103 == NULL ))
    {
        tmp_subscribed_name_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_103 == NULL )
    {
        Py_DECREF( tmp_left_name_229 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }

    tmp_subscript_name_103 = const_str_plain_off;
    tmp_right_name_232 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_103, tmp_subscript_name_103 );
    if ( tmp_right_name_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_229 );

        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_str_arg_122 = BINARY_OPERATION_ADD( tmp_left_name_229, tmp_right_name_232 );
    Py_DECREF( tmp_left_name_229 );
    Py_DECREF( tmp_right_name_232 );
    if ( tmp_str_arg_122 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_122 );
    Py_DECREF( tmp_str_arg_122 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 910;
        goto try_finally_handler_736;
    }
    tmp_source_name_82 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_kills );

    if (unlikely( tmp_source_name_82 == NULL ))
    {
        tmp_source_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_kills );
    }

    if ( tmp_source_name_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1176 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 912;
        goto try_finally_handler_736;
    }

    tmp_called_name_102 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_append );
    if ( tmp_called_name_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 912;
        goto try_finally_handler_736;
    }
    tmp_args_element_name_39 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_args_element_name_39 == NULL ))
    {
        tmp_args_element_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_args_element_name_39 == NULL )
    {
        Py_DECREF( tmp_called_name_102 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 912;
        goto try_finally_handler_736;
    }

    frame_module->f_lineno = 912;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_102, tmp_args_element_name_39 );
    Py_DECREF( tmp_called_name_102 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 912;
        goto try_finally_handler_736;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_83 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_random );

    if (unlikely( tmp_source_name_83 == NULL ))
    {
        tmp_source_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_random );
    }

    if ( tmp_source_name_83 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1359 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 913;
        goto try_finally_handler_736;
    }

    tmp_called_name_103 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain_randint );
    if ( tmp_called_name_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 913;
        goto try_finally_handler_736;
    }
    tmp_call_arg_element_90 = const_int_pos_5;
    tmp_call_arg_element_91 = const_int_pos_8;
    frame_module->f_lineno = 913;
    tmp_assign_source_732 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_103, tmp_call_arg_element_90, tmp_call_arg_element_91 );
    Py_DECREF( tmp_called_name_103 );
    if ( tmp_assign_source_732 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 913;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_encounter_time, tmp_assign_source_732 );
    tmp_compare_left_108 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_108 == NULL ))
    {
        tmp_compare_left_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_108 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 914;
        goto try_finally_handler_736;
    }

    tmp_compare_right_108 = const_str_plain_wolf;
    tmp_cmp_Eq_89 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_108, tmp_compare_right_108 );
    if ( tmp_cmp_Eq_89 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 914;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_89 == 1)
    {
        goto branch_yes_209;
    }
    else
    {
        goto branch_no_209;
    }
    branch_yes_209:;
    tmp_left_name_233 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_233 == NULL ))
    {
        tmp_left_name_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_233 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 915;
        goto try_finally_handler_736;
    }

    tmp_right_name_233 = const_int_pos_1;
    tmp_assign_source_733 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_233, tmp_right_name_233 );
    if ( tmp_assign_source_733 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 915;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_733 );
    tmp_left_name_234 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_234 == NULL ))
    {
        tmp_left_name_234 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_234 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 916;
        goto try_finally_handler_736;
    }

    tmp_right_name_234 = const_int_pos_2;
    tmp_assign_source_734 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_234, tmp_right_name_234 );
    if ( tmp_assign_source_734 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 916;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_734 );
    goto branch_end_209;
    branch_no_209:;
    tmp_compare_left_109 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_109 == NULL ))
    {
        tmp_compare_left_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_109 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 917;
        goto try_finally_handler_736;
    }

    tmp_compare_right_109 = const_str_plain_orc;
    tmp_cmp_Eq_90 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_109, tmp_compare_right_109 );
    if ( tmp_cmp_Eq_90 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 917;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_90 == 1)
    {
        goto branch_yes_210;
    }
    else
    {
        goto branch_no_210;
    }
    branch_yes_210:;
    tmp_left_name_235 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_235 == NULL ))
    {
        tmp_left_name_235 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_235 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 918;
        goto try_finally_handler_736;
    }

    tmp_right_name_235 = const_int_pos_2;
    tmp_assign_source_735 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_235, tmp_right_name_235 );
    if ( tmp_assign_source_735 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 918;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_735 );
    tmp_left_name_236 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_236 == NULL ))
    {
        tmp_left_name_236 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_236 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 919;
        goto try_finally_handler_736;
    }

    tmp_right_name_236 = const_int_pos_3;
    tmp_assign_source_736 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_236, tmp_right_name_236 );
    if ( tmp_assign_source_736 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 919;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_736 );
    goto branch_end_210;
    branch_no_210:;
    tmp_compare_left_110 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_110 == NULL ))
    {
        tmp_compare_left_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_110 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 920;
        goto try_finally_handler_736;
    }

    tmp_compare_right_110 = const_str_plain_wraith;
    tmp_cmp_Eq_91 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_110, tmp_compare_right_110 );
    if ( tmp_cmp_Eq_91 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 920;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_91 == 1)
    {
        goto branch_yes_211;
    }
    else
    {
        goto branch_no_211;
    }
    branch_yes_211:;
    tmp_left_name_237 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_237 == NULL ))
    {
        tmp_left_name_237 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_237 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 921;
        goto try_finally_handler_736;
    }

    tmp_right_name_237 = const_int_pos_3;
    tmp_assign_source_737 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_237, tmp_right_name_237 );
    if ( tmp_assign_source_737 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 921;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_737 );
    tmp_left_name_238 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_238 == NULL ))
    {
        tmp_left_name_238 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_238 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 922;
        goto try_finally_handler_736;
    }

    tmp_right_name_238 = const_int_pos_4;
    tmp_assign_source_738 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_238, tmp_right_name_238 );
    if ( tmp_assign_source_738 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 922;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_738 );
    goto branch_end_211;
    branch_no_211:;
    tmp_compare_left_111 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_111 == NULL ))
    {
        tmp_compare_left_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_111 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 923;
        goto try_finally_handler_736;
    }

    tmp_compare_right_111 = const_str_plain_dwarf;
    tmp_cmp_Eq_92 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_111, tmp_compare_right_111 );
    if ( tmp_cmp_Eq_92 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 923;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_92 == 1)
    {
        goto branch_yes_212;
    }
    else
    {
        goto branch_no_212;
    }
    branch_yes_212:;
    tmp_left_name_239 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_239 == NULL ))
    {
        tmp_left_name_239 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_239 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 924;
        goto try_finally_handler_736;
    }

    tmp_right_name_239 = const_int_pos_4;
    tmp_assign_source_739 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_239, tmp_right_name_239 );
    if ( tmp_assign_source_739 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 924;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_739 );
    tmp_left_name_240 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_240 == NULL ))
    {
        tmp_left_name_240 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_240 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 925;
        goto try_finally_handler_736;
    }

    tmp_right_name_240 = const_int_pos_6;
    tmp_assign_source_740 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_240, tmp_right_name_240 );
    if ( tmp_assign_source_740 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 925;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_740 );
    goto branch_end_212;
    branch_no_212:;
    tmp_compare_left_112 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_112 == NULL ))
    {
        tmp_compare_left_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_112 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 926;
        goto try_finally_handler_736;
    }

    tmp_compare_right_112 = const_str_plain_elf;
    tmp_cmp_Eq_93 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_112, tmp_compare_right_112 );
    if ( tmp_cmp_Eq_93 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 926;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_93 == 1)
    {
        goto branch_yes_213;
    }
    else
    {
        goto branch_no_213;
    }
    branch_yes_213:;
    tmp_left_name_241 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_241 == NULL ))
    {
        tmp_left_name_241 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_241 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 927;
        goto try_finally_handler_736;
    }

    tmp_right_name_241 = const_int_pos_5;
    tmp_assign_source_741 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_241, tmp_right_name_241 );
    if ( tmp_assign_source_741 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 927;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_741 );
    tmp_left_name_242 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_242 == NULL ))
    {
        tmp_left_name_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_242 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 928;
        goto try_finally_handler_736;
    }

    tmp_right_name_242 = const_int_pos_5;
    tmp_assign_source_742 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_242, tmp_right_name_242 );
    if ( tmp_assign_source_742 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 928;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_742 );
    goto branch_end_213;
    branch_no_213:;
    tmp_compare_left_113 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_113 == NULL ))
    {
        tmp_compare_left_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_113 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 929;
        goto try_finally_handler_736;
    }

    tmp_compare_right_113 = const_str_plain_spirit;
    tmp_cmp_Eq_94 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_113, tmp_compare_right_113 );
    if ( tmp_cmp_Eq_94 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 929;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_94 == 1)
    {
        goto branch_yes_214;
    }
    else
    {
        goto branch_no_214;
    }
    branch_yes_214:;
    tmp_left_name_243 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_243 == NULL ))
    {
        tmp_left_name_243 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_243 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 930;
        goto try_finally_handler_736;
    }

    tmp_right_name_243 = const_int_pos_8;
    tmp_assign_source_743 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_243, tmp_right_name_243 );
    if ( tmp_assign_source_743 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 930;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_743 );
    tmp_left_name_244 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_244 == NULL ))
    {
        tmp_left_name_244 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_244 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 931;
        goto try_finally_handler_736;
    }

    tmp_right_name_244 = const_int_pos_8;
    tmp_assign_source_744 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_244, tmp_right_name_244 );
    if ( tmp_assign_source_744 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 931;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_744 );
    goto branch_end_214;
    branch_no_214:;
    tmp_compare_left_114 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_enemy_type );

    if (unlikely( tmp_compare_left_114 == NULL ))
    {
        tmp_compare_left_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enemy_type );
    }

    if ( tmp_compare_left_114 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1262 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 932;
        goto try_finally_handler_736;
    }

    tmp_compare_right_114 = const_str_plain_goo;
    tmp_cmp_Eq_95 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_114, tmp_compare_right_114 );
    if ( tmp_cmp_Eq_95 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 932;
        goto try_finally_handler_736;
    }
    if (tmp_cmp_Eq_95 == 1)
    {
        goto branch_yes_215;
    }
    else
    {
        goto branch_no_215;
    }
    branch_yes_215:;
    tmp_left_name_245 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp );

    if (unlikely( tmp_left_name_245 == NULL ))
    {
        tmp_left_name_245 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exp );
    }

    if ( tmp_left_name_245 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1574 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 933;
        goto try_finally_handler_736;
    }

    tmp_right_name_245 = const_int_pos_10;
    tmp_assign_source_745 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_245, tmp_right_name_245 );
    if ( tmp_assign_source_745 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 933;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_exp, tmp_assign_source_745 );
    tmp_left_name_246 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_left_name_246 == NULL ))
    {
        tmp_left_name_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_left_name_246 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 934;
        goto try_finally_handler_736;
    }

    tmp_right_name_246 = const_int_pos_10;
    tmp_assign_source_746 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_246, tmp_right_name_246 );
    if ( tmp_assign_source_746 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 934;
        goto try_finally_handler_736;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points, tmp_assign_source_746 );
    branch_no_215:;
    branch_end_214:;
    branch_end_213:;
    branch_end_212:;
    branch_end_211:;
    branch_end_210:;
    branch_end_209:;
    branch_no_208:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_736:;
    exception_keeper_type_738 = exception_type;
    exception_keeper_value_738 = exception_value;
    exception_keeper_tb_738 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_252 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_92__value_1 );
    tmp_and_92__value_1 = NULL;

    frame_module->f_lineno = tmp_tried_lineno_252;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_738 != NULL )
    {
        exception_type = exception_keeper_type_738;
        exception_value = exception_keeper_value_738;
        exception_tb = exception_keeper_tb_738;

        goto frame_exception_exit_1;
    }

    goto finally_end_738;
    finally_end_738:;
    tmp_compare_left_115 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_compare_left_115 == NULL ))
    {
        tmp_compare_left_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_compare_left_115 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 935;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_115 = const_int_0;
    tmp_cmp_LtE_3 = RICH_COMPARE_BOOL_LE( tmp_compare_left_115, tmp_compare_right_115 );
    if ( tmp_cmp_LtE_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 935;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_LtE_3 == 1)
    {
        goto branch_yes_216;
    }
    else
    {
        goto branch_no_216;
    }
    branch_yes_216:;
    tmp_subscribed_name_104 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_104 == NULL ))
    {
        tmp_subscribed_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_104 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_104 = const_str_plain_darkred;
    tmp_left_name_248 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_104, tmp_subscript_name_104 );
    if ( tmp_left_name_248 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_right_name_247 = const_str_digest_52b6c84346a65d4d229bf3c0ff5c4988;
    tmp_left_name_247 = BINARY_OPERATION_ADD( tmp_left_name_248, tmp_right_name_247 );
    Py_DECREF( tmp_left_name_248 );
    if ( tmp_left_name_247 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_105 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_105 == NULL ))
    {
        tmp_subscribed_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_105 == NULL )
    {
        Py_DECREF( tmp_left_name_247 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_105 = const_str_plain_off;
    tmp_right_name_248 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_105, tmp_subscript_name_105 );
    if ( tmp_right_name_248 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_247 );

        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_123 = BINARY_OPERATION_ADD( tmp_left_name_247, tmp_right_name_248 );
    Py_DECREF( tmp_left_name_247 );
    Py_DECREF( tmp_right_name_248 );
    if ( tmp_str_arg_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_123 );
    Py_DECREF( tmp_str_arg_123 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_106 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_106 == NULL ))
    {
        tmp_subscribed_name_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_106 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_106 = const_str_plain_blue;
    tmp_left_name_250 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_106, tmp_subscript_name_106 );
    if ( tmp_left_name_250 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_right_name_249 = const_str_digest_73f28f4d44ac7837d75ceaa80324409a;
    tmp_left_name_249 = BINARY_OPERATION_ADD( tmp_left_name_250, tmp_right_name_249 );
    Py_DECREF( tmp_left_name_250 );
    if ( tmp_left_name_249 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_107 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_107 == NULL ))
    {
        tmp_subscribed_name_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_107 == NULL )
    {
        Py_DECREF( tmp_left_name_249 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_107 = const_str_plain_off;
    tmp_right_name_250 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_107, tmp_subscript_name_107 );
    if ( tmp_right_name_250 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_249 );

        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_124 = BINARY_OPERATION_ADD( tmp_left_name_249, tmp_right_name_250 );
    Py_DECREF( tmp_left_name_249 );
    Py_DECREF( tmp_right_name_250 );
    if ( tmp_str_arg_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_124 );
    Py_DECREF( tmp_str_arg_124 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_called_name_104 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    if ( tmp_called_name_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 938;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_92 = const_str_digest_bd1ed93352551ef2b175852872760d81;
    frame_module->f_lineno = 938;
    tmp_assign_source_747 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_104, tmp_call_arg_element_92 );
    if ( tmp_assign_source_747 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 938;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dead_p, tmp_assign_source_747 );
    tmp_compare_left_116 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dead_p );

    if (unlikely( tmp_compare_left_116 == NULL ))
    {
        tmp_compare_left_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dead_p );
    }

    if ( tmp_compare_left_116 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2170 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 939;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_116 = const_str_plain_y;
    tmp_cmp_Eq_96 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_116, tmp_compare_right_116 );
    if ( tmp_cmp_Eq_96 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 939;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_96 == 1)
    {
        goto branch_yes_217;
    }
    else
    {
        goto branch_no_217;
    }
    branch_yes_217:;
    tmp_subscribed_name_108 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_108 == NULL ))
    {
        tmp_subscribed_name_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_108 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_108 = const_str_plain_darkmagenta;
    tmp_left_name_252 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_108, tmp_subscript_name_108 );
    if ( tmp_left_name_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    tmp_right_name_251 = const_str_digest_3f0dd43872ac70e9bb8be81db574a075;
    tmp_left_name_251 = BINARY_OPERATION_ADD( tmp_left_name_252, tmp_right_name_251 );
    Py_DECREF( tmp_left_name_252 );
    if ( tmp_left_name_251 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_109 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_109 == NULL ))
    {
        tmp_subscribed_name_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_109 == NULL )
    {
        Py_DECREF( tmp_left_name_251 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_109 = const_str_plain_off;
    tmp_right_name_252 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_109, tmp_subscript_name_109 );
    if ( tmp_right_name_252 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_251 );

        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_125 = BINARY_OPERATION_ADD( tmp_left_name_251, tmp_right_name_252 );
    Py_DECREF( tmp_left_name_251 );
    Py_DECREF( tmp_right_name_252 );
    if ( tmp_str_arg_125 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_125 );
    Py_DECREF( tmp_str_arg_125 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    tmp_called_name_105 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_Counter );

    if (unlikely( tmp_called_name_105 == NULL ))
    {
        tmp_called_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Counter );
    }

    if ( tmp_called_name_105 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2198 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 941;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 941;
    tmp_assign_source_748 = CALL_FUNCTION_NO_ARGS( tmp_called_name_105 );
    if ( tmp_assign_source_748 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_cnt, tmp_assign_source_748 );
    tmp_iter_arg_3 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_kills );

    if (unlikely( tmp_iter_arg_3 == NULL ))
    {
        tmp_iter_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_kills );
    }

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1176 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 942;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_749 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_749 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 942;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = tmp_for_loop_1__for_iterator;
        tmp_for_loop_1__for_iterator = tmp_assign_source_749;
        Py_XDECREF( old );
    }

    // Tried code
    loop_start_6:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_750 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_750 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_module->f_lineno = 942;
            goto try_finally_handler_739;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_750;
        Py_XDECREF( old );
    }

    tmp_assign_source_751 = tmp_for_loop_1__iter_value;

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_word, tmp_assign_source_751 );
    tmp_assign_source_752 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_cnt );

    if (unlikely( tmp_assign_source_752 == NULL ))
    {
        tmp_assign_source_752 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cnt );
    }

    if ( tmp_assign_source_752 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2227 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 943;
        goto try_finally_handler_739;
    }

    {
        PyObject *old = tmp_inplace_assign_subscr_1__target;
        tmp_inplace_assign_subscr_1__target = tmp_assign_source_752;
        Py_INCREF( tmp_inplace_assign_subscr_1__target );
        Py_XDECREF( old );
    }

    // Tried code
    tmp_assign_source_753 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_word );

    if (unlikely( tmp_assign_source_753 == NULL ))
    {
        tmp_assign_source_753 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_word );
    }

    if ( tmp_assign_source_753 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2252 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 943;
        goto try_finally_handler_740;
    }

    {
        PyObject *old = tmp_inplace_assign_subscr_1__subscript;
        tmp_inplace_assign_subscr_1__subscript = tmp_assign_source_753;
        Py_INCREF( tmp_inplace_assign_subscr_1__subscript );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_110 = tmp_inplace_assign_subscr_1__target;

    tmp_subscript_name_110 = tmp_inplace_assign_subscr_1__subscript;

    tmp_left_name_253 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_110, tmp_subscript_name_110 );
    if ( tmp_left_name_253 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 943;
        goto try_finally_handler_740;
    }
    tmp_right_name_253 = const_int_pos_1;
    tmp_ass_subvalue_1 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_253, tmp_right_name_253 );
    Py_DECREF( tmp_left_name_253 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 943;
        goto try_finally_handler_740;
    }
    tmp_ass_subscribed_1 = tmp_inplace_assign_subscr_1__target;

    tmp_ass_subscript_1 = tmp_inplace_assign_subscr_1__subscript;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 943;
        goto try_finally_handler_740;
    }
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_740:;
    exception_keeper_type_739 = exception_type;
    exception_keeper_value_739 = exception_value;
    exception_keeper_tb_739 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_253 = frame_module->f_lineno;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_subscr_1__target );
    Py_DECREF( tmp_inplace_assign_subscr_1__target );
    tmp_inplace_assign_subscr_1__target = NULL;

    Py_XDECREF( tmp_inplace_assign_subscr_1__subscript );
    tmp_inplace_assign_subscr_1__subscript = NULL;

    frame_module->f_lineno = tmp_tried_lineno_253;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_739 != NULL )
    {
        exception_type = exception_keeper_type_739;
        exception_value = exception_keeper_value_739;
        exception_tb = exception_keeper_tb_739;

        goto try_finally_handler_739;
    }

    goto finally_end_739;
    finally_end_739:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 942;
        goto try_finally_handler_739;
    }
    goto loop_start_6;
    loop_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occurred, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_739:;
    exception_keeper_type_740 = exception_type;
    exception_keeper_value_740 = exception_value;
    exception_keeper_tb_740 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_254 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    frame_module->f_lineno = tmp_tried_lineno_254;
    // Re-raise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_740 != NULL )
    {
        exception_type = exception_keeper_type_740;
        exception_value = exception_keeper_value_740;
        exception_tb = exception_keeper_tb_740;

        goto frame_exception_exit_1;
    }

    goto finally_end_740;
    finally_end_740:;
    tmp_dict_seq_1 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_cnt );

    if (unlikely( tmp_dict_seq_1 == NULL ))
    {
        tmp_dict_seq_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cnt );
    }

    if ( tmp_dict_seq_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2227 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 944;
        goto frame_exception_exit_1;
    }

    tmp_str_arg_126 = TO_DICT( tmp_dict_seq_1, NULL );
    if ( tmp_str_arg_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 944;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_126 );
    Py_DECREF( tmp_str_arg_126 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 944;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 944;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 944;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_str_digest_eee0d775625e14080715be91fec03082;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 945;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 945;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_111 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_111 == NULL ))
    {
        tmp_subscribed_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_111 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_111 = const_str_plain_darkgreen;
    tmp_left_name_255 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_111, tmp_subscript_name_111 );
    if ( tmp_left_name_255 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_left_name_256 = const_str_digest_e49a9a82d28820d828d3cdc94c527ae8;
    tmp_right_name_255 = PyTuple_New( 5 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_damage );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_damage );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_left_name_255 );
        Py_DECREF( tmp_right_name_255 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1038 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_right_name_255, 0, tmp_tuple_element_9 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_left_name_255 );
        Py_DECREF( tmp_right_name_255 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_right_name_255, 1, tmp_tuple_element_9 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_defe );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defe );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_left_name_255 );
        Py_DECREF( tmp_right_name_255 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1066 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_right_name_255, 2, tmp_tuple_element_9 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_left_name_255 );
        Py_DECREF( tmp_right_name_255 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_right_name_255, 3, tmp_tuple_element_9 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_level );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_level );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_left_name_255 );
        Py_DECREF( tmp_right_name_255 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1630 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_right_name_255, 4, tmp_tuple_element_9 );
    tmp_right_name_254 = BINARY_OPERATION_REMAINDER( tmp_left_name_256, tmp_right_name_255 );
    Py_DECREF( tmp_right_name_255 );
    if ( tmp_right_name_254 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_255 );

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_left_name_254 = BINARY_OPERATION_ADD( tmp_left_name_255, tmp_right_name_254 );
    Py_DECREF( tmp_left_name_255 );
    Py_DECREF( tmp_right_name_254 );
    if ( tmp_left_name_254 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_112 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_112 == NULL ))
    {
        tmp_subscribed_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_112 == NULL )
    {
        Py_DECREF( tmp_left_name_254 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_112 = const_str_plain_off;
    tmp_right_name_256 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_112, tmp_subscript_name_112 );
    if ( tmp_right_name_256 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_254 );

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_127 = BINARY_OPERATION_ADD( tmp_left_name_254, tmp_right_name_256 );
    Py_DECREF( tmp_left_name_254 );
    Py_DECREF( tmp_right_name_256 );
    if ( tmp_str_arg_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_127 );
    Py_DECREF( tmp_str_arg_127 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_113 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_113 == NULL ))
    {
        tmp_subscribed_name_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_113 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_113 = const_str_plain_darkgreen;
    tmp_left_name_258 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_113, tmp_subscript_name_113 );
    if ( tmp_left_name_258 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    tmp_left_name_259 = const_str_digest_7caab993e2e516d7b4db21b8abd4c5de;
    tmp_right_name_258 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_points );

    if (unlikely( tmp_right_name_258 == NULL ))
    {
        tmp_right_name_258 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_points );
    }

    if ( tmp_right_name_258 == NULL )
    {
        Py_DECREF( tmp_left_name_258 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1203 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }

    tmp_right_name_257 = BINARY_OPERATION_REMAINDER( tmp_left_name_259, tmp_right_name_258 );
    if ( tmp_right_name_257 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_258 );

        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    tmp_left_name_257 = BINARY_OPERATION_ADD( tmp_left_name_258, tmp_right_name_257 );
    Py_DECREF( tmp_left_name_258 );
    Py_DECREF( tmp_right_name_257 );
    if ( tmp_left_name_257 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_114 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_color );

    if (unlikely( tmp_subscribed_name_114 == NULL ))
    {
        tmp_subscribed_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_color );
    }

    if ( tmp_subscribed_name_114 == NULL )
    {
        Py_DECREF( tmp_left_name_257 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_114 = const_str_plain_off;
    tmp_right_name_259 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_114, tmp_subscript_name_114 );
    if ( tmp_right_name_259 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_257 );

        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    tmp_str_arg_128 = BINARY_OPERATION_ADD( tmp_left_name_257, tmp_right_name_259 );
    Py_DECREF( tmp_left_name_257 );
    Py_DECREF( tmp_right_name_259 );
    if ( tmp_str_arg_128 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    tmp_print_value = PyObject_Str( tmp_str_arg_128 );
    Py_DECREF( tmp_str_arg_128 );
    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 947;
        goto frame_exception_exit_1;
    }
    tmp_called_name_106 = LOOKUP_BUILTIN( const_str_plain_quit );
    if ( tmp_called_name_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 948;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_106 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_217;
    branch_no_217:;
    tmp_compare_left_117 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_dead_p );

    if (unlikely( tmp_compare_left_117 == NULL ))
    {
        tmp_compare_left_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dead_p );
    }

    if ( tmp_compare_left_117 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2170 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 949;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_117 = const_str_plain_n;
    tmp_cmp_Eq_97 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_117, tmp_compare_right_117 );
    if ( tmp_cmp_Eq_97 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 949;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_97 == 1)
    {
        goto branch_yes_218;
    }
    else
    {
        goto branch_no_218;
    }
    branch_yes_218:;
    tmp_called_name_107 = LOOKUP_BUILTIN( const_str_plain_quit );
    if ( tmp_called_name_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 950;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 950;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_name_107 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 950;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_218:;
    branch_end_217:;
    branch_no_216:;
    tmp_assign_source_754 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_stop, tmp_assign_source_754 );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 783;
        goto frame_exception_exit_1;
    }
    goto loop_start_4;
    loop_end_4:;
    tmp_compare_left_118 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp );

    if (unlikely( tmp_compare_left_118 == NULL ))
    {
        tmp_compare_left_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hp );
    }

    if ( tmp_compare_left_118 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1014 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 952;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_118 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_compare_right_118 == NULL ))
    {
        tmp_compare_right_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_compare_right_118 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 952;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_118, tmp_compare_right_118 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 952;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Gt_2 == 1)
    {
        goto branch_yes_219;
    }
    else
    {
        goto branch_no_219;
    }
    branch_yes_219:;
    tmp_assign_source_755 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_hp );

    if (unlikely( tmp_assign_source_755 == NULL ))
    {
        tmp_assign_source_755 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_hp );
    }

    if ( tmp_assign_source_755 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1118 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 953;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_hp, tmp_assign_source_755 );
    branch_no_219:;
    tmp_compare_left_119 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana );

    if (unlikely( tmp_compare_left_119 == NULL ))
    {
        tmp_compare_left_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mana );
    }

    if ( tmp_compare_left_119 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1092 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 954;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_119 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_compare_right_119 == NULL ))
    {
        tmp_compare_right_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_compare_right_119 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 954;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Gt_3 = RICH_COMPARE_BOOL_GT( tmp_compare_left_119, tmp_compare_right_119 );
    if ( tmp_cmp_Gt_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 954;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Gt_3 == 1)
    {
        goto branch_yes_220;
    }
    else
    {
        goto branch_no_220;
    }
    branch_yes_220:;
    tmp_assign_source_756 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_mana );

    if (unlikely( tmp_assign_source_756 == NULL ))
    {
        tmp_assign_source_756 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_mana );
    }

    if ( tmp_assign_source_756 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1146 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 955;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_mana, tmp_assign_source_756 );
    branch_no_220:;
    tmp_compare_left_120 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy );

    if (unlikely( tmp_compare_left_120 == NULL ))
    {
        tmp_compare_left_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_skill_energy );
    }

    if ( tmp_compare_left_120 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 952 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 956;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_120 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_energy );

    if (unlikely( tmp_compare_right_120 == NULL ))
    {
        tmp_compare_right_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_energy );
    }

    if ( tmp_compare_right_120 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1387 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 956;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Gt_4 = RICH_COMPARE_BOOL_GT( tmp_compare_left_120, tmp_compare_right_120 );
    if ( tmp_cmp_Gt_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 956;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Gt_4 == 1)
    {
        goto branch_yes_221;
    }
    else
    {
        goto branch_no_221;
    }
    branch_yes_221:;
    tmp_assign_source_757 = GET_STRING_DICT_VALUE( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_max_energy );

    if (unlikely( tmp_assign_source_757 == NULL ))
    {
        tmp_assign_source_757 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_max_energy );
    }

    if ( tmp_assign_source_757 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1387 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 957;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_kazooquest, (Nuitka_StringObject *)const_str_plain_skill_energy, tmp_assign_source_757 );
    branch_no_221:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        frame_module->f_lineno = 202;
        goto frame_exception_exit_1;
    }
    goto loop_start_2;
    loop_end_2:;

    // Restore frame exception if necessary.
#if 1
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;

    return MOD_RETURN_VALUE( module_kazooquest );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
